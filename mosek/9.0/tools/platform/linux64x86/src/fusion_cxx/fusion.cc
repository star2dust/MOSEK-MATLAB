#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1 
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {} 
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; } 
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; } 
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr; 
  size_t sz0, sz1; 
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {} 
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; } 
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; } 
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T> 
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow; 
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_add(int a, int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, int b) { return safe_add_<long long int>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow; 
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, int b) { return safe_mul_<long long int>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _151,    std::shared_ptr< monty::ndarray< long long,1 > > _152,    int _153,    int _154,    int _155,    std::shared_ptr< monty::ndarray< long long,1 > > _156) { mosek::fusion::p_Sort::argTransposeSort(_151,_152,_153,_154,_155,_156); }void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< long long,1 > > _151,std::shared_ptr< monty::ndarray< long long,1 > > _152,int _153,int _154,int _155,std::shared_ptr< monty::ndarray< long long,1 > > _156){
  _checked_ptr_1<long long> _ptr__151(_151 ? _151->raw() : nullptr, _151 ? _151->size(0) : 0);
  _checked_ptr_1<long long> _ptr__152(_152 ? _152->raw() : nullptr, _152 ? _152->size(0) : 0);
  _checked_ptr_1<long long> _ptr__156(_156 ? _156->raw() : nullptr, _156 ? _156->size(0) : 0);
  int _6678 = (int)0;
  int _6679 = safe_add( safe_mul( _153,_155 ),(int)1 );
  for (int _157 = _6678; _157 < _6679; ++_157)
  {
    {
      _ptr__152[_157] = (int)0;
    }
  }
  int _6680 = (int)0;
  int _6681 = (int)((_156)->size(0));
  for (int _158 = _6680; _158 < _6681; ++_158)
  {
    {
      ++ _ptr__152[safe_add( safe_add( safe_mul( (_ptr__156[_ptr__151[_158]] / safe_mul( _154,_155 )),_155 ),(_ptr__156[_ptr__151[_158]] % _155) ),(int)1 )];
    }
  }
  int _6682 = (int)0;
  int _6683 = safe_mul( _153,_155 );
  for (int _159 = _6682; _159 < _6683; ++_159)
  {
    {
      _ptr__152[safe_add( _159,(int)1 )] = safe_add( _ptr__152[safe_add( _159,(int)1 )],_ptr__152[_159] );
    }
  }
  std::vector<long long> _6684;
  for (int _161 = (int)0, _6685 = (int)((_151)->size(0)); _161 < _6685 ; ++_161)
  {
    _6684.push_back(_ptr__151[_161]);
  }
  auto _6686 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6684.size()),_6684.begin(),_6684.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _160 = _6686;
  _checked_ptr_1<long long> _ptr__160(_160 ? _160->raw() : nullptr,_160 ? _160->size(0) : 0);
  long long _6687 = (long long)0;
  long long _6688 = (long long)((_156)->size(0));
  for (long long _162 = _6687; _162 < _6688; ++_162)
  {
    {
      long long _163 = safe_add( safe_mul( (_ptr__156[_ptr__160[_162]] / safe_mul( _154,_155 )),_155 ),(_ptr__156[_ptr__160[_162]] % _155) );
      _ptr__151[_ptr__152[_163]] = _ptr__160[_162];
      ++ _ptr__152[_163];
    }
  }
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _164,    std::shared_ptr< monty::ndarray< long long,1 > > _165) { mosek::fusion::p_Sort::argsort(_164,_165); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _164,std::shared_ptr< monty::ndarray< long long,1 > > _165){
  _checked_ptr_1<long long> _ptr__164(_164 ? _164->raw() : nullptr, _164 ? _164->size(0) : 0);
  _checked_ptr_1<long long> _ptr__165(_165 ? _165->raw() : nullptr, _165 ? _165->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_164,_165,(long long)((int)0),(long long)((int)((_164)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _166,    std::shared_ptr< monty::ndarray< int,1 > > _167) { mosek::fusion::p_Sort::argsort(_166,_167); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _166,std::shared_ptr< monty::ndarray< int,1 > > _167){
  _checked_ptr_1<long long> _ptr__166(_166 ? _166->raw() : nullptr, _166 ? _166->size(0) : 0);
  _checked_ptr_1<int> _ptr__167(_167 ? _167->raw() : nullptr, _167 ? _167->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_166,_167,(long long)((int)0),(long long)((int)((_166)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _168,    std::shared_ptr< monty::ndarray< long long,1 > > _169,    std::shared_ptr< monty::ndarray< long long,1 > > _170) { mosek::fusion::p_Sort::argsort(_168,_169,_170); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _168,std::shared_ptr< monty::ndarray< long long,1 > > _169,std::shared_ptr< monty::ndarray< long long,1 > > _170){
  _checked_ptr_1<long long> _ptr__168(_168 ? _168->raw() : nullptr, _168 ? _168->size(0) : 0);
  _checked_ptr_1<long long> _ptr__169(_169 ? _169->raw() : nullptr, _169 ? _169->size(0) : 0);
  _checked_ptr_1<long long> _ptr__170(_170 ? _170->raw() : nullptr, _170 ? _170->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_168,_169,_170,(long long)((int)0),(long long)((int)((_168)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _171,    std::shared_ptr< monty::ndarray< int,1 > > _172,    std::shared_ptr< monty::ndarray< int,1 > > _173) { mosek::fusion::p_Sort::argsort(_171,_172,_173); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _171,std::shared_ptr< monty::ndarray< int,1 > > _172,std::shared_ptr< monty::ndarray< int,1 > > _173){
  _checked_ptr_1<long long> _ptr__171(_171 ? _171->raw() : nullptr, _171 ? _171->size(0) : 0);
  _checked_ptr_1<int> _ptr__172(_172 ? _172->raw() : nullptr, _172 ? _172->size(0) : 0);
  _checked_ptr_1<int> _ptr__173(_173 ? _173->raw() : nullptr, _173 ? _173->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_171,_172,_173,(long long)((int)0),(long long)((int)((_171)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    long long _176,    long long _177) { mosek::fusion::p_Sort::argsort(_174,_175,_176,_177); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,long long _176,long long _177){
  _checked_ptr_1<long long> _ptr__174(_174 ? _174->raw() : nullptr, _174 ? _174->size(0) : 0);
  _checked_ptr_1<long long> _ptr__175(_175 ? _175->raw() : nullptr, _175 ? _175->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_174,_175,_176,_177,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _178,    std::shared_ptr< monty::ndarray< int,1 > > _179,    long long _180,    long long _181) { mosek::fusion::p_Sort::argsort(_178,_179,_180,_181); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _178,std::shared_ptr< monty::ndarray< int,1 > > _179,long long _180,long long _181){
  _checked_ptr_1<long long> _ptr__178(_178 ? _178->raw() : nullptr, _178 ? _178->size(0) : 0);
  _checked_ptr_1<int> _ptr__179(_179 ? _179->raw() : nullptr, _179 ? _179->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_178,_179,_180,_181,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _182,    std::shared_ptr< monty::ndarray< long long,1 > > _183,    std::shared_ptr< monty::ndarray< long long,1 > > _184,    long long _185,    long long _186) { mosek::fusion::p_Sort::argsort(_182,_183,_184,_185,_186); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _182,std::shared_ptr< monty::ndarray< long long,1 > > _183,std::shared_ptr< monty::ndarray< long long,1 > > _184,long long _185,long long _186){
  _checked_ptr_1<long long> _ptr__182(_182 ? _182->raw() : nullptr, _182 ? _182->size(0) : 0);
  _checked_ptr_1<long long> _ptr__183(_183 ? _183->raw() : nullptr, _183 ? _183->size(0) : 0);
  _checked_ptr_1<long long> _ptr__184(_184 ? _184->raw() : nullptr, _184 ? _184->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_182,_183,_184,_185,_186,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _187,    std::shared_ptr< monty::ndarray< int,1 > > _188,    std::shared_ptr< monty::ndarray< int,1 > > _189,    long long _190,    long long _191) { mosek::fusion::p_Sort::argsort(_187,_188,_189,_190,_191); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _187,std::shared_ptr< monty::ndarray< int,1 > > _188,std::shared_ptr< monty::ndarray< int,1 > > _189,long long _190,long long _191){
  _checked_ptr_1<long long> _ptr__187(_187 ? _187->raw() : nullptr, _187 ? _187->size(0) : 0);
  _checked_ptr_1<int> _ptr__188(_188 ? _188->raw() : nullptr, _188 ? _188->size(0) : 0);
  _checked_ptr_1<int> _ptr__189(_189 ? _189->raw() : nullptr, _189 ? _189->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_187,_188,_189,_190,_191,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _192,    std::shared_ptr< monty::ndarray< long long,1 > > _193,    long long _194,    long long _195,    bool _196) { mosek::fusion::p_Sort::argsort(_192,_193,_194,_195,_196); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _192,std::shared_ptr< monty::ndarray< long long,1 > > _193,long long _194,long long _195,bool _196){
  _checked_ptr_1<long long> _ptr__192(_192 ? _192->raw() : nullptr, _192 ? _192->size(0) : 0);
  _checked_ptr_1<long long> _ptr__193(_193 ? _193->raw() : nullptr, _193 ? _193->size(0) : 0);
  if (((!_196) || ((_195 - _194) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_192,_193,_194,_195);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_192,_193,_194,_195,_196)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _197 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__197(_197 ? _197->raw() : nullptr,_197 ? _197->size(0) : 0);
      int _198 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_192,_193,nullptr,_194,_195,_197);
      if (((_ptr__197[(int)1] - _ptr__197[(int)0]) < safe_mul( _198,(_195 - _194) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_192,_193,_194,_195,_ptr__197[(int)0],_ptr__197[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_192,_193,_194,_195);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _199,    std::shared_ptr< monty::ndarray< int,1 > > _200,    long long _201,    long long _202,    bool _203) { mosek::fusion::p_Sort::argsort(_199,_200,_201,_202,_203); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _199,std::shared_ptr< monty::ndarray< int,1 > > _200,long long _201,long long _202,bool _203){
  _checked_ptr_1<long long> _ptr__199(_199 ? _199->raw() : nullptr, _199 ? _199->size(0) : 0);
  _checked_ptr_1<int> _ptr__200(_200 ? _200->raw() : nullptr, _200 ? _200->size(0) : 0);
  if (((!_203) || ((_202 - _201) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_199,_200,_201,_202);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_199,_200,_201,_202,_203)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _204 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__204(_204 ? _204->raw() : nullptr,_204 ? _204->size(0) : 0);
      int _205 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_199,_200,nullptr,_201,_202,_204);
      if (((_ptr__204[(int)1] - _ptr__204[(int)0]) < safe_mul( _205,(_202 - _201) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_199,_200,_201,_202,_ptr__204[(int)0],_ptr__204[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_199,_200,_201,_202);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _206,    std::shared_ptr< monty::ndarray< long long,1 > > _207,    std::shared_ptr< monty::ndarray< long long,1 > > _208,    long long _209,    long long _210,    bool _211) { mosek::fusion::p_Sort::argsort(_206,_207,_208,_209,_210,_211); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _206,std::shared_ptr< monty::ndarray< long long,1 > > _207,std::shared_ptr< monty::ndarray< long long,1 > > _208,long long _209,long long _210,bool _211){
  _checked_ptr_1<long long> _ptr__206(_206 ? _206->raw() : nullptr, _206 ? _206->size(0) : 0);
  _checked_ptr_1<long long> _ptr__207(_207 ? _207->raw() : nullptr, _207 ? _207->size(0) : 0);
  _checked_ptr_1<long long> _ptr__208(_208 ? _208->raw() : nullptr, _208 ? _208->size(0) : 0);
  if (((!_211) || ((_210 - _209) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_206,_207,_208,_209,_210,_211)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _212 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__212(_212 ? _212->raw() : nullptr,_212 ? _212->size(0) : 0);
      int _213 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_206,_207,_208,_209,_210,_212);
      if ((((_ptr__212[(int)1] - _ptr__212[(int)0]) < safe_mul( _213,(_210 - _209) )) && ((_ptr__212[(int)3] - _ptr__212[(int)2]) < safe_mul( _213,(_210 - _209) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_206,_208,_209,_210,_ptr__212[(int)2],_ptr__212[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_206,_207,_209,_210,_ptr__212[(int)0],_ptr__212[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_206,_207,_208,_209,_210);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _214,    std::shared_ptr< monty::ndarray< int,1 > > _215,    std::shared_ptr< monty::ndarray< int,1 > > _216,    long long _217,    long long _218,    bool _219) { mosek::fusion::p_Sort::argsort(_214,_215,_216,_217,_218,_219); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _214,std::shared_ptr< monty::ndarray< int,1 > > _215,std::shared_ptr< monty::ndarray< int,1 > > _216,long long _217,long long _218,bool _219){
  _checked_ptr_1<long long> _ptr__214(_214 ? _214->raw() : nullptr, _214 ? _214->size(0) : 0);
  _checked_ptr_1<int> _ptr__215(_215 ? _215->raw() : nullptr, _215 ? _215->size(0) : 0);
  _checked_ptr_1<int> _ptr__216(_216 ? _216->raw() : nullptr, _216 ? _216->size(0) : 0);
  if (((!_219) || ((_218 - _217) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_214,_215,_216,_217,_218);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_214,_215,_216,_217,_218,_219)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _220 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__220(_220 ? _220->raw() : nullptr,_220 ? _220->size(0) : 0);
      int _221 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_214,_215,_216,_217,_218,_220);
      if ((((_ptr__220[(int)1] - _ptr__220[(int)0]) < safe_mul( _221,(_218 - _217) )) && ((_ptr__220[(int)3] - _ptr__220[(int)2]) < safe_mul( _221,(_218 - _217) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_214,_216,_217,_218,_ptr__220[(int)2],_ptr__220[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_214,_215,_217,_218,_ptr__220[(int)0],_ptr__220[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_214,_215,_216,_217,_218);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _222,    std::shared_ptr< monty::ndarray< long long,1 > > _223,    long long _224,    long long _225,    long long _226,    long long _227) { mosek::fusion::p_Sort::argbucketsort(_222,_223,_224,_225,_226,_227); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _222,std::shared_ptr< monty::ndarray< long long,1 > > _223,long long _224,long long _225,long long _226,long long _227){
  _checked_ptr_1<long long> _ptr__222(_222 ? _222->raw() : nullptr, _222 ? _222->size(0) : 0);
  _checked_ptr_1<long long> _ptr__223(_223 ? _223->raw() : nullptr, _223 ? _223->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_222,_224,_225,_223,_226,_227);
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _228,    std::shared_ptr< monty::ndarray< int,1 > > _229,    long long _230,    long long _231,    int _232,    int _233) { mosek::fusion::p_Sort::argbucketsort(_228,_229,_230,_231,_232,_233); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _228,std::shared_ptr< monty::ndarray< int,1 > > _229,long long _230,long long _231,int _232,int _233){
  _checked_ptr_1<long long> _ptr__228(_228 ? _228->raw() : nullptr, _228 ? _228->size(0) : 0);
  _checked_ptr_1<int> _ptr__229(_229 ? _229->raw() : nullptr, _229 ? _229->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_228,_230,_231,_229,_232,_233);
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _234,    std::shared_ptr< monty::ndarray< long long,1 > > _235,    std::shared_ptr< monty::ndarray< long long,1 > > _236,    long long _237,    long long _238,    std::shared_ptr< monty::ndarray< long long,1 > > _239) { mosek::fusion::p_Sort::getminmax(_234,_235,_236,_237,_238,_239); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _234,std::shared_ptr< monty::ndarray< long long,1 > > _235,std::shared_ptr< monty::ndarray< long long,1 > > _236,long long _237,long long _238,std::shared_ptr< monty::ndarray< long long,1 > > _239){
  _checked_ptr_1<long long> _ptr__234(_234 ? _234->raw() : nullptr, _234 ? _234->size(0) : 0);
  _checked_ptr_1<long long> _ptr__235(_235 ? _235->raw() : nullptr, _235 ? _235->size(0) : 0);
  _checked_ptr_1<long long> _ptr__236(_236 ? _236->raw() : nullptr, _236 ? _236->size(0) : 0);
  _checked_ptr_1<long long> _ptr__239(_239 ? _239->raw() : nullptr, _239 ? _239->size(0) : 0);
  _ptr__239[(int)0] = _ptr__235[_ptr__234[_237]];
  _ptr__239[(int)1] = _ptr__235[_ptr__234[_237]];
  long long _6689 = safe_add( _237,(int)1 );
  long long _6690 = _238;
  for (long long _240 = _6689; _240 < _6690; ++_240)
  {
    {
      if ((_ptr__239[(int)0] > _ptr__235[_ptr__234[_240]]))
      {
        {
          _ptr__239[(int)0] = _ptr__235[_ptr__234[_240]];
        }
      }
      {}
      if ((_ptr__239[(int)1] < _ptr__235[_ptr__234[_240]]))
      {
        {
          _ptr__239[(int)1] = _ptr__235[_ptr__234[_240]];
        }
      }
      {}
    }
  }
  if ((NULL != _236.get()))
  {
    {
      _ptr__239[(int)2] = _ptr__236[_ptr__234[_237]];
      _ptr__239[(int)3] = _ptr__236[_ptr__234[_237]];
      long long _6691 = safe_add( _237,(int)1 );
      long long _6692 = _238;
      for (long long _241 = _6691; _241 < _6692; ++_241)
      {
        {
          if ((_ptr__239[(int)2] > _ptr__236[_ptr__234[_241]]))
          {
            {
              _ptr__239[(int)2] = _ptr__236[_ptr__234[_241]];
            }
          }
          {}
          if ((_ptr__239[(int)3] < _ptr__236[_ptr__234[_241]]))
          {
            {
              _ptr__239[(int)3] = _ptr__236[_ptr__234[_241]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _242,    std::shared_ptr< monty::ndarray< int,1 > > _243,    std::shared_ptr< monty::ndarray< int,1 > > _244,    long long _245,    long long _246,    std::shared_ptr< monty::ndarray< int,1 > > _247) { mosek::fusion::p_Sort::getminmax(_242,_243,_244,_245,_246,_247); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _242,std::shared_ptr< monty::ndarray< int,1 > > _243,std::shared_ptr< monty::ndarray< int,1 > > _244,long long _245,long long _246,std::shared_ptr< monty::ndarray< int,1 > > _247){
  _checked_ptr_1<long long> _ptr__242(_242 ? _242->raw() : nullptr, _242 ? _242->size(0) : 0);
  _checked_ptr_1<int> _ptr__243(_243 ? _243->raw() : nullptr, _243 ? _243->size(0) : 0);
  _checked_ptr_1<int> _ptr__244(_244 ? _244->raw() : nullptr, _244 ? _244->size(0) : 0);
  _checked_ptr_1<int> _ptr__247(_247 ? _247->raw() : nullptr, _247 ? _247->size(0) : 0);
  _ptr__247[(int)0] = _ptr__243[_ptr__242[_245]];
  _ptr__247[(int)1] = _ptr__243[_ptr__242[_245]];
  long long _6693 = safe_add( _245,(int)1 );
  long long _6694 = _246;
  for (long long _248 = _6693; _248 < _6694; ++_248)
  {
    {
      if ((_ptr__247[(int)0] > _ptr__243[_ptr__242[_248]]))
      {
        {
          _ptr__247[(int)0] = _ptr__243[_ptr__242[_248]];
        }
      }
      {}
      if ((_ptr__247[(int)1] < _ptr__243[_ptr__242[_248]]))
      {
        {
          _ptr__247[(int)1] = _ptr__243[_ptr__242[_248]];
        }
      }
      {}
    }
  }
  if ((NULL != _244.get()))
  {
    {
      _ptr__247[(int)2] = _ptr__244[_ptr__242[_245]];
      _ptr__247[(int)3] = _ptr__244[_ptr__242[_245]];
      long long _6695 = safe_add( _245,(int)1 );
      long long _6696 = _246;
      for (long long _249 = _6695; _249 < _6696; ++_249)
      {
        {
          if ((_ptr__247[(int)2] > _ptr__244[_ptr__242[_249]]))
          {
            {
              _ptr__247[(int)2] = _ptr__244[_ptr__242[_249]];
            }
          }
          {}
          if ((_ptr__247[(int)3] < _ptr__244[_ptr__242[_249]]))
          {
            {
              _ptr__247[(int)3] = _ptr__244[_ptr__242[_249]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _250,    std::shared_ptr< monty::ndarray< long long,1 > > _251,    long long _252,    long long _253,    bool _254) { return mosek::fusion::p_Sort::issorted(_250,_251,_252,_253,_254); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _250,std::shared_ptr< monty::ndarray< long long,1 > > _251,long long _252,long long _253,bool _254){
  _checked_ptr_1<long long> _ptr__250(_250 ? _250->raw() : nullptr, _250 ? _250->size(0) : 0);
  _checked_ptr_1<long long> _ptr__251(_251 ? _251->raw() : nullptr, _251 ? _251->size(0) : 0);
  long long _6697 = _252;
  long long _6698 = (_253 - (int)1);
  for (long long _255 = _6697; _255 < _6698; ++_255)
  {
    {
      if ((_ptr__251[_ptr__250[_255]] > _ptr__251[_ptr__250[safe_add( _255,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _256,    std::shared_ptr< monty::ndarray< int,1 > > _257,    long long _258,    long long _259,    bool _260) { return mosek::fusion::p_Sort::issorted(_256,_257,_258,_259,_260); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _256,std::shared_ptr< monty::ndarray< int,1 > > _257,long long _258,long long _259,bool _260){
  _checked_ptr_1<long long> _ptr__256(_256 ? _256->raw() : nullptr, _256 ? _256->size(0) : 0);
  _checked_ptr_1<int> _ptr__257(_257 ? _257->raw() : nullptr, _257 ? _257->size(0) : 0);
  long long _6699 = _258;
  long long _6700 = (_259 - (int)1);
  for (long long _261 = _6699; _261 < _6700; ++_261)
  {
    {
      if ((_ptr__257[_ptr__256[_261]] > _ptr__257[_ptr__256[safe_add( _261,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _262,    std::shared_ptr< monty::ndarray< long long,1 > > _263,    std::shared_ptr< monty::ndarray< long long,1 > > _264,    long long _265,    long long _266,    bool _267) { return mosek::fusion::p_Sort::issorted(_262,_263,_264,_265,_266,_267); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _262,std::shared_ptr< monty::ndarray< long long,1 > > _263,std::shared_ptr< monty::ndarray< long long,1 > > _264,long long _265,long long _266,bool _267){
  _checked_ptr_1<long long> _ptr__262(_262 ? _262->raw() : nullptr, _262 ? _262->size(0) : 0);
  _checked_ptr_1<long long> _ptr__263(_263 ? _263->raw() : nullptr, _263 ? _263->size(0) : 0);
  _checked_ptr_1<long long> _ptr__264(_264 ? _264->raw() : nullptr, _264 ? _264->size(0) : 0);
  long long _6701 = _265;
  long long _6702 = (_266 - (int)1);
  for (long long _268 = _6701; _268 < _6702; ++_268)
  {
    {
      if (((_ptr__263[_ptr__262[_268]] > _ptr__263[_ptr__262[safe_add( _268,(int)1 )]]) || ((_ptr__263[_ptr__262[safe_add( _268,(int)1 )]] == _ptr__263[_ptr__262[_268]]) && (_ptr__264[_ptr__262[_268]] > _ptr__264[_ptr__262[safe_add( _268,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _269,    std::shared_ptr< monty::ndarray< int,1 > > _270,    std::shared_ptr< monty::ndarray< int,1 > > _271,    long long _272,    long long _273,    bool _274) { return mosek::fusion::p_Sort::issorted(_269,_270,_271,_272,_273,_274); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _269,std::shared_ptr< monty::ndarray< int,1 > > _270,std::shared_ptr< monty::ndarray< int,1 > > _271,long long _272,long long _273,bool _274){
  _checked_ptr_1<long long> _ptr__269(_269 ? _269->raw() : nullptr, _269 ? _269->size(0) : 0);
  _checked_ptr_1<int> _ptr__270(_270 ? _270->raw() : nullptr, _270 ? _270->size(0) : 0);
  _checked_ptr_1<int> _ptr__271(_271 ? _271->raw() : nullptr, _271 ? _271->size(0) : 0);
  long long _6703 = _272;
  long long _6704 = (_273 - (int)1);
  for (long long _275 = _6703; _275 < _6704; ++_275)
  {
    {
      if (((_ptr__270[_ptr__269[_275]] > _ptr__270[_ptr__269[safe_add( _275,(int)1 )]]) || ((_ptr__270[_ptr__269[_275]] == _ptr__270[_ptr__269[safe_add( _275,(int)1 )]]) && (_ptr__271[_ptr__269[_275]] > _ptr__271[_ptr__269[safe_add( _275,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _276){ return new mosek::fusion::IndexCounter(_276); }mosek::fusion::IndexCounter::IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _276) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_276); }void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _276){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__276(_276 ? _276->raw() : nullptr, _276 ? _276->size(0) : 0);
    n = (int)((_276)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    start = (long long)0;
    strides = ::mosek::fusion::p_Set::strides(_276);
    std::vector<int> _6705;
    for (int _277 = (int)0, _6706 = (int)((_276)->size(0)); _277 < _6706 ; ++_277)
    {
      _6705.push_back(_ptr__276[_277]);
    }
    auto _6707 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6705.size()),_6705.begin(),_6705.end()));
    dims = _6707;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _278,    std::shared_ptr< monty::ndarray< int,1 > > _279,    std::shared_ptr< monty::ndarray< int,1 > > _280){ return new mosek::fusion::IndexCounter(_278,_279,_280); }mosek::fusion::IndexCounter::IndexCounter  (long long _278,    std::shared_ptr< monty::ndarray< int,1 > > _279,    std::shared_ptr< monty::ndarray< int,1 > > _280) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_278,_279,_280); }void mosek::fusion::p_IndexCounter::_initialize  (long long _278,    std::shared_ptr< monty::ndarray< int,1 > > _279,    std::shared_ptr< monty::ndarray< int,1 > > _280){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__279(_279 ? _279->raw() : nullptr, _279 ? _279->size(0) : 0);
    _checked_ptr_1<int> _ptr__280(_280 ? _280->raw() : nullptr, _280 ? _280->size(0) : 0);
    int _281 = (int)((_280)->size(0));
    n = (int)((_279)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _6708 = (int)0;
    int _6709 = n;
    for (int _282 = _6708; _282 < _6709; ++_282)
    {
      {
        ((*st)(_282)) = _278;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_280);
    dims = _279;
    start = _278;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< long long,1 > > _285){ return new mosek::fusion::IndexCounter(_283,_284,_285); }mosek::fusion::IndexCounter::IndexCounter  (long long _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< long long,1 > > _285) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_283,_284,_285); }void mosek::fusion::p_IndexCounter::_initialize  (long long _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< long long,1 > > _285){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__284(_284 ? _284->raw() : nullptr, _284 ? _284->size(0) : 0);
    _checked_ptr_1<long long> _ptr__285(_285 ? _285->raw() : nullptr, _285 ? _285->size(0) : 0);
    n = (int)((_284)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _6710 = (int)0;
    int _6711 = n;
    for (int _286 = _6710; _286 < _6711; ++_286)
    {
      {
        ((*st)(_286)) = _283;
      }
    }
    strides = _285;
    dims = _284;
    start = _283;
  }
}bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd(){
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex(){
  return ii;
}
long long mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next(){
  long long _287 = _pubthis->get();
  _pubthis->inc();
  return _287;
}
long long mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get(){
  return ((*st)((int)0));
}
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc(){
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int _288;
  {
    _288 = (int)0;
    for(;((_288 < (n - (int)1)) && (((*ii)(_288)) == ((*dims)(((n - _288) - (int)1)))));++ _288)
    {
      {
        ((*ii)(_288)) = (int)0;
        ++ ((*ii)(safe_add( _288,(int)1 )));
        ((*st)(safe_add( _288,(int)1 ))) = safe_add( ((*st)(safe_add( _288,(int)1 ))),((*strides)(((n - _288) - (int)2))) );
      }
    }
  }
  int _6712 = (int)0;
  int _6713 = _288;
  for (int _289 = _6712; _289 < _6713; ++_289)
  {
    {
      ((*st)(_289)) = ((*st)(_288));
    }
  }
}
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset(){
  st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
  int _6714 = (int)0;
  int _6715 = n;
  for (int _290 = _6714; _290 < _6715; ++_290)
  {
    {
      ((*st)(_290)) = start;
    }
  }
}
void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< long long,1 > > _291,    int _292) { return mosek::fusion::p_CommonTools::resize(_291,_292); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< long long,1 > > _291,int _292){
  _checked_ptr_1<long long> _ptr__291(_291 ? _291->raw() : nullptr, _291 ? _291->size(0) : 0);
  if ((_292 == (int)((_291)->size(0))))
  {
    {
      return _291;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _293 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_292)));
      _checked_ptr_1<long long> _ptr__293(_293 ? _293->raw() : nullptr,_293 ? _293->size(0) : 0);
      if ((_292 > (int)((_291)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_291,(int)0,_293,(int)0,(int)((_291)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_291,(int)0,_293,(int)0,_292);
        }
      }
      return _293;
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< int,1 > > _294,    int _295) { return mosek::fusion::p_CommonTools::resize(_294,_295); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int,1 > > _294,int _295){
  _checked_ptr_1<int> _ptr__294(_294 ? _294->raw() : nullptr, _294 ? _294->size(0) : 0);
  if ((_295 == (int)((_294)->size(0))))
  {
    {
      return _294;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _296 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_295)));
      _checked_ptr_1<int> _ptr__296(_296 ? _296->raw() : nullptr,_296 ? _296->size(0) : 0);
      if ((_295 > (int)((_294)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_294,(int)0,_296,(int)0,(int)((_294)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_294,(int)0,_296,(int)0,_295);
        }
      }
      return _296;
    }
  }
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< double,1 > > _297,    int _298) { return mosek::fusion::p_CommonTools::resize(_297,_298); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _297,int _298){
  _checked_ptr_1<double> _ptr__297(_297 ? _297->raw() : nullptr, _297 ? _297->size(0) : 0);
  if ((_298 == (int)((_297)->size(0))))
  {
    {
      return _297;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _299 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_298)));
      _checked_ptr_1<double> _ptr__299(_299 ? _299->raw() : nullptr,_299 ? _299->size(0) : 0);
      if ((_298 > (int)((_297)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,(int)((_297)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,_298);
        }
      }
      return _299;
    }
  }
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< int,1 > > _300,    int _301) { return mosek::fusion::p_CommonTools::binarySearch(_300,_301); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int,1 > > _300,int _301){
  _checked_ptr_1<int> _ptr__300(_300 ? _300->raw() : nullptr, _300 ? _300->size(0) : 0);
  int _302 = (int)0;
  int _303 = (int)((_300)->size(0));
  if ((_ptr__300[_302] == _301))
  {
    {
      return _302;
    }
  }
  else if((_ptr__300[(_303 - (int)1)] == _301))
  {
    {
      return (_303 - (int)1);
    }
  }
  {}
  while ( (_302 < (_303 - (int)1)) )
  {
    {
      int _304 = ((_303 - _302) / (int)2);
      if ((_301 < _ptr__300[_304]))
      {
        {
          _302 = safe_add( _304,(int)1 );
        }
      }
      else if((_301 > _ptr__300[_304]))
      {
        {
          _303 = _304;
        }
      }
      else
      {
        {
          return _304;
        }
      }
    }
  }
  return (-(int)1);
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< long long,1 > > _305,    long long _306) { return mosek::fusion::p_CommonTools::binarySearch(_305,_306); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< long long,1 > > _305,long long _306){
  _checked_ptr_1<long long> _ptr__305(_305 ? _305->raw() : nullptr, _305 ? _305->size(0) : 0);
  int _307 = ::mosek::fusion::p_CommonTools::binarySearchL(_305,_306);
  if (((_307 < (int)((_305)->size(0))) && (_ptr__305[_307] == _306)))
  {
    {
      return _307;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
int mosek::fusion::CommonTools::binarySearchR  ( std::shared_ptr< monty::ndarray< long long,1 > > _308,    long long _309) { return mosek::fusion::p_CommonTools::binarySearchR(_308,_309); }int mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< long long,1 > > _308,long long _309){
  _checked_ptr_1<long long> _ptr__308(_308 ? _308->raw() : nullptr, _308 ? _308->size(0) : 0);
  int _310 = (int)0;
  int _311 = (int)((_308)->size(0));
  if ((_ptr__308[_310] > _309))
  {
    {
      return _310;
    }
  }
  {}
  while ( (_310 < (_311 - (int)1)) )
  {
    {
      int _312 = (safe_add( _311,_310 ) / (int)2);
      if ((_309 >= _ptr__308[_312]))
      {
        {
          _310 = _312;
        }
      }
      else
      {
        {
          _311 = _312;
        }
      }
    }
  }
  return _311;
}
int mosek::fusion::CommonTools::binarySearchL  ( std::shared_ptr< monty::ndarray< long long,1 > > _313,    long long _314) { return mosek::fusion::p_CommonTools::binarySearchL(_313,_314); }int mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< long long,1 > > _313,long long _314){
  _checked_ptr_1<long long> _ptr__313(_313 ? _313->raw() : nullptr, _313 ? _313->size(0) : 0);
  int _315 = (int)0;
  int _316 = (int)((_313)->size(0));
  if ((_314 <= _ptr__313[_315]))
  {
    {
      return _315;
    }
  }
  {}
  while ( (_315 < (_316 - (int)1)) )
  {
    {
      int _317 = (safe_add( _316,_315 ) / (int)2);
      if ((_ptr__313[_317] < _314))
      {
        {
          _315 = _317;
        }
      }
      else
      {
        {
          _316 = _317;
        }
      }
    }
  }
  return _316;
}
void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _318,    std::shared_ptr< monty::ndarray< int,1 > > _319,    std::shared_ptr< monty::ndarray< int,1 > > _320) { mosek::fusion::p_CommonTools::ndIncr(_318,_319,_320); }void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int,1 > > _318,std::shared_ptr< monty::ndarray< int,1 > > _319,std::shared_ptr< monty::ndarray< int,1 > > _320){
  _checked_ptr_1<int> _ptr__318(_318 ? _318->raw() : nullptr, _318 ? _318->size(0) : 0);
  _checked_ptr_1<int> _ptr__319(_319 ? _319->raw() : nullptr, _319 ? _319->size(0) : 0);
  _checked_ptr_1<int> _ptr__320(_320 ? _320->raw() : nullptr, _320 ? _320->size(0) : 0);
  int _321 = ((int)((_318)->size(0)) - (int)1);
  ++ _ptr__318[_321];
  while ( ((_321 > (int)0) && (_ptr__318[_321] >= _ptr__320[_321])) )
  {
    {
      _ptr__318[_321] = _ptr__319[_321];
      ++ _ptr__318[(_321 - (int)1)];
    }
  }
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _322,    std::shared_ptr< monty::ndarray< int,1 > > _323,    std::shared_ptr< monty::ndarray< double,1 > > _324,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _325,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _326,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _327,    long long _328,    int _329,    int _330) { mosek::fusion::p_CommonTools::transposeTriplets(_322,_323,_324,_325,_326,_327,_328,_329,_330); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _322,std::shared_ptr< monty::ndarray< int,1 > > _323,std::shared_ptr< monty::ndarray< double,1 > > _324,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _325,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _326,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _327,long long _328,int _329,int _330){
  _checked_ptr_1<int> _ptr__322(_322 ? _322->raw() : nullptr, _322 ? _322->size(0) : 0);
  _checked_ptr_1<int> _ptr__323(_323 ? _323->raw() : nullptr, _323 ? _323->size(0) : 0);
  _checked_ptr_1<double> _ptr__324(_324 ? _324->raw() : nullptr, _324 ? _324->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _331 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _329,(int)2 ))));
  _checked_ptr_1<long long> _ptr__331(_331 ? _331->raw() : nullptr,_331 ? _331->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _332 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _330,(int)2 ))));
  _checked_ptr_1<long long> _ptr__332(_332 ? _332->raw() : nullptr,_332 ? _332->size(0) : 0);
  {
    long long _333 = (long long)0;
    for(;(_333 < _328);++ _333)
    {
      {
        _ptr__332[safe_add( _ptr__323[_333],(int)2 )] = safe_add( _ptr__332[safe_add( _ptr__323[_333],(int)2 )],(int)1 );
        _ptr__331[safe_add( _ptr__322[_333],(int)2 )] = safe_add( _ptr__331[safe_add( _ptr__322[_333],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _334 = (int)1;
    for(;(_334 < _329);++ _334)
    {
      {
        _ptr__331[safe_add( _334,(int)1 )] = safe_add( _ptr__331[safe_add( _334,(int)1 )],_ptr__331[_334] );
      }
    }
  }
  {
    int _335 = (int)1;
    for(;(_335 < _330);++ _335)
    {
      {
        _ptr__332[safe_add( _335,(int)1 )] = safe_add( _ptr__332[safe_add( _335,(int)1 )],_ptr__332[_335] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _336 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_328)));
  _checked_ptr_1<long long> _ptr__336(_336 ? _336->raw() : nullptr,_336 ? _336->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_328)));
  _checked_ptr_1<long long> _ptr__337(_337 ? _337->raw() : nullptr,_337 ? _337->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _338 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_328)));
  _checked_ptr_1<double> _ptr__338(_338 ? _338->raw() : nullptr,_338 ? _338->size(0) : 0);
  int _6716 = (int)0;
  int _6717 = _329;
  for (int _339 = _6716; _339 < _6717; ++_339)
  {
    {
      {
        long long _340 = _ptr__331[_339];
        for(;(_340 < _ptr__331[safe_add( _339,(int)1 )]);++ _340)
        {
          {
            int _341 = _ptr__323[_340];
            long long _342 = _ptr__332[_341];
            _ptr__336[_342] = _339;
            _ptr__337[_342] = _341;
            _ptr__338[_342] = _ptr__324[_340];
            _ptr__332[_341] = safe_add( _342,(int)1 );
          }
        }
      }
    }
  }
  ((*_325)((int)0)) = _337;
  ((*_326)((int)0)) = _336;
  ((*_327)((int)0)) = _338;
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _343,    std::shared_ptr< monty::ndarray< int,1 > > _344,    std::shared_ptr< monty::ndarray< double,1 > > _345,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _346,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _347,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _348,    long long _349,    int _350,    int _351) { mosek::fusion::p_CommonTools::transposeTriplets(_343,_344,_345,_346,_347,_348,_349,_350,_351); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _343,std::shared_ptr< monty::ndarray< int,1 > > _344,std::shared_ptr< monty::ndarray< double,1 > > _345,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _346,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _347,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _348,long long _349,int _350,int _351){
  _checked_ptr_1<int> _ptr__343(_343 ? _343->raw() : nullptr, _343 ? _343->size(0) : 0);
  _checked_ptr_1<int> _ptr__344(_344 ? _344->raw() : nullptr, _344 ? _344->size(0) : 0);
  _checked_ptr_1<double> _ptr__345(_345 ? _345->raw() : nullptr, _345 ? _345->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _350,(int)2 ))));
  _checked_ptr_1<long long> _ptr__352(_352 ? _352->raw() : nullptr,_352 ? _352->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _353 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _351,(int)2 ))));
  _checked_ptr_1<long long> _ptr__353(_353 ? _353->raw() : nullptr,_353 ? _353->size(0) : 0);
  {
    long long _354 = (long long)0;
    for(;(_354 < _349);++ _354)
    {
      {
        _ptr__353[safe_add( _ptr__344[_354],(int)2 )] = safe_add( _ptr__353[safe_add( _ptr__344[_354],(int)2 )],(int)1 );
        _ptr__352[safe_add( _ptr__343[_354],(int)2 )] = safe_add( _ptr__352[safe_add( _ptr__343[_354],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _355 = (int)1;
    for(;(_355 < _350);++ _355)
    {
      {
        _ptr__352[safe_add( _355,(int)1 )] = safe_add( _ptr__352[safe_add( _355,(int)1 )],_ptr__352[_355] );
      }
    }
  }
  {
    int _356 = (int)1;
    for(;(_356 < _351);++ _356)
    {
      {
        _ptr__353[safe_add( _356,(int)1 )] = safe_add( _ptr__353[safe_add( _356,(int)1 )],_ptr__353[_356] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _357 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_349)));
  _checked_ptr_1<int> _ptr__357(_357 ? _357->raw() : nullptr,_357 ? _357->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _358 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_349)));
  _checked_ptr_1<int> _ptr__358(_358 ? _358->raw() : nullptr,_358 ? _358->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _359 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_349)));
  _checked_ptr_1<double> _ptr__359(_359 ? _359->raw() : nullptr,_359 ? _359->size(0) : 0);
  {
    int _360 = (int)0;
    for(;(_360 < _350);++ _360)
    {
      {
        long long _6718 = _ptr__352[_360];
        long long _6719 = _ptr__352[safe_add( _360,(int)1 )];
        for (long long _361 = _6718; _361 < _6719; ++_361)
        {
          {
            int _362 = _ptr__344[_361];
            long long _363 = _ptr__353[_362];
            _ptr__357[_363] = _360;
            _ptr__358[_363] = _362;
            _ptr__359[_363] = _ptr__345[_361];
            _ptr__353[_362] = safe_add( _363,(int)1 );
          }
        }
      }
    }
  }
  ((*_346)((int)0)) = _358;
  ((*_347)((int)0)) = _357;
  ((*_348)((int)0)) = _359;
}
void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _364,    std::shared_ptr< monty::ndarray< int,1 > > _365,    std::shared_ptr< monty::ndarray< double,1 > > _366,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _367,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _368,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _369,    long long _370,    int _371,    int _372) { mosek::fusion::p_CommonTools::tripletSort(_364,_365,_366,_367,_368,_369,_370,_371,_372); }void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int,1 > > _364,std::shared_ptr< monty::ndarray< int,1 > > _365,std::shared_ptr< monty::ndarray< double,1 > > _366,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _367,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _368,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _369,long long _370,int _371,int _372){
  _checked_ptr_1<int> _ptr__364(_364 ? _364->raw() : nullptr, _364 ? _364->size(0) : 0);
  _checked_ptr_1<int> _ptr__365(_365 ? _365->raw() : nullptr, _365 ? _365->size(0) : 0);
  _checked_ptr_1<double> _ptr__366(_366 ? _366->raw() : nullptr, _366 ? _366->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _373 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_370)));
  _checked_ptr_1<int> _ptr__373(_373 ? _373->raw() : nullptr,_373 ? _373->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _374 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _372,(int)2 ))));
  _checked_ptr_1<long long> _ptr__374(_374 ? _374->raw() : nullptr,_374 ? _374->size(0) : 0);
  long long _6720 = (long long)0;
  long long _6721 = _370;
  for (long long _375 = _6720; _375 < _6721; ++_375)
  {
    {
      _ptr__374[safe_add( _ptr__365[_375],(int)2 )] = safe_add( _ptr__374[safe_add( _ptr__365[_375],(int)2 )],(int)1 );
    }
  }
  int _6722 = (int)1;
  int _6723 = _372;
  for (int _376 = _6722; _376 < _6723; ++_376)
  {
    {
      _ptr__374[safe_add( _376,(int)1 )] = safe_add( _ptr__374[safe_add( _376,(int)1 )],_ptr__374[_376] );
    }
  }
  int _6724 = (int)0;
  int _6725 = (int)_370;
  for (int _377 = _6724; _377 < _6725; ++_377)
  {
    {
      int _378 = _ptr__365[_377];
      _ptr__373[_ptr__374[safe_add( _378,(int)1 )]] = _377;
      _ptr__374[safe_add( _378,(int)1 )] = safe_add( _ptr__374[safe_add( _378,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _379 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _371,(int)2 ))));
  _checked_ptr_1<long long> _ptr__379(_379 ? _379->raw() : nullptr,_379 ? _379->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _380 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_370)));
  _checked_ptr_1<int> _ptr__380(_380 ? _380->raw() : nullptr,_380 ? _380->size(0) : 0);
  {
    int _381 = (int)0;
    for(;(_381 < _370);++ _381)
    {
      {
        _ptr__379[safe_add( _ptr__364[_381],(int)2 )] = safe_add( _ptr__379[safe_add( _ptr__364[_381],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _382 = (int)1;
    for(;(_382 < _371);++ _382)
    {
      {
        _ptr__379[safe_add( _382,(int)1 )] = safe_add( _ptr__379[safe_add( _382,(int)1 )],_ptr__379[_382] );
      }
    }
  }
  {
    int _383 = (int)0;
    for(;(_383 < _372);++ _383)
    {
      {
        {
          long long _384 = _ptr__374[_383];
          for(;(_384 < _ptr__374[safe_add( _383,(int)1 )]);++ _384)
          {
            {
              int _385 = _ptr__364[_ptr__373[_384]];
              _ptr__380[_ptr__379[safe_add( _385,(int)1 )]] = _ptr__373[_384];
              _ptr__379[safe_add( _385,(int)1 )] = safe_add( _ptr__379[safe_add( _385,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int _386 = (int)1;
  {
    int _387 = _ptr__364[_ptr__380[(int)0]];
    int _388 = _ptr__365[_ptr__380[(int)0]];
    {
      int _389 = (int)1;
      for(;(_389 < _370);++ _389)
      {
        {
          int _390 = _ptr__380[_389];
          if (((_387 != _ptr__364[_390]) || (_388 != _ptr__365[_390])))
          {
            {
              _387 = _ptr__364[_390];
              _388 = _ptr__365[_390];
              ++ _386;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _391 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_386)));
  _checked_ptr_1<int> _ptr__391(_391 ? _391->raw() : nullptr,_391 ? _391->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _392 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_386)));
  _checked_ptr_1<int> _ptr__392(_392 ? _392->raw() : nullptr,_392 ? _392->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _393 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_386)));
  _checked_ptr_1<double> _ptr__393(_393 ? _393->raw() : nullptr,_393 ? _393->size(0) : 0);
  {
    int _394 = _ptr__380[(int)0];
    _ptr__391[(int)0] = _ptr__364[_394];
    _ptr__392[(int)0] = _ptr__365[_394];
    _ptr__393[(int)0] = _ptr__366[_394];
  }
  int _395 = (int)1;
  int _6726 = (int)1;
  long long _6727 = _370;
  for (long long _396 = _6726; _396 < _6727; ++_396)
  {
    {
      int _397 = _ptr__380[_396];
      if (((_ptr__391[(_395 - (int)1)] == _ptr__364[_397]) && (_ptr__392[(_395 - (int)1)] == _ptr__365[_397])))
      {
        {
          _ptr__393[(_395 - (int)1)] = (_ptr__393[(_395 - (int)1)] + _ptr__366[_397]);
        }
      }
      else
      {
        {
          _ptr__391[_395] = _ptr__364[_397];
          _ptr__392[_395] = _ptr__365[_397];
          _ptr__393[_395] = _ptr__366[_397];
          ++ _395;
        }
      }
    }
  }
  ((*_367)((int)0)) = _391;
  ((*_368)((int)0)) = _392;
  ((*_369)((int)0)) = _393;
}
void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _398,    std::shared_ptr< monty::ndarray< int,1 > > _399) { mosek::fusion::p_CommonTools::argMSort(_398,_399); }void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int,1 > > _398,std::shared_ptr< monty::ndarray< int,1 > > _399){
  _checked_ptr_1<int> _ptr__398(_398 ? _398->raw() : nullptr, _398 ? _398->size(0) : 0);
  _checked_ptr_1<int> _ptr__399(_399 ? _399->raw() : nullptr, _399 ? _399->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _400 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_398)->size(0)))));
  _checked_ptr_1<int> _ptr__400(_400 ? _400->raw() : nullptr,_400 ? _400->size(0) : 0);
  bool _401 = false;
  {
    int _402 = (int)1;
    for(;(_402 < (int)((_398)->size(0)));_402 *= (int)2)
    {
      {
        _401 = (!_401);
        int _6728 = (int)0;
        int _6729 = (int)((_398)->size(0));
        int _6730 = safe_mul( _402,(int)2 );
        for (int _403 = _6728; _403 < _6729; _403 += _6730)
        {
          {
            if (_401)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_398,_400,_399,_403,safe_add( _403,_402 ),safe_add( _403,safe_mul( (int)2,_402 ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_400,_398,_399,_403,safe_add( _403,_402 ),safe_add( _403,safe_mul( (int)2,_402 ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_401)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_400,(int)0,_398,(int)0,(int)((_398)->size(0)));
    }
  }
  {}
}
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int,1 > > _404,std::shared_ptr< monty::ndarray< int,1 > > _405,std::shared_ptr< monty::ndarray< int,1 > > _406,int _407,int _408,int _409){
  _checked_ptr_1<int> _ptr__404(_404 ? _404->raw() : nullptr, _404 ? _404->size(0) : 0);
  _checked_ptr_1<int> _ptr__405(_405 ? _405->raw() : nullptr, _405 ? _405->size(0) : 0);
  _checked_ptr_1<int> _ptr__406(_406 ? _406->raw() : nullptr, _406 ? _406->size(0) : 0);
  int _6731;
  bool _6732 = (_409 > (int)((_404)->size(0)));
  if (_6732)
  {
    _6731 = (int)((_404)->size(0));
  }
  else
  {
    _6731 = _409;
  }
  int _410 = _6731;
  int _6733;
  bool _6734 = (_408 > _410);
  if (_6734)
  {
    _6733 = _410;
  }
  else
  {
    _6733 = _408;
  }
  int _411 = _6733;
  if ((_411 == _410))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_404,_407,_405,_407,(_411 - _407));
    }
  }
  else
  {
    {
      int _412 = _407;
      int _413 = _411;
      int _414;
      {
        _414 = _407;
        for(;((_412 < _411) && (_413 < _410));++ _414)
        {
          {
            if ((_ptr__406[_ptr__404[_412]] < _ptr__406[_ptr__404[_413]]))
            {
              {
                _ptr__405[_414] = _ptr__404[_412];
                ++ _412;
              }
            }
            else
            {
              {
                _ptr__405[_414] = _ptr__404[_413];
                ++ _413;
              }
            }
          }
        }
      }
      while ( (_412 < _411) )
      {
        {
          _ptr__405[_414] = _ptr__404[_412];
          ++ _412;
          ++ _414;
        }
      }
      while ( (_413 < _410) )
      {
        {
          _ptr__405[_414] = _ptr__404[_413];
          ++ _413;
          ++ _414;
        }
      }
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _415,    std::shared_ptr< monty::ndarray< long long,1 > > _416,    std::shared_ptr< monty::ndarray< long long,1 > > _417,    long long _418,    long long _419) { mosek::fusion::p_CommonTools::argQsort(_415,_416,_417,_418,_419); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _415,std::shared_ptr< monty::ndarray< long long,1 > > _416,std::shared_ptr< monty::ndarray< long long,1 > > _417,long long _418,long long _419){
  _checked_ptr_1<long long> _ptr__415(_415 ? _415->raw() : nullptr, _415 ? _415->size(0) : 0);
  _checked_ptr_1<long long> _ptr__416(_416 ? _416->raw() : nullptr, _416 ? _416->size(0) : 0);
  _checked_ptr_1<long long> _ptr__417(_417 ? _417->raw() : nullptr, _417 ? _417->size(0) : 0);
  if ((NULL == _417.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_415,_416,_418,_419);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_415,_416,_417,_418,_419);
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _420,    std::shared_ptr< monty::ndarray< int,1 > > _421,    std::shared_ptr< monty::ndarray< int,1 > > _422,    long long _423,    long long _424) { mosek::fusion::p_CommonTools::argQsort(_420,_421,_422,_423,_424); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _420,std::shared_ptr< monty::ndarray< int,1 > > _421,std::shared_ptr< monty::ndarray< int,1 > > _422,long long _423,long long _424){
  _checked_ptr_1<long long> _ptr__420(_420 ? _420->raw() : nullptr, _420 ? _420->size(0) : 0);
  _checked_ptr_1<int> _ptr__421(_421 ? _421->raw() : nullptr, _421 ? _421->size(0) : 0);
  _checked_ptr_1<int> _ptr__422(_422 ? _422->raw() : nullptr, _422 ? _422->size(0) : 0);
  if ((NULL == _422.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_420,_421,_423,_424);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_420,_421,_422,_423,_424);
    }
  }
}
void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_snx() { return _impl->snx; }
void mosek::fusion::SolutionStruct::set_snx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->snx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int _val) { _impl->sol_numbarvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcone() { return _impl->sol_numcone; }
void mosek::fusion::SolutionStruct::set_sol_numcone(int _val) { _impl->sol_numcone = _val; }
int mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int _val) { _impl->sol_numvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int _val) { _impl->sol_numcon = _val; }
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _425,    int _426,    int _427,    int _428){ return new mosek::fusion::SolutionStruct(_425,_426,_427,_428); }mosek::fusion::SolutionStruct::SolutionStruct  (int _425,    int _426,    int _427,    int _428) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_425,_426,_427,_428); }void mosek::fusion::p_SolutionStruct::_initialize  (int _425,    int _426,    int _427,    int _428){monty::rc_reserve __reserve_this(_pubthis);   {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _425;
    sol_numcon = _426;
    sol_numcone = _427;
    sol_numbarvar = _428;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    snx = nullptr;
    barx = nullptr;
    bars = nullptr;
    if ((_425 > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
      }
    }
    {}
    if ((_428 > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_428)));
      }
    }
    {}
    if ((_426 > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_426)));
      }
    }
    {}
    if ((_427 > (int)0))
    {
      {
        snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_425)));
      }
    }
    {}
  }
}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _429){ return new mosek::fusion::SolutionStruct(_429); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _429) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_429); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _429){monty::rc_reserve __reserve_this(_pubthis);   {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numvar;
    sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numcone;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_429)->sol_numbarvar;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_429)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_429)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_429)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_429)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_429)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _6735;
    bool _6736 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->xc.get());
    if (_6736)
    {
      _6735 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->xc);
    }
    else
    {
      _6735 = nullptr;
    }
    xc = _6735;
    std::shared_ptr< monty::ndarray< double,1 > > _6737;
    bool _6738 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->xx.get());
    if (_6738)
    {
      _6737 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->xx);
    }
    else
    {
      _6737 = nullptr;
    }
    xx = _6737;
    std::shared_ptr< monty::ndarray< double,1 > > _6739;
    bool _6740 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->yx.get());
    if (_6740)
    {
      _6739 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->yx);
    }
    else
    {
      _6739 = nullptr;
    }
    yx = _6739;
    std::shared_ptr< monty::ndarray< double,1 > > _6741;
    bool _6742 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->slc.get());
    if (_6742)
    {
      _6741 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->slx);
    }
    else
    {
      _6741 = nullptr;
    }
    slc = _6741;
    std::shared_ptr< monty::ndarray< double,1 > > _6743;
    bool _6744 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->suc.get());
    if (_6744)
    {
      _6743 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->sux);
    }
    else
    {
      _6743 = nullptr;
    }
    suc = _6743;
    std::shared_ptr< monty::ndarray< double,1 > > _6745;
    bool _6746 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->y.get());
    if (_6746)
    {
      _6745 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->y);
    }
    else
    {
      _6745 = nullptr;
    }
    y = _6745;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _6747;
    bool _6748 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->slx.get());
    if (_6748)
    {
      _6747 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->slx);
    }
    else
    {
      _6747 = nullptr;
    }
    slx = _6747;
    std::shared_ptr< monty::ndarray< double,1 > > _6749;
    bool _6750 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->sux.get());
    if (_6750)
    {
      _6749 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->sux);
    }
    else
    {
      _6749 = nullptr;
    }
    sux = _6749;
    std::shared_ptr< monty::ndarray< double,1 > > _6751;
    bool _6752 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_429)->snx.get());
    if (_6752)
    {
      _6751 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_429)->snx);
    }
    else
    {
      _6751 = nullptr;
    }
    snx = _6751;
  }
}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone(){
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
void mosek::fusion::SolutionStruct :: resize(int _430,int _431,int _432,int _433) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_430,_431,_432,_433); }void mosek::fusion::p_SolutionStruct::resize(int _430,int _431,int _432,int _433){
  if ((_433 < (int)0))
  {
    {
    }
  }
  else if((_433 <= sol_numbarvar))
  {
    {
      sol_numbarvar = _433;
    }
  }
  else if((_433 <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int _434;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _433,(int)100 )))
      {
        {
          _434 = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _434 = safe_add( _433,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_434);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_434);
      sol_numbarvar = _434;
    }
  }
  if ((_430 < (int)0))
  {
    {
    }
  }
  else if((_430 <= sol_numvar))
  {
    {
      sol_numvar = _430;
    }
  }
  else if((_430 <= (int)((xx)->size(0))))
  {
    {
      int _6753 = sol_numvar;
      int _6754 = _430;
      for (int _435 = _6753; _435 < _6754; ++_435)
      {
        {
          ((*slx)(_435)) = 0.0;
          ((*sux)(_435)) = 0.0;
          ((*xx)(_435)) = 0.0;
          ((*yx)(_435)) = 0.0;
        }
      }
      sol_numvar = _430;
    }
  }
  else
  {
    {
      int _436;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _430,(int)100 )))
      {
        {
          _436 = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _436 = safe_add( _430,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _437 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__437(_437 ? _437->raw() : nullptr,_437 ? _437->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_437,(int)0,(int)((slx)->size(0)));
      slx = _437;
      std::shared_ptr< monty::ndarray< double,1 > > _438 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__438(_438 ? _438->raw() : nullptr,_438 ? _438->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_438,(int)0,(int)((sux)->size(0)));
      sux = _438;
      std::shared_ptr< monty::ndarray< double,1 > > _439 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__439(_439 ? _439->raw() : nullptr,_439 ? _439->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_439,(int)0,(int)((xx)->size(0)));
      xx = _439;
      std::shared_ptr< monty::ndarray< double,1 > > _440 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_436)));
      _checked_ptr_1<double> _ptr__440(_440 ? _440->raw() : nullptr,_440 ? _440->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_440,(int)0,(int)((yx)->size(0)));
      yx = _440;
      {
        int _441 = sol_numvar;
        for(;(_441 < _430);++ _441)
        {
          {
            ((*slx)(_441)) = 0.0;
            ((*sux)(_441)) = 0.0;
            ((*xx)(_441)) = 0.0;
          }
        }
      }
      sol_numvar = _430;
    }
  }
  if ((_431 < (int)0))
  {
    {
    }
  }
  else if((_431 <= sol_numcon))
  {
    {
      sol_numcon = _431;
    }
  }
  else if((_431 <= (int)((xx)->size(0))))
  {
    {
      int _6755 = sol_numcon;
      int _6756 = _431;
      for (int _442 = _6755; _442 < _6756; ++_442)
      {
        {
          ((*slc)(_442)) = 0.0;
          ((*suc)(_442)) = 0.0;
          ((*xc)(_442)) = 0.0;
          ((*y)(_442)) = 0.0;
        }
      }
      sol_numcon = _431;
    }
  }
  else
  {
    {
      int _443;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _431,(int)100 )))
      {
        {
          _443 = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _443 = safe_add( _431,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _444 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__444(_444 ? _444->raw() : nullptr,_444 ? _444->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_444,(int)0,(int)((slc)->size(0)));
      slc = _444;
      std::shared_ptr< monty::ndarray< double,1 > > _445 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__445(_445 ? _445->raw() : nullptr,_445 ? _445->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_445,(int)0,(int)((suc)->size(0)));
      suc = _445;
      std::shared_ptr< monty::ndarray< double,1 > > _446 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__446(_446 ? _446->raw() : nullptr,_446 ? _446->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_446,(int)0,(int)((xc)->size(0)));
      xc = _446;
      std::shared_ptr< monty::ndarray< double,1 > > _447 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_443)));
      _checked_ptr_1<double> _ptr__447(_447 ? _447->raw() : nullptr,_447 ? _447->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_447,(int)0,(int)((y)->size(0)));
      y = _447;
      int _6757 = sol_numcon;
      int _6758 = _431;
      for (int _448 = _6757; _448 < _6758; ++_448)
      {
        {
          ((*slc)(_448)) = 0.0;
          ((*suc)(_448)) = 0.0;
          ((*xc)(_448)) = 0.0;
          ((*y)(_448)) = 0.0;
        }
      }
      sol_numcon = _431;
    }
  }
  if ((_432 < (int)0))
  {
    {
    }
  }
  else if((_432 <= sol_numcone))
  {
    {
      sol_numcone = _432;
    }
  }
  else if((_432 <= (int)((xx)->size(0))))
  {
    {
      int _6759 = sol_numcone;
      int _6760 = _432;
      for (int _449 = _6759; _449 < _6760; ++_449)
      {
        {
          ((*snx)(_449)) = 0.0;
        }
      }
      sol_numcone = _432;
    }
  }
  else
  {
    {
      int _450;
      if ((safe_mul( sol_numcone,(int)2 ) > safe_add( _432,(int)100 )))
      {
        {
          _450 = safe_mul( sol_numcone,(int)2 );
        }
      }
      else
      {
        {
          _450 = safe_add( _432,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _451 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_450)));
      _checked_ptr_1<double> _ptr__451(_451 ? _451->raw() : nullptr,_451 ? _451->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_451,(int)0,(int)((snx)->size(0)));
      snx = _451;
      {
        int _452 = sol_numcone;
        for(;(_452 < _432);++ _452)
        {
          {
            ((*snx)(_452)) = 0.0;
          }
        }
      }
      sol_numcone = _432;
    }
  }
}
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _453) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_453); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _453){
  return isAcceptable(dstatus,_453);
}
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _454) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_454); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _454){
  return isAcceptable(pstatus,_454);
}
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _455,mosek::fusion::AccSolutionStatus _456){
  if ((_456 == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_456 == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_455 == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_456 == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_455 == ::mosek::fusion::SolutionStatus::Optimal) || (_455 == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_456 == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_455 == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
void mosek::fusion::p_SolutionStruct::destroy(){yx.reset();snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barmidx() { return _impl->barmidx; }
void mosek::fusion::ConNZStruct::set_barmidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConNZStruct::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConNZStruct::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConNZStruct::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_cof() { return _impl->cof; }
void mosek::fusion::ConNZStruct::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_subj() { return _impl->subj; }
void mosek::fusion::ConNZStruct::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::ConNZStruct::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::ConNZStruct::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _457,    std::shared_ptr< monty::ndarray< int,1 > > _458,    std::shared_ptr< monty::ndarray< double,1 > > _459,    std::shared_ptr< monty::ndarray< double,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< int,1 > > _462,    std::shared_ptr< monty::ndarray< int,1 > > _463){ return new mosek::fusion::ConNZStruct(_457,_458,_459,_460,_461,_462,_463); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _457,    std::shared_ptr< monty::ndarray< int,1 > > _458,    std::shared_ptr< monty::ndarray< double,1 > > _459,    std::shared_ptr< monty::ndarray< double,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< int,1 > > _462,    std::shared_ptr< monty::ndarray< int,1 > > _463) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_457,_458,_459,_460,_461,_462,_463); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _457,    std::shared_ptr< monty::ndarray< int,1 > > _458,    std::shared_ptr< monty::ndarray< double,1 > > _459,    std::shared_ptr< monty::ndarray< double,1 > > _460,    std::shared_ptr< monty::ndarray< int,1 > > _461,    std::shared_ptr< monty::ndarray< int,1 > > _462,    std::shared_ptr< monty::ndarray< int,1 > > _463){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__457(_457 ? _457->raw() : nullptr, _457 ? _457->size(0) : 0);
    _checked_ptr_1<int> _ptr__458(_458 ? _458->raw() : nullptr, _458 ? _458->size(0) : 0);
    _checked_ptr_1<double> _ptr__459(_459 ? _459->raw() : nullptr, _459 ? _459->size(0) : 0);
    _checked_ptr_1<double> _ptr__460(_460 ? _460->raw() : nullptr, _460 ? _460->size(0) : 0);
    _checked_ptr_1<int> _ptr__461(_461 ? _461->raw() : nullptr, _461 ? _461->size(0) : 0);
    _checked_ptr_1<int> _ptr__462(_462 ? _462->raw() : nullptr, _462 ? _462->size(0) : 0);
    _checked_ptr_1<int> _ptr__463(_463 ? _463->raw() : nullptr, _463 ? _463->size(0) : 0);
    ptrb = _457;
    subj = _458;
    cof = _459;
    bfix = _460;
    barsubi = _461;
    barsubj = _462;
    barmidx = _463;
  }
}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _464){ return new mosek::fusion::Model(_464); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _464) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_464); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _464){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_464);
    monty::rc_ptr< ::mosek::fusion::Model > _465 = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_464)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_464)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_464)->solutionptr;
    natvarmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natvarmap_blockid);
    natvarmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natvarmap_idx);
    natvarmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natvarmap_type);
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_464)->natvarmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6761;
    for (int _466 = (int)0, _6762 = (int)((mosek::fusion::p_Model::_get_impl(_464)->vars)->size(0)); _466 < _6762 ; ++_466)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _6763;
      bool _6764 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_464)->vars)(_466)).get());
      if (_6764)
      {
        _6763 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_464)->vars)(_466)).get())->__mosek_2fusion_2ModelVariable__clone(_465);
      }
      else
      {
        _6763 = nullptr;
      }
      _6761.push_back(_6763);
    }
    auto _6765 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6761.size()),_6761.begin(),_6761.end()));
    vars = _6765;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_464)->natconemap);
    natconemap_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconemap_dim);
    natbarvar_numbarvarelm = mosek::fusion::p_Model::_get_impl(_464)->natbarvar_numbarvarelm;
    natbarvar_ptr = ::mosek::fusion::Utils::Tools::arraycopy(natbarvar_ptr);
    natbarvar_i = ::mosek::fusion::Utils::Tools::arraycopy(natbarvar_i);
    natbarvar_j = ::mosek::fusion::Utils::Tools::arraycopy(natbarvar_j);
    natbarvar_idx = ::mosek::fusion::Utils::Tools::arraycopy(natbarvar_idx);
    natbarvarmap_nblock = mosek::fusion::p_Model::_get_impl(_464)->natbarvarmap_nblock;
    natbarvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvar_dim);
    natbarvarmap_num = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvarmap_num);
    natbarvarmap_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natbarvarmap_ptr);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6766;
    for (int _467 = (int)0, _6767 = (int)((mosek::fusion::p_Model::_get_impl(_464)->barvars)->size(0)); _467 < _6767 ; ++_467)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _6768;
      bool _6769 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_464)->barvars)(_467)).get());
      if (_6769)
      {
        _6768 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_464)->barvars)(_467)).get())->__mosek_2fusion_2ModelVariable__clone(_465);
      }
      else
      {
        _6768 = nullptr;
      }
      _6766.push_back(_6768);
    }
    auto _6770 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6766.size()),_6766.begin(),_6766.end()));
    barvars = _6770;
    var_map = mosek::fusion::p_Model::_get_impl(_464)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    natconmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_blockid);
    natconmap_slackidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_slackidx);
    natconmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_idx);
    natconmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_type);
    natconmap_efix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_efix);
    natconmap_lb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_lb);
    natconmap_ub = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_464)->natconmap_ub);
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_464)->natconmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _6771;
    for (int _468 = (int)0, _6772 = (int)((mosek::fusion::p_Model::_get_impl(_464)->cons)->size(0)); _468 < _6772 ; ++_468)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _6773;
      bool _6774 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_464)->cons)(_468)).get());
      if (_6774)
      {
        _6773 = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_464)->cons)(_468)).get())->__mosek_2fusion_2ModelConstraint__clone(_465);
      }
      else
      {
        _6773 = nullptr;
      }
      _6771.push_back(_6773);
    }
    auto _6775 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_6771.size()),_6771.begin(),_6771.end()));
    cons = _6775;
    con_map = mosek::fusion::p_Model::_get_impl(_464)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_464)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _469){ return new mosek::fusion::Model(_469); }mosek::fusion::Model::Model  (const std::string &  _469) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_469); }void mosek::fusion::p_Model::_initialize  (const std::string &  _469){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_469,std::string (""));
    model_name = _469;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natvarmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _6776;
    for (int _470 = (int)0, _6777 = (int)1024; _470 < _6777 ; ++_470)
    {
      _6776.push_back(nullptr);
    }
    auto _6778 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_6776.size()),_6776.begin(),_6776.end()));
    vars = _6778;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconemap_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    natbarvar_ptr = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
    natbarvar_numbarvarelm = (int)0;
    natbarvar_i = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_j = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_nblock = (int)0;
    natbarvar_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_num = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_ptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_slackidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_efix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_lb = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_ub = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _6779;
    for (int _471 = (int)0, _6780 = (int)1024; _471 < _6780 ; ++_471)
    {
      _6779.push_back(nullptr);
    }
    auto _6781 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_6779.size()),_6779.begin(),_6779.end()));
    cons = _6781;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    bfixidx = natvarmap_alloc((int)1);
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _472,std::shared_ptr< monty::ndarray< int,1 > > _473,std::shared_ptr< monty::ndarray< int,1 > > _474){
  _checked_ptr_1<int> _ptr__473(_473 ? _473->raw() : nullptr, _473 ? _473->size(0) : 0);
  _checked_ptr_1<int> _ptr__474(_474 ? _474->raw() : nullptr, _474 ? _474->size(0) : 0);
  return _472;
}
void mosek::fusion::p_Model::connames(std::shared_ptr< monty::ndarray< int,1 > > _475,const std::string & _476,std::shared_ptr< monty::ndarray< int,1 > > _477,std::shared_ptr< monty::ndarray< long long,1 > > _478){
  _checked_ptr_1<int> _ptr__475(_475 ? _475->raw() : nullptr, _475 ? _475->size(0) : 0);
  _checked_ptr_1<int> _ptr__477(_477 ? _477->raw() : nullptr, _477 ? _477->size(0) : 0);
  _checked_ptr_1<long long> _ptr__478(_478 ? _478->raw() : nullptr, _478 ? _478->size(0) : 0);
  task_format_con_names(_475,_476,_477,_478);
}
void mosek::fusion::p_Model::varnames(std::shared_ptr< monty::ndarray< int,1 > > _479,const std::string & _480,std::shared_ptr< monty::ndarray< int,1 > > _481,std::shared_ptr< monty::ndarray< long long,1 > > _482){
  _checked_ptr_1<int> _ptr__479(_479 ? _479->raw() : nullptr, _479 ? _479->size(0) : 0);
  _checked_ptr_1<int> _ptr__481(_481 ? _481->raw() : nullptr, _481 ? _481->size(0) : 0);
  _checked_ptr_1<long long> _ptr__482(_482 ? _482->raw() : nullptr, _482 ? _482->size(0) : 0);
  task_format_var_names(_479,_480,_481,_482);
}
void mosek::fusion::p_Model::varname(int _483,const std::string & _484){
  task_var_name(_483,_484);
}
void mosek::fusion::p_Model::natbarvarmap_get(int _485,std::shared_ptr< monty::ndarray< int,1 > > _486){
  _checked_ptr_1<int> _ptr__486(_486 ? _486->raw() : nullptr, _486 ? _486->size(0) : 0);
  int _487 = ((*natbarvarmap_ptr)(_485));
  int _488 = ((*natbarvarmap_num)(_485));
  int _6782 = (int)0;
  int _6783 = _488;
  for (int _489 = _6782; _489 < _6783; ++_489)
  {
    {
      _ptr__486[_489] = safe_add( _487,_489 );
    }
  }
}
void mosek::fusion::p_Model::natbarvar_get(int _490,std::shared_ptr< monty::ndarray< long long,1 > > _491){
  _checked_ptr_1<long long> _ptr__491(_491 ? _491->raw() : nullptr, _491 ? _491->size(0) : 0);
  int _492 = ((*natbarvarmap_ptr)(_490));
  int _493 = ((*natbarvarmap_num)(_490));
  int _494 = ((*natbarvar_dim)(((*natbarvarmap_ptr)(_490))));
  int _495 = (safe_mul( safe_mul( _493,_494 ),safe_add( _494,(int)1 ) ) / (int)2);
  long long _496 = ((*natbarvar_ptr)(_492));
  int _6784 = (int)0;
  int _6785 = _495;
  for (int _497 = _6784; _497 < _6785; ++_497)
  {
    {
      _ptr__491[_497] = safe_add( _496,_497 );
    }
  }
}
int mosek::fusion::p_Model::natbarvarmap_alloc(int _498,int _499){
  int _500 = (int)((natbarvar_idx)->size(0));
  int _501 = task_numbarvar();
  int _502 = (safe_mul( _499,safe_add( _499,(int)1 ) ) / (int)2);
  int _503 = safe_mul( _498,_502 );
  if ((safe_add( natbarvar_numbarvarelm,_503 ) >= _500))
  {
    {
      if ((_503 < _500))
      {
        {
          _503 = _500;
        }
      }
      {}
      natbarvar_idx = ::mosek::fusion::p_CommonTools::resize(natbarvar_idx,safe_add( _500,_503 ));
      natbarvar_i = ::mosek::fusion::p_CommonTools::resize(natbarvar_i,safe_add( _500,_503 ));
      natbarvar_j = ::mosek::fusion::p_CommonTools::resize(natbarvar_j,safe_add( _500,_503 ));
    }
  }
  {}
  if ((safe_add( natbarvarmap_nblock,(int)1 ) >= (int)((natbarvarmap_num)->size(0))))
  {
    {
      int _6786;
      bool _6787 = ((int)((natbarvarmap_num)->size(0)) > (int)0);
      if (_6787)
      {
        _6786 = safe_mul( (int)((natbarvarmap_num)->size(0)),(int)2 );
      }
      else
      {
        _6786 = (int)32;
      }
      int _504 = _6786;
      natbarvarmap_num = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_num,_504);
      natbarvarmap_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_ptr,safe_add( _504,(int)1 ));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _505 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_504)));
      int _6788 = (int)0;
      int _6789 = (int)((barvars)->size(0));
      for (int _506 = _6788; _506 < _6789; ++_506)
      {
        {
          ((*_505)(_506)) = ((*barvars)(_506));
        }
      }
      barvars = _505;
    }
  }
  {}
  if ((safe_add( _501,_498 ) > (int)((natbarvar_dim)->size(0))))
  {
    {
      int _6790;
      bool _6791 = (safe_add( _501,_498 ) < safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 ));
      if (_6791)
      {
        _6790 = safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 );
      }
      else
      {
        _6790 = safe_add( _501,_498 );
      }
      int _507 = _6790;
      natbarvar_dim = ::mosek::fusion::p_CommonTools::resize(natbarvar_dim,_507);
    }
  }
  {}
  if ((safe_add( _501,_498 ) >= (int)((natbarvar_ptr)->size(0))))
  {
    {
      int _6792;
      bool _6793 = (_498 > (int)((natbarvar_ptr)->size(0)));
      if (_6793)
      {
        _6792 = _498;
      }
      else
      {
        _6792 = (int)((natbarvar_ptr)->size(0));
      }
      int _508 = _6792;
      natbarvar_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvar_ptr,safe_add( safe_add( (int)((natbarvar_ptr)->size(0)),_508 ),(int)1 ));
    }
  }
  {}
  int _6794 = (int)0;
  int _6795 = _498;
  for (int _509 = _6794; _509 < _6795; ++_509)
  {
    {
      ((*natbarvar_dim)(safe_add( _501,_509 ))) = _499;
    }
  }
  ((*natbarvarmap_num)(natbarvarmap_nblock)) = _498;
  ((*natbarvarmap_ptr)(safe_add( natbarvarmap_nblock,(int)1 ))) = safe_add( ((*natbarvarmap_ptr)(natbarvarmap_nblock)),_498 );
  int _510 = task_append_barvar(_499,_498);
  int _511 = ((*natbarvarmap_ptr)(natbarvarmap_nblock));
  {
    long long _512 = ((*natbarvar_ptr)(_501));
    int _6796 = (int)0;
    int _6797 = _499;
    for (int _513 = _6796; _513 < _6797; ++_513)
    {
      {
        int _6798 = _513;
        int _6799 = _499;
        for (int _514 = _6798; _514 < _6799; ++_514)
        {
          {
            int _6800 = (int)0;
            int _6801 = _498;
            for (int _515 = _6800; _515 < _6801; ++_515)
            {
              {
                ((*natbarvar_idx)(safe_add( _512,safe_mul( _515,_502 ) ))) = safe_add( _511,_515 );
                ((*natbarvar_i)(safe_add( _512,safe_mul( _515,_502 ) ))) = _514;
                ((*natbarvar_j)(safe_add( _512,safe_mul( _515,_502 ) ))) = _513;
              }
            }
            ++ _512;
          }
        }
      }
    }
    int _6802 = (int)0;
    int _6803 = _498;
    for (int _516 = _6802; _516 < _6803; ++_516)
    {
      {
        ((*natbarvar_ptr)(safe_add( safe_add( _511,_516 ),(int)1 ))) = safe_add( ((*natbarvar_ptr)(safe_add( _511,_516 ))),_502 );
      }
    }
  }
  natbarvarmap_nblock += (int)1;
  natbarvar_numbarvarelm += safe_mul( _498,_502 );
  return (natbarvarmap_nblock - (int)1);
}
int mosek::fusion::p_Model::natvarmap_alloc(int _517){
  int _518 = natvarmap->alloc(_517);
  int _519 = safe_add( natvarmap->maxidx(_518),(int)1 );
  int _520 = natvarmap->capacity();
  int _521 = natvarmap->numblocks();
  if (((int)((natvarmap_idx)->size(0)) < _520))
  {
    {
      int _522 = (int)((natvarmap_idx)->size(0));
      natvarmap_idx = ::mosek::fusion::p_CommonTools::resize(natvarmap_idx,_520);
      int _6804 = _522;
      int _6805 = _520;
      for (int _523 = _6804; _523 < _6805; ++_523)
      {
        {
          ((*natvarmap_idx)(_523)) = (-(int)1);
        }
      }
      natvarmap_blockid = ::mosek::fusion::p_CommonTools::resize(natvarmap_blockid,_520);
    }
  }
  {}
  if (((int)((vars)->size(0)) < _521))
  {
    {
      natvarmap_type = ::mosek::fusion::p_CommonTools::resize(natvarmap_type,_521);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _524 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_521)));
      int _6806 = (int)0;
      int _6807 = (int)((vars)->size(0));
      for (int _525 = _6806; _525 < _6807; ++_525)
      {
        {
          ((*_524)(_525)) = ((*vars)(_525));
        }
      }
      int _6808 = (int)((vars)->size(0));
      int _6809 = (int)((_524)->size(0));
      for (int _526 = _6808; _526 < _6809; ++_526)
      {
        {
          ((*_524)(_526)) = nullptr;
        }
      }
      vars = _524;
    }
  }
  {}
  if ((task_numvar() < _519))
  {
    {
      task_append_var((_519 - task_numvar()));
    }
  }
  {}
  return _518;
}
int mosek::fusion::p_Model::natconmap_alloc(int _527){
  int _528 = natconmap->alloc(_527);
  int _529 = safe_add( natconmap->maxidx(_528),(int)1 );
  int _530 = natconmap->capacity();
  int _531 = natconmap->numblocks();
  if (((int)((natconmap_idx)->size(0)) < _530))
  {
    {
      int _532 = (int)((natconmap_idx)->size(0));
      natconmap_idx = ::mosek::fusion::p_CommonTools::resize(natconmap_idx,_530);
      int _6810 = _532;
      int _6811 = _530;
      for (int _533 = _6810; _533 < _6811; ++_533)
      {
        {
          ((*natconmap_idx)(_533)) = (-(int)1);
        }
      }
      natconmap_efix = ::mosek::fusion::p_CommonTools::resize(natconmap_efix,_530);
      natconmap_lb = ::mosek::fusion::p_CommonTools::resize(natconmap_lb,_530);
      natconmap_ub = ::mosek::fusion::p_CommonTools::resize(natconmap_ub,_530);
      natconmap_blockid = ::mosek::fusion::p_CommonTools::resize(natconmap_blockid,_530);
      natconmap_slackidx = ::mosek::fusion::p_CommonTools::resize(natconmap_slackidx,_530);
    }
  }
  {}
  if (((int)((cons)->size(0)) < _531))
  {
    {
      natconmap_type = ::mosek::fusion::p_CommonTools::resize(natconmap_type,_531);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _534 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_531)));
      int _6812 = (int)0;
      int _6813 = (int)((cons)->size(0));
      for (int _535 = _6812; _535 < _6813; ++_535)
      {
        {
          ((*_534)(_535)) = ((*cons)(_535));
        }
      }
      int _6814 = (int)((cons)->size(0));
      int _6815 = _531;
      for (int _536 = _6814; _536 < _6815; ++_536)
      {
        {
          ((*_534)(_536)) = nullptr;
        }
      }
      cons = _534;
    }
  }
  {}
  if ((_529 > task_numcon()))
  {
    {
      task_append_con((_529 - task_numcon()));
    }
  }
  {}
  return _528;
}
int mosek::fusion::p_Model::natconemap_alloc(int _537){
  int _538 = natconemap->alloc(_537);
  int _539 = safe_add( natconemap->maxidx(_538),(int)1 );
  if ((_539 > task_numcone()))
  {
    {
      task_append_zerocones((_539 - task_numcone()));
    }
  }
  {}
  natconemap_dim = ::mosek::fusion::p_CommonTools::resize(natconemap_dim,natconemap->numblocks());
  return _538;
}
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _540){
  _checked_ptr_1<long long> _ptr__540(_540 ? _540->raw() : nullptr, _540 ? _540->size(0) : 0);
  int _541 = (int)0;
  int _6816 = (int)0;
  int _6817 = (int)((_540)->size(0));
  for (int _542 = _6816; _542 < _6817; ++_542)
  {
    {
      if ((_ptr__540[_542] > (int)0))
      {
        {
          ++ _541;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _543 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_541)));
  _checked_ptr_1<int> _ptr__543(_543 ? _543->raw() : nullptr,_543 ? _543->size(0) : 0);
  int _544 = (int)0;
  int _6818 = (int)0;
  int _6819 = (int)((_540)->size(0));
  for (int _545 = _6818; _545 < _6819; ++_545)
  {
    {
      if ((_ptr__540[_545] > (int)0))
      {
        {
          _ptr__543[_544] = (int)(_ptr__540[_545] - (int)1);
          ++ _544;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_543);
}
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _546){
  _checked_ptr_1<long long> _ptr__546(_546 ? _546->raw() : nullptr, _546 ? _546->size(0) : 0);
  int _547 = (int)0;
  int _6820 = (int)0;
  int _6821 = (int)((_546)->size(0));
  for (int _548 = _6820; _548 < _6821; ++_548)
  {
    {
      if ((_ptr__546[_548] > (int)0))
      {
        {
          ++ _547;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _549 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_547)));
  _checked_ptr_1<int> _ptr__549(_549 ? _549->raw() : nullptr,_549 ? _549->size(0) : 0);
  int _550 = (int)0;
  int _6822 = (int)0;
  int _6823 = (int)((_546)->size(0));
  for (int _551 = _6822; _551 < _6823; ++_551)
  {
    {
      if ((_ptr__546[_551] > (int)0))
      {
        {
          _ptr__549[_550] = (int)(_ptr__546[_551] - (int)1);
          ++ _550;
        }
      }
      {}
    }
  }
  task_var_putintlist(_549);
}
void mosek::fusion::Model::putlicensewait  ( bool _552) { mosek::fusion::p_Model::putlicensewait(_552); }void mosek::fusion::p_Model::putlicensewait(bool _552){
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_552);
}
void mosek::fusion::Model::putlicensepath  ( const std::string & _553) { mosek::fusion::p_Model::putlicensepath(_553); }void mosek::fusion::p_Model::putlicensepath(const std::string & _553){
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_553);
}
void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _554) { mosek::fusion::p_Model::putlicensecode(_554); }void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int,1 > > _554){
  _checked_ptr_1<int> _ptr__554(_554 ? _554->raw() : nullptr, _554 ? _554->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_554);
}
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose(){
  int _6824 = (int)0;
  int _6825 = (int)((vars)->size(0));
  for (int _555 = _6824; _555 < _6825; ++_555)
  {
    {
      ((*vars)(_555)) = nullptr;
    }
  }
  int _6826 = (int)0;
  int _6827 = (int)((cons)->size(0));
  for (int _556 = _6826; _556 < _6827; ++_556)
  {
    {
      ((*cons)(_556)) = nullptr;
    }
  }
  ::mosek::fusion::p_BaseModel::dispose();
}
void mosek::fusion::p_Model::nativeVarToStr(int _557,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _558){
  if (((_557 < (int)0) || ((_557 >= (int)((natvarmap_idx)->size(0))) || (((*natvarmap_idx)(_557)) < (int)0))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Native variable index is invalid"));
    }
  }
  {}
  ((*vars)(((*natvarmap_blockid)(_557))))->elementName((long long)(((*natvarmap_idx)(_557))),_558);
}
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask(){
  return __mosek_2fusion_2BaseModel__task_get();
}
void mosek::fusion::Model :: getConstraintValues(bool _559,std::shared_ptr< monty::ndarray< int,1 > > _560,std::shared_ptr< monty::ndarray< double,1 > > _561,int _562) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_559,_560,_561,_562); }void mosek::fusion::p_Model::getConstraintValues(bool _559,std::shared_ptr< monty::ndarray< int,1 > > _560,std::shared_ptr< monty::ndarray< double,1 > > _561,int _562){
  _checked_ptr_1<int> _ptr__560(_560 ? _560->raw() : nullptr, _560 ? _560->size(0) : 0);
  _checked_ptr_1<double> _ptr__561(_561 ? _561->raw() : nullptr, _561 ? _561->size(0) : 0);
  int _563 = (int)((_560)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _6828;
  bool _6829 = _559;
  if (_6829)
  {
    _6828 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6828 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _564 = _6828;
  _checked_ptr_1<double> _ptr__564(_564 ? _564->raw() : nullptr,_564 ? _564->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6830;
  bool _6831 = _559;
  if (_6831)
  {
    _6830 = getSolution_barx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6830 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _565 = _6830;
  _checked_ptr_1<double> _ptr__565(_565 ? _565->raw() : nullptr,_565 ? _565->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6832;
  bool _6833 = _559;
  if (_6833)
  {
    _6832 = getSolution_xc(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6832 = getSolution_y(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _566 = _6832;
  _checked_ptr_1<double> _ptr__566(_566 ? _566->raw() : nullptr,_566 ? _566->size(0) : 0);
  int _6834 = (int)0;
  int _6835 = _563;
  for (int _567 = _6834; _567 < _6835; ++_567)
  {
    {
      long long _568 = ((*natconmap_slackidx)(_ptr__560[_567]));
      if ((_568 < (int)0))
      {
        {
          long long _569 = (-safe_add( _568,(int)1 ));
          _ptr__561[safe_add( _562,_567 )] = _ptr__565[_569];
        }
      }
      else if((_568 > (int)0))
      {
        {
          _ptr__561[safe_add( _562,_567 )] = _ptr__564[(_568 - (int)1)];
        }
      }
      else
      {
        {
          _ptr__561[safe_add( _562,_567 )] = _ptr__566[_ptr__560[_567]];
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableDuals(bool _570,std::shared_ptr< monty::ndarray< long long,1 > > _571,std::shared_ptr< monty::ndarray< double,1 > > _572,int _573) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_570,_571,_572,_573); }void mosek::fusion::p_Model::getVariableDuals(bool _570,std::shared_ptr< monty::ndarray< long long,1 > > _571,std::shared_ptr< monty::ndarray< double,1 > > _572,int _573){
  _checked_ptr_1<long long> _ptr__571(_571 ? _571->raw() : nullptr, _571 ? _571->size(0) : 0);
  _checked_ptr_1<double> _ptr__572(_572 ? _572->raw() : nullptr, _572 ? _572->size(0) : 0);
  int _574 = (int)((_571)->size(0));
  if (_570)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _575 = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__575(_575 ? _575->raw() : nullptr,_575 ? _575->size(0) : 0);
      int _6836 = (int)0;
      int _6837 = _574;
      for (int _576 = _6836; _576 < _6837; ++_576)
      {
        {
          if ((_ptr__571[_576] > (int)0))
          {
            {
              _ptr__572[safe_add( _573,_576 )] = _ptr__575[(_ptr__571[_576] - (int)1)];
            }
          }
          else
          {
            {
              _ptr__572[safe_add( _573,_576 )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _577 = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__577(_577 ? _577->raw() : nullptr,_577 ? _577->size(0) : 0);
      int _6838 = (int)0;
      int _6839 = _574;
      for (int _578 = _6838; _578 < _6839; ++_578)
      {
        {
          if ((_ptr__571[_578] > (int)0))
          {
            {
              _ptr__572[safe_add( _573,_578 )] = (-_ptr__577[(_ptr__571[_578] - (int)1)]);
            }
          }
          else
          {
            {
              _ptr__572[safe_add( _573,_578 )] = (int)0;
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableValues(bool _579,std::shared_ptr< monty::ndarray< long long,1 > > _580,std::shared_ptr< monty::ndarray< double,1 > > _581,int _582) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_579,_580,_581,_582); }void mosek::fusion::p_Model::getVariableValues(bool _579,std::shared_ptr< monty::ndarray< long long,1 > > _580,std::shared_ptr< monty::ndarray< double,1 > > _581,int _582){
  _checked_ptr_1<long long> _ptr__580(_580 ? _580->raw() : nullptr, _580 ? _580->size(0) : 0);
  _checked_ptr_1<double> _ptr__581(_581 ? _581->raw() : nullptr, _581 ? _581->size(0) : 0);
  int _583 = (int)((_580)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _6840;
  bool _6841 = _579;
  if (_6841)
  {
    _6840 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _6840 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _584 = _6840;
  _checked_ptr_1<double> _ptr__584(_584 ? _584->raw() : nullptr,_584 ? _584->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6842;
  bool _6843 = (natbarvar_numbarvarelm > (int)0);
  if (_6843)
  {
    std::shared_ptr< monty::ndarray< double,1 > > _6844;
    bool _6845 = _579;
    if (_6845)
    {
      _6844 = getSolution_barx(::mosek::fusion::SolutionType::Default);
    }
    else
    {
      _6844 = getSolution_bars(::mosek::fusion::SolutionType::Default);
    }
    _6842 = _6844;
  }
  else
  {
    _6842 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _585 = _6842;
  _checked_ptr_1<double> _ptr__585(_585 ? _585->raw() : nullptr,_585 ? _585->size(0) : 0);
  int _6846 = (int)0;
  int _6847 = _583;
  for (int _586 = _6846; _586 < _6847; ++_586)
  {
    {
      if ((_ptr__580[_586] > (int)0))
      {
        {
          _ptr__581[safe_add( _582,_586 )] = _ptr__584[(_ptr__580[_586] - (int)1)];
        }
      }
      else if((_ptr__580[_586] < (int)0))
      {
        {
          long long _587 = (-safe_add( _ptr__580[_586],(int)1 ));
          _ptr__581[safe_add( _582,_586 )] = _ptr__585[_587];
        }
      }
      else
      {
        {
          _ptr__581[safe_add( _582,_586 )] = (int)0;
        }
      }
    }
  }
}
void mosek::fusion::Model :: setVariableValues(bool _588,std::shared_ptr< monty::ndarray< long long,1 > > _589,std::shared_ptr< monty::ndarray< double,1 > > _590) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_588,_589,_590); }void mosek::fusion::p_Model::setVariableValues(bool _588,std::shared_ptr< monty::ndarray< long long,1 > > _589,std::shared_ptr< monty::ndarray< double,1 > > _590){
  _checked_ptr_1<long long> _ptr__589(_589 ? _589->raw() : nullptr, _589 ? _589->size(0) : 0);
  _checked_ptr_1<double> _ptr__590(_590 ? _590->raw() : nullptr, _590 ? _590->size(0) : 0);
  if (_588)
  {
    {
      int _591 = (int)0;
      int _6848 = (int)0;
      int _6849 = (int)((_589)->size(0));
      for (int _592 = _6848; _592 < _6849; ++_592)
      {
        {
          if ((_ptr__589[_592] >= (int)0))
          {
            {
              ++ _591;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _593 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_591)));
      _checked_ptr_1<int> _ptr__593(_593 ? _593->raw() : nullptr,_593 ? _593->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6850;
      bool _6851 = (_591 == (int)((_589)->size(0)));
      if (_6851)
      {
        _6850 = _590;
      }
      else
      {
        _6850 = _590;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _594 = _6850;
      _checked_ptr_1<double> _ptr__594(_594 ? _594->raw() : nullptr,_594 ? _594->size(0) : 0);
      int _595 = (int)0;
      int _6852 = (int)0;
      int _6853 = (int)((_589)->size(0));
      for (int _596 = _6852; _596 < _6853; ++_596)
      {
        {
          if ((_ptr__589[_596] > (int)0))
          {
            {
              _ptr__593[_595] = (int)(_ptr__589[_596] - (int)1);
              ++ _595;
            }
          }
          {}
        }
      }
      setSolution_xx(_593,_594);
    }
  }
  else
  {
    {
    }
  }
}
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames(){
  int _6854 = (int)0;
  int _6855 = (int)((vars)->size(0));
  for (int _597 = _6854; _597 < _6855; ++_597)
  {
    {
      if ((NULL != ((*vars)(_597)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_597)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _6856 = (int)0;
  int _6857 = (int)((barvars)->size(0));
  for (int _598 = _6856; _598 < _6857; ++_598)
  {
    {
      if ((NULL != ((*barvars)(_598)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_598)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _6858 = (int)0;
  int _6859 = (int)((cons)->size(0));
  for (int _599 = _6858; _599 < _6859; ++_599)
  {
    {
      if ((NULL != ((*cons)(_599)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_599)).get())->flushNames();
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: writeTask(const std::string & _600) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_600); }void mosek::fusion::p_Model::writeTask(const std::string & _600){
  _pubthis->flushNames();
  task_write(_600);
}
long long mosek::fusion::Model :: getSolverLIntInfo(const std::string & _601) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_601); }long long mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _601){
  return task_get_liinf(_601);
}
int mosek::fusion::Model :: getSolverIntInfo(const std::string & _602) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_602); }int mosek::fusion::p_Model::getSolverIntInfo(const std::string & _602){
  return task_get_iinf(_602);
}
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _603) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_603); }double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _603){
  return task_get_dinf(_603);
}
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _604) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_604); }void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _604){
  task_setCallbackHandler(_604);
}
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _605) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_605); }void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _605){
  task_setDataCallbackHandler(_605);
}
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _606) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_606); }void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _606){
  task_setLogHandler(_606);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _607,double _608) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_607,_608); }void mosek::fusion::p_Model::setSolverParam(const std::string & _607,double _608){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_607,_608);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _609,int _610) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_609,_610); }void mosek::fusion::p_Model::setSolverParam(const std::string & _609,int _610){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_609,_610);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _611,const std::string & _612) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_611,_612); }void mosek::fusion::p_Model::setSolverParam(const std::string & _611,const std::string & _612){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_611,_612);
}
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver(){
  task_break_solve();
}
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
  task_solve();
}
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _613){
  if ((NULL != initsol_xx.get()))
  {
    {
      int _614 = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _615 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_614)));
      _checked_ptr_1<double> _ptr__615(_615 ? _615->raw() : nullptr,_615 ? _615->size(0) : 0);
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _617 = __mosek_2fusion_2Model__get_sol_cache(_613,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx.get()))
          {
            {
              int _6860;
              bool _6861 = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx)->size(0)) <= _614);
              if (_6861)
              {
                _6860 = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx)->size(0));
              }
              else
              {
                _6860 = _614;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_617)->xx,(int)0,_615,(int)0,_6860);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _616)
      {
        {
        }
      }
      int _6862;
      bool _6863 = ((int)((initsol_xx)->size(0)) <= _614);
      if (_6863)
      {
        _6862 = (int)((initsol_xx)->size(0));
      }
      else
      {
        _6862 = _614;
      }
      int _618 = _6862;
      int _6864 = (int)0;
      int _6865 = _618;
      for (int _619 = _6864; _619 < _6865; ++_619)
      {
        {
          if (((*initsol_xx_flag)(_619)))
          {
            {
              _ptr__615[_619] = ((*initsol_xx)(_619));
            }
          }
          {}
        }
      }
      task_putxx_slice(_613,(int)0,_614,_615);
    }
  }
  {}
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(){
  return _pubthis->getDualSolutionStatus(solutionptr);
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(){
  return _pubthis->getProblemStatus(solutionptr);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(){
  return _pubthis->getPrimalSolutionStatus(solutionptr);
}
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _620,bool _621,bool _622){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _623 = nullptr;
  mosek::fusion::SolutionType _624 = _620;
  if ((_624 == ::mosek::fusion::SolutionType::Default))
  {
    {
      _624 = solutionptr;
    }
  }
  {}
  if ((_624 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _623 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _623 = sol_bas;
        }
      }
      else
      {
        {
          _623 = sol_itr;
        }
      }
    }
  }
  else if((_624 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _623 = sol_itr;
    }
  }
  else if((_624 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _623 = sol_bas;
    }
  }
  else if((_624 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _623 = sol_itg;
    }
  }
  {}
  if ((NULL == _623.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_622 || ((_621 && _623->isPrimalAcceptable(acceptable_sol)) || ((!_621) && _623->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _623;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _625 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _626 = mosek::fusion::p_SolutionStruct::_get_impl(_623)->pstatus;
          mosek::fusion::ProblemStatus _627 = mosek::fusion::p_SolutionStruct::_get_impl(_623)->probstatus;
          if ((!_621))
          {
            {
              _626 = mosek::fusion::p_SolutionStruct::_get_impl(_623)->dstatus;
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_626 == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_626 == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but at least "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_623 == sol_itr))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_623 == sol_bas))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_623 == sol_itg))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_627 == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_627 == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _625->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_625->toString());
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _628,bool _629){
  return __mosek_2fusion_2Model__get_sol_cache(_628,_629,false);
}
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int,1 > > _630,std::shared_ptr< monty::ndarray< double,1 > > _631){
  _checked_ptr_1<int> _ptr__630(_630 ? _630->raw() : nullptr, _630 ? _630->size(0) : 0);
  _checked_ptr_1<double> _ptr__631(_631 ? _631->raw() : nullptr, _631 ? _631->size(0) : 0);
  ensure_initsol_xx();
  int _6866 = (int)0;
  int _6867 = (int)((_630)->size(0));
  for (int _632 = _6866; _632 < _6867; ++_632)
  {
    {
      ((*initsol_xx)(_ptr__630[_632])) = _ptr__631[_632];
      ((*initsol_xx_flag)(_ptr__630[_632])) = true;
    }
  }
}
void mosek::fusion::p_Model::ensure_initsol_xx(){
  int _633 = (int)((natvarmap_idx)->size(0));
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_633)));
      std::vector<bool> _6868;
      for (int _634 = (int)0, _6869 = _633; _634 < _6869 ; ++_634)
      {
        _6868.push_back(false);
      }
      auto _6870 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6868.size()),_6868.begin(),_6868.end()));
      initsol_xx_flag = _6870;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _633))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _635 = initsol_xx;
      _checked_ptr_1<double> _ptr__635(_635 ? _635->raw() : nullptr,_635 ? _635->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _636 = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_633)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_633)));
      ::mosek::fusion::Utils::Tools::arraycopy(_635,(int)0,initsol_xx,(int)0,_633);
      int _6871 = (int)0;
      int _6872 = _633;
      for (int _637 = _6871; _637 < _6872; ++_637)
      {
        {
          ((*initsol_xx_flag)(_637)) = ((*_636)(_637));
        }
      }
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _638){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_638,false))->bars;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _639){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_639,false))->barx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _640){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_640,false))->y;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _641){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_641,true))->xc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx(mosek::fusion::SolutionType _642){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_642,false))->snx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _643){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_643,false))->suc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _644){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_644,false))->slc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _645){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_645,false))->sux;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _646){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_646,false))->slx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _647){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_647,true))->yx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _648){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_648,true))->xx;
}
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _649) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_649); }void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _649){
  solutionptr = _649;
}
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus(){
  return acceptable_sol;
}
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _650) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_650); }void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _650){
  acceptable_sol = _650;
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _651) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_651); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _651){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _652 = nullptr;
  if ((_651 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _652 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _652 = sol_bas;
        }
      }
      else
      {
        {
          _652 = sol_itr;
        }
      }
    }
  }
  else if((_651 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _652 = sol_itr;
    }
  }
  else if((_651 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _652 = sol_bas;
    }
  }
  else if((_651 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _652 = sol_itg;
    }
  }
  {}
  if ((NULL == _652.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_652)->probstatus;
    }
  }
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _653) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_653); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _653){
  return getSolutionStatus(_653,false);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _654) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_654); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _654){
  return getSolutionStatus(_654,true);
}
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _655,bool _656){
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _658 = __mosek_2fusion_2Model__get_sol_cache(_655,_656,true);
      if (_656)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_658)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_658)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _657)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _659,monty::rc_ptr< ::mosek::fusion::Expression > _660){
  _checked_ptr_1<int> _ptr__659(_659 ? _659->raw() : nullptr, _659 ? _659->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_660)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _661 = ws->popi32();
  int _662 = ws->popi32(_661);
  int _663 = ws->popi32();
  int _664 = ws->popi32();
  bool _665 = ((int)0 != ws->popi32());
  int _666 = ws->popi32(safe_add( _663,(int)1 ));
  int _6873;
  bool _6874 = _665;
  if (_6874)
  {
    _6873 = ws->popi64(_663);
  }
  else
  {
    _6873 = (int)0;
  }
  int _667 = _6873;
  int _668 = ws->popi64(_664);
  int _669 = ws->popf64(_663);
  int _670 = ws->popf64(_664);
  std::shared_ptr< monty::ndarray< int,1 > > _671 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__671(_671 ? _671->raw() : nullptr,_671 ? _671->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _672 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__672(_672 ? _672->raw() : nullptr,_672 ? _672->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _673 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__673(_673 ? _673->raw() : nullptr,_673 ? _673->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _674 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _663,(int)1 ))));
  _checked_ptr_1<long long> _ptr__674(_674 ? _674->raw() : nullptr,_674 ? _674->size(0) : 0);
  int _6875 = (int)0;
  int _6876 = _663;
  for (int _675 = _6875; _675 < _6876; ++_675)
  {
    {
      int _6877 = _ptr__671[safe_add( _666,_675 )];
      int _6878 = _ptr__671[safe_add( safe_add( _666,_675 ),(int)1 )];
      for (int _676 = _6877; _676 < _6878; ++_676)
      {
        {
          if ((_ptr__672[safe_add( _668,_676 )] > (int)0))
          {
            {
              ++ _ptr__674[safe_add( _675,(int)1 )];
            }
          }
          {}
        }
      }
    }
  }
  int _6879 = (int)0;
  int _6880 = _663;
  for (int _677 = _6879; _677 < _6880; ++_677)
  {
    {
      _ptr__674[safe_add( _677,(int)1 )] += _ptr__674[_677];
    }
  }
  long long _678 = _ptr__674[_663];
  std::shared_ptr< monty::ndarray< int,1 > > _679 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_678)));
  _checked_ptr_1<int> _ptr__679(_679 ? _679->raw() : nullptr,_679 ? _679->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _680 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_678)));
  _checked_ptr_1<double> _ptr__680(_680 ? _680->raw() : nullptr,_680 ? _680->size(0) : 0);
  int _681 = (int)0;
  int _6881 = (int)0;
  int _6882 = _663;
  for (int _682 = _6881; _682 < _6882; ++_682)
  {
    {
      int _6883 = _ptr__671[safe_add( _666,_682 )];
      int _6884 = _ptr__671[safe_add( safe_add( _666,_682 ),(int)1 )];
      for (int _683 = _6883; _683 < _6884; ++_683)
      {
        {
          if ((_ptr__672[safe_add( _668,_683 )] > (int)0))
          {
            {
              _ptr__679[_681] = (int)(_ptr__672[safe_add( _668,_683 )] - (int)1);
              _ptr__680[_681] = _ptr__673[safe_add( _670,_683 )];
              ++ _681;
            }
          }
          {}
        }
      }
    }
  }
  task_putarowlist(_659,_674,_679,_680);
  std::vector<int> _6885;
  for (int _684 = (int)0, _6886 = _663; _684 < _6886 ; ++_684)
  {
    _6885.push_back(bfixidx);
  }
  auto _6887 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6885.size()),_6885.begin(),_6885.end()));
  std::vector<double> _6888;
  for (int _685 = (int)0, _6889 = _663; _685 < _6889 ; ++_685)
  {
    _6888.push_back(_ptr__673[safe_add( _669,_685 )]);
  }
  auto _6890 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6888.size()),_6888.begin(),_6888.end()));
  task_putaijlist(_659,_6887,_6890,(long long)(_663));
  int _686 = (int)0;
  int _6891 = (int)0;
  int _6892 = _663;
  for (int _687 = _6891; _687 < _6892; ++_687)
  {
    {
      if ((((*natconmap_slackidx)(_ptr__659[_687])) > (int)0))
      {
        {
          ++ _686;
        }
      }
      {}
    }
  }
  if ((_686 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _688 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_686)));
      _checked_ptr_1<int> _ptr__688(_688 ? _688->raw() : nullptr,_688 ? _688->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _689 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_686)));
      _checked_ptr_1<int> _ptr__689(_689 ? _689->raw() : nullptr,_689 ? _689->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _690 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_686)));
      _checked_ptr_1<double> _ptr__690(_690 ? _690->raw() : nullptr,_690 ? _690->size(0) : 0);
      int _691 = (int)0;
      int _6893 = (int)0;
      int _6894 = _663;
      for (int _692 = _6893; _692 < _6894; ++_692)
      {
        {
          if ((((*natconmap_slackidx)(_ptr__659[_692])) > (int)0))
          {
            {
              _ptr__688[_691] = _ptr__659[_692];
              _ptr__689[_691] = (int)(((*natconmap_slackidx)(_ptr__659[_692])) - (int)1);
              _ptr__690[_691] = (-1.0);
              ++ _691;
            }
          }
          {}
        }
      }
      task_putaijlist(_688,_689,_690,(long long)(_686));
    }
  }
  {}
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _693,monty::rc_ptr< ::mosek::fusion::Expression > _694,std::shared_ptr< monty::ndarray< int,1 > > _695,bool _696){
  _checked_ptr_1<int> _ptr__693(_693 ? _693->raw() : nullptr, _693 ? _693->size(0) : 0);
  _checked_ptr_1<int> _ptr__695(_695 ? _695->raw() : nullptr, _695 ? _695->size(0) : 0);
  int _697 = safe_mul( (int)((_693)->size(0)),(int)((_695)->size(0)) );
  std::shared_ptr< monty::ndarray< double,1 > > _698 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_697)));
  _checked_ptr_1<double> _ptr__698(_698 ? _698->raw() : nullptr,_698 ? _698->size(0) : 0);
  std::vector<int> _6895;
  for (int _700 = (int)0, _6896 = (int)((_693)->size(0)); _700 < _6896 ; ++_700)
  {
    for (int _701 = (int)0, _6897 = (int)((_695)->size(0)); _701 < _6897 ; ++_701)
    {
      _6895.push_back(_ptr__693[_700]);
    }
  }
  auto _6898 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6895.size()),_6895.begin(),_6895.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _699 = _6898;
  _checked_ptr_1<int> _ptr__699(_699 ? _699->raw() : nullptr,_699 ? _699->size(0) : 0);
  std::vector<int> _6899;
  for (int _703 = (int)0, _6900 = (int)((_693)->size(0)); _703 < _6900 ; ++_703)
  {
    for (int _704 = (int)0, _6901 = (int)((_695)->size(0)); _704 < _6901 ; ++_704)
    {
      _6899.push_back(_ptr__695[_704]);
    }
  }
  auto _6902 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6899.size()),_6899.begin(),_6899.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _702 = _6902;
  _checked_ptr_1<int> _ptr__702(_702 ? _702->raw() : nullptr,_702 ? _702->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_694)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _705 = ws->popi32();
  int _706 = ws->popi32(_705);
  int _707 = ws->popi32();
  int _708 = ws->popi32();
  bool _709 = ((int)0 != ws->popi32());
  int _710 = ws->popi32(safe_add( _707,(int)1 ));
  int _6903;
  bool _6904 = _709;
  if (_6904)
  {
    _6903 = ws->popi64(_707);
  }
  else
  {
    _6903 = (int)0;
  }
  int _711 = _6903;
  int _712 = ws->popi64(_708);
  int _713 = ws->popf64(_707);
  int _714 = ws->popf64(_708);
  std::shared_ptr< monty::ndarray< int,1 > > _715 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__715(_715 ? _715->raw() : nullptr,_715 ? _715->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _716 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__716(_716 ? _716->raw() : nullptr,_716 ? _716->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _717 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__717(_717 ? _717->raw() : nullptr,_717 ? _717->size(0) : 0);
  int _718 = (int)0;
  int _6905 = (int)0;
  int _6906 = _707;
  for (int _719 = _6905; _719 < _6906; ++_719)
  {
    {
      int _720 = _ptr__715[safe_add( _710,_719 )];
      int _721 = _ptr__715[safe_add( safe_add( _710,_719 ),(int)1 )];
      int _722 = _720;
      int _723 = (int)0;
      while ( ((_723 < (int)((_695)->size(0))) && (_722 < _721)) )
      {
        {
          if ((_ptr__695[_723] < (_ptr__716[safe_add( _712,_722 )] - (int)1)))
          {
            {
              ++ _723;
            }
          }
          else if((_ptr__695[_723] > (_ptr__716[safe_add( _712,_722 )] - (int)1)))
          {
            {
              ++ _722;
            }
          }
          else
          {
            {
              _ptr__698[safe_add( _718,_723 )] = _ptr__717[safe_add( _714,_722 )];
              ++ _723;
              ++ _722;
            }
          }
        }
      }
      _718 += (int)((_695)->size(0));
    }
  }
  task_putaijlist(_699,_702,_698,(long long)(_697));
  if (_696)
  {
    {
      std::vector<int> _6907;
      for (int _724 = (int)0, _6908 = _707; _724 < _6908 ; ++_724)
      {
        _6907.push_back(bfixidx);
      }
      auto _6909 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6907.size()),_6907.begin(),_6907.end()));
      std::vector<double> _6910;
      for (int _725 = (int)0, _6911 = _707; _725 < _6911 ; ++_725)
      {
        _6910.push_back(_ptr__717[safe_add( _713,_725 )]);
      }
      auto _6912 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6910.size()),_6910.begin(),_6910.end()));
      task_putaijlist(_693,_6909,_6912,(long long)(_707));
    }
  }
  {}
}
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _726,monty::rc_ptr< ::mosek::fusion::Variable > _727) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_726,_727); }void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _726,monty::rc_ptr< ::mosek::fusion::Variable > _727){
  if ((_726->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  int _728 = _727->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _729 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_728)));
  _checked_ptr_1<long long> _ptr__729(_729 ? _729->raw() : nullptr,_729 ? _729->size(0) : 0);
  if ((_728 < _727->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _730 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_728)));
      _checked_ptr_1<long long> _ptr__730(_730 ? _730->raw() : nullptr,_730 ? _730->size(0) : 0);
      _727->inst((int)0,_730,(int)0,_729);
    }
  }
  else
  {
    {
      _727->inst((int)0,_729);
    }
  }
  int _6913 = (int)0;
  int _6914 = _728;
  for (int _731 = _6913; _731 < _6914; ++_731)
  {
    {
      if ((_ptr__729[_731] < (int)0))
      {
        {
          throw ::mosek::fusion::UnimplementedError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _732 = true;
  int _6915 = (int)0;
  int _6916 = (_728 - (int)1);
  for (int _733 = _6915; _733 < _6916; ++_733)
  {
    {
      _732 = (_732 && (_ptr__729[_733] < _ptr__729[(_733 - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _734 = nullptr;
  _checked_ptr_1<int> _ptr__734(_734 ? _734->raw() : nullptr,_734 ? _734->size(0) : 0);
  if (_732)
  {
    {
      std::vector<int> _6917;
      for (int _735 = (int)0, _6918 = _728; _735 < _6918 ; ++_735)
      {
        _6917.push_back((int)(_ptr__729[_735] - (int)1));
      }
      auto _6919 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6917.size()),_6917.begin(),_6917.end()));
      _734 = _6919;
      _ptr__734.update(_734 ? _734->raw() : nullptr, _734 ? _734->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<long long> _6920;
      for (int _737 = (-(int)1), _6921 = _728; _737 < _6921 ; ++_737)
      {
        _6920.push_back(_737);
      }
      auto _6922 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6920.size()),_6920.begin(),_6920.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _736 = _6922;
      _checked_ptr_1<long long> _ptr__736(_736 ? _736->raw() : nullptr,_736 ? _736->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_736,_729,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_728));
      std::vector<int> _6923;
      for (int _738 = (int)0, _6924 = _728; _738 < _6924 ; ++_738)
      {
        _6923.push_back((int)(_ptr__729[_ptr__736[_738]] - (int)1));
      }
      auto _6925 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6923.size()),_6923.begin(),_6923.end()));
      _734 = _6925;
      _ptr__734.update(_734 ? _734->raw() : nullptr, _734 ? _734->size(0) : 0);
    }
  }
  int _739 = (int)((_734)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _740 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_739)));
  _checked_ptr_1<double> _ptr__740(_740 ? _740->raw() : nullptr,_740 ? _740->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _741 = _734;
  _checked_ptr_1<int> _ptr__741(_741 ? _741->raw() : nullptr,_741 ? _741->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_726)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  int _742 = ws->popi32();
  int _743 = ws->popi32(_742);
  int _744 = ws->popi32();
  int _745 = ws->popi32();
  bool _746 = ((int)0 != ws->popi32());
  int _747 = ws->popi32(safe_add( _744,(int)1 ));
  int _6926;
  bool _6927 = _746;
  if (_6927)
  {
    _6926 = ws->popi64(_744);
  }
  else
  {
    _6926 = (int)0;
  }
  int _748 = _6926;
  int _749 = ws->popi64(_745);
  int _750 = ws->popf64(_744);
  int _751 = ws->popf64(_745);
  std::shared_ptr< monty::ndarray< int,1 > > _752 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__752(_752 ? _752->raw() : nullptr,_752 ? _752->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _753 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__753(_753 ? _753->raw() : nullptr,_753 ? _753->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _754 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__754(_754 ? _754->raw() : nullptr,_754 ? _754->size(0) : 0);
  int _755 = (int)0;
  int _6928 = (int)0;
  int _6929 = _744;
  for (int _756 = _6928; _756 < _6929; ++_756)
  {
    {
      int _757 = _ptr__752[safe_add( _747,_756 )];
      int _758 = _ptr__752[safe_add( safe_add( _747,_756 ),(int)1 )];
      int _759 = _757;
      int _760 = (int)0;
      while ( ((_760 < (int)((_734)->size(0))) && (_759 < _758)) )
      {
        {
          if ((_ptr__734[_760] < (_ptr__753[safe_add( _749,_759 )] - (int)1)))
          {
            {
              ++ _760;
            }
          }
          else if((_ptr__734[_760] > (_ptr__753[safe_add( _749,_759 )] - (int)1)))
          {
            {
              ++ _759;
            }
          }
          else
          {
            {
              _ptr__740[safe_add( _755,_760 )] = _ptr__754[safe_add( _751,_759 )];
              ++ _760;
              ++ _759;
            }
          }
        }
      }
      _755 += (int)((_734)->size(0));
    }
  }
  task_putclist(_741,_740);
}
void mosek::fusion::p_Model::objective_(const std::string & _761,mosek::fusion::ObjectiveSense _762,monty::rc_ptr< ::mosek::fusion::Expression > _763){
  task_putobjectivename(_761);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _764 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _765 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_763)).as<::mosek::fusion::Expression>())->eval(_764,_765,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _766 = mosek::fusion::p_WorkStack::_get_impl(_764)->i32;
  _checked_ptr_1<int> _ptr__766(_766 ? _766->raw() : nullptr,_766 ? _766->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _767 = mosek::fusion::p_WorkStack::_get_impl(_764)->i64;
  _checked_ptr_1<long long> _ptr__767(_767 ? _767->raw() : nullptr,_767 ? _767->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _768 = mosek::fusion::p_WorkStack::_get_impl(_764)->f64;
  _checked_ptr_1<double> _ptr__768(_768 ? _768->raw() : nullptr,_768 ? _768->size(0) : 0);
  int _769 = _764->popi32();
  int _770 = (int)1;
  int _6930 = (int)0;
  int _6931 = _769;
  for (int _771 = _6930; _771 < _6931; ++_771)
  {
    {
      _769 *= _764->popi32();
    }
  }
  if ((_770 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  int _772 = _764->popi32();
  if ((_772 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int _773 = _764->popi32();
  bool _774 = (_764->popi32() != (int)0);
  int _775 = _764->popi32(safe_add( _772,(int)1 ));
  int _776 = _764->popi64(_773);
  int _777 = _764->popf64(_772);
  int _778 = _764->popf64(_773);
  int _779 = (int)0;
  int _780 = (int)0;
  int _6932 = (int)0;
  int _6933 = _773;
  for (int _781 = _6932; _781 < _6933; ++_781)
  {
    {
      if ((_ptr__767[safe_add( _776,_781 )] < (int)0))
      {
        {
          ++ _780;
        }
      }
      else if((_ptr__767[safe_add( _776,_781 )] > (int)0))
      {
        {
          ++ _779;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _782 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_779)));
  _checked_ptr_1<int> _ptr__782(_782 ? _782->raw() : nullptr,_782 ? _782->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _783 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_779)));
  _checked_ptr_1<double> _ptr__783(_783 ? _783->raw() : nullptr,_783 ? _783->size(0) : 0);
  {
    int _784 = (int)0;
    int _6934 = (int)0;
    int _6935 = _773;
    for (int _785 = _6934; _785 < _6935; ++_785)
    {
      {
        if ((_ptr__767[safe_add( _776,_785 )] > (int)0))
        {
          {
            _ptr__782[_784] = (int)(_ptr__767[safe_add( _776,_785 )] - (int)1);
            _ptr__783[_784] = _ptr__768[safe_add( _778,_785 )];
            ++ _784;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_762 == ::mosek::fusion::ObjectiveSense::Maximize),_782,_783,_ptr__768[_777]);
  if ((_780 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _786 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_780)));
      _checked_ptr_1<int> _ptr__786(_786 ? _786->raw() : nullptr,_786 ? _786->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _787 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_780)));
      _checked_ptr_1<int> _ptr__787(_787 ? _787->raw() : nullptr,_787 ? _787->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _788 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_780)));
      _checked_ptr_1<int> _ptr__788(_788 ? _788->raw() : nullptr,_788 ? _788->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _789 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_780)));
      _checked_ptr_1<double> _ptr__789(_789 ? _789->raw() : nullptr,_789 ? _789->size(0) : 0);
      int _6936 = (int)0;
      int _6937 = _780;
      for (int _790 = _6936; _790 < _6937; ++_790)
      {
        {
          long long _791 = (-safe_add( _ptr__767[safe_add( _776,_790 )],(int)1 ));
          _ptr__786[_790] = ((*natbarvar_idx)(_791));
          _ptr__787[_790] = ((*natbarvar_i)(_791));
          _ptr__788[_790] = ((*natbarvar_j)(_791));
          double _6938;
          bool _6939 = (_ptr__787[_790] == _ptr__788[_790]);
          if (_6939)
          {
            _6938 = _ptr__768[safe_add( _778,_790 )];
          }
          else
          {
            _6938 = (0.5 * _ptr__768[safe_add( _778,_790 )]);
          }
          _ptr__789[_790] = _6938;
        }
      }
      task_putbarc(_786,_787,_788,_789);
    }
  }
  {}
}
void mosek::fusion::Model :: objective(double _792) { mosek::fusion::p_Model::_get_impl(this)->objective(_792); }void mosek::fusion::p_Model::objective(double _792){
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_792));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _793,double _794) { mosek::fusion::p_Model::_get_impl(this)->objective(_793,_794); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _793,double _794){
  objective_(std::string (""),_793,::mosek::fusion::p_Expr::constTerm(_794));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _795,monty::rc_ptr< ::mosek::fusion::Expression > _796) { mosek::fusion::p_Model::_get_impl(this)->objective(_795,_796); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _795,monty::rc_ptr< ::mosek::fusion::Expression > _796){
  objective_(std::string (""),_795,_796);
}
void mosek::fusion::Model :: objective(const std::string & _797,double _798) { mosek::fusion::p_Model::_get_impl(this)->objective(_797,_798); }void mosek::fusion::p_Model::objective(const std::string & _797,double _798){
  objective_(_797,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_798));
}
void mosek::fusion::Model :: objective(const std::string & _799,mosek::fusion::ObjectiveSense _800,double _801) { mosek::fusion::p_Model::_get_impl(this)->objective(_799,_800,_801); }void mosek::fusion::p_Model::objective(const std::string & _799,mosek::fusion::ObjectiveSense _800,double _801){
  objective_(_799,_800,::mosek::fusion::p_Expr::constTerm(_801));
}
void mosek::fusion::Model :: objective(const std::string & _802,mosek::fusion::ObjectiveSense _803,monty::rc_ptr< ::mosek::fusion::Expression > _804) { mosek::fusion::p_Model::_get_impl(this)->objective(_802,_803,_804); }void mosek::fusion::p_Model::objective(const std::string & _802,mosek::fusion::ObjectiveSense _803,monty::rc_ptr< ::mosek::fusion::Expression > _804){
  objective_(_802,_803,_804);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _805,monty::rc_ptr< ::mosek::fusion::ConeDomain > _806) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_805,_806); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _805,monty::rc_ptr< ::mosek::fusion::ConeDomain > _806) { return __mosek_2fusion_2Model__constraint(_805,_806); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _805,monty::rc_ptr< ::mosek::fusion::ConeDomain > _806){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_805,_806);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _807,monty::rc_ptr< ::mosek::fusion::Expression > _808,monty::rc_ptr< ::mosek::fusion::ConeDomain > _809) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_807,_808,_809); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _807,monty::rc_ptr< ::mosek::fusion::Expression > _808,monty::rc_ptr< ::mosek::fusion::ConeDomain > _809) { return __mosek_2fusion_2Model__constraint(_807,_808,_809); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _807,monty::rc_ptr< ::mosek::fusion::Expression > _808,monty::rc_ptr< ::mosek::fusion::ConeDomain > _809){
  return __mosek_2fusion_2Model__constraint_(_807,_808,_809);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::RangeDomain > _811) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_810,_811); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::RangeDomain > _811) { return __mosek_2fusion_2Model__constraint(_810,_811); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _810,monty::rc_ptr< ::mosek::fusion::RangeDomain > _811){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_810,_811);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::RangeDomain > _814) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_812,_813,_814); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::RangeDomain > _814) { return __mosek_2fusion_2Model__constraint(_812,_813,_814); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _812,monty::rc_ptr< ::mosek::fusion::Expression > _813,monty::rc_ptr< ::mosek::fusion::RangeDomain > _814){
  return __mosek_2fusion_2Model__constraint_(_812,_813,_814);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::LinearDomain > _816) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_815,_816); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::LinearDomain > _816) { return __mosek_2fusion_2Model__constraint(_815,_816); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _815,monty::rc_ptr< ::mosek::fusion::LinearDomain > _816){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_815,_816);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::LinearDomain > _819) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_817,_818,_819); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::LinearDomain > _819) { return __mosek_2fusion_2Model__constraint(_817,_818,_819); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _817,monty::rc_ptr< ::mosek::fusion::Expression > _818,monty::rc_ptr< ::mosek::fusion::LinearDomain > _819){
  return __mosek_2fusion_2Model__constraint_(_817,_818,_819);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _821) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_820,_821); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _821) { return __mosek_2fusion_2Model__constraint(_820,_821); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _820,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _821){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_820,_821);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _824) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_822,_823,_824); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _824) { return __mosek_2fusion_2Model__constraint(_822,_823,_824); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _822,monty::rc_ptr< ::mosek::fusion::Expression > _823,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _824){
  return __mosek_2fusion_2Model__constraint_(_822,_823,_824);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::PSDDomain > _826) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_825,_826); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::PSDDomain > _826) { return __mosek_2fusion_2Model__constraint(_825,_826); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _825,monty::rc_ptr< ::mosek::fusion::PSDDomain > _826){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_825,_826);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::PSDDomain > _829) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_827,_828,_829); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::PSDDomain > _829) { return __mosek_2fusion_2Model__constraint(_827,_828,_829); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _827,monty::rc_ptr< ::mosek::fusion::Expression > _828,monty::rc_ptr< ::mosek::fusion::PSDDomain > _829){
  return __mosek_2fusion_2Model__constraint_(_827,_828,_829);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _830) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_830); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _830) { return __mosek_2fusion_2Model__variable(_830); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _830){
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_830)->shape,_830);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _831,int _832,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _833) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_831,_832,_833); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _831,int _832,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _833) { return __mosek_2fusion_2Model__variable(_831,_832,_833); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _831,int _832,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _833){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_831),(int)(_831),(int)(_832)}),_833);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _834,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_834,_835); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _834,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835) { return __mosek_2fusion_2Model__variable(_834,_835); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _834,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _835){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_834),(int)(_834)}),_835);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _836,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _837) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_836,_837); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _836,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _837) { return __mosek_2fusion_2Model__variable(_836,_837); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _836,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _837){
  return __mosek_2fusion_2Model__variable_(_836,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_837);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _838,int _839,int _840,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _841) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_838,_839,_840,_841); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _838,int _839,int _840,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _841) { return __mosek_2fusion_2Model__variable(_838,_839,_840,_841); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _838,int _839,int _840,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _841){
  return __mosek_2fusion_2Model__variable_(_838,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_839),(int)(_839),(int)(_840)}),_841);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _842,int _843,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _844) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_842,_843,_844); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _842,int _843,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _844) { return __mosek_2fusion_2Model__variable(_842,_843,_844); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _842,int _843,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _844){
  return __mosek_2fusion_2Model__variable_(_842,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_843),(int)(_843)}),_844);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _845,std::shared_ptr< monty::ndarray< int,1 > > _846,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _847) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_845,_846,_847); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _845,std::shared_ptr< monty::ndarray< int,1 > > _846,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _847) { return __mosek_2fusion_2Model__variable(_845,_846,_847); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _845,std::shared_ptr< monty::ndarray< int,1 > > _846,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _847){
  _checked_ptr_1<int> _ptr__846(_846 ? _846->raw() : nullptr, _846 ? _846->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_845,_846,_847);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _848) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_848); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _848) { return __mosek_2fusion_2Model__variable(_848); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _848){
  return (__mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_848)->shape,_848)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _849,int _850,monty::rc_ptr< ::mosek::fusion::PSDDomain > _851) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_849,_850,_851); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _849,int _850,monty::rc_ptr< ::mosek::fusion::PSDDomain > _851) { return __mosek_2fusion_2Model__variable(_849,_850,_851); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _849,int _850,monty::rc_ptr< ::mosek::fusion::PSDDomain > _851){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_849),(int)(_849),(int)(_850)}),_851)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _852,monty::rc_ptr< ::mosek::fusion::PSDDomain > _853) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_852,_853); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _852,monty::rc_ptr< ::mosek::fusion::PSDDomain > _853) { return __mosek_2fusion_2Model__variable(_852,_853); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _852,monty::rc_ptr< ::mosek::fusion::PSDDomain > _853){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_852),(int)(_852)}),_853)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _854,monty::rc_ptr< ::mosek::fusion::PSDDomain > _855) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_854,_855); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _854,monty::rc_ptr< ::mosek::fusion::PSDDomain > _855) { return __mosek_2fusion_2Model__variable(_854,_855); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _854,monty::rc_ptr< ::mosek::fusion::PSDDomain > _855){
  return (__mosek_2fusion_2Model__variable_(_854,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_855)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _856,int _857,int _858,monty::rc_ptr< ::mosek::fusion::PSDDomain > _859) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_856,_857,_858,_859); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _856,int _857,int _858,monty::rc_ptr< ::mosek::fusion::PSDDomain > _859) { return __mosek_2fusion_2Model__variable(_856,_857,_858,_859); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _856,int _857,int _858,monty::rc_ptr< ::mosek::fusion::PSDDomain > _859){
  return (__mosek_2fusion_2Model__variable_(_856,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_857),(int)(_857),(int)(_858)}),_859)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _860,int _861,monty::rc_ptr< ::mosek::fusion::PSDDomain > _862) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_860,_861,_862); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _860,int _861,monty::rc_ptr< ::mosek::fusion::PSDDomain > _862) { return __mosek_2fusion_2Model__variable(_860,_861,_862); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _860,int _861,monty::rc_ptr< ::mosek::fusion::PSDDomain > _862){
  return (__mosek_2fusion_2Model__variable_(_860,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_861),(int)(_861)}),_862)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _863,std::shared_ptr< monty::ndarray< int,1 > > _864,monty::rc_ptr< ::mosek::fusion::PSDDomain > _865) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_863,_864,_865); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _863,std::shared_ptr< monty::ndarray< int,1 > > _864,monty::rc_ptr< ::mosek::fusion::PSDDomain > _865) { return __mosek_2fusion_2Model__variable(_863,_864,_865); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _863,std::shared_ptr< monty::ndarray< int,1 > > _864,monty::rc_ptr< ::mosek::fusion::PSDDomain > _865){
  _checked_ptr_1<int> _ptr__864(_864 ? _864->raw() : nullptr, _864 ? _864->size(0) : 0);
  return (__mosek_2fusion_2Model__variable_(_863,_864,_865)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _866) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_866); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _866) { return __mosek_2fusion_2Model__variable(_866); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _866){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_866);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _867) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_867); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _867) { return __mosek_2fusion_2Model__variable(_867); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _867){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_867);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _868) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_868); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _868) { return __mosek_2fusion_2Model__variable(_868); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _868){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_868);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::ConeDomain > _870) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_869,_870); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::ConeDomain > _870) { return __mosek_2fusion_2Model__variable(_869,_870); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _869,monty::rc_ptr< ::mosek::fusion::ConeDomain > _870){
  _checked_ptr_1<int> _ptr__869(_869 ? _869->raw() : nullptr, _869 ? _869->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_869,_870);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _871,monty::rc_ptr< ::mosek::fusion::RangeDomain > _872) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_871,_872); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _871,monty::rc_ptr< ::mosek::fusion::RangeDomain > _872) { return __mosek_2fusion_2Model__variable(_871,_872); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _871,monty::rc_ptr< ::mosek::fusion::RangeDomain > _872){
  _checked_ptr_1<int> _ptr__871(_871 ? _871->raw() : nullptr, _871 ? _871->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_871,_872);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _873,monty::rc_ptr< ::mosek::fusion::LinearDomain > _874) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_873,_874); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _873,monty::rc_ptr< ::mosek::fusion::LinearDomain > _874) { return __mosek_2fusion_2Model__variable(_873,_874); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _873,monty::rc_ptr< ::mosek::fusion::LinearDomain > _874){
  _checked_ptr_1<int> _ptr__873(_873 ? _873->raw() : nullptr, _873 ? _873->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_873,_874);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _875) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_875); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _875) { return __mosek_2fusion_2Model__variable(_875); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _875){
  _checked_ptr_1<int> _ptr__875(_875 ? _875->raw() : nullptr, _875 ? _875->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_875,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _876,monty::rc_ptr< ::mosek::fusion::ConeDomain > _877) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_876,_877); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _876,monty::rc_ptr< ::mosek::fusion::ConeDomain > _877) { return __mosek_2fusion_2Model__variable(_876,_877); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _876,monty::rc_ptr< ::mosek::fusion::ConeDomain > _877){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_876)}),_877);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _878,monty::rc_ptr< ::mosek::fusion::RangeDomain > _879) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_878,_879); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _878,monty::rc_ptr< ::mosek::fusion::RangeDomain > _879) { return __mosek_2fusion_2Model__variable(_878,_879); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _878,monty::rc_ptr< ::mosek::fusion::RangeDomain > _879){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_878)}),_879);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _880,monty::rc_ptr< ::mosek::fusion::LinearDomain > _881) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_880,_881); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _880,monty::rc_ptr< ::mosek::fusion::LinearDomain > _881) { return __mosek_2fusion_2Model__variable(_880,_881); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _880,monty::rc_ptr< ::mosek::fusion::LinearDomain > _881){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_880)}),_881);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _882) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_882); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _882) { return __mosek_2fusion_2Model__variable(_882); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _882){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_882)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _883,monty::rc_ptr< ::mosek::fusion::ConeDomain > _884) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_883,_884); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _883,monty::rc_ptr< ::mosek::fusion::ConeDomain > _884) { return __mosek_2fusion_2Model__variable(_883,_884); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _883,monty::rc_ptr< ::mosek::fusion::ConeDomain > _884){
  return __mosek_2fusion_2Model__variable_(_883,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_884);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _885,monty::rc_ptr< ::mosek::fusion::RangeDomain > _886) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_885,_886); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _885,monty::rc_ptr< ::mosek::fusion::RangeDomain > _886) { return __mosek_2fusion_2Model__variable(_885,_886); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _885,monty::rc_ptr< ::mosek::fusion::RangeDomain > _886){
  return __mosek_2fusion_2Model__ranged_variable(_885,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_886);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _887,monty::rc_ptr< ::mosek::fusion::LinearDomain > _888) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_887,_888); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _887,monty::rc_ptr< ::mosek::fusion::LinearDomain > _888) { return __mosek_2fusion_2Model__variable(_887,_888); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _887,monty::rc_ptr< ::mosek::fusion::LinearDomain > _888){
  return __mosek_2fusion_2Model__variable_(_887,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_888);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _889,std::shared_ptr< monty::ndarray< int,1 > > _890,monty::rc_ptr< ::mosek::fusion::ConeDomain > _891) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_889,_890,_891); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _889,std::shared_ptr< monty::ndarray< int,1 > > _890,monty::rc_ptr< ::mosek::fusion::ConeDomain > _891) { return __mosek_2fusion_2Model__variable(_889,_890,_891); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _889,std::shared_ptr< monty::ndarray< int,1 > > _890,monty::rc_ptr< ::mosek::fusion::ConeDomain > _891){
  _checked_ptr_1<int> _ptr__890(_890 ? _890->raw() : nullptr, _890 ? _890->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_889,_890,_891);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _892,std::shared_ptr< monty::ndarray< int,1 > > _893,monty::rc_ptr< ::mosek::fusion::RangeDomain > _894) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_892,_893,_894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _892,std::shared_ptr< monty::ndarray< int,1 > > _893,monty::rc_ptr< ::mosek::fusion::RangeDomain > _894) { return __mosek_2fusion_2Model__variable(_892,_893,_894); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _892,std::shared_ptr< monty::ndarray< int,1 > > _893,monty::rc_ptr< ::mosek::fusion::RangeDomain > _894){
  _checked_ptr_1<int> _ptr__893(_893 ? _893->raw() : nullptr, _893 ? _893->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_892,_893,_894);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _895,std::shared_ptr< monty::ndarray< int,1 > > _896,monty::rc_ptr< ::mosek::fusion::LinearDomain > _897) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_895,_896,_897); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _895,std::shared_ptr< monty::ndarray< int,1 > > _896,monty::rc_ptr< ::mosek::fusion::LinearDomain > _897) { return __mosek_2fusion_2Model__variable(_895,_896,_897); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _895,std::shared_ptr< monty::ndarray< int,1 > > _896,monty::rc_ptr< ::mosek::fusion::LinearDomain > _897){
  _checked_ptr_1<int> _ptr__896(_896 ? _896->raw() : nullptr, _896 ? _896->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_895,_896,_897);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_898,_899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return __mosek_2fusion_2Model__variable(_898,_899); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899){
  _checked_ptr_1<int> _ptr__899(_899 ? _899->raw() : nullptr, _899 ? _899->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_898,_899,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _900,int _901,monty::rc_ptr< ::mosek::fusion::ConeDomain > _902) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_900,_901,_902); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _900,int _901,monty::rc_ptr< ::mosek::fusion::ConeDomain > _902) { return __mosek_2fusion_2Model__variable(_900,_901,_902); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _900,int _901,monty::rc_ptr< ::mosek::fusion::ConeDomain > _902){
  return __mosek_2fusion_2Model__variable_(_900,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_901)}),_902);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _903,int _904,monty::rc_ptr< ::mosek::fusion::RangeDomain > _905) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_903,_904,_905); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _903,int _904,monty::rc_ptr< ::mosek::fusion::RangeDomain > _905) { return __mosek_2fusion_2Model__variable(_903,_904,_905); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _903,int _904,monty::rc_ptr< ::mosek::fusion::RangeDomain > _905){
  return __mosek_2fusion_2Model__ranged_variable(_903,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_904)}),_905);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _906,int _907,monty::rc_ptr< ::mosek::fusion::LinearDomain > _908) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_906,_907,_908); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _906,int _907,monty::rc_ptr< ::mosek::fusion::LinearDomain > _908) { return __mosek_2fusion_2Model__variable(_906,_907,_908); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _906,int _907,monty::rc_ptr< ::mosek::fusion::LinearDomain > _908){
  return __mosek_2fusion_2Model__variable_(_906,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_907)}),_908);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _909,int _910) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_909,_910); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _909,int _910) { return __mosek_2fusion_2Model__variable(_909,_910); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _909,int _910){
  return __mosek_2fusion_2Model__variable_(_909,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_910)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _911) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_911); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _911) { return __mosek_2fusion_2Model__variable(_911); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _911){
  return __mosek_2fusion_2Model__variable_(_911,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _912,std::shared_ptr< monty::ndarray< int,1 > > _913,monty::rc_ptr< ::mosek::fusion::RangeDomain > _914){
  _checked_ptr_1<int> _ptr__913(_913 ? _913->raw() : nullptr, _913 ? _913->size(0) : 0);
  if ((((int)((_912).size()) > (int)0) && hasVariable(_912)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_912)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _6940;
  bool _6941 = (NULL != _913.get());
  if (_6941)
  {
    _6940 = _913;
  }
  else
  {
    _6940 = mosek::fusion::p_RangeDomain::_get_impl(_914)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _915 = _6940;
  _checked_ptr_1<int> _ptr__915(_915 ? _915->raw() : nullptr,_915 ? _915->size(0) : 0);
  if (((NULL != mosek::fusion::p_RangeDomain::_get_impl(_914)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_RangeDomain::_get_impl(_914)->shape,_915))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _915.get()))
  {
    {
      _915 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__915.update(_915 ? _915->raw() : nullptr, _915 ? _915->size(0) : 0);
    }
  }
  {}
  int _916 = (int)((_915)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _917 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_916)));
  _checked_ptr_1<int> _ptr__917(_917 ? _917->raw() : nullptr,_917 ? _917->size(0) : 0);
  if ((_916 > (int)0))
  {
    {
      _ptr__917[(_916 - (int)1)] = (int)1;
      int _6942 = (int)1;
      int _6943 = _916;
      for (int _918 = _6942; _918 < _6943; ++_918)
      {
        {
          _ptr__917[((_916 - _918) - (int)1)] = safe_mul( _ptr__917[(_916 - _918)],_ptr__915[(_916 - _918)] );
        }
      }
    }
  }
  {}
  int _919 = (int)1;
  int _6944 = (int)0;
  int _6945 = (int)((_915)->size(0));
  for (int _920 = _6944; _920 < _6945; ++_920)
  {
    {
      _919 *= _ptr__915[_920];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _921 = nullptr;
  _checked_ptr_1<long long> _ptr__921(_921 ? _921->raw() : nullptr,_921 ? _921->size(0) : 0);
  if ((NULL != _921.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(1)) != _916))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _921 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(0)))));
      _ptr__921.update(_921 ? _921->raw() : nullptr, _921 ? _921->size(0) : 0);
      int _6946 = (int)0;
      int _6947 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(0));
      for (int _922 = _6946; _922 < _6947; ++_922)
      {
        {
          int _6948 = (int)0;
          int _6949 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(1));
          for (int _923 = _6948; _923 < _6949; ++_923)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)(_922,_923)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)(_922,_923)) >= _ptr__915[_923])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          long long _924 = (int)0;
          int _6950 = (int)0;
          int _6951 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)->size(1));
          for (int _925 = _6950; _925 < _6951; ++_925)
          {
            {
              _924 += safe_mul( _ptr__917[_925],((*mosek::fusion::p_RangeDomain::_get_impl(_914)->sparsity)(_922,_925)) );
            }
          }
          _ptr__921[_922] = _924;
        }
      }
    }
  }
  {}
  int _6952;
  bool _6953 = (NULL != _921.get());
  if (_6953)
  {
    _6952 = (int)((_921)->size(0));
  }
  else
  {
    _6952 = _919;
  }
  int _926 = _6952;
  std::shared_ptr< monty::ndarray< double,1 > > _927;
  _checked_ptr_1<double> _ptr__927(_927 ? _927->raw() : nullptr,_927 ? _927->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _928;
  _checked_ptr_1<double> _ptr__928(_928 ? _928->raw() : nullptr,_928 ? _928->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_914)->scalable)
  {
    {
      std::vector<double> _6954;
      for (int _929 = (int)0, _6955 = _926; _929 < _6955 ; ++_929)
      {
        _6954.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_914)->lb)((int)0)));
      }
      auto _6956 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6954.size()),_6954.begin(),_6954.end()));
      _927 = _6956;
      _ptr__927.update(_927 ? _927->raw() : nullptr, _927 ? _927->size(0) : 0);
      std::vector<double> _6957;
      for (int _930 = (int)0, _6958 = _926; _930 < _6958 ; ++_930)
      {
        _6957.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_914)->ub)((int)0)));
      }
      auto _6959 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6957.size()),_6957.begin(),_6957.end()));
      _928 = _6959;
      _ptr__928.update(_928 ? _928->raw() : nullptr, _928 ? _928->size(0) : 0);
    }
  }
  else
  {
    {
      _927 = mosek::fusion::p_RangeDomain::_get_impl(_914)->lb;
      _ptr__927.update(_927 ? _927->raw() : nullptr, _927 ? _927->size(0) : 0);
      _928 = mosek::fusion::p_RangeDomain::_get_impl(_914)->ub;
      _ptr__928.update(_928 ? _928->raw() : nullptr, _928 ? _928->size(0) : 0);
    }
  }
  int _931 = natvarmap_alloc(_926);
  std::shared_ptr< monty::ndarray< int,1 > > _932 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_931))));
  _checked_ptr_1<int> _ptr__932(_932 ? _932->raw() : nullptr,_932 ? _932->size(0) : 0);
  natvarmap->get(_931,_932,(int)0);
  int _6960 = (int)0;
  int _6961 = _926;
  for (int _933 = _6960; _933 < _6961; ++_933)
  {
    {
      ((*natvarmap_idx)(_ptr__932[_933])) = _931;
    }
  }
  task_var_putboundlist_ra(_932,_927,_928);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _934 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_912,(long long)(_931),_915,_921,_932);
  if (mosek::fusion::p_RangeDomain::_get_impl(_914)->cardinal_flag)
  {
    {
      task_var_putintlist(_932);
    }
  }
  {}
  ((*vars)(_931)) = (_934).as<::mosek::fusion::ModelVariable>();
  if (((int)((_912).size()) > (int)0))
  {
    {
      var_map->setItem(_912,_931);
    }
  }
  {}
  return (_934).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _935,std::shared_ptr< monty::ndarray< int,1 > > _936,monty::rc_ptr< ::mosek::fusion::ConeDomain > _937){
  _checked_ptr_1<int> _ptr__936(_936 ? _936->raw() : nullptr, _936 ? _936->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6962;
  bool _6963 = (NULL != _936.get());
  if (_6963)
  {
    _6962 = _936;
  }
  else
  {
    _6962 = mosek::fusion::p_ConeDomain::_get_impl(_937)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _938 = _6962;
  _checked_ptr_1<int> _ptr__938(_938 ? _938->raw() : nullptr,_938 ? _938->size(0) : 0);
  if ((((int)((_935).size()) > (int)0) && hasVariable(_935)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_935)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((NULL == _938.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape"));
    }
  }
  else if(((NULL != mosek::fusion::p_ConeDomain::_get_impl(_937)->shape.get()) && (!::mosek::fusion::p_Set::match(_938,mosek::fusion::p_ConeDomain::_get_impl(_937)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  else if((_937->getAxis() >= (int)((_938)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension"));
    }
  }
  {}
  int _6964;
  bool _6965 = (NULL != mosek::fusion::p_ConeDomain::_get_impl(_937)->shape.get());
  if (_6965)
  {
    _6964 = _937->getAxis();
  }
  else
  {
    _6964 = ((int)((_938)->size(0)) - (int)1);
  }
  int _939 = _6964;
  int _940 = _ptr__938[_939];
  int _941 = (int)((_938)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _942 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_941)));
  _checked_ptr_1<int> _ptr__942(_942 ? _942->raw() : nullptr,_942 ? _942->size(0) : 0);
  _ptr__942[(_941 - (int)1)] = (int)1;
  int _6966 = (int)1;
  int _6967 = _941;
  for (int _943 = _6966; _943 < _6967; ++_943)
  {
    {
      _ptr__942[((_941 - _943) - (int)1)] = safe_mul( _ptr__942[(_941 - _943)],_ptr__938[(_941 - _943)] );
    }
  }
  int _944 = _ptr__938[(int)0];
  int _6968 = (int)1;
  int _6969 = (int)((_938)->size(0));
  for (int _945 = _6968; _945 < _6969; ++_945)
  {
    {
      _944 *= _ptr__938[_945];
    }
  }
  int _946 = (int)1;
  int _6970 = (int)0;
  int _6971 = _939;
  for (int _947 = _6970; _947 < _6971; ++_947)
  {
    {
      _946 *= _ptr__938[_947];
    }
  }
  int _948 = (int)1;
  int _6972 = safe_add( _939,(int)1 );
  int _6973 = _941;
  for (int _949 = _6972; _949 < _6973; ++_949)
  {
    {
      _948 *= _ptr__938[_949];
    }
  }
  int _950 = safe_mul( _946,_948 );
  if ((((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InQCone) && (_940 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_940 < (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_940 != (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_940 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_940 != (int)3)) || ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_940 < (int)2))))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));
    }
  }
  {}
  int _951 = natvarmap_alloc(_944);
  int _952 = natconemap_alloc(_950);
  ((*natvarmap_type)(_951)) = safe_add( _952,(int)6 );
  std::shared_ptr< monty::ndarray< int,1 > > _953 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_951))));
  _checked_ptr_1<int> _ptr__953(_953 ? _953->raw() : nullptr,_953 ? _953->size(0) : 0);
  natvarmap->get(_951,_953,(int)0);
  int _6974 = (int)0;
  int _6975 = _944;
  for (int _954 = _6974; _954 < _6975; ++_954)
  {
    {
      ((*natvarmap_idx)(_ptr__953[_954])) = _951;
    }
  }
  task_var_putboundlist_fr(_953);
  if (mosek::fusion::p_ConeDomain::_get_impl(_937)->int_flag)
  {
    {
      task_var_putintlist(_953);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _955 = _953;
  _checked_ptr_1<int> _ptr__955(_955 ? _955->raw() : nullptr,_955 ? _955->size(0) : 0);
  if ((_939 < ((int)((_938)->size(0)) - (int)1)))
  {
    {
      _955 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_953)->size(0)))));
      _ptr__955.update(_955 ? _955->raw() : nullptr, _955 ? _955->size(0) : 0);
      int _956 = (int)0;
      int _6976 = (int)0;
      int _6977 = _946;
      for (int _957 = _6976; _957 < _6977; ++_957)
      {
        {
          int _6978 = (int)0;
          int _6979 = _948;
          for (int _958 = _6978; _958 < _6979; ++_958)
          {
            {
              int _6980 = (int)0;
              int _6981 = _940;
              for (int _959 = _6980; _959 < _6981; ++_959)
              {
                {
                  _ptr__955[_956] = _ptr__953[safe_add( safe_mul( safe_add( safe_mul( _957,_940 ),_959 ),_948 ),_958 )];
                  ++ _956;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _960 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_950)));
  _checked_ptr_1<int> _ptr__960(_960 ? _960->raw() : nullptr,_960 ? _960->size(0) : 0);
  natconemap->get(_952,_960,(int)0);
  ((*natconemap_dim)(_952)) = _940;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_960,_940,_950,_955);
    }
  }
  else
  {
    {
      if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
      {
        {
          task_put_rquadcones(_960,_940,_950,_955);
        }
      }
      else
      {
        {
          if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPExpCone))
          {
            {
              task_put_pexpcones(_960,_940,_950,_955);
            }
          }
          else
          {
            {
              if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InPPowCone))
              {
                {
                  std::vector<double> _6982;
                  for (int _961 = (int)0, _6983 = _950; _961 < _6983 ; ++_961)
                  {
                    _6982.push_back(mosek::fusion::p_ConeDomain::_get_impl(_937)->alpha);
                  }
                  auto _6984 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6982.size()),_6982.begin(),_6982.end()));
                  task_put_ppowcones(_960,_940,_950,_955,_6984);
                }
              }
              else
              {
                {
                  if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDExpCone))
                  {
                    {
                      task_put_dexpcones(_960,_940,_950,_955);
                    }
                  }
                  else
                  {
                    {
                      if ((mosek::fusion::p_ConeDomain::_get_impl(_937)->key == ::mosek::fusion::QConeKey::InDPowCone))
                      {
                        {
                          std::vector<double> _6985;
                          for (int _962 = (int)0, _6986 = _950; _962 < _6986 ; ++_962)
                          {
                            _6985.push_back(mosek::fusion::p_ConeDomain::_get_impl(_937)->alpha);
                          }
                          auto _6987 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6985.size()),_6985.begin(),_6985.end()));
                          task_put_dpowcones(_960,_940,_950,_955,_6987);
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _6988 = (int)0;
  int _6989 = (int)((_960)->size(0));
  for (int _963 = _6988; _963 < _6989; ++_963)
  {
    {
      task_cone_name(_ptr__960[_963],::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__960[_963])->toString());
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _964 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_935,_951,_938,_953);
  ((*vars)(_951)) = (_964).as<::mosek::fusion::ModelVariable>();
  if (((int)((_935).size()) > (int)0))
  {
    {
      var_map->setItem(_935,_951);
    }
  }
  {}
  return (_964).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _965,std::shared_ptr< monty::ndarray< int,1 > > _966,monty::rc_ptr< ::mosek::fusion::LinearDomain > _967){
  _checked_ptr_1<int> _ptr__966(_966 ? _966->raw() : nullptr, _966 ? _966->size(0) : 0);
  if ((((int)((_965).size()) > (int)0) && hasVariable(_965)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_965)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _6990;
  bool _6991 = (NULL != _966.get());
  if (_6991)
  {
    _6990 = _966;
  }
  else
  {
    _6990 = mosek::fusion::p_LinearDomain::_get_impl(_967)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _968 = _6990;
  _checked_ptr_1<int> _ptr__968(_968 ? _968->raw() : nullptr,_968 ? _968->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_967)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinearDomain::_get_impl(_967)->shape,_968))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _968.get()))
  {
    {
      _968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__968.update(_968 ? _968->raw() : nullptr, _968 ? _968->size(0) : 0);
    }
  }
  {}
  int _969 = (int)((_968)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _970 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_969)));
  _checked_ptr_1<int> _ptr__970(_970 ? _970->raw() : nullptr,_970 ? _970->size(0) : 0);
  if ((_969 > (int)0))
  {
    {
      _ptr__970[(_969 - (int)1)] = (int)1;
      int _6992 = (int)1;
      int _6993 = _969;
      for (int _971 = _6992; _971 < _6993; ++_971)
      {
        {
          _ptr__970[((_969 - _971) - (int)1)] = safe_mul( _ptr__970[(_969 - _971)],_ptr__968[(_969 - _971)] );
        }
      }
    }
  }
  {}
  int _972 = (int)1;
  int _6994 = (int)0;
  int _6995 = (int)((_968)->size(0));
  for (int _973 = _6994; _973 < _6995; ++_973)
  {
    {
      _972 *= _ptr__968[_973];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _974 = nullptr;
  _checked_ptr_1<long long> _ptr__974(_974 ? _974->raw() : nullptr,_974 ? _974->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _975 = nullptr;
  _checked_ptr_1<int> _ptr__975(_975 ? _975->raw() : nullptr,_975 ? _975->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_967)->empty)
  {
    {
      _974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
      _ptr__974.update(_974 ? _974->raw() : nullptr, _974 ? _974->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity)->size(1)) != _969))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int _976 = (int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity)->size(0));
      _974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_976)));
      _ptr__974.update(_974 ? _974->raw() : nullptr, _974 ? _974->size(0) : 0);
      {
        bool _977 = false;
        std::shared_ptr< monty::ndarray< int,2 > > _978 = mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity;
        int _6996 = (int)0;
        int _6997 = _976;
        for (int _979 = _6996; _979 < _6997; ++_979)
        {
          {
            int _6998 = (int)0;
            int _6999 = (int)((_978)->size(1));
            for (int _980 = _6998; _980 < _6999; ++_980)
            {
              {
                _977 = (_977 || ((((*_978)(_979,_980)) < (int)0) || (((*_978)(_979,_980)) >= _ptr__968[_980])));
              }
            }
            if ((!_977))
            {
              {
                long long _981 = (int)0;
                int _7000 = (int)0;
                int _7001 = (int)((_978)->size(1));
                for (int _982 = _7000; _982 < _7001; ++_982)
                {
                  {
                    _981 += safe_mul( _ptr__970[_982],((*_978)(_979,_982)) );
                  }
                }
                _ptr__974[_979] = _981;
              }
            }
            {}
          }
        }
        if (_977)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int,2 > > _983 = mosek::fusion::p_LinearDomain::_get_impl(_967)->sparsity;
      int _984 = (int)0;
      int _7002 = (int)0;
      int _7003 = _969;
      for (int _985 = _7002; _985 < _7003; ++_985)
      {
        {
          if ((_984 < _ptr__968[_985]))
          {
            {
              _984 = _ptr__968[_985];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _986 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_976)));
      _checked_ptr_1<int> _ptr__986(_986 ? _986->raw() : nullptr,_986 ? _986->size(0) : 0);
      int _7004 = (int)0;
      int _7005 = _976;
      for (int _987 = _7004; _987 < _7005; ++_987)
      {
        {
          _ptr__986[_987] = _987;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_976)));
      _checked_ptr_1<int> _ptr__988(_988 ? _988->raw() : nullptr,_988 ? _988->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _989 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _984,(int)1 ))));
      _checked_ptr_1<int> _ptr__989(_989 ? _989->raw() : nullptr,_989 ? _989->size(0) : 0);
      int _7006 = (int)0;
      int _7007 = _969;
      for (int _990 = _7006; _990 < _7007; ++_990)
      {
        {
          {
            int _991 = ((_969 - _990) - (int)1);
            int _7008 = (int)0;
            int _7009 = safe_add( _ptr__968[_991],(int)1 );
            for (int _992 = _7008; _992 < _7009; ++_992)
            {
              {
                _ptr__989[_992] = (int)0;
              }
            }
            int _7010 = (int)0;
            int _7011 = _976;
            for (int _993 = _7010; _993 < _7011; ++_993)
            {
              {
                ++ _ptr__989[safe_add( ((*_983)(_993,_991)),(int)1 )];
              }
            }
            int _7012 = (int)0;
            int _7013 = _ptr__968[_991];
            for (int _994 = _7012; _994 < _7013; ++_994)
            {
              {
                _ptr__989[safe_add( _994,(int)1 )] += _ptr__989[_994];
              }
            }
            int _7014 = (int)0;
            int _7015 = _976;
            for (int _995 = _7014; _995 < _7015; ++_995)
            {
              {
                int _996 = _ptr__986[_995];
                _ptr__988[_ptr__989[((*_983)(_996,_991))]] = _996;
                ++ _ptr__989[((*_983)(_996,_991))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _997 = _986;
          _checked_ptr_1<int> _ptr__997(_997 ? _997->raw() : nullptr,_997 ? _997->size(0) : 0);
          _986 = _988;
          _ptr__986.update(_986 ? _986->raw() : nullptr, _986 ? _986->size(0) : 0);
          _988 = _997;
          _ptr__988.update(_988 ? _988->raw() : nullptr, _988 ? _988->size(0) : 0);
        }
      }
      int _7016 = (int)0;
      int _7017 = _976;
      for (int _998 = _7016; _998 < _7017; ++_998)
      {
        {
          int _999 = _ptr__986[_998];
          long long _1000 = (int)0;
          int _7018 = (int)0;
          int _7019 = _969;
          for (int _1001 = _7018; _1001 < _7019; ++_1001)
          {
            {
              _1000 += safe_mul( _ptr__970[_1001],((*_983)(_999,_1001)) );
            }
          }
          _ptr__974[_998] = _1000;
        }
      }
    }
  }
  {}
  int _7020;
  bool _7021 = (NULL != _974.get());
  if (_7021)
  {
    _7020 = (int)((_974)->size(0));
  }
  else
  {
    _7020 = _972;
  }
  int _1002 = _7020;
  std::shared_ptr< monty::ndarray< double,1 > > _1003 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1002)));
  _checked_ptr_1<double> _ptr__1003(_1003 ? _1003->raw() : nullptr,_1003 ? _1003->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd)->size(0)) == (int)1))
      {
        {
          int _7022 = (int)0;
          int _7023 = _1002;
          for (int _1004 = _7022; _1004 < _7023; ++_1004)
          {
            {
              _ptr__1003[_1004] = ((*mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd)->size(0)) == _1002))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_967)->bnd,(int)0,_1003,(int)0,_1002);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  int _1005 = natvarmap_alloc(_1002);
  std::shared_ptr< monty::ndarray< int,1 > > _1006 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1005))));
  _checked_ptr_1<int> _ptr__1006(_1006 ? _1006->raw() : nullptr,_1006 ? _1006->size(0) : 0);
  natvarmap->get(_1005,_1006,(int)0);
  int _7024 = (int)0;
  int _7025 = _1002;
  for (int _1007 = _7024; _1007 < _7025; ++_1007)
  {
    {
      ((*natvarmap_idx)(_ptr__1006[_1007])) = _1005;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1006);
      ((*natvarmap_type)(_1005)) = (int)1;
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1006,_1003);
      ((*natvarmap_type)(_1005)) = (int)3;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1006,_1003);
      ((*natvarmap_type)(_1005)) = (int)2;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_967)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1006,_1003);
      ((*natvarmap_type)(_1005)) = (int)5;
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1008 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_965,(long long)(_1005),_968,_974,_1006);
  if (mosek::fusion::p_LinearDomain::_get_impl(_967)->cardinal_flag)
  {
    {
      task_var_putintlist(_1006);
    }
  }
  {}
  ((*vars)(_1005)) = (_1008).as<::mosek::fusion::ModelVariable>();
  if (((int)((_965).size()) > (int)0))
  {
    {
      var_map->setItem(_965,_1005);
    }
  }
  {}
  return (_1008).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1009,std::shared_ptr< monty::ndarray< int,1 > > _1010,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1011){
  _checked_ptr_1<int> _ptr__1010(_1010 ? _1010->raw() : nullptr, _1010 ? _1010->size(0) : 0);
  if ((((int)((_1009).size()) > (int)0) && hasVariable(_1009)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1009)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7026;
  bool _7027 = (NULL != _1010.get());
  if (_7027)
  {
    _7026 = _1010;
  }
  else
  {
    _7026 = mosek::fusion::p_LinPSDDomain::_get_impl(_1011)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1012 = _7026;
  _checked_ptr_1<int> _ptr__1012(_1012 ? _1012->raw() : nullptr,_1012 ? _1012->size(0) : 0);
  if ((NULL == _1012.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  else if((!::mosek::fusion::p_Set::match(mosek::fusion::p_LinPSDDomain::_get_impl(_1011)->shape,_1012)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  int _1013 = (int)((_1012)->size(0));
  int _1014 = mosek::fusion::p_LinPSDDomain::_get_impl(_1011)->conedim;
  if (((_1014 < (int)0) || (_1014 >= _1013)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone direction dimension"));
    }
  }
  {}
  int _1015 = _ptr__1012[_1014];
  int _1016 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1015 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1016,safe_add( _1016,(int)1 ) ) / (int)2) != _1015))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1017 = (int)1;
  int _1018 = _ptr__1012[_1014];
  int _1019 = (int)1;
  int _7028 = (int)0;
  int _7029 = _1014;
  for (int _1020 = _7028; _1020 < _7029; ++_1020)
  {
    {
      _1019 *= _ptr__1012[_1020];
    }
  }
  int _7030 = safe_add( _1014,(int)1 );
  int _7031 = _1013;
  for (int _1021 = _7030; _1021 < _7031; ++_1021)
  {
    {
      _1017 *= _ptr__1012[_1021];
    }
  }
  int _1022 = safe_mul( _1019,_1017 );
  int _1023 = safe_mul( _1022,_1015 );
  int _1024 = natbarvarmap_alloc(_1022,_1016);
  std::shared_ptr< monty::ndarray< int,1 > > _1025 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1023)));
  _checked_ptr_1<int> _ptr__1025(_1025 ? _1025->raw() : nullptr,_1025 ? _1025->size(0) : 0);
  natbarvarmap_get(_1024,_1025);
  std::shared_ptr< monty::ndarray< long long,1 > > _1026 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1022,_1018 ))));
  _checked_ptr_1<long long> _ptr__1026(_1026 ? _1026->raw() : nullptr,_1026 ? _1026->size(0) : 0);
  {
    int _1027 = (int)0;
    int _7032 = (int)0;
    int _7033 = _1019;
    for (int _1028 = _7032; _1028 < _7033; ++_1028)
    {
      {
        int _7034 = (int)0;
        int _7035 = _1018;
        for (int _1029 = _7034; _1029 < _7035; ++_1029)
        {
          {
            int _7036 = (int)0;
            int _7037 = safe_add( _1029,(int)1 );
            for (int _1030 = _7036; _1030 < _7037; ++_1030)
            {
              {
                int _7038 = (int)0;
                int _7039 = _1017;
                for (int _1031 = _7038; _1031 < _7039; ++_1031)
                {
                  {
                    _ptr__1026[_1027] = safe_add( ((*natbarvar_ptr)(safe_add( safe_mul( _1028,_1017 ),_1031 ))),safe_add( (safe_mul( _1029,((safe_mul( (int)2,_1016 ) - _1029) - (int)1) ) / (int)2),_1030 ) );
                    ++ _1027;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1032 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::Model::t(_pubthis),_1009,_1024,_1012,_1014,_1026);
  ((*barvars)(_1024)) = (_1032).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1009).size()) > (int)0))
  {
    {
      var_map->setItem(_1009,(-safe_add( _1024,(int)1 )));
    }
  }
  {}
  return (_1032).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1033,std::shared_ptr< monty::ndarray< int,1 > > _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035){
  _checked_ptr_1<int> _ptr__1034(_1034 ? _1034->raw() : nullptr, _1034 ? _1034->size(0) : 0);
  if ((((int)((_1033).size()) > (int)0) && hasVariable(_1033)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1033)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1036 = _1034;
  _checked_ptr_1<int> _ptr__1036(_1036 ? _1036->raw() : nullptr,_1036 ? _1036->size(0) : 0);
  if ((NULL == _1036.get()))
  {
    {
      _1036 = mosek::fusion::p_PSDDomain::_get_impl(_1035)->shape;
      _ptr__1036.update(_1036 ? _1036->raw() : nullptr, _1036 ? _1036->size(0) : 0);
    }
  }
  {}
  if ((NULL == _1036.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  {}
  int _1037 = mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim1;
  int _1038 = mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim2;
  int _1039 = (int)((_1036)->size(0));
  int _1040 = _ptr__1036[_1037];
  if ((_1037 > _1038))
  {
    {
      int _1041 = _1037;
      _1037 = _1038;
      _1038 = _1041;
    }
  }
  {}
  if (((_1037 == _1038) || ((_1037 < (int)0) || (_1038 >= _1039))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1036[_1037] != _ptr__1036[_1038]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int _1042 = (int)1;
  int _7040 = (int)0;
  int _7041 = _1037;
  for (int _1043 = _7040; _1043 < _7041; ++_1043)
  {
    {
      _1042 *= _ptr__1036[_1043];
    }
  }
  int _7042 = safe_add( _1037,(int)1 );
  int _7043 = _1038;
  for (int _1044 = _7042; _1044 < _7043; ++_1044)
  {
    {
      _1042 *= _ptr__1036[_1044];
    }
  }
  int _7044 = safe_add( _1038,(int)1 );
  int _7045 = _1039;
  for (int _1045 = _7044; _1045 < _7045; ++_1045)
  {
    {
      _1042 *= _ptr__1036[_1045];
    }
  }
  int _1046 = (safe_mul( safe_mul( _1042,_1040 ),safe_add( _1040,(int)1 ) ) / (int)2);
  int _1047 = natbarvarmap_alloc(_1042,_1040);
  std::shared_ptr< monty::ndarray< long long,1 > > _1048 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1046)));
  _checked_ptr_1<long long> _ptr__1048(_1048 ? _1048->raw() : nullptr,_1048 ? _1048->size(0) : 0);
  natbarvar_get(_1047,_1048);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1049 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1033,_1047,_1036,mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1035)->conedim2,_1048);
  ((*barvars)(_1047)) = (_1049).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1033).size()) > (int)0))
  {
    {
      var_map->setItem(_1033,(-safe_add( _1047,(int)1 )));
    }
  }
  {}
  return (_1049).as<::mosek::fusion::SymmetricVariable>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1050,monty::rc_ptr< ::mosek::fusion::Expression > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052){
  if ((((int)((_1050).size()) > (int)0) && hasConstraint(_1050)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1050)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1052)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1053 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1051)).as<::mosek::fusion::Expression>());
  _1053->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1054 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1054(_1054 ? _1054->raw() : nullptr,_1054 ? _1054->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1055 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1055(_1055 ? _1055->raw() : nullptr,_1055 ? _1055->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1056 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1056(_1056 ? _1056->raw() : nullptr,_1056 ? _1056->size(0) : 0);
  int _1057 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1058 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1059 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1060 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1061 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1062 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1063 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1064 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1065 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1052)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1052)->shape)->size(0)) != _1057))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int _7046 = (int)0;
          int _7047 = _1057;
          for (int _1066 = _7046; _1066 < _7047; ++_1066)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1052)->shape)(_1066)) != _ptr__1054[safe_add( _1058,_1066 )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int _1067 = (int)1;
  int _7048 = (int)0;
  int _7049 = _1057;
  for (int _1068 = _7048; _1068 < _7049; ++_1068)
  {
    {
      _1067 *= _ptr__1054[safe_add( _1058,_1068 )];
    }
  }
  int _1069 = natconmap_alloc(_1067);
  std::shared_ptr< monty::ndarray< int,1 > > _1070 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1067)));
  _checked_ptr_1<int> _ptr__1070(_1070 ? _1070->raw() : nullptr,_1070 ? _1070->size(0) : 0);
  natconmap->get(_1069,_1070,(int)0);
  int _7050 = (int)0;
  int _7051 = _1067;
  for (int _1071 = _7050; _1071 < _7051; ++_1071)
  {
    {
      ((*natconmap_idx)(_ptr__1070[_1071])) = _1069;
      ((*natconmap_slackidx)(_ptr__1070[_1071])) = (int)0;
    }
  }
  ((*natconmap_type)(_1069)) = (int)4;
  putarows(_1070,rs,_1059,_1060,_1062,_1063,_1065);
  std::vector<int> _7052;
  for (int _1072 = (int)0, _7053 = _1059; _1072 < _7053 ; ++_1072)
  {
    _7052.push_back(bfixidx);
  }
  auto _7054 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7052.size()),_7052.begin(),_7052.end()));
  std::vector<double> _7055;
  for (int _1073 = (int)0, _7056 = _1059; _1073 < _7056 ; ++_1073)
  {
    _7055.push_back(_ptr__1056[safe_add( _1064,_1073 )]);
  }
  auto _7057 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7055.size()),_7055.begin(),_7055.end()));
  task_putaijlist(_1070,_7054,_7057,(long long)(_1059));
  std::shared_ptr< monty::ndarray< double,1 > > _1074 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1067)));
  _checked_ptr_1<double> _ptr__1074(_1074 ? _1074->raw() : nullptr,_1074 ? _1074->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1075 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1067)));
  _checked_ptr_1<double> _ptr__1075(_1075 ? _1075->raw() : nullptr,_1075 ? _1075->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1076 = natconmap_efix;
  _checked_ptr_1<double> _ptr__1076(_1076 ? _1076->raw() : nullptr,_1076 ? _1076->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1077 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->lb;
  _checked_ptr_1<double> _ptr__1077(_1077 ? _1077->raw() : nullptr,_1077 ? _1077->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1078 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->ub;
  _checked_ptr_1<double> _ptr__1078(_1078 ? _1078->raw() : nullptr,_1078 ? _1078->size(0) : 0);
  bool _1079 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->empty;
  bool _1080 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->scalable;
  std::shared_ptr< monty::ndarray< int,2 > > _1081 = mosek::fusion::p_RangeDomain::_get_impl(_1052)->sparsity;
  {
    int _7058 = (int)0;
    int _7059 = _1059;
    for (int _1082 = _7058; _1082 < _7059; ++_1082)
    {
      {
        _ptr__1076[_ptr__1070[_1082]] = _ptr__1056[safe_add( _1064,_1082 )];
      }
    }
    if (_1080)
    {
      {
        int _7060 = (int)0;
        int _7061 = _1067;
        for (int _1083 = _7060; _1083 < _7061; ++_1083)
        {
          {
            _ptr__1074[_1083] = _ptr__1077[(int)0];
            _ptr__1075[_1083] = _ptr__1078[(int)0];
          }
        }
      }
    }
    else if(_1079)
    {
      {
      }
    }
    else if((NULL != _1081.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1084 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1057)));
        _checked_ptr_1<int> _ptr__1084(_1084 ? _1084->raw() : nullptr,_1084 ? _1084->size(0) : 0);
        _ptr__1084[(_1057 - (int)1)] = (int)1;
        int _7062 = (int)1;
        int _7063 = _1057;
        for (int _1085 = _7062; _1085 < _7063; ++_1085)
        {
          {
            _ptr__1084[((_1057 - _1085) - (int)1)] = safe_mul( _ptr__1084[(_1057 - _1085)],_ptr__1054[(safe_add( _1058,_1057 ) - _1085)] );
          }
        }
        int _7064 = (int)0;
        int _7065 = (int)((_1077)->size(0));
        for (int _1086 = _7064; _1086 < _7065; ++_1086)
        {
          {
            int _1087 = (int)0;
            int _7066 = (int)0;
            int _7067 = _1057;
            for (int _1088 = _7066; _1088 < _7067; ++_1088)
            {
              {
                _1087 += safe_mul( _ptr__1084[_1088],((*_1081)(_1086,_1088)) );
              }
            }
            _ptr__1074[_1087] = _ptr__1077[_1086];
            _ptr__1075[_1087] = _ptr__1078[_1086];
          }
        }
      }
    }
    else
    {
      {
        int _7068 = (int)0;
        int _7069 = _1067;
        for (int _1089 = _7068; _1089 < _7069; ++_1089)
        {
          {
            _ptr__1074[_1089] = _ptr__1077[_1089];
            _ptr__1075[_1089] = _ptr__1078[_1089];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1070,_1074,_1075);
  std::vector<int> _7070;
  for (int _1091 = (int)0, _7071 = _1057; _1091 < _7071 ; ++_1091)
  {
    _7070.push_back(_ptr__1054[safe_add( _1058,_1091 )]);
  }
  auto _7072 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7070.size()),_7070.begin(),_7070.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1090 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1050,_7072,_1070);
  ((*cons)(_1069)) = (_1090).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1050).size()) > (int)0))
  {
    {
      con_map->setItem(_1050,_1069);
    }
  }
  {}
  return (_1090).as<::mosek::fusion::Constraint>();
}
void mosek::fusion::p_Model::update_bfix(std::shared_ptr< monty::ndarray< int,1 > > _1092,std::shared_ptr< monty::ndarray< double,1 > > _1093){
  _checked_ptr_1<int> _ptr__1092(_1092 ? _1092->raw() : nullptr, _1092 ? _1092->size(0) : 0);
  _checked_ptr_1<double> _ptr__1093(_1093 ? _1093->raw() : nullptr, _1093 ? _1093->size(0) : 0);
  std::vector<int> _7073;
  for (int _1094 = (int)0, _7074 = (int)((_1092)->size(0)); _1094 < _7074 ; ++_1094)
  {
    _7073.push_back((int)0);
  }
  auto _7075 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7073.size()),_7073.begin(),_7073.end()));
  task_putaijlist(_1092,_7075,_1093,(long long)((int)((_1092)->size(0))));
}
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int,1 > > _1095,monty::rc_ptr< ::mosek::fusion::WorkStack > _1096,int _1097,int _1098,int _1099,int _1100,int _1101){
  _checked_ptr_1<int> _ptr__1095(_1095 ? _1095->raw() : nullptr, _1095 ? _1095->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1102 = mosek::fusion::p_WorkStack::_get_impl(_1096)->i32;
  _checked_ptr_1<int> _ptr__1102(_1102 ? _1102->raw() : nullptr,_1102 ? _1102->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1103 = mosek::fusion::p_WorkStack::_get_impl(_1096)->i64;
  _checked_ptr_1<long long> _ptr__1103(_1103 ? _1103->raw() : nullptr,_1103 ? _1103->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1104 = mosek::fusion::p_WorkStack::_get_impl(_1096)->f64;
  _checked_ptr_1<double> _ptr__1104(_1104 ? _1104->raw() : nullptr,_1104 ? _1104->size(0) : 0);
  int _1105 = (int)0;
  int _1106 = (int)0;
  int _1107 = (int)0;
  int _7076 = (int)0;
  int _7077 = _1097;
  for (int _1108 = _7076; _1108 < _7077; ++_1108)
  {
    {
      int _1109 = _ptr__1102[safe_add( _1099,_1108 )];
      int _1110 = _ptr__1102[safe_add( safe_add( _1099,_1108 ),(int)1 )];
      int _1111 = _1109;
      while ( ((_1111 < _1110) && (_ptr__1103[safe_add( _1100,_1111 )] < (int)0)) )
      {
        {
          int _1112 = ((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1100,_1111 )],(int)1 ))));
          int _1113 = _1111;
          ++ _1111;
          while ( ((_1111 < _1110) && ((_ptr__1103[safe_add( _1100,_1111 )] < (int)0) && (_1112 == ((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1100,_1111 )],(int)1 ))))))) )
          {
            {
              ++ _1111;
            }
          }
          ++ _1106;
        }
      }
      _1107 += (_1111 - _1109);
      _1105 += (_1110 - _1111);
    }
  }
  int _1114 = (int)((_1095)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1115 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1114,(int)1 ))));
  _checked_ptr_1<long long> _ptr__1115(_1115 ? _1115->raw() : nullptr,_1115 ? _1115->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1116 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1105)));
  _checked_ptr_1<int> _ptr__1116(_1116 ? _1116->raw() : nullptr,_1116 ? _1116->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1117 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1105)));
  _checked_ptr_1<double> _ptr__1117(_1117 ? _1117->raw() : nullptr,_1117 ? _1117->size(0) : 0);
  {
    int _1118 = (int)0;
    int _7078 = (int)0;
    int _7079 = _1097;
    for (int _1119 = _7078; _1119 < _7079; ++_1119)
    {
      {
        int _1120 = (int)0;
        int _7080 = _ptr__1102[safe_add( _1099,_1119 )];
        int _7081 = _ptr__1102[safe_add( safe_add( _1099,_1119 ),(int)1 )];
        for (int _1121 = _7080; _1121 < _7081; ++_1121)
        {
          {
            if ((_ptr__1103[safe_add( _1100,_1121 )] > (int)0))
            {
              {
                _ptr__1116[safe_add( _1118,_1120 )] = (int)(_ptr__1103[safe_add( _1100,_1121 )] - (int)1);
                _ptr__1117[safe_add( _1118,_1120 )] = _ptr__1104[safe_add( _1101,_1121 )];
                ++ _1120;
              }
            }
            {}
          }
        }
        _ptr__1115[safe_add( _1119,(int)1 )] = safe_add( _ptr__1115[_1119],_1120 );
        _1118 += _1120;
      }
    }
  }
  task_putarowlist(_1095,_1115,_1116,_1117);
  if ((_1106 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1122 = _1095;
      _checked_ptr_1<int> _ptr__1122(_1122 ? _1122->raw() : nullptr,_1122 ? _1122->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1123 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1114,(int)1 ))));
      _checked_ptr_1<long long> _ptr__1123(_1123 ? _1123->raw() : nullptr,_1123 ? _1123->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1124 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1106)));
      _checked_ptr_1<int> _ptr__1124(_1124 ? _1124->raw() : nullptr,_1124 ? _1124->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1125 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1106)));
      _checked_ptr_1<int> _ptr__1125(_1125 ? _1125->raw() : nullptr,_1125 ? _1125->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1126 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1106)));
      _checked_ptr_1<long long> _ptr__1126(_1126 ? _1126->raw() : nullptr,_1126 ? _1126->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1127 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1107)));
      _checked_ptr_1<int> _ptr__1127(_1127 ? _1127->raw() : nullptr,_1127 ? _1127->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1128 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1107)));
      _checked_ptr_1<int> _ptr__1128(_1128 ? _1128->raw() : nullptr,_1128 ? _1128->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1129 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1107)));
      _checked_ptr_1<double> _ptr__1129(_1129 ? _1129->raw() : nullptr,_1129 ? _1129->size(0) : 0);
      int _1130 = (int)0;
      int _1131 = (int)0;
      int _7082 = (int)0;
      int _7083 = _1114;
      for (int _1132 = _7082; _1132 < _7083; ++_1132)
      {
        {
          int _1133 = _ptr__1102[safe_add( _1099,_1132 )];
          int _1134 = _ptr__1102[safe_add( safe_add( _1099,_1132 ),(int)1 )];
          while ( ((_1133 < _1134) && (_ptr__1103[safe_add( _1100,_1133 )] < (int)0)) )
          {
            {
              int _1135 = _1133;
              int _1136 = ((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1100,_1133 )],(int)1 ))));
              while ( ((_1133 < _1134) && ((_ptr__1103[safe_add( _1100,_1133 )] < (int)0) && (((*natbarvar_idx)((-safe_add( _ptr__1103[safe_add( _1100,_1133 )],(int)1 )))) == _1136))) )
              {
                {
                  _ptr__1127[_1131] = ((*natbarvar_i)((-safe_add( _ptr__1103[safe_add( _1100,_1133 )],(int)1 ))));
                  _ptr__1128[_1131] = ((*natbarvar_j)((-safe_add( _ptr__1103[safe_add( _1100,_1133 )],(int)1 ))));
                  if ((_ptr__1127[_1131] == _ptr__1128[_1131]))
                  {
                    {
                      _ptr__1129[_1131] = _ptr__1104[safe_add( _1101,_1133 )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1129[_1131] = (0.5 * _ptr__1104[safe_add( _1101,_1133 )]);
                    }
                  }
                  ++ _1131;
                  ++ _1133;
                }
              }
              _ptr__1124[_1130] = _1136;
              _ptr__1125[_1130] = ((*natbarvar_dim)(_1136));
              _ptr__1126[_1130] = (_1133 - _1135);
              ++ _1130;
            }
          }
          _1133 = _1134;
          _ptr__1123[safe_add( _1132,(int)1 )] = _1130;
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1137 = task_appendsymmatlist(_1125,_1126,_1127,_1128,_1129);
      _checked_ptr_1<long long> _ptr__1137(_1137 ? _1137->raw() : nullptr,_1137 ? _1137->size(0) : 0);
      task_putbararowlist(_1122,_1123,_1124,_1137);
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1138,monty::rc_ptr< ::mosek::fusion::Expression > _1139,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1140){
  std::shared_ptr< monty::ndarray< int,1 > > _1141 = _1139->getShape();
  _checked_ptr_1<int> _ptr__1141(_1141 ? _1141->raw() : nullptr,_1141 ? _1141->size(0) : 0);
  if (((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1140)->shape.get()) && (!::mosek::fusion::p_Set::match(_1141,mosek::fusion::p_PSDDomain::_get_impl(_1140)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  bool _1142;
  int _1143;
  int _1144;
  if (mosek::fusion::p_PSDDomain::_get_impl(_1140)->axisIsSet)
  {
    {
      _1142 = (mosek::fusion::p_PSDDomain::_get_impl(_1140)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1140)->conedim2);
      int _7084;
      bool _7085 = _1142;
      if (_7085)
      {
        _7084 = mosek::fusion::p_PSDDomain::_get_impl(_1140)->conedim1;
      }
      else
      {
        _7084 = mosek::fusion::p_PSDDomain::_get_impl(_1140)->conedim2;
      }
      _1144 = _7084;
      int _7086;
      bool _7087 = _1142;
      if (_7087)
      {
        _7086 = mosek::fusion::p_PSDDomain::_get_impl(_1140)->conedim2;
      }
      else
      {
        _7086 = mosek::fusion::p_PSDDomain::_get_impl(_1140)->conedim1;
      }
      _1143 = _7086;
    }
  }
  else
  {
    {
      _1142 = true;
      _1144 = ((int)((_1141)->size(0)) - (int)2);
      _1143 = ((int)((_1141)->size(0)) - (int)1);
    }
  }
  if (((_1143 >= (int)((_1141)->size(0))) || (_ptr__1141[_1144] != _ptr__1141[_1143])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Expression > _7088;
  bool _7089 = (mosek::fusion::p_PSDDomain::_get_impl(_1140)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_7089)
  {
    _7088 = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1144,_1143,_1139).as<::mosek::fusion::Expression>();
  }
  else
  {
    _7088 = _1139;
  }
  monty::rc_ptr< ::mosek::fusion::ExprCompress > _1145 = ::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1144,_1143,_7088)).as<::mosek::fusion::Expression>());
  _1145->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1146 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1146(_1146 ? _1146->raw() : nullptr,_1146 ? _1146->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1147 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1147(_1147 ? _1147->raw() : nullptr,_1147 ? _1147->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1148 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1148(_1148 ? _1148->raw() : nullptr,_1148 ? _1148->size(0) : 0);
  int _1149 = rs->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _1150 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1149)));
  _checked_ptr_1<int> _ptr__1150(_1150 ? _1150->raw() : nullptr,_1150 ? _1150->size(0) : 0);
  rs->popi32(_1149,_1150,(int)0);
  int _1151 = rs->popi32();
  int _1152 = rs->popi32();
  bool _1153 = (rs->popi32() != (int)0);
  int _1154 = rs->popi32(safe_add( _1151,(int)1 ));
  int _7090;
  bool _7091 = _1153;
  if (_7091)
  {
    _7090 = rs->popi64(_1151);
  }
  else
  {
    _7090 = (-(int)99999);
  }
  int _1155 = _7090;
  int _1156 = rs->popi64(_1152);
  int _1157 = rs->popf64(_1151);
  int _1158 = rs->popf64(_1152);
  int _1159 = _ptr__1150[_1143];
  int _1160 = (safe_mul( _1159,safe_add( _1159,(int)1 ) ) / (int)2);
  int _7092 = (int)0;
  int _7093 = _1149;
  for (int _1161 = _7092; _1161 < _7093; ++_1161)
  {
    {
      if (((_1161 != _1144) && (_1161 != _1143)))
      {
        {
          _1160 *= _ptr__1150[_1161];
        }
      }
      {}
    }
  }
  int _1162 = natconmap_alloc(_1160);
  std::shared_ptr< monty::ndarray< int,1 > > _1163 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1160)));
  _checked_ptr_1<int> _ptr__1163(_1163 ? _1163->raw() : nullptr,_1163 ? _1163->size(0) : 0);
  natconmap->get(_1162,_1163,(int)0);
  putarows(_1163,rs,_1151,_1152,_1154,_1156,_1158);
  std::vector<int> _7094;
  for (int _1164 = (int)0, _7095 = _1151; _1164 < _7095 ; ++_1164)
  {
    _7094.push_back(bfixidx);
  }
  auto _7096 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7094.size()),_7094.begin(),_7094.end()));
  std::vector<double> _7097;
  for (int _1165 = (int)0, _7098 = _1151; _1165 < _7098 ; ++_1165)
  {
    _7097.push_back(_ptr__1148[safe_add( _1157,_1165 )]);
  }
  auto _7099 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7097.size()),_7097.begin(),_7097.end()));
  task_putaijlist(_1163,_7096,_7099,(long long)(_1151));
  std::shared_ptr< monty::ndarray< int,1 > > _1166 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__1166(_1166 ? _1166->raw() : nullptr,_1166 ? _1166->size(0) : 0);
  int _7100 = (int)0;
  int _7101 = _1144;
  for (int _1167 = _7100; _1167 < _7101; ++_1167)
  {
    {
      _ptr__1166[(int)0] *= _ptr__1150[_1167];
    }
  }
  _ptr__1166[(int)1] = _ptr__1150[_1144];
  int _7102 = safe_add( _1144,(int)1 );
  int _7103 = _1143;
  for (int _1168 = _7102; _1168 < _7103; ++_1168)
  {
    {
      _ptr__1166[(int)2] *= _ptr__1150[_1168];
    }
  }
  _ptr__1166[(int)3] = _ptr__1150[_1143];
  int _7104 = safe_add( _1143,(int)1 );
  int _7105 = _1149;
  for (int _1169 = _7104; _1169 < _7105; ++_1169)
  {
    {
      _ptr__1166[(int)4] *= _ptr__1150[_1169];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1170 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__1170(_1170 ? _1170->raw() : nullptr,_1170 ? _1170->size(0) : 0);
  _ptr__1170[(int)4] = (int)1;
  int _7106 = (int)1;
  int _7107 = (int)5;
  for (int _1171 = _7106; _1171 < _7107; ++_1171)
  {
    {
      _ptr__1170[(((int)5 - _1171) - (int)1)] = safe_mul( _ptr__1170[((int)5 - _1171)],_ptr__1166[((int)5 - _1171)] );
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1172 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1160)));
  _checked_ptr_1<double> _ptr__1172(_1172 ? _1172->raw() : nullptr,_1172 ? _1172->size(0) : 0);
  if ((_1155 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Unexpected case!"));
    }
  }
  else
  {
    {
      int _7108 = (int)0;
      int _7109 = _1151;
      for (int _1173 = _7108; _1173 < _7109; ++_1173)
      {
        {
          ((*natconmap_efix)(_ptr__1163[_1173])) = _ptr__1148[safe_add( _1157,_1173 )];
          ((*natconmap_lb)(_ptr__1163[_1173])) = (int)0;
          ((*natconmap_ub)(_ptr__1163[_1173])) = (int)0;
          _ptr__1172[_1173] = 0.0;
        }
      }
    }
  }
  task_con_putboundlist_fx(_1163,_1172);
  int _1174 = safe_mul( safe_mul( _ptr__1166[(int)0],_ptr__1166[(int)2] ),_ptr__1166[(int)4] );
  int _1175 = _ptr__1166[(int)1];
  int _1176 = natbarvarmap_alloc(_1174,_1175);
  std::shared_ptr< monty::ndarray< int,1 > > _1177 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1174)));
  _checked_ptr_1<int> _ptr__1177(_1177 ? _1177->raw() : nullptr,_1177 ? _1177->size(0) : 0);
  natbarvarmap_get(_1176,_1177);
  std::vector<int> _7110;
  for (int _1179 = (int)0, _7111 = (safe_mul( _1175,safe_add( _1175,(int)1 ) ) / (int)2); _1179 < _7111 ; ++_1179)
  {
    _7110.push_back(_1175);
  }
  auto _7112 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7110.size()),_7110.begin(),_7110.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1178 = _7112;
  _checked_ptr_1<int> _ptr__1178(_1178 ? _1178->raw() : nullptr,_1178 ? _1178->size(0) : 0);
  std::vector<long long> _7113;
  for (int _1181 = (int)0, _7114 = (safe_mul( _1175,safe_add( _1175,(int)1 ) ) / (int)2); _1181 < _7114 ; ++_1181)
  {
    _7113.push_back((int)1);
  }
  auto _7115 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7113.size()),_7113.begin(),_7113.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1180 = _7115;
  _checked_ptr_1<long long> _ptr__1180(_1180 ? _1180->raw() : nullptr,_1180 ? _1180->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1182 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1175,safe_add( _1175,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1182(_1182 ? _1182->raw() : nullptr,_1182 ? _1182->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1183 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1175,safe_add( _1175,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1183(_1183 ? _1183->raw() : nullptr,_1183 ? _1183->size(0) : 0);
  std::vector<double> _7116;
  for (int _1185 = (int)0, _7117 = (safe_mul( _1175,safe_add( _1175,(int)1 ) ) / (int)2); _1185 < _7117 ; ++_1185)
  {
    _7116.push_back((-1.0));
  }
  auto _7118 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7116.size()),_7116.begin(),_7116.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1184 = _7118;
  _checked_ptr_1<double> _ptr__1184(_1184 ? _1184->raw() : nullptr,_1184 ? _1184->size(0) : 0);
  {
    int _1186 = (int)0;
    int _7119 = (int)0;
    int _7120 = _1175;
    for (int _1187 = _7119; _1187 < _7120; ++_1187)
    {
      {
        int _7121 = (int)0;
        int _7122 = safe_add( _1187,(int)1 );
        for (int _1188 = _7121; _1188 < _7122; ++_1188)
        {
          {
            _ptr__1182[_1186] = _1187;
            _ptr__1183[_1186] = _1188;
            ++ _1186;
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1189 = task_appendsymmatlist(_1178,_1180,_1182,_1183,_1184);
  _checked_ptr_1<long long> _ptr__1189(_1189 ? _1189->raw() : nullptr,_1189 ? _1189->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1190 = _1163;
  _checked_ptr_1<int> _ptr__1190(_1190 ? _1190->raw() : nullptr,_1190 ? _1190->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1191 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1160)));
  _checked_ptr_1<int> _ptr__1191(_1191 ? _1191->raw() : nullptr,_1191 ? _1191->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1192 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1160)));
  _checked_ptr_1<long long> _ptr__1192(_1192 ? _1192->raw() : nullptr,_1192 ? _1192->size(0) : 0);
  {
    int _1193 = (int)0;
    if (_1142)
    {
      {
        int _7123 = (int)0;
        int _7124 = _ptr__1166[(int)0];
        for (int _1194 = _7123; _1194 < _7124; ++_1194)
        {
          {
            int _7125 = (int)0;
            int _7126 = _ptr__1166[(int)1];
            for (int _1195 = _7125; _1195 < _7126; ++_1195)
            {
              {
                int _7127 = (int)0;
                int _7128 = _ptr__1166[(int)2];
                for (int _1196 = _7127; _1196 < _7128; ++_1196)
                {
                  {
                    int _7129 = (int)0;
                    int _7130 = safe_add( _1195,(int)1 );
                    for (int _1197 = _7129; _1197 < _7130; ++_1197)
                    {
                      {
                        int _7131 = (int)0;
                        int _7132 = _ptr__1166[(int)4];
                        for (int _1198 = _7131; _1198 < _7132; ++_1198)
                        {
                          {
                            _ptr__1192[_1193] = _ptr__1189[safe_add( (safe_mul( _1195,safe_add( _1195,(int)1 ) ) / (int)2),_1197 )];
                            _ptr__1191[_1193] = _ptr__1177[safe_add( safe_mul( safe_add( safe_mul( _1194,_ptr__1166[(int)2] ),_1196 ),_ptr__1166[(int)4] ),_1198 )];
                            ((*natconmap_slackidx)(_ptr__1163[_1193])) = safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1191[_1193])),(safe_mul( _1197,((safe_mul( (int)2,_ptr__1166[(int)1] ) - _1197) - (int)1) ) / (int)2) ),_1195 );
                            ++ _1193;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _7133 = (int)0;
        int _7134 = _ptr__1166[(int)0];
        for (int _1199 = _7133; _1199 < _7134; ++_1199)
        {
          {
            int _7135 = (int)0;
            int _7136 = _ptr__1166[(int)1];
            for (int _1200 = _7135; _1200 < _7136; ++_1200)
            {
              {
                int _7137 = (int)0;
                int _7138 = _ptr__1166[(int)2];
                for (int _1201 = _7137; _1201 < _7138; ++_1201)
                {
                  {
                    int _7139 = _1200;
                    int _7140 = _ptr__1166[(int)1];
                    for (int _1202 = _7139; _1202 < _7140; ++_1202)
                    {
                      {
                        int _7141 = (int)0;
                        int _7142 = _ptr__1166[(int)4];
                        for (int _1203 = _7141; _1203 < _7142; ++_1203)
                        {
                          {
                            _ptr__1192[_1193] = _ptr__1189[safe_add( (safe_mul( _1202,safe_add( _1202,(int)1 ) ) / (int)2),_1200 )];
                            _ptr__1191[_1193] = _ptr__1177[safe_add( safe_mul( safe_add( safe_mul( _1199,_ptr__1166[(int)2] ),_1201 ),_ptr__1166[(int)4] ),_1203 )];
                            ((*natconmap_slackidx)(_ptr__1163[_1193])) = safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1191[_1193])),(safe_mul( _1200,((safe_mul( (int)2,_ptr__1166[(int)1] ) - _1200) - (int)1) ) / (int)2) ),_1202 );
                            ++ _1193;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  task_putbaraijlist(_1190,_1191,_1192);
  ((*natconmap_type)(_1162)) = (-safe_add( _1176,(int)1 ));
  std::vector<long long> _7143;
  for (int _1205 = (int)0, _7144 = _1160; _1205 < _7144 ; ++_1205)
  {
    _7143.push_back(((*natconmap_slackidx)(_ptr__1163[_1205])));
  }
  auto _7145 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7143.size()),_7143.begin(),_7143.end()));
  monty::rc_ptr< ::mosek::fusion::PSDConstraint > _1204 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::Model::t(_pubthis),_1138,_1162,_1150,_1144,_1143,_7145,_1163);
  ((*cons)(_1162)) = (_1204).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1138).size()) > (int)0))
  {
    {
      con_map->setItem(_1138,_1162);
    }
  }
  {}
  return (_1204).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1206,monty::rc_ptr< ::mosek::fusion::Expression > _1207,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1208){
  if ((((int)((_1206).size()) > (int)0) && hasConstraint(_1206)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1206)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1206).size()) > (int)0) && hasConstraint(_1206)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1206)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1209 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1207)).as<::mosek::fusion::Expression>());
  _1209->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1210 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1210(_1210 ? _1210->raw() : nullptr,_1210 ? _1210->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1211 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1211(_1211 ? _1211->raw() : nullptr,_1211 ? _1211->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1212 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1212(_1212 ? _1212->raw() : nullptr,_1212 ? _1212->size(0) : 0);
  int _1213 = rs->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _1214 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1213)));
  _checked_ptr_1<int> _ptr__1214(_1214 ? _1214->raw() : nullptr,_1214 ? _1214->size(0) : 0);
  rs->popi32(_1213,_1214,(int)0);
  int _1215 = rs->popi32();
  int _1216 = rs->popi32();
  bool _1217 = (rs->popi32() != (int)0);
  int _1218 = rs->popi32(safe_add( _1215,(int)1 ));
  int _1219 = rs->popi64(_1216);
  int _1220 = rs->popf64(_1215);
  int _1221 = rs->popf64(_1216);
  if (((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1208)->shape.get()) && (!::mosek::fusion::p_Set::match(_1214,mosek::fusion::p_LinPSDDomain::_get_impl(_1208)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1222 = (int)1;
  int _7146 = (int)0;
  int _7147 = _1213;
  for (int _1223 = _7146; _1223 < _7147; ++_1223)
  {
    {
      _1222 *= _ptr__1214[_1223];
    }
  }
  int _1224 = mosek::fusion::p_LinPSDDomain::_get_impl(_1208)->conedim;
  int _1225 = _ptr__1214[_1224];
  int _1226 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1225 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1226,safe_add( _1226,(int)1 ) ) / (int)2) != _1225))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1227 = (int)1;
  int _7148 = (int)0;
  int _7149 = _1224;
  for (int _1228 = _7148; _1228 < _7149; ++_1228)
  {
    {
      _1227 *= _ptr__1214[_1228];
    }
  }
  int _1229 = (int)1;
  int _7150 = safe_add( _1224,(int)1 );
  int _7151 = _1213;
  for (int _1230 = _7150; _1230 < _7151; ++_1230)
  {
    {
      _1229 *= _ptr__1214[_1230];
    }
  }
  int _1231 = safe_mul( _1227,_1229 );
  int _1232 = natconmap_alloc(_1222);
  std::shared_ptr< monty::ndarray< int,1 > > _1233 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1222)));
  _checked_ptr_1<int> _ptr__1233(_1233 ? _1233->raw() : nullptr,_1233 ? _1233->size(0) : 0);
  natconmap->get(_1232,_1233,(int)0);
  putarows(_1233,rs,_1215,_1216,_1218,_1219,_1221);
  std::vector<int> _7152;
  for (int _1234 = (int)0, _7153 = _1215; _1234 < _7153 ; ++_1234)
  {
    _7152.push_back(bfixidx);
  }
  auto _7154 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7152.size()),_7152.begin(),_7152.end()));
  std::vector<double> _7155;
  for (int _1235 = (int)0, _7156 = _1215; _1235 < _7156 ; ++_1235)
  {
    _7155.push_back(_ptr__1212[safe_add( _1220,_1235 )]);
  }
  auto _7157 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7155.size()),_7155.begin(),_7155.end()));
  task_putaijlist(_1233,_7154,_7157,(long long)(_1215));
  int _1236 = natbarvarmap_alloc(_1231,_1226);
  std::shared_ptr< monty::ndarray< int,1 > > _1237 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1231)));
  _checked_ptr_1<int> _ptr__1237(_1237 ? _1237->raw() : nullptr,_1237 ? _1237->size(0) : 0);
  natbarvarmap_get(_1236,_1237);
  ((*barvars)(_1236)) = nullptr;
  int _1238 = safe_mul( safe_mul( _1225,_1227 ),_1229 );
  std::vector<int> _7158;
  for (int _1240 = (int)0, _7159 = _1225; _1240 < _7159 ; ++_1240)
  {
    _7158.push_back(_1240);
  }
  auto _7160 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7158.size()),_7158.begin(),_7158.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1239 = _7160;
  _checked_ptr_1<int> _ptr__1239(_1239 ? _1239->raw() : nullptr,_1239 ? _1239->size(0) : 0);
  std::vector<long long> _7161;
  for (int _1242 = (int)0, _7162 = _1225; _1242 < _7162 ; ++_1242)
  {
    _7161.push_back((int)1);
  }
  auto _7163 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7161.size()),_7161.begin(),_7161.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1241 = _7163;
  _checked_ptr_1<long long> _ptr__1241(_1241 ? _1241->raw() : nullptr,_1241 ? _1241->size(0) : 0);
  std::vector<double> _7164;
  for (int _1244 = (int)0, _7165 = _1225; _1244 < _7165 ; ++_1244)
  {
    _7164.push_back((-1.0));
  }
  auto _7166 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7164.size()),_7164.begin(),_7164.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1243 = _7166;
  _checked_ptr_1<double> _ptr__1243(_1243 ? _1243->raw() : nullptr,_1243 ? _1243->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1245 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1225)));
  _checked_ptr_1<int> _ptr__1245(_1245 ? _1245->raw() : nullptr,_1245 ? _1245->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1246 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1225)));
  _checked_ptr_1<int> _ptr__1246(_1246 ? _1246->raw() : nullptr,_1246 ? _1246->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1247 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1238)));
  _checked_ptr_1<int> _ptr__1247(_1247 ? _1247->raw() : nullptr,_1247 ? _1247->size(0) : 0);
  {
    int _1248 = (int)0;
    int _7167 = (int)0;
    int _7168 = _1227;
    for (int _1249 = _7167; _1249 < _7168; ++_1249)
    {
      {
        int _7169 = (int)0;
        int _7170 = _1226;
        for (int _1250 = _7169; _1250 < _7170; ++_1250)
        {
          {
            int _7171 = (int)0;
            int _7172 = safe_add( _1250,(int)1 );
            for (int _1251 = _7171; _1251 < _7172; ++_1251)
            {
              {
                int _7173 = (int)0;
                int _7174 = _1229;
                for (int _1252 = _7173; _1252 < _7174; ++_1252)
                {
                  {
                    _ptr__1247[_1248] = safe_add( safe_mul( _1249,_1229 ),_1252 );
                    _ptr__1245[_1248] = _1250;
                    _ptr__1246[_1248] = _1251;
                    ++ _1248;
                  }
                }
              }
            }
          }
        }
      }
    }
    ((*natconmap_type)(_1232)) = (-safe_add( _1236,(int)1 ));
    int _7175 = (int)0;
    int _7176 = _1222;
    for (int _1253 = _7175; _1253 < _7176; ++_1253)
    {
      {
        ((*natconmap_blockid)(_ptr__1233[_1253])) = _1232;
        ((*natconmap_idx)(_ptr__1233[_1253])) = _1253;
        ((*natconmap_efix)(_ptr__1233[_1253])) = _ptr__1212[safe_add( _1220,_1253 )];
        ((*natconmap_lb)(_ptr__1233[_1253])) = (int)0;
        ((*natconmap_ub)(_ptr__1233[_1253])) = (int)0;
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1254 = task_appendsymmatlist(_1239,_1241,_1245,_1246,_1243);
  _checked_ptr_1<long long> _ptr__1254(_1254 ? _1254->raw() : nullptr,_1254 ? _1254->size(0) : 0);
  task_putbaraijlist(_1233,_1247,_1254);
  std::vector<double> _7177;
  for (int _1256 = (int)0, _7178 = _1222; _1256 < _7178 ; ++_1256)
  {
    _7177.push_back(0.0);
  }
  auto _7179 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7177.size()),_7177.begin(),_7177.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1255 = _7179;
  _checked_ptr_1<double> _ptr__1255(_1255 ? _1255->raw() : nullptr,_1255 ? _1255->size(0) : 0);
  task_con_putboundlist_fx(_1233,_1255);
  std::vector<long long> _7180;
  for (int _1258 = (int)0, _7181 = _1222; _1258 < _7181 ; ++_1258)
  {
    _7180.push_back(((*natconmap_slackidx)(_ptr__1233[_1258])));
  }
  auto _7182 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7180.size()),_7180.begin(),_7180.end()));
  monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _1257 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::Model::t(_pubthis),_1206,_1232,_1214,_1224,_1233,_7182);
  ((*cons)(_1232)) = (_1257).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1206).size()) > (int)0))
  {
    {
      con_map->setItem(_1206,_1232);
    }
  }
  {}
  return (_1257).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1259,monty::rc_ptr< ::mosek::fusion::Expression > _1260,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1261){
  if ((((int)((_1259).size()) > (int)0) && hasConstraint(_1259)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1259)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1259).size()) > (int)0) && hasConstraint(_1259)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1259)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1261)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1262 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1260)).as<::mosek::fusion::Expression>());
  _1262->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1263 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1263(_1263 ? _1263->raw() : nullptr,_1263 ? _1263->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1264 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1264(_1264 ? _1264->raw() : nullptr,_1264 ? _1264->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1265 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1265(_1265 ? _1265->raw() : nullptr,_1265 ? _1265->size(0) : 0);
  int _1266 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1267 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1268 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1269 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1270 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1271 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1272 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1273 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1274 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  std::vector<int> _7183;
  for (int _1276 = (int)0, _7184 = _1266; _1276 < _7184 ; ++_1276)
  {
    _7183.push_back(_ptr__1263[safe_add( _1267,_1276 )]);
  }
  auto _7185 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7183.size()),_7183.begin(),_7183.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1275 = _7185;
  _checked_ptr_1<int> _ptr__1275(_1275 ? _1275->raw() : nullptr,_1275 ? _1275->size(0) : 0);
  if (((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1261)->shape.get()) && (!::mosek::fusion::p_Set::match(_1275,mosek::fusion::p_ConeDomain::_get_impl(_1261)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _7186;
  bool _7187 = _1261->axisIsSet();
  if (_7187)
  {
    _7186 = _1261->getAxis();
  }
  else
  {
    _7186 = (_1266 - (int)1);
  }
  int _1277 = _7186;
  int _1278 = _ptr__1275[_1277];
  int _1279 = (int)1;
  int _1280 = (int)1;
  int _1281 = (int)1;
  {
    int _7188 = (int)0;
    int _7189 = _1266;
    for (int _1282 = _7188; _1282 < _7189; ++_1282)
    {
      {
        _1281 *= _ptr__1275[_1282];
      }
    }
    int _7190 = (int)0;
    int _7191 = _1277;
    for (int _1283 = _7190; _1283 < _7191; ++_1283)
    {
      {
        _1280 *= _ptr__1275[_1283];
      }
    }
    int _7192 = safe_add( _1277,(int)1 );
    int _7193 = _1266;
    for (int _1284 = _7192; _1284 < _7193; ++_1284)
    {
      {
        _1279 *= _ptr__1275[_1284];
      }
    }
  }
  int _1285 = safe_mul( _1280,_1279 );
  if (((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InQCone) && (_1278 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1278)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1278 < (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1278)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1278 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1278)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1278 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1278)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1278 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1278)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1278 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1278)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
    }
  }
  {}
  int _1286 = natvarmap_alloc(_1281);
  std::shared_ptr< monty::ndarray< int,1 > > _1287 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1281)));
  _checked_ptr_1<int> _ptr__1287(_1287 ? _1287->raw() : nullptr,_1287 ? _1287->size(0) : 0);
  natvarmap->get(_1286,_1287,(int)0);
  int _1288 = natconemap_alloc(_1285);
  int _7194 = (int)0;
  int _7195 = _1281;
  for (int _1289 = _7194; _1289 < _7195; ++_1289)
  {
    {
      ((*natvarmap_idx)(_ptr__1287[_1289])) = _1286;
    }
  }
  task_var_putboundlist_fr(_1287);
  std::shared_ptr< monty::ndarray< int,1 > > _7196;
  bool _7197 = (_1277 < ((int)((_1275)->size(0)) - (int)1));
  if (_7197)
  {
    _7196 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1287)->size(0)))));
  }
  else
  {
    _7196 = _1287;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1290 = _7196;
  _checked_ptr_1<int> _ptr__1290(_1290 ? _1290->raw() : nullptr,_1290 ? _1290->size(0) : 0);
  if ((_1277 < ((int)((_1275)->size(0)) - (int)1)))
  {
    {
      int _1291 = (int)0;
      int _7198 = (int)0;
      int _7199 = _1280;
      for (int _1292 = _7198; _1292 < _7199; ++_1292)
      {
        {
          int _7200 = (int)0;
          int _7201 = _1279;
          for (int _1293 = _7200; _1293 < _7201; ++_1293)
          {
            {
              int _7202 = (int)0;
              int _7203 = _1278;
              for (int _1294 = _7202; _1294 < _7203; ++_1294)
              {
                {
                  _ptr__1290[_1291] = _ptr__1287[safe_add( safe_mul( safe_add( safe_mul( _1292,_1278 ),_1294 ),_1279 ),_1293 )];
                  ++ _1291;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1295 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1285)));
  _checked_ptr_1<int> _ptr__1295(_1295 ? _1295->raw() : nullptr,_1295 ? _1295->size(0) : 0);
  natconemap->get(_1288,_1295,(int)0);
  ((*natconemap_dim)(_1288)) = _1278;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1295,_1278,_1285,_1290);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      task_put_rquadcones(_1295,_1278,_1285,_1290);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      task_put_pexpcones(_1295,_1278,_1285,_1290);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      std::vector<double> _7204;
      for (int _1296 = (int)0, _7205 = _1285; _1296 < _7205 ; ++_1296)
      {
        _7204.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1261)->alpha);
      }
      auto _7206 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7204.size()),_7204.begin(),_7204.end()));
      task_put_ppowcones(_1295,_1278,_1285,_1290,_7206);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      task_put_dexpcones(_1295,_1278,_1285,_1290);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1261)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      std::vector<double> _7207;
      for (int _1297 = (int)0, _7208 = _1285; _1297 < _7208 ; ++_1297)
      {
        _7207.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1261)->alpha);
      }
      auto _7209 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7207.size()),_7207.begin(),_7207.end()));
      task_put_dpowcones(_1295,_1278,_1285,_1290,_7209);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  ((*vars)(_1286)) = nullptr;
  std::shared_ptr< monty::ndarray< double,1 > > _1298 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1281)));
  _checked_ptr_1<double> _ptr__1298(_1298 ? _1298->raw() : nullptr,_1298 ? _1298->size(0) : 0);
  int _1299 = natconmap_alloc(_1281);
  std::shared_ptr< monty::ndarray< int,1 > > _1300 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1281)));
  _checked_ptr_1<int> _ptr__1300(_1300 ? _1300->raw() : nullptr,_1300 ? _1300->size(0) : 0);
  natconmap->get(_1299,_1300,(int)0);
  ((*natconmap_type)(_1299)) = safe_add( _1286,(int)6 );
  {
    int _7210 = (int)0;
    int _7211 = _1281;
    for (int _1301 = _7210; _1301 < _7211; ++_1301)
    {
      {
        ((*natconmap_efix)(_ptr__1300[_1301])) = _ptr__1265[safe_add( _1273,_1301 )];
      }
    }
    int _7212 = (int)0;
    int _7213 = _1281;
    for (int _1302 = _7212; _1302 < _7213; ++_1302)
    {
      {
        ((*natconmap_lb)(_ptr__1300[_1302])) = (int)0;
      }
    }
    int _7214 = (int)0;
    int _7215 = _1281;
    for (int _1303 = _7214; _1303 < _7215; ++_1303)
    {
      {
        ((*natconmap_ub)(_ptr__1300[_1303])) = (int)0;
      }
    }
    int _7216 = (int)0;
    int _7217 = _1281;
    for (int _1304 = _7216; _1304 < _7217; ++_1304)
    {
      {
        ((*natconmap_slackidx)(_ptr__1300[_1304])) = safe_add( _ptr__1287[_1304],(int)1 );
      }
    }
    int _7218 = (int)0;
    int _7219 = _1281;
    for (int _1305 = _7218; _1305 < _7219; ++_1305)
    {
      {
        ((*natconmap_blockid)(_ptr__1300[_1305])) = _1299;
      }
    }
    int _7220 = (int)0;
    int _7221 = _1281;
    for (int _1306 = _7220; _1306 < _7221; ++_1306)
    {
      {
        ((*natconmap_idx)(_ptr__1300[_1306])) = _1306;
      }
    }
  }
  putarows(_1300,rs,_1268,_1269,_1271,_1272,_1274);
  task_con_putboundlist_fx(_1300,_1298);
  std::vector<double> _7222;
  for (int _1307 = (int)0, _7223 = (int)((_1300)->size(0)); _1307 < _7223 ; ++_1307)
  {
    _7222.push_back((-1.0));
  }
  auto _7224 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7222.size()),_7222.begin(),_7222.end()));
  task_putaijlist(_1300,_1287,_7224,(long long)((int)((_1300)->size(0))));
  std::vector<int> _7225;
  for (int _1308 = (int)0, _7226 = _1268; _1308 < _7226 ; ++_1308)
  {
    _7225.push_back(bfixidx);
  }
  auto _7227 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7225.size()),_7225.begin(),_7225.end()));
  std::vector<double> _7228;
  for (int _1309 = (int)0, _7229 = _1268; _1309 < _7229 ; ++_1309)
  {
    _7228.push_back(_ptr__1265[safe_add( _1273,_1309 )]);
  }
  auto _7230 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7228.size()),_7228.begin(),_7228.end()));
  task_putaijlist(_1300,_7227,_7230,(long long)(_1268));
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1310 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1259,_1261,_1275,_1299,_1300,_1287);
  ((*cons)(_1299)) = (_1310).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1259).size()) > (int)0))
  {
    {
      con_map->setItem(_1259,_1299);
    }
  }
  {}
  return (_1310).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1311,monty::rc_ptr< ::mosek::fusion::Expression > _1312,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1313){
  if ((((int)((_1311).size()) > (int)0) && hasConstraint(_1311)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1311)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1313)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1314 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1312)).as<::mosek::fusion::Expression>());
  _1314->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1315 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1315(_1315 ? _1315->raw() : nullptr,_1315 ? _1315->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1316 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1316(_1316 ? _1316->raw() : nullptr,_1316 ? _1316->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1317 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1317(_1317 ? _1317->raw() : nullptr,_1317 ? _1317->size(0) : 0);
  int _1318 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1319 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1320 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1321 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1322 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1323 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1324 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1325 = mosek::fusion::p_WorkStack::_get_impl(rs)->bfix_base;
  int _1326 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  std::vector<int> _7231;
  for (int _1328 = (int)0, _7232 = _1318; _1328 < _7232 ; ++_1328)
  {
    _7231.push_back(_ptr__1315[safe_add( _1319,_1328 )]);
  }
  auto _7233 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7231.size()),_7231.begin(),_7231.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1327 = _7233;
  _checked_ptr_1<int> _ptr__1327(_1327 ? _1327->raw() : nullptr,_1327 ? _1327->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1313)->shape.get()) && (!::mosek::fusion::p_Set::match(_1327,mosek::fusion::p_LinearDomain::_get_impl(_1313)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1329 = (int)1;
  int _7234 = (int)0;
  int _7235 = _1318;
  for (int _1330 = _7234; _1330 < _7235; ++_1330)
  {
    {
      _1329 *= _ptr__1327[_1330];
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1331;
  _checked_ptr_1<double> _ptr__1331(_1331 ? _1331->raw() : nullptr,_1331 ? _1331->size(0) : 0);
  int _1332 = natconmap_alloc(_1329);
  std::shared_ptr< monty::ndarray< int,1 > > _1333 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1329)));
  _checked_ptr_1<int> _ptr__1333(_1333 ? _1333->raw() : nullptr,_1333 ? _1333->size(0) : 0);
  natconmap->get(_1332,_1333,(int)0);
  putarows(_1333,rs,_1320,_1321,_1323,_1324,_1326);
  std::vector<int> _7236;
  for (int _1334 = (int)0, _7237 = _1320; _1334 < _7237 ; ++_1334)
  {
    _7236.push_back(bfixidx);
  }
  auto _7238 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7236.size()),_7236.begin(),_7236.end()));
  std::vector<double> _7239;
  for (int _1335 = (int)0, _7240 = _1320; _1335 < _7240 ; ++_1335)
  {
    _7239.push_back(_ptr__1317[safe_add( _1325,_1335 )]);
  }
  auto _7241 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7239.size()),_7239.begin(),_7239.end()));
  task_putaijlist(_1333,_7238,_7241,(long long)(_1320));
  {
    std::shared_ptr< monty::ndarray< int,2 > > _1336 = mosek::fusion::p_LinearDomain::_get_impl(_1313)->sparsity;
    bool _1337 = mosek::fusion::p_LinearDomain::_get_impl(_1313)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1338 = mosek::fusion::p_LinearDomain::_get_impl(_1313)->bnd;
    _checked_ptr_1<double> _ptr__1338(_1338 ? _1338->raw() : nullptr,_1338 ? _1338->size(0) : 0);
    bool _1339 = mosek::fusion::p_LinearDomain::_get_impl(_1313)->scalable;
    std::shared_ptr< monty::ndarray< double,1 > > _1340 = natconmap_efix;
    _checked_ptr_1<double> _ptr__1340(_1340 ? _1340->raw() : nullptr,_1340 ? _1340->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _1341 = natconmap_lb;
    _checked_ptr_1<double> _ptr__1341(_1341 ? _1341->raw() : nullptr,_1341 ? _1341->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _1342 = natconmap_ub;
    _checked_ptr_1<double> _ptr__1342(_1342 ? _1342->raw() : nullptr,_1342 ? _1342->size(0) : 0);
    {
      int _7242 = (int)0;
      int _7243 = _1320;
      for (int _1343 = _7242; _1343 < _7243; ++_1343)
      {
        {
          _ptr__1340[_ptr__1333[_1343]] = _ptr__1317[safe_add( _1325,_1343 )];
        }
      }
      if ((NULL == _1338.get()))
      {
        {
          int _7244 = (int)0;
          int _7245 = _1320;
          for (int _1344 = _7244; _1344 < _7245; ++_1344)
          {
            {
              _ptr__1341[_ptr__1333[_1344]] = (int)0;
              _ptr__1342[_ptr__1333[_1344]] = (int)0;
            }
          }
        }
      }
      else if(_1339)
      {
        {
          int _7246 = (int)0;
          int _7247 = _1320;
          for (int _1345 = _7246; _1345 < _7247; ++_1345)
          {
            {
              _ptr__1341[_ptr__1333[_1345]] = _ptr__1338[(int)0];
              _ptr__1342[_ptr__1333[_1345]] = _ptr__1338[(int)0];
            }
          }
        }
      }
      else if((NULL != _1336.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1318)));
          _checked_ptr_1<int> _ptr__1346(_1346 ? _1346->raw() : nullptr,_1346 ? _1346->size(0) : 0);
          _ptr__1346[(_1318 - (int)1)] = (int)1;
          int _7248 = (int)1;
          int _7249 = _1318;
          for (int _1347 = _7248; _1347 < _7249; ++_1347)
          {
            {
              _ptr__1346[((_1318 - _1347) - (int)1)] = safe_mul( _ptr__1346[(_1318 - _1347)],_ptr__1327[(_1318 - _1347)] );
            }
          }
          int _7250 = (int)0;
          int _7251 = (int)((_1336)->size(0));
          for (int _1348 = _7250; _1348 < _7251; ++_1348)
          {
            {
              int _1349 = (int)0;
              int _7252 = (int)0;
              int _7253 = _1318;
              for (int _1350 = _7252; _1350 < _7253; ++_1350)
              {
                {
                  _1349 += safe_mul( _ptr__1346[_1350],((*_1336)(_1348,_1350)) );
                }
              }
              _ptr__1341[_ptr__1333[_1349]] = _ptr__1338[_1348];
              _ptr__1342[_ptr__1333[_1349]] = _ptr__1338[_1348];
            }
          }
        }
      }
      else if(_1337)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1351 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1318)));
          _checked_ptr_1<int> _ptr__1351(_1351 ? _1351->raw() : nullptr,_1351 ? _1351->size(0) : 0);
          _ptr__1351[(_1318 - (int)1)] = (int)1;
          int _7254 = (int)1;
          int _7255 = _1318;
          for (int _1352 = _7254; _1352 < _7255; ++_1352)
          {
            {
              _ptr__1351[((_1318 - _1352) - (int)1)] = safe_mul( _ptr__1351[(_1318 - _1352)],_ptr__1327[(_1318 - _1352)] );
            }
          }
          int _7256 = (int)0;
          int _7257 = (int)((_1336)->size(0));
          for (int _1353 = _7256; _1353 < _7257; ++_1353)
          {
            {
              int _1354 = (int)0;
              int _7258 = (int)0;
              int _7259 = _1318;
              for (int _1355 = _7258; _1355 < _7259; ++_1355)
              {
                {
                  _1354 += safe_mul( _ptr__1351[_1355],((*_1336)(_1353,_1355)) );
                }
              }
              _ptr__1341[_ptr__1333[_1354]] = (int)0;
              _ptr__1342[_ptr__1333[_1354]] = (int)0;
            }
          }
        }
      }
      else
      {
        {
          int _7260 = (int)0;
          int _7261 = _1320;
          for (int _1356 = _7260; _1356 < _7261; ++_1356)
          {
            {
              _ptr__1341[_ptr__1333[_1356]] = _ptr__1338[_1356];
              _ptr__1342[_ptr__1333[_1356]] = _ptr__1338[_1356];
            }
          }
        }
      }
    }
    std::vector<double> _7262;
    for (int _1357 = (int)0, _7263 = (int)((_1333)->size(0)); _1357 < _7263 ; ++_1357)
    {
      _7262.push_back(_ptr__1341[_ptr__1333[_1357]]);
    }
    auto _7264 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7262.size()),_7262.begin(),_7262.end()));
    _1331 = _7264;
    _ptr__1331.update(_1331 ? _1331->raw() : nullptr, _1331 ? _1331->size(0) : 0);
  }
  int _7265 = (int)0;
  int _7266 = _1329;
  for (int _1358 = _7265; _1358 < _7266; ++_1358)
  {
    {
      ((*natconmap_idx)(_ptr__1333[_1358])) = _1332;
      ((*natconmap_slackidx)(_ptr__1333[_1358])) = (int)0;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1313)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      ((*natconmap_type)(_1332)) = (int)1;
      task_con_putboundlist_fr(_1333);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1313)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      ((*natconmap_type)(_1332)) = (int)3;
      task_con_putboundlist_up(_1333,_1331);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1313)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      ((*natconmap_type)(_1332)) = (int)2;
      task_con_putboundlist_lo(_1333,_1331);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1313)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      ((*natconmap_type)(_1332)) = (int)5;
      task_con_putboundlist_fx(_1333,_1331);
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1359 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1311,_1332,_1327,_1333);
  ((*cons)(_1332)) = (_1359).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1311).size()) > (int)0))
  {
    {
      con_map->setItem(_1311,_1332);
    }
  }
  {}
  return (_1359).as<::mosek::fusion::Constraint>();
}
std::string mosek::fusion::Model::getVersion  ( ) { return mosek::fusion::p_Model::getVersion(); }std::string mosek::fusion::p_Model::getVersion(){
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
bool mosek::fusion::Model :: hasConstraint(const std::string & _1360) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1360); }bool mosek::fusion::p_Model::hasConstraint(const std::string & _1360){
  return con_map->hasItem(_1360);
}
bool mosek::fusion::Model :: hasVariable(const std::string & _1361) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1361); }bool mosek::fusion::p_Model::hasVariable(const std::string & _1361){
  return var_map->hasItem(_1361);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int _1362) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1362); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int _1362) { return __mosek_2fusion_2Model__getConstraint(_1362); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int _1362){
  return (((*cons)(_1362))).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1363) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1363); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1363) { return __mosek_2fusion_2Model__getConstraint(_1363); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1363){
  monty::rc_ptr< ::mosek::fusion::ModelConstraint > _7267;
  bool _7268 = con_map->hasItem(_1363);
  if (_7268)
  {
    _7267 = ((*cons)(con_map->getItem(_1363)));
  }
  else
  {
    _7267 = nullptr;
  }
  return (_7267).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int _1364) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1364); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int _1364) { return __mosek_2fusion_2Model__getVariable(_1364); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int _1364){
  return (((*vars)(_1364))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1365) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1365); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1365) { return __mosek_2fusion_2Model__getVariable(_1365); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1365){
  if (var_map->hasItem(_1365))
  {
    {
      int _1366 = var_map->getItem(_1365);
      if ((_1366 < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1366,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1366))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName(){
  return model_name;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone(){
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
void mosek::fusion::p_Model::destroy(){xs.reset();ws.reset();rs.reset();con_map.reset();cons.reset();natconmap_type.reset();natconmap_ub.reset();natconmap_lb.reset();natconmap_efix.reset();natconmap_idx.reset();natconmap_slackidx.reset();natconmap_blockid.reset();natconmap.reset();initsol_xx_flag.reset();initsol_xx.reset();var_map.reset();barvars.reset();natbarvarmap_ptr.reset();natbarvarmap_num.reset();natbarvar_dim.reset();natbarvar_ptr.reset();natbarvar_j.reset();natbarvar_i.reset();natbarvar_idx.reset();natvarmap_type.reset();natconemap_dim.reset();natconemap.reset();vars.reset();natvarmap_idx.reset();natvarmap_blockid.reset();natvarmap.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1367,    std::shared_ptr< monty::ndarray< int,1 > > _1368,    std::shared_ptr< monty::ndarray< long long,1 > > _1369,    std::shared_ptr< monty::ndarray< long long,1 > > _1370){ return new mosek::fusion::SliceVariable(_1367,_1368,_1369,_1370); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1367,    std::shared_ptr< monty::ndarray< int,1 > > _1368,    std::shared_ptr< monty::ndarray< long long,1 > > _1369,    std::shared_ptr< monty::ndarray< long long,1 > > _1370) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1367,_1368,_1369,_1370); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1367,    std::shared_ptr< monty::ndarray< int,1 > > _1368,    std::shared_ptr< monty::ndarray< long long,1 > > _1369,    std::shared_ptr< monty::ndarray< long long,1 > > _1370){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1368(_1368 ? _1368->raw() : nullptr, _1368 ? _1368->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1369(_1369 ? _1369->raw() : nullptr, _1369 ? _1369->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1370(_1370 ? _1370->raw() : nullptr, _1370 ? _1370->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1367,_1368,_1369,_1370);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _1370;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _1369;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _1368;
  }
}void mosek::fusion::p_SliceVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1371,    monty::rc_ptr< ::mosek::fusion::Model > _1372){ return new mosek::fusion::SymRangedVariable(_1371,_1372); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1371,    monty::rc_ptr< ::mosek::fusion::Model > _1372) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1371,_1372); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1371,    monty::rc_ptr< ::mosek::fusion::Model > _1372){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1371,_1372);
    names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1371)->names_flushed;
    name = mosek::fusion::p_SymRangedVariable::_get_impl(_1371)->name;
    sparsity = mosek::fusion::p_SymRangedVariable::_get_impl(_1371)->sparsity;
    nativeidxs = mosek::fusion::p_SymRangedVariable::_get_impl(_1371)->nativeidxs;
    dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1371)->dim;
  }
}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1373,    const std::string &  _1374,    long long _1375,    int _1376,    std::shared_ptr< monty::ndarray< long long,1 > > _1377,    std::shared_ptr< monty::ndarray< int,1 > > _1378){ return new mosek::fusion::SymRangedVariable(_1373,_1374,_1375,_1376,_1377,_1378); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1373,    const std::string &  _1374,    long long _1375,    int _1376,    std::shared_ptr< monty::ndarray< long long,1 > > _1377,    std::shared_ptr< monty::ndarray< int,1 > > _1378) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1373,_1374,_1375,_1376,_1377,_1378); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1373,    const std::string &  _1374,    long long _1375,    int _1376,    std::shared_ptr< monty::ndarray< long long,1 > > _1377,    std::shared_ptr< monty::ndarray< int,1 > > _1378){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1377(_1377 ? _1377->raw() : nullptr, _1377 ? _1377->size(0) : 0);
    _checked_ptr_1<int> _ptr__1378(_1378 ? _1378->raw() : nullptr, _1378 ? _1378->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1373,_1374,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1376),(int)(_1376)}),_1375,::mosek::fusion::p_SymRangedVariable::mirror_sp(_1376,_1377),::mosek::fusion::p_SymRangedVariable::mirror_idxs(_1376,_1377,_1378));
    names_flushed = false;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->name = _1374;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->nativeidxs = _1378;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->sparsity = _1377;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->dim = _1376;
  }
}void mosek::fusion::p_SymRangedVariable::dual_u(int _1379,std::shared_ptr< monty::ndarray< double,1 > > _1380){
  _checked_ptr_1<double> _ptr__1380(_1380 ? _1380->raw() : nullptr, _1380 ? _1380->size(0) : 0);
  dual_lu(_1379,_1380,false);
}
void mosek::fusion::p_SymRangedVariable::dual_l(int _1381,std::shared_ptr< monty::ndarray< double,1 > > _1382){
  _checked_ptr_1<double> _ptr__1382(_1382 ? _1382->raw() : nullptr, _1382 ? _1382->size(0) : 0);
  dual_lu(_1381,_1382,true);
}
void mosek::fusion::p_SymRangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1383 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _7269 = (int)0;
          int _7270 = (int)((nativeidxs)->size(0));
          for (int _1384 = _7269; _1384 < _7270; ++_1384)
          {
            {
              std::string _7271;
              bool _7272 = ((int)((name).size()) == (int)0);
              if (_7272)
              {
                _7271 = std::string ("");
              }
              else
              {
                _7271 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1384 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1384 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1383.get())->varname(((*nativeidxs)(_1384)),_7271);
            }
          }
        }
      }
      else
      {
        {
          int _7273 = (int)0;
          int _7274 = (int)((sparsity)->size(0));
          for (int _1385 = _7273; _1385 < _7274; ++_1385)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1383.get())->varname(((*nativeidxs)(_1385)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1385)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1385)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::__mosek_2fusion_2SymRangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1386){
  return (::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(::mosek::fusion::SymRangedVariable::t(_pubthis),_1386)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_idxs(int _1387,std::shared_ptr< monty::ndarray< long long,1 > > _1388,std::shared_ptr< monty::ndarray< int,1 > > _1389){
  _checked_ptr_1<long long> _ptr__1388(_1388 ? _1388->raw() : nullptr, _1388 ? _1388->size(0) : 0);
  _checked_ptr_1<int> _ptr__1389(_1389 ? _1389->raw() : nullptr, _1389 ? _1389->size(0) : 0);
  if ((NULL == _1388.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1390 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1387,_1387 ))));
      _checked_ptr_1<long long> _ptr__1390(_1390 ? _1390->raw() : nullptr,_1390 ? _1390->size(0) : 0);
      int _1391 = (int)0;
      {
        int _7275 = (int)0;
        int _7276 = _1387;
        for (int _1392 = _7275; _1392 < _7276; ++_1392)
        {
          {
            _ptr__1390[safe_add( safe_mul( _1392,_1387 ),_1392 )] = safe_add( _ptr__1389[_1391],(int)1 );
            ++ _1391;
            int _7277 = safe_add( _1392,(int)1 );
            int _7278 = _1387;
            for (int _1393 = _7277; _1393 < _7278; ++_1393)
            {
              {
                _ptr__1390[safe_add( safe_mul( _1392,_1387 ),_1393 )] = safe_add( _ptr__1389[_1391],(int)1 );
                _ptr__1390[safe_add( safe_mul( _1393,_1387 ),_1392 )] = safe_add( _ptr__1389[_1391],(int)1 );
                ++ _1391;
              }
            }
          }
        }
      }
      return _1390;
    }
  }
  else
  {
    {
      int _1394 = (int)0;
      {
        int _7279 = (int)0;
        int _7280 = (int)((_1388)->size(0));
        for (int _1395 = _7279; _1395 < _7280; ++_1395)
        {
          {
            int _7281;
            bool _7282 = ((_ptr__1388[_1395] % safe_add( _1387,(int)1 )) == (int)0);
            if (_7282)
            {
              _7281 = (int)1;
            }
            else
            {
              _7281 = (int)2;
            }
            _1394 += _7281;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1396 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1394)));
      _checked_ptr_1<long long> _ptr__1396(_1396 ? _1396->raw() : nullptr,_1396 ? _1396->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1397 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1394)));
      _checked_ptr_1<long long> _ptr__1397(_1397 ? _1397->raw() : nullptr,_1397 ? _1397->size(0) : 0);
      {
        int _1398 = (int)0;
        int _7283 = (int)0;
        int _7284 = (int)((_1388)->size(0));
        for (int _1399 = _7283; _1399 < _7284; ++_1399)
        {
          {
            long long _1400 = (_ptr__1388[_1399] / _1387);
            long long _1401 = (_ptr__1388[_1399] % _1387);
            _ptr__1396[_1398] = _ptr__1388[_1399];
            _ptr__1397[_1398] = safe_add( _ptr__1389[_1399],(int)1 );
            ++ _1398;
            if ((_1400 != _1401))
            {
              {
                _ptr__1396[_1398] = safe_add( safe_mul( _1401,_1387 ),_1400 );
                _ptr__1397[_1398] = safe_add( _ptr__1389[_1399],(int)1 );
                ++ _1398;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7285;
      for (int _1403 = (int)0, _7286 = _1394; _1403 < _7286 ; ++_1403)
      {
        _7285.push_back(_1403);
      }
      auto _7287 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7285.size()),_7285.begin(),_7285.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1402 = _7287;
      _checked_ptr_1<long long> _ptr__1402(_1402 ? _1402->raw() : nullptr,_1402 ? _1402->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1402,_1396,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1394));
      std::vector<long long> _7288;
      for (int _1404 = (int)0, _7289 = _1394; _1404 < _7289 ; ++_1404)
      {
        _7288.push_back(_ptr__1397[_ptr__1402[_1404]]);
      }
      auto _7290 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7288.size()),_7288.begin(),_7288.end()));
      return _7290;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_sp(int _1405,std::shared_ptr< monty::ndarray< long long,1 > > _1406){
  _checked_ptr_1<long long> _ptr__1406(_1406 ? _1406->raw() : nullptr, _1406 ? _1406->size(0) : 0);
  if ((NULL == _1406.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1407 = (int)0;
      {
        int _7291 = (int)0;
        int _7292 = (int)((_1406)->size(0));
        for (int _1408 = _7291; _1408 < _7292; ++_1408)
        {
          {
            int _7293;
            bool _7294 = ((_ptr__1406[_1408] % safe_add( _1405,(int)1 )) == (int)0);
            if (_7294)
            {
              _7293 = (int)1;
            }
            else
            {
              _7293 = (int)2;
            }
            _1407 += _7293;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1409 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1407)));
      _checked_ptr_1<long long> _ptr__1409(_1409 ? _1409->raw() : nullptr,_1409 ? _1409->size(0) : 0);
      {
        int _1410 = (int)0;
        int _7295 = (int)0;
        int _7296 = (int)((_1406)->size(0));
        for (int _1411 = _7295; _1411 < _7296; ++_1411)
        {
          {
            long long _1412 = (_ptr__1406[_1411] / _1405);
            long long _1413 = (_ptr__1406[_1411] % _1405);
            _ptr__1409[_1410] = _ptr__1406[_1411];
            ++ _1410;
            if ((_1412 != _1413))
            {
              {
                _ptr__1409[_1410] = safe_add( safe_mul( _1413,_1405 ),_1412 );
                ++ _1410;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7297;
      for (int _1415 = (int)0, _7298 = _1407; _1415 < _7298 ; ++_1415)
      {
        _7297.push_back(_1415);
      }
      auto _7299 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7297.size()),_7297.begin(),_7297.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1414 = _7299;
      _checked_ptr_1<long long> _ptr__1414(_1414 ? _1414->raw() : nullptr,_1414 ? _1414->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1414,_1409,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1407));
      std::vector<long long> _7300;
      for (int _1416 = (int)0, _7301 = _1407; _1416 < _7301 ; ++_1416)
      {
        _7300.push_back(_ptr__1409[_ptr__1414[_1416]]);
      }
      auto _7302 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7300.size()),_7300.begin(),_7300.end()));
      return _7302;
    }
  }
}
void mosek::fusion::p_SymRangedVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1417,    monty::rc_ptr< ::mosek::fusion::Model > _1418){ return new mosek::fusion::RangedVariable(_1417,_1418); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1417,    monty::rc_ptr< ::mosek::fusion::Model > _1418) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1417,_1418); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1417,    monty::rc_ptr< ::mosek::fusion::Model > _1418){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1417,_1418);
    name = mosek::fusion::p_RangedVariable::_get_impl(_1417)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_1417)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_1417)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1417)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_1417)->shape;
  }
}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1419,    const std::string &  _1420,    long long _1421,    std::shared_ptr< monty::ndarray< int,1 > > _1422,    std::shared_ptr< monty::ndarray< long long,1 > > _1423,    std::shared_ptr< monty::ndarray< int,1 > > _1424){ return new mosek::fusion::RangedVariable(_1419,_1420,_1421,_1422,_1423,_1424); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1419,    const std::string &  _1420,    long long _1421,    std::shared_ptr< monty::ndarray< int,1 > > _1422,    std::shared_ptr< monty::ndarray< long long,1 > > _1423,    std::shared_ptr< monty::ndarray< int,1 > > _1424) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1419,_1420,_1421,_1422,_1423,_1424); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1419,    const std::string &  _1420,    long long _1421,    std::shared_ptr< monty::ndarray< int,1 > > _1422,    std::shared_ptr< monty::ndarray< long long,1 > > _1423,    std::shared_ptr< monty::ndarray< int,1 > > _1424){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1422(_1422 ? _1422->raw() : nullptr, _1422 ? _1422->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1423(_1423 ? _1423->raw() : nullptr, _1423 ? _1423->size(0) : 0);
    _checked_ptr_1<int> _ptr__1424(_1424 ? _1424->raw() : nullptr, _1424 ? _1424->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1419,_1420,_1422,_1421,_1423,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_1424));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _1424;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _1423;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _1420;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _1422;
    names_flushed = false;
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(long long _1425,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1426) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_1425,_1426); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(long long _1425,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1426) { return __mosek_2fusion_2RangedVariable__elementDesc(_1425,_1426); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(long long _1425,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1426){
  _pubthis->elementName(_1425,_1426);
  _1426->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _1426;
}
void mosek::fusion::p_RangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1427 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1428 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1428->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1428->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _7303 = (int)1;
          int _7304 = _pubthis->getND();
          for (int _1429 = _7303; _1429 < _7304; ++_1429)
          {
            {
              _1428->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1429);
            }
          }
        }
      }
      {}
      _1428->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      mosek::fusion::p_Model::_get_impl(_1427.get())->varnames(nativeidxs,_1428->toString(),_pubthis->getShape(),sparsity);
      names_flushed = true;
    }
  }
  {}
}
void mosek::fusion::p_RangedVariable::dual_u(int _1430,std::shared_ptr< monty::ndarray< double,1 > > _1431){
  _checked_ptr_1<double> _ptr__1431(_1431 ? _1431->raw() : nullptr, _1431 ? _1431->size(0) : 0);
  dual_lu(_1430,_1431,false);
}
void mosek::fusion::p_RangedVariable::dual_l(int _1432,std::shared_ptr< monty::ndarray< double,1 > > _1433){
  _checked_ptr_1<double> _ptr__1433(_1433 ? _1433->raw() : nullptr, _1433 ? _1433->size(0) : 0);
  dual_lu(_1432,_1433,true);
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1434){
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_1434)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1435){
  _checked_ptr_1<int> _ptr__1435(_1435 ? _1435->raw() : nullptr, _1435 ? _1435->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1436 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1435)->size(0)))));
  _checked_ptr_1<long long> _ptr__1436(_1436 ? _1436->raw() : nullptr,_1436 ? _1436->size(0) : 0);
  int _7305 = (int)0;
  int _7306 = (int)((_1435)->size(0));
  for (int _1437 = _7305; _1437 < _7306; ++_1437)
  {
    {
      _ptr__1436[_1437] = safe_add( _ptr__1435[_1437],(int)1 );
    }
  }
  return _1436;
}
void mosek::fusion::p_RangedVariable::destroy(){shape.reset();nativeidxs.reset();sparsity.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1438,    monty::rc_ptr< ::mosek::fusion::Model > _1439){ return new mosek::fusion::LinearPSDVariable(_1438,_1439); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1438,    monty::rc_ptr< ::mosek::fusion::Model > _1439) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1438,_1439); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1438,    monty::rc_ptr< ::mosek::fusion::Model > _1439){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1438,_1439);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_1438)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_1438)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_1438)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_1438)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_1438)->nativeidxs;
  }
}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1440,    const std::string &  _1441,    int _1442,    std::shared_ptr< monty::ndarray< int,1 > > _1443,    int _1444,    std::shared_ptr< monty::ndarray< long long,1 > > _1445){ return new mosek::fusion::LinearPSDVariable(_1440,_1441,_1442,_1443,_1444,_1445); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1440,    const std::string &  _1441,    int _1442,    std::shared_ptr< monty::ndarray< int,1 > > _1443,    int _1444,    std::shared_ptr< monty::ndarray< long long,1 > > _1445) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1440,_1441,_1442,_1443,_1444,_1445); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1440,    const std::string &  _1441,    int _1442,    std::shared_ptr< monty::ndarray< int,1 > > _1443,    int _1444,    std::shared_ptr< monty::ndarray< long long,1 > > _1445){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1443(_1443 ? _1443->raw() : nullptr, _1443 ? _1443->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1445(_1445 ? _1445->raw() : nullptr, _1445 ? _1445->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1440,_1441,_1443,_1442,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_1445));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _1441;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _1444;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _1442;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _1443;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _1445;
  }
}void mosek::fusion::p_LinearPSDVariable::flushNames(){
}
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1446 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1446->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1446->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1446->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7307 = (int)1;
  int _7308 = (int)((shape)->size(0));
  for (int _1447 = _7307; _1447 < _7308; ++_1447)
  {
    {
      _1446->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1447)));
    }
  }
  _1446->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1446->toString();
}
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1448) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_1448); }void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1448){
  _checked_ptr_1<long long> _ptr__1448(_1448 ? _1448->raw() : nullptr, _1448 ? _1448->size(0) : 0);
}
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1449) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_1449); }void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1449){
  _checked_ptr_1<long long> _ptr__1449(_1449 ? _1449->raw() : nullptr, _1449 ? _1449->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1450){
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_1450)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< long long,1 > > _1451){
  _checked_ptr_1<long long> _ptr__1451(_1451 ? _1451->raw() : nullptr, _1451 ? _1451->size(0) : 0);
  std::vector<long long> _7309;
  for (int _1452 = (int)0, _7310 = (int)((_1451)->size(0)); _1452 < _7310 ; ++_1452)
  {
    _7309.push_back((-safe_add( _ptr__1451[_1452],(int)1 )));
  }
  auto _7311 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7309.size()),_7309.begin(),_7309.end()));
  return _7311;
}
void mosek::fusion::p_LinearPSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1453,    monty::rc_ptr< ::mosek::fusion::Model > _1454){ return new mosek::fusion::PSDVariable(_1453,_1454); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1453,    monty::rc_ptr< ::mosek::fusion::Model > _1454) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1453,_1454); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1453,    monty::rc_ptr< ::mosek::fusion::Model > _1454){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1453,_1454);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_1453)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_1453)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_1453)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_1453)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_1453)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_1453)->conedim2;
  }
}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1455,    const std::string &  _1456,    int _1457,    std::shared_ptr< monty::ndarray< int,1 > > _1458,    int _1459,    int _1460,    std::shared_ptr< monty::ndarray< long long,1 > > _1461){ return new mosek::fusion::PSDVariable(_1455,_1456,_1457,_1458,_1459,_1460,_1461); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1455,    const std::string &  _1456,    int _1457,    std::shared_ptr< monty::ndarray< int,1 > > _1458,    int _1459,    int _1460,    std::shared_ptr< monty::ndarray< long long,1 > > _1461) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1455,_1456,_1457,_1458,_1459,_1460,_1461); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1455,    const std::string &  _1456,    int _1457,    std::shared_ptr< monty::ndarray< int,1 > > _1458,    int _1459,    int _1460,    std::shared_ptr< monty::ndarray< long long,1 > > _1461){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1458(_1458 ? _1458->raw() : nullptr, _1458 ? _1458->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1461(_1461 ? _1461->raw() : nullptr, _1461 ? _1461->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1455,_1456,_1458,_1457,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_1458,_1459,_1460,_1461));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _1457;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _1461;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _1456;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _1458;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _1459;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _1460;
  }
}void mosek::fusion::p_PSDVariable::flushNames(){
}
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1462 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1462->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1462->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1462->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7312 = (int)1;
  int _7313 = (int)((shape)->size(0));
  for (int _1463 = _7312; _1463 < _7313; ++_1463)
  {
    {
      _1462->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1463)));
    }
  }
  _1462->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1462->toString();
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(long long _1464,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1465) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_1464,_1465); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(long long _1464,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1465) { return __mosek_2fusion_2PSDVariable__elementDesc(_1464,_1465); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(long long _1464,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1465){
  _pubthis->elementName(_1464,_1465);
  _1465->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _1465;
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1466){
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_1466)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int,1 > > _1467,int _1468,int _1469,std::shared_ptr< monty::ndarray< long long,1 > > _1470){
  _checked_ptr_1<int> _ptr__1467(_1467 ? _1467->raw() : nullptr, _1467 ? _1467->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1470(_1470 ? _1470->raw() : nullptr, _1470 ? _1470->size(0) : 0);
  int _1471 = (int)((_1467)->size(0));
  bool _1472 = (_1468 < _1469);
  int _7314;
  bool _7315 = _1472;
  if (_7315)
  {
    _7314 = _1468;
  }
  else
  {
    _7314 = _1469;
  }
  int _1473 = _7314;
  int _7316;
  bool _7317 = (!_1472);
  if (_7317)
  {
    _7316 = _1468;
  }
  else
  {
    _7316 = _1469;
  }
  int _1474 = _7316;
  int _1475 = (int)1;
  int _7318 = (int)0;
  int _7319 = _1473;
  for (int _1476 = _7318; _1476 < _7319; ++_1476)
  {
    {
      _1475 *= _ptr__1467[_1476];
    }
  }
  int _1477 = _ptr__1467[_1473];
  int _1478 = (int)1;
  int _7320 = safe_add( _1473,(int)1 );
  int _7321 = _1474;
  for (int _1479 = _7320; _1479 < _7321; ++_1479)
  {
    {
      _1478 *= _ptr__1467[_1479];
    }
  }
  int _1480 = _ptr__1467[_1474];
  int _1481 = (int)1;
  int _7322 = safe_add( _1474,(int)1 );
  int _7323 = _1471;
  for (int _1482 = _7322; _1482 < _7323; ++_1482)
  {
    {
      _1481 *= _ptr__1467[_1482];
    }
  }
  int _1483 = safe_mul( safe_mul( safe_mul( safe_mul( _1475,_1477 ),_1478 ),_1480 ),_1481 );
  std::shared_ptr< monty::ndarray< long long,1 > > _1484 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1483)));
  _checked_ptr_1<long long> _ptr__1484(_1484 ? _1484->raw() : nullptr,_1484 ? _1484->size(0) : 0);
  int _1485 = _1481;
  int _1486 = safe_mul( _1485,_1480 );
  int _1487 = safe_mul( _1486,_1478 );
  int _1488 = safe_mul( _1487,_1487 );
  {
    int _1489 = (int)0;
    int _7324 = (int)0;
    int _7325 = _1475;
    for (int _1490 = _7324; _1490 < _7325; ++_1490)
    {
      {
        int _7326 = (int)0;
        int _7327 = _1480;
        for (int _1491 = _7326; _1491 < _7327; ++_1491)
        {
          {
            int _7328 = (int)0;
            int _7329 = _1478;
            for (int _1492 = _7328; _1492 < _7329; ++_1492)
            {
              {
                int _7330 = _1491;
                int _7331 = _1477;
                for (int _1493 = _7330; _1493 < _7331; ++_1493)
                {
                  {
                    int _7332 = (int)0;
                    int _7333 = _1481;
                    for (int _1494 = _7332; _1494 < _7333; ++_1494)
                    {
                      {
                        _ptr__1484[safe_add( safe_add( safe_add( safe_add( safe_mul( _1490,_1488 ),safe_mul( _1493,_1487 ) ),safe_mul( _1492,_1486 ) ),safe_mul( _1491,_1485 ) ),_1494 )] = (-safe_add( _ptr__1470[_1489],(int)1 ));
                        _ptr__1484[safe_add( safe_add( safe_add( safe_add( safe_mul( _1490,_1488 ),safe_mul( _1491,_1487 ) ),safe_mul( _1492,_1486 ) ),safe_mul( _1493,_1485 ) ),_1494 )] = (-safe_add( _ptr__1470[_1489],(int)1 ));
                        ++ _1489;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _1484;
}
void mosek::fusion::p_PSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1495,    monty::rc_ptr< ::mosek::fusion::Model > _1496){ return new mosek::fusion::SymLinearVariable(_1495,_1496); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1495,    monty::rc_ptr< ::mosek::fusion::Model > _1496) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1495,_1496); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1495,    monty::rc_ptr< ::mosek::fusion::Model > _1496){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1495,_1496);
    names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_1495)->names_flushed;
    name = mosek::fusion::p_SymLinearVariable::_get_impl(_1495)->name;
    sparsity = mosek::fusion::p_SymLinearVariable::_get_impl(_1495)->sparsity;
    nativeidxs = mosek::fusion::p_SymLinearVariable::_get_impl(_1495)->nativeidxs;
    dim = mosek::fusion::p_SymLinearVariable::_get_impl(_1495)->dim;
  }
}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1497,    const std::string &  _1498,    long long _1499,    int _1500,    std::shared_ptr< monty::ndarray< long long,1 > > _1501,    std::shared_ptr< monty::ndarray< int,1 > > _1502){ return new mosek::fusion::SymLinearVariable(_1497,_1498,_1499,_1500,_1501,_1502); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1497,    const std::string &  _1498,    long long _1499,    int _1500,    std::shared_ptr< monty::ndarray< long long,1 > > _1501,    std::shared_ptr< monty::ndarray< int,1 > > _1502) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1497,_1498,_1499,_1500,_1501,_1502); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1497,    const std::string &  _1498,    long long _1499,    int _1500,    std::shared_ptr< monty::ndarray< long long,1 > > _1501,    std::shared_ptr< monty::ndarray< int,1 > > _1502){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1501(_1501 ? _1501->raw() : nullptr, _1501 ? _1501->size(0) : 0);
    _checked_ptr_1<int> _ptr__1502(_1502 ? _1502->raw() : nullptr, _1502 ? _1502->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1497,_1498,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1500),(int)(_1500)}),_1499,::mosek::fusion::p_SymLinearVariable::mirror_sp(_1500,_1501),::mosek::fusion::p_SymLinearVariable::mirror_idxs(_1500,_1501,_1502));
    names_flushed = false;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->name = _1498;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->nativeidxs = _1502;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->sparsity = _1501;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->dim = _1500;
  }
}void mosek::fusion::p_SymLinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1503 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _7334 = (int)0;
          int _7335 = (int)((nativeidxs)->size(0));
          for (int _1504 = _7334; _1504 < _7335; ++_1504)
          {
            {
              std::string _7336;
              bool _7337 = ((int)((name).size()) == (int)0);
              if (_7337)
              {
                _7336 = std::string ("");
              }
              else
              {
                _7336 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1504 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1504 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1503.get())->varname(((*nativeidxs)(_1504)),_7336);
            }
          }
        }
      }
      else
      {
        {
          int _7338 = (int)0;
          int _7339 = (int)((sparsity)->size(0));
          for (int _1505 = _7338; _1505 < _7339; ++_1505)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1503.get())->varname(((*nativeidxs)(_1505)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1505)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1505)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::__mosek_2fusion_2SymLinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1506){
  return (::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(::mosek::fusion::SymLinearVariable::t(_pubthis),_1506)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_idxs(int _1507,std::shared_ptr< monty::ndarray< long long,1 > > _1508,std::shared_ptr< monty::ndarray< int,1 > > _1509){
  _checked_ptr_1<long long> _ptr__1508(_1508 ? _1508->raw() : nullptr, _1508 ? _1508->size(0) : 0);
  _checked_ptr_1<int> _ptr__1509(_1509 ? _1509->raw() : nullptr, _1509 ? _1509->size(0) : 0);
  if ((NULL == _1508.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1510 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1507,_1507 ))));
      _checked_ptr_1<long long> _ptr__1510(_1510 ? _1510->raw() : nullptr,_1510 ? _1510->size(0) : 0);
      int _1511 = (int)0;
      {
        int _7340 = (int)0;
        int _7341 = _1507;
        for (int _1512 = _7340; _1512 < _7341; ++_1512)
        {
          {
            _ptr__1510[safe_add( safe_mul( _1512,_1507 ),_1512 )] = safe_add( _ptr__1509[_1511],(int)1 );
            ++ _1511;
            int _7342 = safe_add( _1512,(int)1 );
            int _7343 = _1507;
            for (int _1513 = _7342; _1513 < _7343; ++_1513)
            {
              {
                _ptr__1510[safe_add( safe_mul( _1512,_1507 ),_1513 )] = safe_add( _ptr__1509[_1511],(int)1 );
                _ptr__1510[safe_add( safe_mul( _1513,_1507 ),_1512 )] = safe_add( _ptr__1509[_1511],(int)1 );
                ++ _1511;
              }
            }
          }
        }
      }
      return _1510;
    }
  }
  else
  {
    {
      int _1514 = (int)0;
      {
        int _7344 = (int)0;
        int _7345 = (int)((_1508)->size(0));
        for (int _1515 = _7344; _1515 < _7345; ++_1515)
        {
          {
            int _7346;
            bool _7347 = ((_ptr__1508[_1515] % safe_add( _1507,(int)1 )) == (int)0);
            if (_7347)
            {
              _7346 = (int)1;
            }
            else
            {
              _7346 = (int)2;
            }
            _1514 += _7346;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1516 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1514)));
      _checked_ptr_1<long long> _ptr__1516(_1516 ? _1516->raw() : nullptr,_1516 ? _1516->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1517 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1514)));
      _checked_ptr_1<long long> _ptr__1517(_1517 ? _1517->raw() : nullptr,_1517 ? _1517->size(0) : 0);
      {
        int _1518 = (int)0;
        int _7348 = (int)0;
        int _7349 = (int)((_1508)->size(0));
        for (int _1519 = _7348; _1519 < _7349; ++_1519)
        {
          {
            long long _1520 = (_ptr__1508[_1519] / _1507);
            long long _1521 = (_ptr__1508[_1519] % _1507);
            _ptr__1516[_1518] = _ptr__1508[_1519];
            _ptr__1517[_1518] = safe_add( _ptr__1509[_1519],(int)1 );
            ++ _1518;
            if ((_1520 != _1521))
            {
              {
                _ptr__1516[_1518] = safe_add( safe_mul( _1521,_1507 ),_1520 );
                _ptr__1517[_1518] = safe_add( _ptr__1509[_1519],(int)1 );
                ++ _1518;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7350;
      for (int _1523 = (int)0, _7351 = _1514; _1523 < _7351 ; ++_1523)
      {
        _7350.push_back(_1523);
      }
      auto _7352 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7350.size()),_7350.begin(),_7350.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1522 = _7352;
      _checked_ptr_1<long long> _ptr__1522(_1522 ? _1522->raw() : nullptr,_1522 ? _1522->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1522,_1516,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1514));
      std::vector<long long> _7353;
      for (int _1524 = (int)0, _7354 = _1514; _1524 < _7354 ; ++_1524)
      {
        _7353.push_back(_ptr__1517[_ptr__1522[_1524]]);
      }
      auto _7355 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7353.size()),_7353.begin(),_7353.end()));
      return _7355;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_sp(int _1525,std::shared_ptr< monty::ndarray< long long,1 > > _1526){
  _checked_ptr_1<long long> _ptr__1526(_1526 ? _1526->raw() : nullptr, _1526 ? _1526->size(0) : 0);
  if ((NULL == _1526.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1527 = (int)0;
      {
        int _7356 = (int)0;
        int _7357 = (int)((_1526)->size(0));
        for (int _1528 = _7356; _1528 < _7357; ++_1528)
        {
          {
            int _7358;
            bool _7359 = ((_ptr__1526[_1528] % safe_add( _1525,(int)1 )) == (int)0);
            if (_7359)
            {
              _7358 = (int)1;
            }
            else
            {
              _7358 = (int)2;
            }
            _1527 += _7358;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1529 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1527)));
      _checked_ptr_1<long long> _ptr__1529(_1529 ? _1529->raw() : nullptr,_1529 ? _1529->size(0) : 0);
      {
        int _1530 = (int)0;
        int _7360 = (int)0;
        int _7361 = (int)((_1526)->size(0));
        for (int _1531 = _7360; _1531 < _7361; ++_1531)
        {
          {
            long long _1532 = (_ptr__1526[_1531] / _1525);
            long long _1533 = (_ptr__1526[_1531] % _1525);
            _ptr__1529[_1530] = _ptr__1526[_1531];
            ++ _1530;
            if ((_1532 != _1533))
            {
              {
                _ptr__1529[_1530] = safe_add( safe_mul( _1533,_1525 ),_1532 );
                ++ _1530;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _7362;
      for (int _1535 = (int)0, _7363 = _1527; _1535 < _7363 ; ++_1535)
      {
        _7362.push_back(_1535);
      }
      auto _7364 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7362.size()),_7362.begin(),_7362.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1534 = _7364;
      _checked_ptr_1<long long> _ptr__1534(_1534 ? _1534->raw() : nullptr,_1534 ? _1534->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1534,_1529,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1527));
      std::vector<long long> _7365;
      for (int _1536 = (int)0, _7366 = _1527; _1536 < _7366 ; ++_1536)
      {
        _7365.push_back(_ptr__1529[_ptr__1534[_1536]]);
      }
      auto _7367 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7365.size()),_7365.begin(),_7365.end()));
      return _7367;
    }
  }
}
void mosek::fusion::p_SymLinearVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1537,    monty::rc_ptr< ::mosek::fusion::Model > _1538){ return new mosek::fusion::LinearVariable(_1537,_1538); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1537,    monty::rc_ptr< ::mosek::fusion::Model > _1538) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1537,_1538); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1537,    monty::rc_ptr< ::mosek::fusion::Model > _1538){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1537,_1538);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_1537)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_1537)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_1537)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_1537)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_1537)->name;
  }
}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1539,    const std::string &  _1540,    long long _1541,    std::shared_ptr< monty::ndarray< int,1 > > _1542,    std::shared_ptr< monty::ndarray< long long,1 > > _1543,    std::shared_ptr< monty::ndarray< int,1 > > _1544){ return new mosek::fusion::LinearVariable(_1539,_1540,_1541,_1542,_1543,_1544); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1539,    const std::string &  _1540,    long long _1541,    std::shared_ptr< monty::ndarray< int,1 > > _1542,    std::shared_ptr< monty::ndarray< long long,1 > > _1543,    std::shared_ptr< monty::ndarray< int,1 > > _1544) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1539,_1540,_1541,_1542,_1543,_1544); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1539,    const std::string &  _1540,    long long _1541,    std::shared_ptr< monty::ndarray< int,1 > > _1542,    std::shared_ptr< monty::ndarray< long long,1 > > _1543,    std::shared_ptr< monty::ndarray< int,1 > > _1544){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1542(_1542 ? _1542->raw() : nullptr, _1542 ? _1542->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1543(_1543 ? _1543->raw() : nullptr, _1543 ? _1543->size(0) : 0);
    _checked_ptr_1<int> _ptr__1544(_1544 ? _1544->raw() : nullptr, _1544 ? _1544->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1539,_1540,_1542,_1541,_1543,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_1544));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _1540;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _1544;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _1543;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _1542;
  }
}std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1545 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1545->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1545->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _7368 = (int)1;
      int _7369 = (int)((shape)->size(0));
      for (int _1546 = _7368; _1546 < _7369; ++_1546)
      {
        {
          _1545->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1546)));
        }
      }
    }
  }
  {}
  _1545->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1545->toString();
}
void mosek::fusion::p_LinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1547 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1548 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1548->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1548->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _7370 = (int)1;
          int _7371 = _pubthis->getND();
          for (int _1549 = _7370; _1549 < _7371; ++_1549)
          {
            {
              _1548->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1549);
            }
          }
        }
      }
      {}
      _1548->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _7372;
      bool _7373 = (_pubthis->getND() > (int)0);
      if (_7373)
      {
        _7372 = _pubthis->getShape();
      }
      else
      {
        _7372 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
      }
      mosek::fusion::p_Model::_get_impl(_1547.get())->varnames(nativeidxs,_1548->toString(),_7372,sparsity);
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1550){
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_1550)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1551){
  _checked_ptr_1<int> _ptr__1551(_1551 ? _1551->raw() : nullptr, _1551 ? _1551->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1552 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1551)->size(0)))));
  _checked_ptr_1<long long> _ptr__1552(_1552 ? _1552->raw() : nullptr,_1552 ? _1552->size(0) : 0);
  int _7374 = (int)0;
  int _7375 = (int)((_1551)->size(0));
  for (int _1553 = _7374; _1553 < _7375; ++_1553)
  {
    {
      _ptr__1552[_1553] = safe_add( _ptr__1551[_1553],(int)1 );
    }
  }
  return _1552;
}
void mosek::fusion::p_LinearVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1554,    monty::rc_ptr< ::mosek::fusion::Model > _1555){ return new mosek::fusion::ConicVariable(_1554,_1555); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1554,    monty::rc_ptr< ::mosek::fusion::Model > _1555) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1554,_1555); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1554,    monty::rc_ptr< ::mosek::fusion::Model > _1555){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1554,_1555);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_1554)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1554)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_1554)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1554)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_1554)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_1554)->name;
  }
}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1556,    const std::string &  _1557,    int _1558,    std::shared_ptr< monty::ndarray< int,1 > > _1559,    std::shared_ptr< monty::ndarray< int,1 > > _1560){ return new mosek::fusion::ConicVariable(_1556,_1557,_1558,_1559,_1560); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1556,    const std::string &  _1557,    int _1558,    std::shared_ptr< monty::ndarray< int,1 > > _1559,    std::shared_ptr< monty::ndarray< int,1 > > _1560) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1556,_1557,_1558,_1559,_1560); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1556,    const std::string &  _1557,    int _1558,    std::shared_ptr< monty::ndarray< int,1 > > _1559,    std::shared_ptr< monty::ndarray< int,1 > > _1560){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1559(_1559 ? _1559->raw() : nullptr, _1559 ? _1559->size(0) : 0);
    _checked_ptr_1<int> _ptr__1560(_1560 ? _1560->raw() : nullptr, _1560 ? _1560->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1556,_1557,_1559,_1558,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_1560));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _1557;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _1558;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _1559;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _1560;
  }
}std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1561 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _1561->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7376 = (int)1;
  int _7377 = (int)((shape)->size(0));
  for (int _1562 = _7376; _1562 < _7377; ++_1562)
  {
    {
      _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1562)));
    }
  }
  _1561->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _1561->toString();
}
void mosek::fusion::p_ConicVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1563 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1564 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1564->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      _1564->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
      int _7378 = (int)1;
      int _7379 = _pubthis->getND();
      for (int _1565 = _7378; _1565 < _7379; ++_1565)
      {
        {
          _1564->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1565);
        }
      }
      _1564->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _7380;
      bool _7381 = (_pubthis->getND() > (int)0);
      if (_7381)
      {
        _7380 = _pubthis->getShape();
      }
      else
      {
        _7380 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      }
      mosek::fusion::p_Model::_get_impl(_1563.get())->varnames(nativeidxs,_1564->toString(),_7380,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1566){
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_1566)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1567){
  _checked_ptr_1<int> _ptr__1567(_1567 ? _1567->raw() : nullptr, _1567 ? _1567->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1568 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1567)->size(0)))));
  _checked_ptr_1<long long> _ptr__1568(_1568 ? _1568->raw() : nullptr,_1568 ? _1568->size(0) : 0);
  int _7382 = (int)0;
  int _7383 = (int)((_1567)->size(0));
  for (int _1569 = _7382; _1569 < _7383; ++_1569)
  {
    {
      _ptr__1568[_1569] = safe_add( _ptr__1567[_1569],(int)1 );
    }
  }
  return _1568;
}
void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _1570,    monty::rc_ptr< ::mosek::fusion::Model > _1571){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1570,_1571);
    name = mosek::fusion::p_ModelVariable::_get_impl(_1570)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_1570)->varid;
    nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_1570)->nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_1570)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_1570)->sparsity;
  }
}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1572,    const std::string &  _1573,    std::shared_ptr< monty::ndarray< int,1 > > _1574,    long long _1575,    std::shared_ptr< monty::ndarray< long long,1 > > _1576,    std::shared_ptr< monty::ndarray< long long,1 > > _1577){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1574(_1574 ? _1574->raw() : nullptr, _1574 ? _1574->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1576(_1576 ? _1576->raw() : nullptr, _1576 ? _1576->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1577(_1577 ? _1577->raw() : nullptr, _1577 ? _1577->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1572,_1574,_1576,_1577);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _1573;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _1575;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _1574;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _1576;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->nativeidxs = _1577;
  }
}void mosek::fusion::ModelVariable :: elementName(long long _1578,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1579) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_1578,_1579); }void mosek::fusion::p_ModelVariable::elementName(long long _1578,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1579){
  std::string _7384;
  bool _7385 = ((int)((name).size()) == (int)0);
  if (_7385)
  {
    _7384 = std::string ("_");
  }
  else
  {
    _7384 = name;
  }
  _1579->__mosek_2fusion_2Utils_2StringBuffer__a(_7384)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_1578))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
void mosek::fusion::p_ModelVariable::destroy(){sparsity.reset();shape.reset();nativeidxs.reset();}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1581){ return new mosek::fusion::NilVariable(_1581); }mosek::fusion::NilVariable::NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1581) :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_1581); }void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _1581){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1581(_1581 ? _1581->raw() : nullptr, _1581 ? _1581->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_1581),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))));
    std::vector<int> _7386;
    for (int _1582 = (int)0, _7387 = (int)((_1581)->size(0)); _1582 < _7387 ; ++_1582)
    {
      _7386.push_back(_ptr__1581[_1582]);
    }
    auto _7388 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7386.size()),_7386.begin(),_7386.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _7388;
  }
}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)}));
  }
}void mosek::fusion::p_NilVariable::flushNames(){
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(long long _1583,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1584) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_1583,_1584); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(long long _1583,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1584) { return __mosek_2fusion_2NilVariable__elementDesc(_1583,_1584); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(long long _1583,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1584){
  return _1584;
}
void mosek::fusion::NilVariable :: elementName(long long _1585,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1586) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_1585,_1586); }void mosek::fusion::p_NilVariable::elementName(long long _1585,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1586){
}
int mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_NilVariable::numInst(){
  return (int)0;
}
int mosek::fusion::NilVariable :: inst(int _1587,std::shared_ptr< monty::ndarray< long long,1 > > _1588,std::shared_ptr< monty::ndarray< long long,1 > > _1589) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1587,_1588,_1589); }int mosek::fusion::p_NilVariable::inst(int _1587,std::shared_ptr< monty::ndarray< long long,1 > > _1588,std::shared_ptr< monty::ndarray< long long,1 > > _1589){
  _checked_ptr_1<long long> _ptr__1588(_1588 ? _1588->raw() : nullptr, _1588 ? _1588->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1589(_1589 ? _1589->raw() : nullptr, _1589 ? _1589->size(0) : 0);
  return (int)0;
}
void mosek::fusion::NilVariable :: inst(int _1590,std::shared_ptr< monty::ndarray< long long,1 > > _1591) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1590,_1591); }void mosek::fusion::p_NilVariable::inst(int _1590,std::shared_ptr< monty::ndarray< long long,1 > > _1591){
  _checked_ptr_1<long long> _ptr__1591(_1591 ? _1591->raw() : nullptr, _1591 ? _1591->size(0) : 0);
}
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1592,bool _1593) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_1592,_1593); }void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1592,bool _1593){
  _checked_ptr_1<double> _ptr__1592(_1592 ? _1592->raw() : nullptr, _1592 ? _1592->size(0) : 0);
}
void mosek::fusion::NilVariable :: values(int _1594,std::shared_ptr< monty::ndarray< double,1 > > _1595,bool _1596) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_1594,_1595,_1596); }void mosek::fusion::p_NilVariable::values(int _1594,std::shared_ptr< monty::ndarray< double,1 > > _1595,bool _1596){
  _checked_ptr_1<double> _ptr__1595(_1595 ? _1595->raw() : nullptr, _1595 ? _1595->size(0) : 0);
}
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_NilVariable::make_continuous(){
}
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_NilVariable::make_integer(){
}
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString(){
  return std::string ("NilVariable");
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1597) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1597); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1597) { return __mosek_2fusion_2NilVariable__index(_1597); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1597) { return __mosek_2fusion_2NilVariable__index(_1597); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1597) { return __mosek_2fusion_2NilVariable__index(_1597); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1597){
  _checked_ptr_1<int> _ptr__1597(_1597 ? _1597->raw() : nullptr, _1597 ? _1597->size(0) : 0);
  std::vector<int> _7389;
  for (int _1598 = (int)0, _7390 = (int)((shape)->size(0)); _1598 < _7390 ; ++_1598)
  {
    _7389.push_back((int)1);
  }
  auto _7391 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7389.size()),_7389.begin(),_7389.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7391)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int _1599) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _1599) { return __mosek_2fusion_2NilVariable__index(_1599); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int _1599) { return __mosek_2fusion_2NilVariable__index(_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(int _1599) { return __mosek_2fusion_2NilVariable__index(_1599); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int _1599){
  std::vector<int> _7392;
  for (int _1600 = (int)0, _7393 = (int)((shape)->size(0)); _1600 < _7393 ; ++_1600)
  {
    _7392.push_back((int)1);
  }
  auto _7394 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7392.size()),_7392.begin(),_7392.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7394)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1601,std::shared_ptr< monty::ndarray< int,1 > > _1602) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1601,_1602); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1601,std::shared_ptr< monty::ndarray< int,1 > > _1602) { return __mosek_2fusion_2NilVariable__slice(_1601,_1602); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1601,std::shared_ptr< monty::ndarray< int,1 > > _1602) { return __mosek_2fusion_2NilVariable__slice(_1601,_1602); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1601,std::shared_ptr< monty::ndarray< int,1 > > _1602) { return __mosek_2fusion_2NilVariable__slice(_1601,_1602); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1601,std::shared_ptr< monty::ndarray< int,1 > > _1602){
  _checked_ptr_1<int> _ptr__1601(_1601 ? _1601->raw() : nullptr, _1601 ? _1601->size(0) : 0);
  _checked_ptr_1<int> _ptr__1602(_1602 ? _1602->raw() : nullptr, _1602 ? _1602->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_1601)->size(0))) || ((int)((shape)->size(0)) != (int)((_1602)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int _7395 = (int)0;
  int _7396 = (int)((_1601)->size(0));
  for (int _1603 = _7395; _1603 < _7396; ++_1603)
  {
    {
      if (((_ptr__1602[_1603] > _ptr__1601[_1603]) || ((_ptr__1601[_1603] < (int)0) || (_ptr__1602[_1603] >= ((*shape)(_1603))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _7397;
  for (int _1604 = (int)0, _7398 = (int)((shape)->size(0)); _1604 < _7398 ; ++_1604)
  {
    _7397.push_back((_ptr__1602[_1604] - _ptr__1601[_1604]));
  }
  auto _7399 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7397.size()),_7397.begin(),_7397.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_7399)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int _1605,int _1606) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1605,_1606); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int _1605,int _1606) { return __mosek_2fusion_2NilVariable__slice(_1605,_1606); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int _1605,int _1606) { return __mosek_2fusion_2NilVariable__slice(_1605,_1606); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(int _1605,int _1606) { return __mosek_2fusion_2NilVariable__slice(_1605,_1606); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int _1605,int _1606){
  if (((_1606 > _1605) || ((_1605 < (int)0) || (_1606 > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_1606 - _1605))}))).as<::mosek::fusion::Variable>();
    }
  }
}
void mosek::fusion::p_NilVariable::destroy(){shape.reset();}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _1607,    monty::rc_ptr< ::mosek::fusion::Model > _1608){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _1608;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_1607)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_1607)->sparsity;
    nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_1607)->nativeidxs;
  }
}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1609,    std::shared_ptr< monty::ndarray< int,1 > > _1610,    std::shared_ptr< monty::ndarray< long long,1 > > _1611,    std::shared_ptr< monty::ndarray< long long,1 > > _1612){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1610(_1610 ? _1610->raw() : nullptr, _1610 ? _1610->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1611(_1611 ? _1611->raw() : nullptr, _1611 ? _1611->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1612(_1612 ? _1612->raw() : nullptr, _1612 ? _1612->size(0) : 0);
    model = _1609;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _1610;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _1611;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs = _1612;
  }
}std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1613 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1613->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1613->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _7400 = (int)1;
      int _7401 = (int)((shape)->size(0));
      for (int _1614 = _7400; _1614 < _7401; ++_1614)
      {
        {
          _1613->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1614)));
        }
      }
    }
  }
  {}
  _1613->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1613->toString();
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__eval() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable::eval() { return __mosek_2fusion_2BaseVariable__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseVariable::__mosek_2fusion_2Expression__eval() { return __mosek_2fusion_2BaseVariable__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__eval(){
  return _pubthis->__mosek_2fusion_2BaseVariable__asExpr()->__mosek_2fusion_2Expression__eval();
}
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1615,monty::rc_ptr< ::mosek::fusion::WorkStack > _1616,monty::rc_ptr< ::mosek::fusion::WorkStack > _1617) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_1615,_1616,_1617); }void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1615,monty::rc_ptr< ::mosek::fusion::WorkStack > _1616,monty::rc_ptr< ::mosek::fusion::WorkStack > _1617){
  int _1618 = (int)((nativeidxs)->size(0));
  int _1619 = _1618;
  int _1620 = (int)((shape)->size(0));
  bool _1621 = (NULL != sparsity.get());
  _1615->alloc_expr(_1620,_1619,_1618,_1621);
  int _1622 = mosek::fusion::p_WorkStack::_get_impl(_1615)->ptr_base;
  int _1623 = mosek::fusion::p_WorkStack::_get_impl(_1615)->nidxs_base;
  int _1624 = mosek::fusion::p_WorkStack::_get_impl(_1615)->sp_base;
  int _1625 = mosek::fusion::p_WorkStack::_get_impl(_1615)->cof_base;
  int _1626 = mosek::fusion::p_WorkStack::_get_impl(_1615)->bfix_base;
  int _1627 = mosek::fusion::p_WorkStack::_get_impl(_1615)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _1628 = mosek::fusion::p_WorkStack::_get_impl(_1615)->i32;
  _checked_ptr_1<int> _ptr__1628(_1628 ? _1628->raw() : nullptr,_1628 ? _1628->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1629 = mosek::fusion::p_WorkStack::_get_impl(_1615)->i64;
  _checked_ptr_1<long long> _ptr__1629(_1629 ? _1629->raw() : nullptr,_1629 ? _1629->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1630 = mosek::fusion::p_WorkStack::_get_impl(_1615)->f64;
  _checked_ptr_1<double> _ptr__1630(_1630 ? _1630->raw() : nullptr,_1630 ? _1630->size(0) : 0);
  int _7402 = (int)0;
  int _7403 = _1620;
  for (int _1631 = _7402; _1631 < _7403; ++_1631)
  {
    {
      _ptr__1628[safe_add( _1627,_1631 )] = ((*shape)(_1631));
    }
  }
  {
    int _7404 = (int)0;
    int _7405 = safe_add( _1618,(int)1 );
    for (int _1632 = _7404; _1632 < _7405; ++_1632)
    {
      {
        _ptr__1628[safe_add( _1622,_1632 )] = _1632;
      }
    }
    int _7406 = (int)0;
    int _7407 = _1618;
    for (int _1633 = _7406; _1633 < _7407; ++_1633)
    {
      {
        _ptr__1629[safe_add( _1623,_1633 )] = ((*nativeidxs)(_1633));
      }
    }
    if (_1621)
    {
      {
        int _7408 = (int)0;
        int _7409 = _1618;
        for (int _1634 = _7408; _1634 < _7409; ++_1634)
        {
          {
            _ptr__1629[safe_add( _1624,_1634 )] = ((*sparsity)(_1634));
          }
        }
      }
    }
    {}
    int _7410 = (int)0;
    int _7411 = _1618;
    for (int _1635 = _7410; _1635 < _7411; ++_1635)
    {
      {
        _ptr__1630[safe_add( _1625,_1635 )] = 1.0;
      }
    }
    int _7412 = (int)0;
    int _7413 = _1618;
    for (int _1636 = _7412; _1636 < _7413; ++_1636)
    {
      {
        _ptr__1630[safe_add( _1626,_1636 )] = 0.0;
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1637,int _1638,int _1639) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1637,_1638,_1639); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1637,int _1638,int _1639) { return __mosek_2fusion_2BaseVariable__reshape(_1637,_1638,_1639); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1637,int _1638,int _1639) { return __mosek_2fusion_2BaseVariable__reshape(_1637,_1638,_1639); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1637,int _1638,int _1639){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1637),(int)(_1638),(int)(_1639)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1640,int _1641) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1640,_1641); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1640,int _1641) { return __mosek_2fusion_2BaseVariable__reshape(_1640,_1641); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1640,int _1641) { return __mosek_2fusion_2BaseVariable__reshape(_1640,_1641); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1640,int _1641){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1640),(int)(_1641)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _1642) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1642); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _1642) { return __mosek_2fusion_2BaseVariable__reshape(_1642); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _1642) { return __mosek_2fusion_2BaseVariable__reshape(_1642); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _1642){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1642)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1643) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_1643); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _1643) { return __mosek_2fusion_2BaseVariable__reshape(_1643); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1643) { return __mosek_2fusion_2BaseVariable__reshape(_1643); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _1643){
  _checked_ptr_1<int> _ptr__1643(_1643 ? _1643->raw() : nullptr, _1643 ? _1643->size(0) : 0);
  long long _1644 = (int)1;
  int _7414 = (int)0;
  int _7415 = (int)((_1643)->size(0));
  for (int _1645 = _7414; _1645 < _7415; ++_1645)
  {
    {
      if ((_ptr__1643[_1645] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _1644 *= _ptr__1643[_1645];
    }
  }
  if ((_1644 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int> _7416;
  for (int _1646 = (int)0, _7417 = (int)((_1643)->size(0)); _1646 < _7417 ; ++_1646)
  {
    _7416.push_back(_ptr__1643[_1646]);
  }
  auto _7418 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7416.size()),_7416.begin(),_7416.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_7418,sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
}
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _1647) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_1647); }void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _1647){
  _checked_ptr_1<double> _ptr__1647(_1647 ? _1647->raw() : nullptr, _1647 ? _1647->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_1647)->size(0)) != (int)((nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,nativeidxs,_1647);
    }
  }
  else
  {
    {
      if (((int)((_1647)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _7419;
      for (int _1649 = (int)0, _7420 = (int)((nativeidxs)->size(0)); _1649 < _7420 ; ++_1649)
      {
        _7419.push_back(_ptr__1647[((*sparsity)(_1649))]);
      }
      auto _7421 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7419.size()),_7419.begin(),_7419.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _1648 = _7421;
      _checked_ptr_1<double> _ptr__1648(_1648 ? _1648->raw() : nullptr,_1648 ? _1648->size(0) : 0);
      model->setVariableValues(true,nativeidxs,_1648);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel(){
  return model;
}
int mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }int mosek::fusion::p_BaseVariable::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseVariable :: getDim(int _1650) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_1650); }int mosek::fusion::p_BaseVariable::getDim(int _1650){
  return ((*shape)(_1650));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseVariable::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
long long mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseVariable::getSize(){
  long long _1651 = (long long)1;
  int _7422 = (int)0;
  int _7423 = (int)((shape)->size(0));
  for (int _1652 = _7422; _1652 < _7423; ++_1652)
  {
    {
      _1651 *= ((*shape)(_1652));
    }
  }
  return _1651;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _1653 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1653(_1653 ? _1653->raw() : nullptr,_1653 ? _1653->size(0) : 0);
  model->getVariableValues(false,nativeidxs,_1653,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1654 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__1654(_1654 ? _1654->raw() : nullptr,_1654 ? _1654->size(0) : 0);
      int _7424 = (int)0;
      int _7425 = (int)((nativeidxs)->size(0));
      for (int _1655 = _7424; _1655 < _7425; ++_1655)
      {
        {
          _ptr__1654[((*sparsity)(_1655))] = _ptr__1653[_1655];
        }
      }
      _1653 = _1654;
      _ptr__1653.update(_1653 ? _1653->raw() : nullptr, _1653 ? _1653->size(0) : 0);
    }
  }
  {}
  return _1653;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _1656 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1656(_1656 ? _1656->raw() : nullptr,_1656 ? _1656->size(0) : 0);
  model->getVariableValues(true,nativeidxs,_1656,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1657 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__1657(_1657 ? _1657->raw() : nullptr,_1657 ? _1657->size(0) : 0);
      int _7426 = (int)0;
      int _7427 = (int)((nativeidxs)->size(0));
      for (int _1658 = _7426; _1658 < _7427; ++_1658)
      {
        {
          _ptr__1657[((*sparsity)(_1658))] = _ptr__1656[_1658];
        }
      }
      _1656 = _1657;
      _ptr__1656.update(_1656 ? _1656->raw() : nullptr, _1656 ? _1656->size(0) : 0);
    }
  }
  {}
  return _1656;
}
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous(){
  _pubthis->make_continuous();
}
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger(){
  _pubthis->make_integer();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose(){
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(((*shape)((int)0)))}),sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1659 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      _checked_ptr_1<long long> _ptr__1659(_1659 ? _1659->raw() : nullptr,_1659 ? _1659->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _7428;
      bool _7429 = (NULL == sparsity.get());
      if (_7429)
      {
        _7428 = nullptr;
      }
      else
      {
        _7428 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1660 = _7428;
      _checked_ptr_1<long long> _ptr__1660(_1660 ? _1660->raw() : nullptr,_1660 ? _1660->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int _1661 = (int)0;
          int _7430 = (int)0;
          int _7431 = ((*shape)((int)1));
          for (int _1662 = _7430; _1662 < _7431; ++_1662)
          {
            {
              int _7432 = (int)0;
              int _7433 = ((*shape)((int)0));
              for (int _1663 = _7432; _1663 < _7433; ++_1663)
              {
                {
                  _ptr__1659[_1661] = ((*nativeidxs)(safe_add( safe_mul( _1663,((*shape)((int)1)) ),_1662 )));
                  ++ _1661;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1664 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int> _ptr__1664(_1664 ? _1664->raw() : nullptr,_1664 ? _1664->size(0) : 0);
          int _1665 = ((*shape)((int)0));
          int _1666 = ((*shape)((int)1));
          int _7434 = (int)0;
          int _7435 = (int)((sparsity)->size(0));
          for (int _1667 = _7434; _1667 < _7435; ++_1667)
          {
            {
              ++ _ptr__1664[safe_add( (((*sparsity)(_1667)) % _1666),(int)1 )];
            }
          }
          int _7436 = (int)0;
          int _7437 = _1666;
          for (int _1668 = _7436; _1668 < _7437; ++_1668)
          {
            {
              _ptr__1664[safe_add( _1668,(int)1 )] += _ptr__1664[_1668];
            }
          }
          int _7438 = (int)0;
          int _7439 = (int)((sparsity)->size(0));
          for (int _1669 = _7438; _1669 < _7439; ++_1669)
          {
            {
              long long _1670 = (((*sparsity)(_1669)) % _1666);
              _ptr__1659[_ptr__1664[_1670]] = ((*nativeidxs)(_1669));
              _ptr__1660[_ptr__1664[_1670]] = safe_add( (((*sparsity)(_1669)) / _1666),safe_mul( (((*sparsity)(_1669)) % _1666),_1665 ) );
              ++ _ptr__1664[_1670];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*shape)((int)1))),(int)(((*shape)((int)0)))}),_1660,_1659)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1671,int _1672,int _1673) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1671,_1672,_1673); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1671,int _1672,int _1673) { return __mosek_2fusion_2BaseVariable__index(_1671,_1672,_1673); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1671,int _1672,int _1673) { return __mosek_2fusion_2BaseVariable__index(_1671,_1672,_1673); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1671,int _1672,int _1673){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1671),(int)(_1672),(int)(_1673)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1674,int _1675) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1674,_1675); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1674,int _1675) { return __mosek_2fusion_2BaseVariable__index(_1674,_1675); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1674,int _1675) { return __mosek_2fusion_2BaseVariable__index(_1674,_1675); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1674,int _1675){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1674),(int)(_1675)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1676) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1676); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1676) { return __mosek_2fusion_2BaseVariable__index(_1676); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1676) { return __mosek_2fusion_2BaseVariable__index(_1676); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1676){
  _checked_ptr_1<int> _ptr__1676(_1676 ? _1676->raw() : nullptr, _1676 ? _1676->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _1677 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_1676)->size(0)))));
  int _7440 = (int)0;
  int _7441 = (int)((_1676)->size(0));
  for (int _1678 = _7440; _1678 < _7441; ++_1678)
  {
    {
      ((*_1677)((int)0,_1678)) = _ptr__1676[_1678];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1677)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _1679) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_1679); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _1679) { return __mosek_2fusion_2BaseVariable__index(_1679); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _1679) { return __mosek_2fusion_2BaseVariable__index(_1679); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _1679){
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1679)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1680,std::shared_ptr< monty::ndarray< int,1 > > _1681,std::shared_ptr< monty::ndarray< int,1 > > _1682) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1680,_1681,_1682); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1680,std::shared_ptr< monty::ndarray< int,1 > > _1681,std::shared_ptr< monty::ndarray< int,1 > > _1682) { return __mosek_2fusion_2BaseVariable__pick(_1680,_1681,_1682); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1680,std::shared_ptr< monty::ndarray< int,1 > > _1681,std::shared_ptr< monty::ndarray< int,1 > > _1682) { return __mosek_2fusion_2BaseVariable__pick(_1680,_1681,_1682); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1680,std::shared_ptr< monty::ndarray< int,1 > > _1681,std::shared_ptr< monty::ndarray< int,1 > > _1682){
  _checked_ptr_1<int> _ptr__1680(_1680 ? _1680->raw() : nullptr, _1680 ? _1680->size(0) : 0);
  _checked_ptr_1<int> _ptr__1681(_1681 ? _1681->raw() : nullptr, _1681 ? _1681->size(0) : 0);
  _checked_ptr_1<int> _ptr__1682(_1682 ? _1682->raw() : nullptr, _1682 ? _1682->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_1680)->size(0)) != (int)((_1681)->size(0))) || ((int)((_1680)->size(0)) != (int)((_1682)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _1683 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_1680)->size(0)),(int)3)));
  int _7442 = (int)0;
  int _7443 = (int)((_1680)->size(0));
  for (int _1684 = _7442; _1684 < _7443; ++_1684)
  {
    {
      ((*_1683)(_1684,(int)0)) = _ptr__1680[_1684];
      ((*_1683)(_1684,(int)1)) = _ptr__1681[_1684];
      ((*_1683)(_1684,(int)2)) = _ptr__1682[_1684];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1683);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1685,std::shared_ptr< monty::ndarray< int,1 > > _1686) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1685,_1686); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1685,std::shared_ptr< monty::ndarray< int,1 > > _1686) { return __mosek_2fusion_2BaseVariable__pick(_1685,_1686); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1685,std::shared_ptr< monty::ndarray< int,1 > > _1686) { return __mosek_2fusion_2BaseVariable__pick(_1685,_1686); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1685,std::shared_ptr< monty::ndarray< int,1 > > _1686){
  _checked_ptr_1<int> _ptr__1685(_1685 ? _1685->raw() : nullptr, _1685 ? _1685->size(0) : 0);
  _checked_ptr_1<int> _ptr__1686(_1686 ? _1686->raw() : nullptr, _1686 ? _1686->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_1685)->size(0)) != (int)((_1686)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _1687 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_1685)->size(0)),(int)2)));
  int _7444 = (int)0;
  int _7445 = (int)((_1685)->size(0));
  for (int _1688 = _7444; _1688 < _7445; ++_1688)
  {
    {
      ((*_1687)(_1688,(int)0)) = _ptr__1685[_1688];
      ((*_1687)(_1688,(int)1)) = _ptr__1686[_1688];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_1687);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1689) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1689); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1689) { return __mosek_2fusion_2BaseVariable__pick(_1689); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1689) { return __mosek_2fusion_2BaseVariable__pick(_1689); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1689){
  if (((int)((shape)->size(0)) != (int)((_1689)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int _7446 = (int)0;
  int _7447 = (int)((_1689)->size(0));
  for (int _1690 = _7446; _1690 < _7447; ++_1690)
  {
    {
      int _7448 = (int)0;
      int _7449 = (int)((_1689)->size(1));
      for (int _1691 = _7448; _1691 < _7449; ++_1691)
      {
        {
          if (((((*_1689)(_1690,_1691)) < (int)0) || (((*_1689)(_1690,_1691)) >= ((*shape)(_1691)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
            }
          }
          {}
        }
      }
    }
  }
  int _1692 = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1693 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1692)));
  _checked_ptr_1<long long> _ptr__1693(_1693 ? _1693->raw() : nullptr,_1693 ? _1693->size(0) : 0);
  _ptr__1693[(_1692 - (int)1)] = (int)1;
  int _7450 = (int)1;
  int _7451 = _1692;
  for (int _1694 = _7450; _1694 < _7451; ++_1694)
  {
    {
      _ptr__1693[((_1692 - _1694) - (int)1)] = safe_mul( _ptr__1693[(_1692 - _1694)],((*shape)((_1692 - _1694))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1695 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_1689)->size(0)))});
  _checked_ptr_1<int> _ptr__1695(_1695 ? _1695->raw() : nullptr,_1695 ? _1695->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1696;
  _checked_ptr_1<long long> _ptr__1696(_1696 ? _1696->raw() : nullptr,_1696 ? _1696->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1697 = nullptr;
  _checked_ptr_1<long long> _ptr__1697(_1697 ? _1697->raw() : nullptr,_1697 ? _1697->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _1696 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1689)->size(0)))));
      _ptr__1696.update(_1696 ? _1696->raw() : nullptr, _1696 ? _1696->size(0) : 0);
      {
        int _7452 = (int)0;
        int _7453 = (int)((_1689)->size(0));
        for (int _1698 = _7452; _1698 < _7453; ++_1698)
        {
          {
            long long _1699 = (long long)0;
            int _7454 = (int)0;
            int _7455 = _1692;
            for (int _1700 = _7454; _1700 < _7455; ++_1700)
            {
              {
                _1699 += safe_mul( _ptr__1693[_1700],((*_1689)(_1698,_1700)) );
              }
            }
            _ptr__1696[_1698] = ((*nativeidxs)(_1699));
          }
        }
      }
    }
  }
  else
  {
    {
      int _1701 = (int)0;
      int _7456 = (int)0;
      int _7457 = (int)((_1689)->size(0));
      for (int _1702 = _7456; _1702 < _7457; ++_1702)
      {
        {
          long long _1703 = (long long)0;
          int _7458 = (int)0;
          int _7459 = _1692;
          for (int _1704 = _7458; _1704 < _7459; ++_1704)
          {
            {
              _1703 += safe_mul( _ptr__1693[_1704],((*_1689)(_1702,_1704)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1703) >= (int)0))
          {
            {
              ++ _1701;
            }
          }
          {}
        }
      }
      _1696 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1701)));
      _ptr__1696.update(_1696 ? _1696->raw() : nullptr, _1696 ? _1696->size(0) : 0);
      _1697 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1701)));
      _ptr__1697.update(_1697 ? _1697->raw() : nullptr, _1697 ? _1697->size(0) : 0);
      {
        int _1705 = (int)0;
        int _7460 = (int)0;
        int _7461 = (int)((_1689)->size(0));
        for (int _1706 = _7460; _1706 < _7461; ++_1706)
        {
          {
            long long _1707 = (long long)0;
            int _7462 = (int)0;
            int _7463 = _1692;
            for (int _1708 = _7462; _1708 < _7463; ++_1708)
            {
              {
                _1707 += safe_mul( _ptr__1693[_1708],((*_1689)(_1706,_1708)) );
              }
            }
            int _1709 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1707);
            if ((_1709 >= (int)0))
            {
              {
                _ptr__1696[_1705] = ((*nativeidxs)(_1709));
                _ptr__1697[_1705] = _1706;
                ++ _1705;
              }
            }
            {}
          }
        }
      }
      if ((_1701 == (int)((_1689)->size(0))))
      {
        {
          _1697 = nullptr;
          _ptr__1697.update(_1697 ? _1697->raw() : nullptr, _1697 ? _1697->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1695,_1697,_1696)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1710) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_1710); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1710) { return __mosek_2fusion_2BaseVariable__pick(_1710); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1710) { return __mosek_2fusion_2BaseVariable__pick(_1710); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1710){
  _checked_ptr_1<int> _ptr__1710(_1710 ? _1710->raw() : nullptr, _1710 ? _1710->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int _7464 = (int)0;
  int _7465 = (int)((_1710)->size(0));
  for (int _1711 = _7464; _1711 < _7465; ++_1711)
  {
    {
      if (((_ptr__1710[_1711] < (int)0) || (_ptr__1710[_1711] >= ((*shape)((int)0)))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1712;
  _checked_ptr_1<long long> _ptr__1712(_1712 ? _1712->raw() : nullptr,_1712 ? _1712->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1713 = nullptr;
  _checked_ptr_1<long long> _ptr__1713(_1713 ? _1713->raw() : nullptr,_1713 ? _1713->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<long long> _7466;
      for (int _1714 = (int)0, _7467 = (int)((_1710)->size(0)); _1714 < _7467 ; ++_1714)
      {
        _7466.push_back(((*nativeidxs)(_ptr__1710[_1714])));
      }
      auto _7468 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7466.size()),_7466.begin(),_7466.end()));
      _1712 = _7468;
      _ptr__1712.update(_1712 ? _1712->raw() : nullptr, _1712 ? _1712->size(0) : 0);
    }
  }
  else
  {
    {
      int _1715 = (int)0;
      int _7469 = (int)0;
      int _7470 = (int)((_1710)->size(0));
      for (int _1716 = _7469; _1716 < _7470; ++_1716)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__1710[_1716])) >= (int)0))
          {
            {
              ++ _1715;
            }
          }
          {}
        }
      }
      _1712 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1715)));
      _ptr__1712.update(_1712 ? _1712->raw() : nullptr, _1712 ? _1712->size(0) : 0);
      _1713 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1715)));
      _ptr__1713.update(_1713 ? _1713->raw() : nullptr, _1713 ? _1713->size(0) : 0);
      int _1717 = (int)0;
      int _7471 = (int)0;
      int _7472 = (int)((_1710)->size(0));
      for (int _1718 = _7471; _1718 < _7472; ++_1718)
      {
        {
          int _1719 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__1710[_1718]));
          if ((_1719 >= (int)0))
          {
            {
              _ptr__1713[_1717] = _1718;
              _ptr__1712[_1717] = ((*nativeidxs)(_1719));
              ++ _1717;
            }
          }
          {}
        }
      }
      if ((_1715 == (int)((_1710)->size(0))))
      {
        {
          _1713 = nullptr;
          _ptr__1713.update(_1713 ? _1713->raw() : nullptr, _1713 ? _1713->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_1710)->size(0)))}),_1713,_1712)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int _1720) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_1720); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int _1720) { return __mosek_2fusion_2BaseVariable__antidiag(_1720); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int _1720) { return __mosek_2fusion_2BaseVariable__antidiag(_1720); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int _1720){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_1720 >= ((*shape)((int)1))) || ((-_1720) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_1720 >= (int)0))
  {
    {
      int _7473;
      bool _7474 = (((*shape)((int)0)) < (((*shape)((int)1)) - _1720));
      if (_7474)
      {
        _7473 = ((*shape)((int)0));
      }
      else
      {
        _7473 = (((*shape)((int)1)) - _1720);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(((((*shape)((int)1)) - (int)1) - _1720))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7473);
    }
  }
  else
  {
    {
      int _7475;
      bool _7476 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_1720 ));
      if (_7476)
      {
        _7475 = ((*shape)((int)1));
      }
      else
      {
        _7475 = safe_add( ((*shape)((int)0)),_1720 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_1720)),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7475);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int _7477;
  bool _7478 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_7478)
  {
    _7477 = ((*shape)((int)0));
  }
  else
  {
    _7477 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_7477);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int _1721) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_1721); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int _1721) { return __mosek_2fusion_2BaseVariable__diag(_1721); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int _1721) { return __mosek_2fusion_2BaseVariable__diag(_1721); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int _1721){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_1721 >= ((*shape)((int)1))) || ((-_1721) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_1721 >= (int)0))
  {
    {
      int _7479;
      bool _7480 = (((*shape)((int)0)) < (((*shape)((int)1)) - _1721));
      if (_7480)
      {
        _7479 = ((*shape)((int)0));
      }
      else
      {
        _7479 = (((*shape)((int)1)) - _1721);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(_1721)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7479);
    }
  }
  else
  {
    {
      int _7481;
      bool _7482 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_1721 ));
      if (_7482)
      {
        _7481 = ((*shape)((int)1));
      }
      else
      {
        _7481 = safe_add( ((*shape)((int)0)),_1721 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_1721)),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7481);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int _7483;
  bool _7484 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_7484)
  {
    _7483 = ((*shape)((int)0));
  }
  else
  {
    _7483 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_7483);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > > _1722,std::shared_ptr< monty::ndarray< int,1 > > _1723,int _1724){
  _checked_ptr_1<int> _ptr__1722(_1722 ? _1722->raw() : nullptr, _1722 ? _1722->size(0) : 0);
  _checked_ptr_1<int> _ptr__1723(_1723 ? _1723->raw() : nullptr, _1723 ? _1723->size(0) : 0);
  int _1725 = (int)((shape)->size(0));
  if (((_1725 != (int)((_1722)->size(0))) || (_1725 != (int)((_1723)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int _7485 = (int)0;
  int _7486 = _1725;
  for (int _1726 = _7485; _1726 < _7486; ++_1726)
  {
    {
      if (((_ptr__1722[_1726] < (int)0) || (_ptr__1722[_1726] >= ((*shape)(_1726)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1727 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1725)));
  _checked_ptr_1<long long> _ptr__1727(_1727 ? _1727->raw() : nullptr,_1727 ? _1727->size(0) : 0);
  _ptr__1727[(_1725 - (int)1)] = (int)1;
  int _7487 = (int)1;
  int _7488 = _1725;
  for (int _1728 = _7487; _1728 < _7488; ++_1728)
  {
    {
      _ptr__1727[((_1725 - _1728) - (int)1)] = safe_mul( _ptr__1727[(_1725 - _1728)],((*shape)((_1725 - _1728))) );
    }
  }
  long long _1729 = (long long)0;
  int _7489 = (int)0;
  int _7490 = (int)((_1723)->size(0));
  for (int _1730 = _7489; _1730 < _7490; ++_1730)
  {
    {
      _1729 += safe_mul( _ptr__1722[_1730],_ptr__1727[_1730] );
    }
  }
  long long _1731 = (long long)0;
  int _7491 = (int)0;
  int _7492 = (int)((_1723)->size(0));
  for (int _1732 = _7491; _1732 < _7492; ++_1732)
  {
    {
      _1731 += safe_mul( _ptr__1723[_1732],_ptr__1727[_1732] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1733 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1724)));
      _checked_ptr_1<long long> _ptr__1733(_1733 ? _1733->raw() : nullptr,_1733 ? _1733->size(0) : 0);
      int _7493 = (int)0;
      int _7494 = _1724;
      for (int _1734 = _7493; _1734 < _7494; ++_1734)
      {
        {
          _ptr__1733[_1734] = ((*nativeidxs)(safe_add( _1729,safe_mul( _1731,_1734 ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1724)}),nullptr,_1733)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1735 = (int)0;
      int _7495 = (int)0;
      int _7496 = _1724;
      for (int _1736 = _7495; _1736 < _7496; ++_1736)
      {
        {
          long long _1737 = safe_add( _1729,safe_mul( _1731,_1736 ) );
          int _1738 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1737);
          if ((_1738 >= (int)0))
          {
            {
              ++ _1735;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1739 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1735)));
      _checked_ptr_1<long long> _ptr__1739(_1739 ? _1739->raw() : nullptr,_1739 ? _1739->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1740 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1735)));
      _checked_ptr_1<long long> _ptr__1740(_1740 ? _1740->raw() : nullptr,_1740 ? _1740->size(0) : 0);
      int _1741 = (int)0;
      int _7497 = (int)0;
      int _7498 = _1724;
      for (int _1742 = _7497; _1742 < _7498; ++_1742)
      {
        {
          _ptr__1739[_1742] = ((*nativeidxs)(safe_add( _1729,safe_mul( _1731,_1742 ) )));
          long long _1743 = safe_add( _1729,safe_mul( _1731,_1742 ) );
          int _1744 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_1743);
          if ((_1744 >= (int)0))
          {
            {
              _ptr__1740[_1741] = _1742;
              _ptr__1739[_1741] = ((*nativeidxs)(_1744));
              ++ _1741;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1724)}),_1740,_1739)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1745,std::shared_ptr< monty::ndarray< int,1 > > _1746) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_1745,_1746); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1745,std::shared_ptr< monty::ndarray< int,1 > > _1746) { return __mosek_2fusion_2BaseVariable__slice(_1745,_1746); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1745,std::shared_ptr< monty::ndarray< int,1 > > _1746) { return __mosek_2fusion_2BaseVariable__slice(_1745,_1746); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1745,std::shared_ptr< monty::ndarray< int,1 > > _1746){
  _checked_ptr_1<int> _ptr__1745(_1745 ? _1745->raw() : nullptr, _1745 ? _1745->size(0) : 0);
  _checked_ptr_1<int> _ptr__1746(_1746 ? _1746->raw() : nullptr, _1746 ? _1746->size(0) : 0);
  if (((int)((_1745)->size(0)) != (int)((_1746)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_1745)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7499 = (int)0;
      int _7500 = (int)((shape)->size(0));
      for (int _1747 = _7499; _1747 < _7500; ++_1747)
      {
        {
          if (((_ptr__1745[_1747] < (int)0) || (_ptr__1746[_1747] > ((*shape)(_1747)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__1745[_1747] > _ptr__1746[_1747]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int _1748 = (int)((shape)->size(0));
      std::vector<int> _7501;
      for (int _1750 = (int)0, _7502 = _1748; _1750 < _7502 ; ++_1750)
      {
        _7501.push_back((_ptr__1746[_1750] - _ptr__1745[_1750]));
      }
      auto _7503 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7501.size()),_7501.begin(),_7501.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _1749 = _7503;
      _checked_ptr_1<int> _ptr__1749(_1749 ? _1749->raw() : nullptr,_1749 ? _1749->size(0) : 0);
      int _1751 = (int)1;
      int _7504 = (int)0;
      int _7505 = _1748;
      for (int _1752 = _7504; _1752 < _7505; ++_1752)
      {
        {
          _1751 *= (_ptr__1746[_1752] - _ptr__1745[_1752]);
        }
      }
      if ((_1751 == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int _1753 = (int)0;
          std::shared_ptr< monty::ndarray< int,1 > > _1754 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1748)));
          _checked_ptr_1<int> _ptr__1754(_1754 ? _1754->raw() : nullptr,_1754 ? _1754->size(0) : 0);
          int _7506 = (int)0;
          int _7507 = (int)((sparsity)->size(0));
          for (int _1755 = _7506; _1755 < _7507; ++_1755)
          {
            {
              long long _1756 = ((*sparsity)(_1755));
              int _7508 = (int)1;
              int _7509 = _1748;
              for (int _1757 = _7508; _1757 < _7509; ++_1757)
              {
                {
                  _ptr__1754[(_1748 - _1757)] = (int)(_1756 % ((*shape)((_1748 - _1757))));
                  _1756 /= ((*shape)((_1748 - _1757)));
                }
              }
              _ptr__1754[(int)0] = (int)_1756;
              int _1758 = (int)0;
              while ( ((_ptr__1754[_1758] >= _ptr__1745[_1758]) && (_ptr__1754[_1758] < _ptr__1746[_1758])) )
              {
                {
                  ++ _1758;
                }
              }
              if ((_1758 == _1748))
              {
                {
                  ++ _1753;
                }
              }
              {}
            }
          }
          int _1759 = (int)0;
          std::shared_ptr< monty::ndarray< long long,1 > > _1760 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1753)));
          _checked_ptr_1<long long> _ptr__1760(_1760 ? _1760->raw() : nullptr,_1760 ? _1760->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1761 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1753)));
          _checked_ptr_1<long long> _ptr__1761(_1761 ? _1761->raw() : nullptr,_1761 ? _1761->size(0) : 0);
          int _7510 = (int)0;
          int _7511 = (int)((sparsity)->size(0));
          for (int _1762 = _7510; _1762 < _7511; ++_1762)
          {
            {
              long long _1763 = ((*sparsity)(_1762));
              int _7512 = (int)1;
              int _7513 = _1748;
              for (int _1764 = _7512; _1764 < _7513; ++_1764)
              {
                {
                  _ptr__1754[(_1748 - _1764)] = (int)(_1763 % ((*shape)((_1748 - _1764))));
                  _1763 /= ((*shape)((_1748 - _1764)));
                }
              }
              _ptr__1754[(int)0] = (int)_1763;
              int _1765 = (int)0;
              while ( ((_ptr__1754[_1765] >= _ptr__1745[_1765]) && (_ptr__1754[_1765] < _ptr__1746[_1765])) )
              {
                {
                  ++ _1765;
                }
              }
              if ((_1765 == _1748))
              {
                {
                  _ptr__1760[_1759] = ((*nativeidxs)(_1762));
                  int _1766 = (int)0;
                  int _7514 = (int)0;
                  int _7515 = _1748;
                  for (int _1767 = _7514; _1767 < _7515; ++_1767)
                  {
                    {
                      _1766 = safe_add( safe_mul( _1766,_ptr__1749[_1767] ),(_ptr__1754[_1767] - _ptr__1745[_1767]) );
                    }
                  }
                  _ptr__1761[_1759] = _1766;
                  ++ _1759;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1749,_1761,_1760)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1768 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1751)));
          _checked_ptr_1<long long> _ptr__1768(_1768 ? _1768->raw() : nullptr,_1768 ? _1768->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _1769 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1748)));
            _checked_ptr_1<int> _ptr__1769(_1769 ? _1769->raw() : nullptr,_1769 ? _1769->size(0) : 0);
            _ptr__1769[(_1748 - (int)1)] = (int)1;
            int _7516 = (int)1;
            int _7517 = _1748;
            for (int _1770 = _7516; _1770 < _7517; ++_1770)
            {
              {
                _ptr__1769[((_1748 - _1770) - (int)1)] = safe_mul( _ptr__1769[(_1748 - _1770)],((*shape)((_1748 - _1770))) );
              }
            }
            int _1771 = (int)0;
            int _7518 = (int)0;
            int _7519 = _1748;
            for (int _1772 = _7518; _1772 < _7519; ++_1772)
            {
              {
                _1771 += safe_mul( _ptr__1745[_1772],_ptr__1769[_1772] );
              }
            }
            std::vector<int> _7520;
            for (int _1774 = (int)0, _7521 = _1748; _1774 < _7521 ; ++_1774)
            {
              _7520.push_back(_1771);
            }
            auto _7522 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7520.size()),_7520.begin(),_7520.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _1773 = _7522;
            _checked_ptr_1<int> _ptr__1773(_1773 ? _1773->raw() : nullptr,_1773 ? _1773->size(0) : 0);
            std::vector<int> _7523;
            for (int _1776 = (int)0, _7524 = _1748; _1776 < _7524 ; ++_1776)
            {
              _7523.push_back(_ptr__1745[_1776]);
            }
            auto _7525 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7523.size()),_7523.begin(),_7523.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _1775 = _7525;
            _checked_ptr_1<int> _ptr__1775(_1775 ? _1775->raw() : nullptr,_1775 ? _1775->size(0) : 0);
            int _7526 = (int)0;
            int _7527 = _1751;
            for (int _1777 = _7526; _1777 < _7527; ++_1777)
            {
              {
                _ptr__1768[_1777] = ((*nativeidxs)(_ptr__1773[(_1748 - (int)1)]));
                _ptr__1775[(_1748 - (int)1)] += (int)1;
                _ptr__1773[(_1748 - (int)1)] += _ptr__1769[(_1748 - (int)1)];
                if ((_ptr__1775[(_1748 - (int)1)] >= _ptr__1746[(_1748 - (int)1)]))
                {
                  {
                    int _1778 = (_1748 - (int)1);
                    while ( ((_1778 > (int)0) && (_ptr__1775[_1778] >= _ptr__1746[_1778])) )
                    {
                      {
                        _ptr__1775[_1778] = _ptr__1745[_1778];
                        _ptr__1775[(_1778 - (int)1)] += (int)1;
                        _ptr__1773[(_1778 - (int)1)] += _ptr__1769[(_1778 - (int)1)];
                        -- _1778;
                      }
                    }
                    int _7528 = safe_add( _1778,(int)1 );
                    int _7529 = _1748;
                    for (int _1779 = _7528; _1779 < _7529; ++_1779)
                    {
                      {
                        _ptr__1773[_1779] = _ptr__1773[_1778];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1749,nullptr,_1768)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int _1780,int _1781) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_1780,_1781); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int _1780,int _1781) { return __mosek_2fusion_2BaseVariable__slice(_1780,_1781); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int _1780,int _1781) { return __mosek_2fusion_2BaseVariable__slice(_1780,_1781); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int _1780,int _1781){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_1780 == (int)0) && (_1781 == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_1780 < (int)0) || (_1781 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_1780 > _1781))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_1780 == _1781))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int _1782 = (_1781 - _1780);
      int _1783 = (int)0;
      int _1784 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_1780));
      int _1785 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_1781));
      std::vector<long long> _7530;
      for (int _1786 = _1784, _7531 = _1785; _1786 < _7531 ; ++_1786)
      {
        _7530.push_back((((*sparsity)(_1786)) - _1780));
      }
      auto _7532 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7530.size()),_7530.begin(),_7530.end()));
      std::vector<long long> _7533;
      for (int _1787 = _1784, _7534 = _1785; _1787 < _7534 ; ++_1787)
      {
        _7533.push_back(((*nativeidxs)(_1787)));
      }
      auto _7535 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7533.size()),_7533.begin(),_7533.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1782)}),_7532,_7535)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1788 = (_1781 - _1780);
      std::shared_ptr< monty::ndarray< long long,1 > > _1789 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1788)));
      _checked_ptr_1<long long> _ptr__1789(_1789 ? _1789->raw() : nullptr,_1789 ? _1789->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(nativeidxs,_1780,_1789,(int)0,_1788);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1788)}),nullptr,_1789)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr(){
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
int mosek::fusion::BaseVariable :: inst(int _1790,std::shared_ptr< monty::ndarray< long long,1 > > _1791,int _1792,std::shared_ptr< monty::ndarray< long long,1 > > _1793) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_1790,_1791,_1792,_1793); }int mosek::fusion::p_BaseVariable::inst(int _1790,std::shared_ptr< monty::ndarray< long long,1 > > _1791,int _1792,std::shared_ptr< monty::ndarray< long long,1 > > _1793){
  _checked_ptr_1<long long> _ptr__1791(_1791 ? _1791->raw() : nullptr, _1791 ? _1791->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1793(_1793 ? _1793->raw() : nullptr, _1793 ? _1793->size(0) : 0);
  if ((NULL == mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity.get()))
  {
    {
      int _7536 = (int)0;
      int _7537 = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
      for (int _1794 = _7536; _1794 < _7537; ++_1794)
      {
        {
          _ptr__1791[safe_add( _1794,_1790 )] = _1794;
          _ptr__1793[safe_add( _1794,_1792 )] = ((*mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)(_1794));
        }
      }
    }
  }
  else
  {
    {
      int _7538 = (int)0;
      int _7539 = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int _1795 = _7538; _1795 < _7539; ++_1795)
      {
        {
          _ptr__1791[safe_add( _1790,_1795 )] = ((*mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)(_1795));
          _ptr__1793[safe_add( _1795,_1792 )] = ((*mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)(_1795));
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
}
int mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_BaseVariable::numInst(){
  return (int)((nativeidxs)->size(0));
}
void mosek::fusion::BaseVariable :: inst(int _1796,std::shared_ptr< monty::ndarray< long long,1 > > _1797) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_1796,_1797); }void mosek::fusion::p_BaseVariable::inst(int _1796,std::shared_ptr< monty::ndarray< long long,1 > > _1797){
  _checked_ptr_1<long long> _ptr__1797(_1797 ? _1797->raw() : nullptr, _1797 ? _1797->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int _7540 = (int)0;
      int _7541 = (int)((nativeidxs)->size(0));
      for (int _1798 = _7540; _1798 < _7541; ++_1798)
      {
        {
          _ptr__1797[safe_add( _1796,_1798 )] = ((*nativeidxs)(_1798));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1799 = _pubthis->getShape();
      _checked_ptr_1<int> _ptr__1799(_1799 ? _1799->raw() : nullptr,_1799 ? _1799->size(0) : 0);
      int _1800 = (int)1;
      int _7542 = (int)0;
      int _7543 = (int)((_1799)->size(0));
      for (int _1801 = _7542; _1801 < _7543; ++_1801)
      {
        {
          _1800 *= _ptr__1799[_1801];
        }
      }
      int _7544 = (int)0;
      int _7545 = _1800;
      for (int _1802 = _7544; _1802 < _7545; ++_1802)
      {
        {
          _ptr__1797[safe_add( _1796,_1802 )] = (int)0;
        }
      }
      int _7546 = (int)0;
      int _7547 = (int)((sparsity)->size(0));
      for (int _1803 = _7546; _1803 < _7547; ++_1803)
      {
        {
          _ptr__1797[safe_add( _1796,((*sparsity)(_1803)) )] = ((*nativeidxs)(_1803));
        }
      }
    }
  }
}
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1804,bool _1805) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_1804,_1805); }void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1804,bool _1805){
  _checked_ptr_1<double> _ptr__1804(_1804 ? _1804->raw() : nullptr, _1804 ? _1804->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_1805,nativeidxs,_1804);
    }
  }
  else
  {
    {
      int _1806 = (int)1;
      int _7548 = (int)0;
      int _7549 = (int)((shape)->size(0));
      for (int _1807 = _7548; _1807 < _7549; ++_1807)
      {
        {
          _1806 *= ((*shape)(_1807));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1808 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1806)));
      _checked_ptr_1<long long> _ptr__1808(_1808 ? _1808->raw() : nullptr,_1808 ? _1808->size(0) : 0);
      int _7550 = (int)0;
      int _7551 = (int)((nativeidxs)->size(0));
      for (int _1809 = _7550; _1809 < _7551; ++_1809)
      {
        {
          _ptr__1808[((*sparsity)(_1809))] = ((*nativeidxs)(_1809));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_1805,_1808,_1804);
    }
  }
}
void mosek::fusion::p_BaseVariable::dual_lu(int _1810,std::shared_ptr< monty::ndarray< double,1 > > _1811,bool _1812){
  _checked_ptr_1<double> _ptr__1811(_1811 ? _1811->raw() : nullptr, _1811 ? _1811->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_1812,nativeidxs,_1811,_1810);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1813 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__1813(_1813 ? _1813->raw() : nullptr,_1813 ? _1813->size(0) : 0);
      int _7552 = (int)0;
      int _7553 = (int)((sparsity)->size(0));
      for (int _1814 = _7552; _1814 < _7553; ++_1814)
      {
        {
          _ptr__1813[((*sparsity)(_1814))] = ((*nativeidxs)(_1814));
        }
      }
      model->getVariableDuals(_1812,_1813,_1811,_1810);
    }
  }
}
void mosek::fusion::BaseVariable :: values(int _1815,std::shared_ptr< monty::ndarray< double,1 > > _1816,bool _1817) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_1815,_1816,_1817); }void mosek::fusion::p_BaseVariable::values(int _1815,std::shared_ptr< monty::ndarray< double,1 > > _1816,bool _1817){
  _checked_ptr_1<double> _ptr__1816(_1816 ? _1816->raw() : nullptr, _1816 ? _1816->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_1817,nativeidxs,_1816,_1815);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1818 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__1818(_1818 ? _1818->raw() : nullptr,_1818 ? _1818->size(0) : 0);
      int _7554 = (int)0;
      int _7555 = (int)((sparsity)->size(0));
      for (int _1819 = _7554; _1819 < _7555; ++_1819)
      {
        {
          _ptr__1818[((*sparsity)(_1819))] = ((*nativeidxs)(_1819));
        }
      }
      model->getVariableValues(_1817,_1818,_1816,_1815);
    }
  }
}
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_BaseVariable::make_continuous(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(nativeidxs);
}
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_BaseVariable::make_integer(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(nativeidxs);
}
void mosek::fusion::p_BaseVariable::destroy(){sparsity.reset();nativeidxs.reset();model.reset();shape.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1827,int _1828,int _1829) { return __mosek_2fusion_2Variable__reshape(_1827,_1828,_1829); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1830,int _1831) { return __mosek_2fusion_2Variable__reshape(_1830,_1831); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _1832) { return __mosek_2fusion_2Variable__reshape(_1832); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _1833) { return __mosek_2fusion_2Variable__reshape(_1833); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1839,std::shared_ptr< monty::ndarray< int,1 > > _1840,std::shared_ptr< monty::ndarray< int,1 > > _1841) { return __mosek_2fusion_2Variable__pick(_1839,_1840,_1841); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1842,std::shared_ptr< monty::ndarray< int,1 > > _1843) { return __mosek_2fusion_2Variable__pick(_1842,_1843); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _1844) { return __mosek_2fusion_2Variable__pick(_1844); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1844) { return __mosek_2fusion_2Variable__pick(_1844); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _1845) { return __mosek_2fusion_2Variable__pick(_1845); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1845) { return __mosek_2fusion_2Variable__pick(_1845); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int _1846) { return __mosek_2fusion_2Variable__antidiag(_1846); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int _1847) { return __mosek_2fusion_2Variable__diag(_1847); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _1848) { return __mosek_2fusion_2Variable__index(_1848); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int,1 > > _1848) { return __mosek_2fusion_2Variable__index(_1848); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1849,int _1850,int _1851) { return __mosek_2fusion_2Variable__index(_1849,_1850,_1851); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1852,int _1853) { return __mosek_2fusion_2Variable__index(_1852,_1853); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int _1854) { return __mosek_2fusion_2Variable__index(_1854); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _1854) { return __mosek_2fusion_2Variable__index(_1854); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _1855,std::shared_ptr< monty::ndarray< int,1 > > _1856) { return __mosek_2fusion_2Variable__slice(_1855,_1856); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1855,std::shared_ptr< monty::ndarray< int,1 > > _1856) { return __mosek_2fusion_2Variable__slice(_1855,_1856); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int _1857,int _1858) { return __mosek_2fusion_2Variable__slice(_1857,_1858); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int _1857,int _1858) { return __mosek_2fusion_2Variable__slice(_1857,_1858); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty  ( std::shared_ptr< monty::ndarray< int,1 > > _1859) { return mosek::fusion::p_Var::empty(_1859); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int,1 > > _1859){
  _checked_ptr_1<int> _ptr__1859(_1859 ? _1859->raw() : nullptr, _1859 ? _1859->size(0) : 0);
  int _7556 = (int)0;
  int _7557 = (int)((_1859)->size(0));
  for (int _1860 = _7556; _1860 < _7557; ++_1860)
  {
    {
      if ((_ptr__1859[_1860] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_1859)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _1861) { return mosek::fusion::p_Var::compress(_1861); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _1861){
  std::shared_ptr< monty::ndarray< int,1 > > _1862 = _1861->getShape();
  _checked_ptr_1<int> _ptr__1862(_1862 ? _1862->raw() : nullptr,_1862 ? _1862->size(0) : 0);
  int _1863 = (int)((_1862)->size(0));
  int _1864 = (int)0;
  int _7558 = (int)0;
  int _7559 = _1863;
  for (int _1865 = _7558; _1865 < _7559; ++_1865)
  {
    {
      if ((_ptr__1862[_1865] != (int)1))
      {
        {
          ++ _1864;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1866 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1864)));
  _checked_ptr_1<int> _ptr__1866(_1866 ? _1866->raw() : nullptr,_1866 ? _1866->size(0) : 0);
  {
    int _1867 = (int)0;
    int _7560 = (int)0;
    int _7561 = _1863;
    for (int _1868 = _7560; _1868 < _7561; ++_1868)
    {
      {
        if ((_ptr__1862[_1868] != (int)1))
        {
          {
            _ptr__1866[_1867] = _ptr__1862[_1868];
            ++ _1867;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_1861,_1866);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1869,    int _1870) { return mosek::fusion::p_Var::reshape(_1869,_1870); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1869,int _1870){
  return ::mosek::fusion::p_Var::reshape(_1869,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1870)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1871,    int _1872,    int _1873) { return mosek::fusion::p_Var::reshape(_1871,_1872,_1873); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1871,int _1872,int _1873){
  return ::mosek::fusion::p_Var::reshape(_1871,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1872),(int)(_1873)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _1874) { return mosek::fusion::p_Var::flatten(_1874); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _1874){
  return ::mosek::fusion::p_Var::reshape(_1874,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)::mosek::fusion::p_Set::size(_1874->getShape()))}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _1875,    std::shared_ptr< monty::ndarray< int,1 > > _1876) { return mosek::fusion::p_Var::reshape(_1875,_1876); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _1875,std::shared_ptr< monty::ndarray< int,1 > > _1876){
  _checked_ptr_1<int> _ptr__1876(_1876 ? _1876->raw() : nullptr, _1876 ? _1876->size(0) : 0);
  return _1875->__mosek_2fusion_2Variable__reshape(_1876);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _1877,std::shared_ptr< monty::ndarray< int,1 > > _1878){
  _checked_ptr_1<int> _ptr__1878(_1878 ? _1878->raw() : nullptr, _1878 ? _1878->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1879;
  _checked_ptr_1<long long> _ptr__1879(_1879 ? _1879->raw() : nullptr,_1879 ? _1879->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1880;
  _checked_ptr_1<long long> _ptr__1880(_1880 ? _1880->raw() : nullptr,_1880 ? _1880->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1881 = _1877->getShape();
  _checked_ptr_1<int> _ptr__1881(_1881 ? _1881->raw() : nullptr,_1881 ? _1881->size(0) : 0);
  int _1882 = (int)((_1881)->size(0));
  int _1883 = (int)1;
  int _7562 = (int)0;
  int _7563 = _1882;
  for (int _1884 = _7562; _1884 < _7563; ++_1884)
  {
    {
      _1883 *= _ptr__1881[_1884];
    }
  }
  int _1885 = _1877->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _1886 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1882)));
  _checked_ptr_1<long long> _ptr__1886(_1886 ? _1886->raw() : nullptr,_1886 ? _1886->size(0) : 0);
  _ptr__1886[(_1882 - (int)1)] = (int)1;
  int _7564 = (int)1;
  int _7565 = _1882;
  for (int _1887 = _7564; _1887 < _7565; ++_1887)
  {
    {
      _ptr__1886[((_1882 - _1887) - (int)1)] = safe_mul( _ptr__1886[(_1882 - _1887)],_ptr__1881[_ptr__1878[(_1882 - _1887)]] );
    }
  }
  if ((_1885 < _1883))
  {
    {
      _1879 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1885)));
      _ptr__1879.update(_1879 ? _1879->raw() : nullptr, _1879 ? _1879->size(0) : 0);
      _1880 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1885)));
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
      _1877->inst((int)0,_1879,(int)0,_1880);
    }
  }
  else
  {
    {
      _1879 = nullptr;
      _ptr__1879.update(_1879 ? _1879->raw() : nullptr, _1879 ? _1879->size(0) : 0);
      _1880 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1885)));
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
      _1877->inst((int)0,_1880);
    }
  }
  if ((NULL == _1879.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1888 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1885)));
      _checked_ptr_1<long long> _ptr__1888(_1888 ? _1888->raw() : nullptr,_1888 ? _1888->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1889 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1882)));
        _checked_ptr_1<int> _ptr__1889(_1889 ? _1889->raw() : nullptr,_1889 ? _1889->size(0) : 0);
        int _7566 = (int)0;
        int _7567 = _1885;
        for (int _1890 = _7566; _1890 < _7567; ++_1890)
        {
          {
            int _1891 = _1890;
            int _7568 = (int)0;
            int _7569 = _1882;
            for (int _1892 = _7568; _1892 < _7569; ++_1892)
            {
              {
                _ptr__1889[((_1882 - _1890) - (int)1)] = (_1891 % _ptr__1881[((_1882 - _1890) - (int)1)]);
                _1891 /= _ptr__1881[((_1882 - _1890) - (int)1)];
              }
            }
            int _1893 = (int)0;
            int _7570 = (int)0;
            int _7571 = _1882;
            for (int _1894 = _7570; _1894 < _7571; ++_1894)
            {
              {
                _1893 += (int)safe_mul( _ptr__1889[_ptr__1878[_1894]],_ptr__1886[_1894] );
              }
            }
            _ptr__1888[_1893] = _ptr__1880[_1890];
          }
        }
      }
      _1880 = _1888;
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1895 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1885)));
      _checked_ptr_1<long long> _ptr__1895(_1895 ? _1895->raw() : nullptr,_1895 ? _1895->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1896 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1882)));
        _checked_ptr_1<int> _ptr__1896(_1896 ? _1896->raw() : nullptr,_1896 ? _1896->size(0) : 0);
        int _7572 = (int)0;
        int _7573 = _1885;
        for (int _1897 = _7572; _1897 < _7573; ++_1897)
        {
          {
            int _1898 = _1897;
            int _7574 = (int)0;
            int _7575 = _1882;
            for (int _1899 = _7574; _1899 < _7575; ++_1899)
            {
              {
                _ptr__1896[((_1882 - _1897) - (int)1)] = (_1898 % _ptr__1881[((_1882 - _1897) - (int)1)]);
                _1898 /= _ptr__1881[((_1882 - _1897) - (int)1)];
              }
            }
            int _1900 = (int)0;
            int _7576 = (int)0;
            int _7577 = _1882;
            for (int _1901 = _7576; _1901 < _7577; ++_1901)
            {
              {
                _1900 += (int)safe_mul( _ptr__1896[_ptr__1878[_1901]],_ptr__1886[_1901] );
              }
            }
            _ptr__1895[_1897] = _1900;
          }
        }
      }
      std::vector<long long> _7578;
      for (int _1903 = (int)0, _7579 = _1885; _1903 < _7579 ; ++_1903)
      {
        _7578.push_back(_1903);
      }
      auto _7580 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7578.size()),_7578.begin(),_7578.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1902 = _7580;
      _checked_ptr_1<long long> _ptr__1902(_1902 ? _1902->raw() : nullptr,_1902 ? _1902->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1902,_1895,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1885));
      std::vector<long long> _7581;
      for (int _1904 = (int)0, _7582 = _1885; _1904 < _7582 ; ++_1904)
      {
        _7581.push_back(_ptr__1879[_ptr__1902[_1904]]);
      }
      auto _7583 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7581.size()),_7581.begin(),_7581.end()));
      _1879 = _7583;
      _ptr__1879.update(_1879 ? _1879->raw() : nullptr, _1879 ? _1879->size(0) : 0);
      std::vector<long long> _7584;
      for (int _1905 = (int)0, _7585 = _1885; _1905 < _7585 ; ++_1905)
      {
        _7584.push_back(_ptr__1880[_ptr__1902[_1905]]);
      }
      auto _7586 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7584.size()),_7584.begin(),_7584.end()));
      _1880 = _7586;
      _ptr__1880.update(_1880 ? _1880->raw() : nullptr, _1880 ? _1880->size(0) : 0);
    }
  }
  std::vector<int> _7587;
  for (int _1906 = (int)0, _7588 = _1882; _1906 < _7588 ; ++_1906)
  {
    _7587.push_back(_ptr__1881[_ptr__1878[_1906]]);
  }
  auto _7589 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7587.size()),_7587.begin(),_7587.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1877->__mosek_2fusion_2Variable__getModel(),_7589,_1879,_1880)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1907,    int _1908) { return mosek::fusion::p_Var::hrepeat(_1907,_1908); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1907,int _1908){
  return ::mosek::fusion::p_Var::drepeat(_1907,(int)1,_1908);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1909,    int _1910) { return mosek::fusion::p_Var::vrepeat(_1909,_1910); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1909,int _1910){
  return ::mosek::fusion::p_Var::drepeat(_1909,(int)0,_1910);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1911,    int _1912) { return mosek::fusion::p_Var::repeat(_1911,_1912); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _1911,int _1912){
  return ::mosek::fusion::p_Var::drepeat(_1911,(int)0,_1912);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _1913,    int _1914,    int _1915) { return mosek::fusion::p_Var::repeat(_1913,_1914,_1915); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _1913,int _1914,int _1915){
  return ::mosek::fusion::p_Var::drepeat(_1913,_1914,_1915);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _1916,int _1917,int _1918){
  if ((_1918 < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_1918 == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_1918 == (int)1))
  {
    {
      return _1916;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _1919 = _1916->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int,1 > > _1920 = _1916->getShape();
      _checked_ptr_1<int> _ptr__1920(_1920 ? _1920->raw() : nullptr,_1920 ? _1920->size(0) : 0);
      int _1921 = (int)((_1920)->size(0));
      if (((_1917 < (int)0) || (_1917 > _1921)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      long long _1922 = ::mosek::fusion::p_Set::size(_1920);
      int _1923 = _1916->numInst();
      int _1924 = safe_mul( _1923,_1918 );
      int _1925 = (int)1;
      int _7590 = (int)0;
      int _7591 = _1917;
      for (int _1926 = _7590; _1926 < _7591; ++_1926)
      {
        {
          _1925 *= _ptr__1920[_1926];
        }
      }
      int _7592;
      bool _7593 = (_1917 < _1921);
      if (_7593)
      {
        _7592 = _ptr__1920[_1917];
      }
      else
      {
        _7592 = (int)1;
      }
      int _1927 = _7592;
      int _1928 = safe_mul( _1927,_1918 );
      int _1929 = (int)1;
      int _7594 = safe_add( _1917,(int)1 );
      int _7595 = _1921;
      for (int _1930 = _7594; _1930 < _7595; ++_1930)
      {
        {
          _1929 *= _ptr__1920[_1930];
        }
      }
      int _7596;
      bool _7597 = (_1917 < _1921);
      if (_7597)
      {
        _7596 = _1921;
      }
      else
      {
        _7596 = safe_add( _1917,(int)1 );
      }
      int _1931 = _7596;
      std::shared_ptr< monty::ndarray< int,1 > > _1932 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1931)));
      _checked_ptr_1<int> _ptr__1932(_1932 ? _1932->raw() : nullptr,_1932 ? _1932->size(0) : 0);
      int _7598 = (int)0;
      int _7599 = _1921;
      for (int _1933 = _7598; _1933 < _7599; ++_1933)
      {
        {
          _ptr__1932[_1933] = _ptr__1920[_1933];
        }
      }
      int _7600 = _1921;
      int _7601 = _1931;
      for (int _1934 = _7600; _1934 < _7601; ++_1934)
      {
        {
          _ptr__1932[_1934] = (int)1;
        }
      }
      _ptr__1932[_1917] = _1928;
      if ((_1923 < _1922))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1935 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1923)));
          _checked_ptr_1<long long> _ptr__1935(_1935 ? _1935->raw() : nullptr,_1935 ? _1935->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1936 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1923)));
          _checked_ptr_1<long long> _ptr__1936(_1936 ? _1936->raw() : nullptr,_1936 ? _1936->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1937 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1924)));
          _checked_ptr_1<long long> _ptr__1937(_1937 ? _1937->raw() : nullptr,_1937 ? _1937->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1938 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1924)));
          _checked_ptr_1<long long> _ptr__1938(_1938 ? _1938->raw() : nullptr,_1938 ? _1938->size(0) : 0);
          _1916->inst((int)0,_1936,(int)0,_1935);
          {
            int _1939 = safe_mul( _1928,_1929 );
            int _1940 = safe_mul( _1927,_1929 );
            int _1941 = _1929;
            if ((_1917 == (int)0))
            {
              {
                int _1942 = (int)0;
                int _7602 = (int)0;
                int _7603 = _1918;
                for (int _1943 = _7602; _1943 < _7603; ++_1943)
                {
                  {
                    int _7604 = (int)0;
                    int _7605 = _1923;
                    for (int _1944 = _7604; _1944 < _7605; ++_1944)
                    {
                      {
                        _ptr__1938[_1942] = safe_add( _ptr__1936[_1944],safe_mul( _1943,_1922 ) );
                        _ptr__1937[_1942] = _ptr__1935[_1944];
                        ++ _1942;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1919,_1932,_1938,_1937)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_1917 >= _1921))
            {
              {
                int _1945 = (int)0;
                int _7606 = (int)0;
                int _7607 = _1923;
                for (int _1946 = _7606; _1946 < _7607; ++_1946)
                {
                  {
                    int _7608 = (int)0;
                    int _7609 = _1918;
                    for (int _1947 = _7608; _1947 < _7609; ++_1947)
                    {
                      {
                        _ptr__1938[_1945] = safe_add( safe_mul( _ptr__1936[_1946],_1918 ),_1947 );
                        _ptr__1937[_1945] = _ptr__1935[_1946];
                        ++ _1945;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1919,_1932,_1938,_1937)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int _1948 = (int)0;
                int _7610 = (int)0;
                int _7611 = _1923;
                for (int _1949 = _7610; _1949 < _7611; ++_1949)
                {
                  {
                    long long _1950 = (_ptr__1936[_1949] / _1940);
                    long long _1951 = ((_ptr__1936[_1949] / _1941) % _1927);
                    long long _1952 = (_ptr__1936[_1949] % _1929);
                    int _7612 = (int)0;
                    int _7613 = _1918;
                    for (int _1953 = _7612; _1953 < _7613; ++_1953)
                    {
                      {
                        _ptr__1938[_1948] = safe_add( safe_add( safe_mul( _1950,_1939 ),safe_mul( safe_add( _1951,safe_mul( _1927,_1953 ) ),_1929 ) ),_1952 );
                        _ptr__1937[_1948] = _ptr__1935[_1949];
                        ++ _1948;
                      }
                    }
                  }
                }
                int _1954 = (int)1;
                int _7614 = (int)0;
                int _7615 = _1931;
                for (int _1955 = _7614; _1955 < _7615; ++_1955)
                {
                  {
                    if ((_1954 < _ptr__1932[_1955]))
                    {
                      {
                        _1954 = _ptr__1932[_1955];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int,1 > > _1956 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1924)));
                _checked_ptr_1<int> _ptr__1956(_1956 ? _1956->raw() : nullptr,_1956 ? _1956->size(0) : 0);
                std::shared_ptr< monty::ndarray< int,1 > > _1957 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1924)));
                _checked_ptr_1<int> _ptr__1957(_1957 ? _1957->raw() : nullptr,_1957 ? _1957->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int,1 > > _1958 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _1954,(int)1 ))));
                  _checked_ptr_1<int> _ptr__1958(_1958 ? _1958->raw() : nullptr,_1958 ? _1958->size(0) : 0);
                  std::shared_ptr< monty::ndarray< long long,1 > > _1959 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1931)));
                  _checked_ptr_1<long long> _ptr__1959(_1959 ? _1959->raw() : nullptr,_1959 ? _1959->size(0) : 0);
                  _ptr__1959[(_1931 - (int)1)] = (int)1;
                  int _7616 = (int)1;
                  int _7617 = _1931;
                  for (int _1960 = _7616; _1960 < _7617; ++_1960)
                  {
                    {
                      _ptr__1959[((_1931 - _1960) - (int)1)] = safe_mul( _ptr__1959[(_1931 - _1960)],_ptr__1932[(_1931 - _1960)] );
                    }
                  }
                  int _7618 = (int)0;
                  int _7619 = _1924;
                  for (int _1961 = _7618; _1961 < _7619; ++_1961)
                  {
                    {
                      _ptr__1956[_1961] = _1961;
                    }
                  }
                  int _7620 = (int)0;
                  int _7621 = _1931;
                  for (int _1962 = _7620; _1962 < _7621; ++_1962)
                  {
                    {
                      int _1963 = ((_1931 - _1962) - (int)1);
                      int _7622 = (int)0;
                      int _7623 = safe_add( _ptr__1932[_1963],(int)1 );
                      for (int _1964 = _7622; _1964 < _7623; ++_1964)
                      {
                        {
                          _ptr__1958[_1964] = (int)0;
                        }
                      }
                      int _7624 = (int)0;
                      int _7625 = _1924;
                      for (int _1965 = _7624; _1965 < _7625; ++_1965)
                      {
                        {
                          ++ _ptr__1958[safe_add( ((_ptr__1938[_1965] / _ptr__1959[_1963]) % _ptr__1932[_1963]),(int)1 )];
                        }
                      }
                      int _7626 = (int)0;
                      int _7627 = _ptr__1932[_1963];
                      for (int _1966 = _7626; _1966 < _7627; ++_1966)
                      {
                        {
                          _ptr__1958[safe_add( _1966,(int)1 )] += _ptr__1958[_1966];
                        }
                      }
                      int _7628 = (int)0;
                      int _7629 = _1924;
                      for (int _1967 = _7628; _1967 < _7629; ++_1967)
                      {
                        {
                          int _1968 = _ptr__1956[_1967];
                          long long _1969 = ((_ptr__1938[_1968] / _ptr__1959[_1963]) % _ptr__1932[_1963]);
                          _ptr__1957[_ptr__1958[_1969]] = _1968;
                          ++ _ptr__1958[_1969];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int,1 > > _1970 = _1956;
                      _checked_ptr_1<int> _ptr__1970(_1970 ? _1970->raw() : nullptr,_1970 ? _1970->size(0) : 0);
                      _1956 = _1957;
                      _ptr__1956.update(_1956 ? _1956->raw() : nullptr, _1956 ? _1956->size(0) : 0);
                      _1957 = _1970;
                      _ptr__1957.update(_1957 ? _1957->raw() : nullptr, _1957 ? _1957->size(0) : 0);
                    }
                  }
                }
                std::vector<long long> _7630;
                for (int _1971 = (int)0, _7631 = _1924; _1971 < _7631 ; ++_1971)
                {
                  _7630.push_back(_ptr__1938[_ptr__1956[_1971]]);
                }
                auto _7632 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7630.size()),_7630.begin(),_7630.end()));
                std::vector<long long> _7633;
                for (int _1972 = (int)0, _7634 = _1924; _1972 < _7634 ; ++_1972)
                {
                  _7633.push_back(_ptr__1937[_ptr__1956[_1972]]);
                }
                auto _7635 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7633.size()),_7633.begin(),_7633.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1919,_1932,_7632,_7635)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _1973 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1923)));
          _checked_ptr_1<long long> _ptr__1973(_1973 ? _1973->raw() : nullptr,_1973 ? _1973->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _1974 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1923,_1918 ))));
          _checked_ptr_1<long long> _ptr__1974(_1974 ? _1974->raw() : nullptr,_1974 ? _1974->size(0) : 0);
          _1916->inst((int)0,_1973);
          int _1975 = safe_mul( _1928,_1929 );
          int _1976 = _1929;
          int _1977 = (int)0;
          int _7636 = (int)0;
          int _7637 = _1925;
          for (int _1978 = _7636; _1978 < _7637; ++_1978)
          {
            {
              int _7638 = (int)0;
              int _7639 = _1927;
              for (int _1979 = _7638; _1979 < _7639; ++_1979)
              {
                {
                  int _7640 = (int)0;
                  int _7641 = _1929;
                  for (int _1980 = _7640; _1980 < _7641; ++_1980)
                  {
                    {
                      int _7642 = (int)0;
                      int _7643 = _1918;
                      for (int _1981 = _7642; _1981 < _7643; ++_1981)
                      {
                        {
                          _ptr__1974[safe_add( safe_add( safe_mul( _1978,_1975 ),safe_mul( safe_add( _1979,safe_mul( _1981,_1927 ) ),_1976 ) ),_1980 )] = _ptr__1973[_1977];
                        }
                      }
                      ++ _1977;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_1919,_1932,nullptr,_1974)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _1982) { return mosek::fusion::p_Var::stack(_1982); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _1982){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _7644;
  for (int _1983 = (int)0, _7645 = (int)((_1982)->size(0)); _1983 < _7645 ; ++_1983)
  {
    _7644.push_back(::mosek::fusion::p_Var::dstack(((*_1982)(_1983)),(int)1));
  }
  auto _7646 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_7644.size()),_7644.begin(),_7644.end()));
  return ::mosek::fusion::p_Var::dstack(_7646,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1984,    monty::rc_ptr< ::mosek::fusion::Variable > _1985,    monty::rc_ptr< ::mosek::fusion::Variable > _1986) { return mosek::fusion::p_Var::vstack(_1984,_1985,_1986); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _1984,monty::rc_ptr< ::mosek::fusion::Variable > _1985,monty::rc_ptr< ::mosek::fusion::Variable > _1986){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1984.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1985.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1986.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1987,    monty::rc_ptr< ::mosek::fusion::Variable > _1988) { return mosek::fusion::p_Var::vstack(_1987,_1988); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _1987,monty::rc_ptr< ::mosek::fusion::Variable > _1988){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1987.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1988.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1989) { return mosek::fusion::p_Var::vstack(_1989); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1989){
  return ::mosek::fusion::p_Var::dstack(_1989,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1990,    monty::rc_ptr< ::mosek::fusion::Variable > _1991,    monty::rc_ptr< ::mosek::fusion::Variable > _1992) { return mosek::fusion::p_Var::hstack(_1990,_1991,_1992); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _1990,monty::rc_ptr< ::mosek::fusion::Variable > _1991,monty::rc_ptr< ::mosek::fusion::Variable > _1992){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1990.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1991.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1992.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1993,    monty::rc_ptr< ::mosek::fusion::Variable > _1994) { return mosek::fusion::p_Var::hstack(_1993,_1994); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _1993,monty::rc_ptr< ::mosek::fusion::Variable > _1994){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1993.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1994.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1995) { return mosek::fusion::p_Var::hstack(_1995); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1995){
  return ::mosek::fusion::p_Var::dstack(_1995,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _1996,    monty::rc_ptr< ::mosek::fusion::Variable > _1997,    monty::rc_ptr< ::mosek::fusion::Variable > _1998,    int _1999) { return mosek::fusion::p_Var::stack(_1996,_1997,_1998,_1999); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _1996,monty::rc_ptr< ::mosek::fusion::Variable > _1997,monty::rc_ptr< ::mosek::fusion::Variable > _1998,int _1999){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_1996.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1997.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_1998.get())}),_1999);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2000,    monty::rc_ptr< ::mosek::fusion::Variable > _2001,    int _2002) { return mosek::fusion::p_Var::stack(_2000,_2001,_2002); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2000,monty::rc_ptr< ::mosek::fusion::Variable > _2001,int _2002){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2000.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2001.get())}),_2002);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2003,    int _2004) { return mosek::fusion::p_Var::stack(_2003,_2004); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2003,int _2004){
  int _2005 = _2004;
  int _7647 = (int)0;
  int _7648 = (int)((_2003)->size(0));
  for (int _2006 = _7647; _2006 < _7648; ++_2006)
  {
    {
      if ((_2005 < ((*_2003)(_2006))->getND()))
      {
        {
          _2005 = ((*_2003)(_2006))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2003,_2004);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote  ( monty::rc_ptr< ::mosek::fusion::Variable > _2007,    int _2008) { return mosek::fusion::p_Var::promote(_2007,_2008); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2007,int _2008){
  if ((_2008 > _2007->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2009 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2008)));
      _checked_ptr_1<int> _ptr__2009(_2009 ? _2009->raw() : nullptr,_2009 ? _2009->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2010 = _2007->getShape();
      _checked_ptr_1<int> _ptr__2010(_2010 ? _2010->raw() : nullptr,_2010 ? _2010->size(0) : 0);
      int _7649 = (int)0;
      int _7650 = (int)((_2010)->size(0));
      for (int _2011 = _7649; _2011 < _7650; ++_2011)
      {
        {
          _ptr__2009[_2011] = _ptr__2010[_2011];
        }
      }
      int _7651 = (int)((_2010)->size(0));
      int _7652 = _2008;
      for (int _2012 = _7651; _2012 < _7652; ++_2012)
      {
        {
          _ptr__2009[_2012] = (int)1;
        }
      }
      return _2007->__mosek_2fusion_2Variable__reshape(_2009);
    }
  }
  else
  {
    {
      return _2007;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2013,int _2014){
  if ((_2014 < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2015 = nullptr;
  {
    int _7653 = (int)0;
    int _7654 = (int)((_2013)->size(0));
    for (int _2016 = _7653; _2016 < _7654; ++_2016)
    {
      {
        if ((NULL == _2015.get()))
        {
          {
            _2015 = ((*_2013)(_2016))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2013)(_2016))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2013)(_2016))->__mosek_2fusion_2Variable__getModel() != _2015)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2017 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _7655;
            bool _7656 = ((int)((mosek::fusion::p_Model::_get_impl(_2015.get())->getName()).size()) > (int)0);
            if (_7656)
            {
              _7655 = mosek::fusion::p_Model::_get_impl(_2015.get())->getName();
            }
            else
            {
              _7655 = std::string ("?");
            }
            std::string _2018 = _7655;
            std::string _7657;
            bool _7658 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2013)(_2016))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_7658)
            {
              _7657 = mosek::fusion::p_Model::_get_impl(((*_2013)(_2016))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _7657 = std::string ("?");
            }
            std::string _2019 = _7657;
            _2017->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2018)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2019)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2017->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2013)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2013)->size(0)) == (int)1))
  {
    {
      return ((*_2013)((int)1));
    }
  }
  else
  {
    {
      int _2020 = (int)((_2013)->size(0));
      std::vector<int> _7659;
      for (int _2022 = (int)0, _7660 = _2020; _2022 < _7660 ; ++_2022)
      {
        _7659.push_back(((*_2013)(_2022))->numInst());
      }
      auto _7661 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7659.size()),_7659.begin(),_7659.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2021 = _7661;
      _checked_ptr_1<int> _ptr__2021(_2021 ? _2021->raw() : nullptr,_2021 ? _2021->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _7662;
      for (int _2024 = (int)0, _7663 = _2020; _2024 < _7663 ; ++_2024)
      {
        _7662.push_back(((*_2013)(_2024))->getShape());
      }
      auto _7664 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_7662.size()),_7662.begin(),_7662.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2023 = _7664;
      std::vector<int> _7665;
      for (int _2026 = (int)0, _7666 = _2020; _2026 < _7666 ; ++_2026)
      {
        _7665.push_back((int)((((*_2023)(_2026)))->size(0)));
      }
      auto _7667 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7665.size()),_7665.begin(),_7665.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2025 = _7667;
      _checked_ptr_1<int> _ptr__2025(_2025 ? _2025->raw() : nullptr,_2025 ? _2025->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2027 = ((*_2023)((int)0));
      _checked_ptr_1<int> _ptr__2027(_2027 ? _2027->raw() : nullptr,_2027 ? _2027->size(0) : 0);
      int _2028 = _ptr__2025[(int)0];
      int _2029 = (int)0;
      int _7668 = (int)0;
      int _7669 = _2020;
      for (int _2030 = _7668; _2030 < _7669; ++_2030)
      {
        {
          _2029 += _ptr__2021[_2030];
        }
      }
      int _2031 = safe_add( _2014,(int)1 );
      int _7670 = (int)0;
      int _7671 = _2020;
      for (int _2032 = _7670; _2032 < _7671; ++_2032)
      {
        {
          if ((_2031 < _ptr__2025[_2032]))
          {
            {
              _2031 = _ptr__2025[_2032];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2033 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2031)));
      _checked_ptr_1<int> _ptr__2033(_2033 ? _2033->raw() : nullptr,_2033 ? _2033->size(0) : 0);
      int _7672 = (int)0;
      int _7673 = _2028;
      for (int _2034 = _7672; _2034 < _7673; ++_2034)
      {
        {
          _ptr__2033[_2034] = _ptr__2027[_2034];
        }
      }
      int _7674 = _2028;
      int _7675 = _2031;
      for (int _2035 = _7674; _2035 < _7675; ++_2035)
      {
        {
          _ptr__2033[_2035] = (int)1;
        }
      }
      _ptr__2033[_2014] = (int)0;
      int _7676 = (int)0;
      int _7677 = _2020;
      for (int _2036 = _7676; _2036 < _7677; ++_2036)
      {
        {
          int _7678;
          bool _7679 = ((int)((((*_2023)(_2036)))->size(0)) > _2014);
          if (_7679)
          {
            _7678 = ((*((*_2023)(_2036)))(_2014));
          }
          else
          {
            _7678 = (int)1;
          }
          _ptr__2033[_2014] += _7678;
        }
      }
      int _7680 = (int)0;
      int _7681 = _2020;
      for (int _2037 = _7680; _2037 < _7681; ++_2037)
      {
        {
          int _7682 = (int)0;
          int _7683 = (int)((((*_2023)(_2037)))->size(0));
          for (int _2038 = _7682; _2038 < _7683; ++_2038)
          {
            {
              if (((_2038 != _2014) && (((*((*_2023)(_2037)))(_2038)) != _ptr__2033[_2038])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int _7684 = (int)((((*_2023)(_2037)))->size(0));
          int _7685 = _2031;
          for (int _2039 = _7684; _2039 < _7685; ++_2039)
          {
            {
              if (((_2039 != _2014) && ((int)1 != _ptr__2033[_2039])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2040 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2029)));
      _checked_ptr_1<long long> _ptr__2040(_2040 ? _2040->raw() : nullptr,_2040 ? _2040->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2041 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2029)));
      _checked_ptr_1<long long> _ptr__2041(_2041 ? _2041->raw() : nullptr,_2041 ? _2041->size(0) : 0);
      std::vector<int> _7686;
      for (int _2043 = (int)0, _7687 = (int)((_2013)->size(0)); _2043 < _7687 ; ++_2043)
      {
        int _7688;
        bool _7689 = (_2014 < (int)((((*_2023)(_2043)))->size(0)));
        if (_7689)
        {
          _7688 = ((*((*_2023)(_2043)))(_2014));
        }
        else
        {
          _7688 = (int)1;
        }
        _7686.push_back(_7688);
      }
      auto _7690 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7686.size()),_7686.begin(),_7686.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2042 = _7690;
      _checked_ptr_1<int> _ptr__2042(_2042 ? _2042->raw() : nullptr,_2042 ? _2042->size(0) : 0);
      int _2044 = (int)1;
      int _7691 = (int)0;
      int _7692 = _2014;
      for (int _2045 = _7691; _2045 < _7692; ++_2045)
      {
        {
          int _7693;
          bool _7694 = (_2045 < (int)((_2027)->size(0)));
          if (_7694)
          {
            _7693 = _ptr__2027[_2045];
          }
          else
          {
            _7693 = (int)1;
          }
          _2044 *= _7693;
        }
      }
      int _2046 = (int)0;
      int _7695 = (int)0;
      int _7696 = _2020;
      for (int _2047 = _7695; _2047 < _7696; ++_2047)
      {
        {
          _2046 += _ptr__2042[_2047];
        }
      }
      int _2048 = (int)1;
      int _7697 = safe_add( _2014,(int)1 );
      int _7698 = (int)((_2027)->size(0));
      for (int _2049 = _7697; _2049 < _7698; ++_2049)
      {
        {
          _2048 *= _ptr__2027[_2049];
        }
      }
      if ((_2044 == (int)1))
      {
        {
          int _2050 = (int)0;
          long long _2051 = (int)0;
          int _7699 = (int)0;
          int _7700 = _2020;
          for (int _2052 = _7699; _2052 < _7700; ++_2052)
          {
            {
              ((*_2013)(_2052))->inst(_2050,_2041,_2050,_2040);
              int _7701 = (int)0;
              int _7702 = _ptr__2021[_2052];
              for (int _2053 = _7701; _2053 < _7702; ++_2053)
              {
                {
                  _ptr__2041[_2050] += _2051;
                  ++ _2050;
                }
              }
              _2051 += ::mosek::fusion::p_Set::size(((*_2023)(_2052)));
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _7703;
          bool _7704 = (_2029 < safe_mul( safe_mul( _2044,_2046 ),_2048 ));
          if (_7704)
          {
            _7703 = _2041;
          }
          else
          {
            _7703 = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2015,_2033,_7703,_2040)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int _2054 = (int)0;
          int _7705 = (int)0;
          int _7706 = _2020;
          for (int _2055 = _7705; _2055 < _7706; ++_2055)
          {
            {
              _2054 += ((*_2013)(_2055))->inst(_2054,_2041,_2054,_2040);
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2056 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2029)));
          _checked_ptr_1<int> _ptr__2056(_2056 ? _2056->raw() : nullptr,_2056 ? _2056->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2057 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2029)));
          _checked_ptr_1<int> _ptr__2057(_2057 ? _2057->raw() : nullptr,_2057 ? _2057->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2058 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2020)));
          _checked_ptr_1<int> _ptr__2058(_2058 ? _2058->raw() : nullptr,_2058 ? _2058->size(0) : 0);
          int _7707 = (int)0;
          int _7708 = (_2020 - (int)1);
          for (int _2059 = _7707; _2059 < _7708; ++_2059)
          {
            {
              _ptr__2058[safe_add( _2059,(int)1 )] = safe_add( _ptr__2058[_2059],_ptr__2042[_2059] );
            }
          }
          int _7709 = (int)0;
          int _7710 = _2029;
          for (int _2060 = _7709; _2060 < _7710; ++_2060)
          {
            {
              _ptr__2056[_2060] = _2060;
            }
          }
          int _2061 = (int)0;
          int _7711 = (int)0;
          int _7712 = _2020;
          for (int _2062 = _7711; _2062 < _7712; ++_2062)
          {
            {
              int _7713 = (int)0;
              int _7714 = _ptr__2021[_2062];
              for (int _2063 = _7713; _2063 < _7714; ++_2063)
              {
                {
                  long long _2064 = (_ptr__2041[_2061] / safe_mul( _ptr__2042[_2062],_2048 ));
                  long long _2065 = ((_ptr__2041[_2061] / _2048) % _ptr__2042[_2062]);
                  long long _2066 = (_ptr__2041[_2061] % _2048);
                  _ptr__2041[_2061] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2064,_2046 ),_2065 ),_ptr__2058[_2062] ),_2048 ),_2066 );
                  ++ _2061;
                }
              }
            }
          }
          int _2067 = (int)1;
          int _7715 = (int)0;
          int _7716 = _2031;
          for (int _2068 = _7715; _2068 < _7716; ++_2068)
          {
            {
              int _7717;
              bool _7718 = (_2067 < _ptr__2033[_2068]);
              if (_7718)
              {
                _7717 = _ptr__2033[_2068];
              }
              else
              {
                _7717 = _2067;
              }
              _2067 = _7717;
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _2069 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2031)));
          _checked_ptr_1<long long> _ptr__2069(_2069 ? _2069->raw() : nullptr,_2069 ? _2069->size(0) : 0);
          _ptr__2069[(_2031 - (int)1)] = (int)1;
          int _7719 = (int)1;
          int _7720 = _2031;
          for (int _2070 = _7719; _2070 < _7720; ++_2070)
          {
            {
              _ptr__2069[((_2031 - _2070) - (int)1)] = safe_mul( _ptr__2069[(_2031 - _2070)],_ptr__2033[(_2031 - _2070)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2071 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2067,(int)1 ))));
          _checked_ptr_1<int> _ptr__2071(_2071 ? _2071->raw() : nullptr,_2071 ? _2071->size(0) : 0);
          int _7721 = (int)0;
          int _7722 = _2031;
          for (int _2072 = _7721; _2072 < _7722; ++_2072)
          {
            {
              int _2073 = ((_2031 - _2072) - (int)1);
              int _7723 = (int)0;
              int _7724 = safe_add( _ptr__2033[_2073],(int)1 );
              for (int _2074 = _7723; _2074 < _7724; ++_2074)
              {
                {
                  _ptr__2071[_2074] = (int)0;
                }
              }
              int _7725 = (int)0;
              int _7726 = _2029;
              for (int _2075 = _7725; _2075 < _7726; ++_2075)
              {
                {
                  ++ _ptr__2071[safe_add( ((_ptr__2041[_2075] / _ptr__2069[_2073]) % _ptr__2033[_2073]),(int)1 )];
                }
              }
              int _7727 = (int)0;
              int _7728 = _ptr__2033[_2073];
              for (int _2076 = _7727; _2076 < _7728; ++_2076)
              {
                {
                  _ptr__2071[safe_add( _2076,(int)1 )] += _ptr__2071[_2076];
                }
              }
              int _7729 = (int)0;
              int _7730 = _2029;
              for (int _2077 = _7729; _2077 < _7730; ++_2077)
              {
                {
                  int _2078 = _ptr__2056[_2077];
                  long long _2079 = ((_ptr__2041[_2078] / _ptr__2069[_2073]) % _ptr__2033[_2073]);
                  _ptr__2057[_ptr__2071[_2079]] = _2078;
                  ++ _ptr__2071[_2079];
                }
              }
              std::shared_ptr< monty::ndarray< int,1 > > _2080 = _2056;
              _checked_ptr_1<int> _ptr__2080(_2080 ? _2080->raw() : nullptr,_2080 ? _2080->size(0) : 0);
              _2056 = _2057;
              _ptr__2056.update(_2056 ? _2056->raw() : nullptr, _2056 ? _2056->size(0) : 0);
              _2057 = _2080;
              _ptr__2057.update(_2057 ? _2057->raw() : nullptr, _2057 ? _2057->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _7731;
          bool _7732 = (_2029 < safe_mul( safe_mul( _2044,_2046 ),_2048 ));
          if (_7732)
          {
            std::vector<long long> _7733;
            for (int _2081 = (int)0, _7734 = _2029; _2081 < _7734 ; ++_2081)
            {
              _7733.push_back(_ptr__2041[_ptr__2056[_2081]]);
            }
            auto _7735 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7733.size()),_7733.begin(),_7733.end()));
            _7731 = _7735;
          }
          else
          {
            _7731 = nullptr;
          }
          std::vector<long long> _7736;
          for (int _2082 = (int)0, _7737 = _2029; _2082 < _7737 ; ++_2082)
          {
            _7736.push_back(_ptr__2040[_ptr__2056[_2082]]);
          }
          auto _7738 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7736.size()),_7736.begin(),_7736.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2015,_2033,_7731,_7738)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2083,    monty::rc_ptr< ::mosek::fusion::Model > _2084){ return new mosek::fusion::LinearPSDConstraint(_2083,_2084); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2083,    monty::rc_ptr< ::mosek::fusion::Model > _2084) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2083,_2084); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2083,    monty::rc_ptr< ::mosek::fusion::Model > _2084){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2083,_2084);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2083)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2083)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2083)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2083)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2083)->shape;
  }
}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2085,    const std::string &  _2086,    int _2087,    std::shared_ptr< monty::ndarray< int,1 > > _2088,    int _2089,    std::shared_ptr< monty::ndarray< int,1 > > _2090,    std::shared_ptr< monty::ndarray< long long,1 > > _2091){ return new mosek::fusion::LinearPSDConstraint(_2085,_2086,_2087,_2088,_2089,_2090,_2091); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2085,    const std::string &  _2086,    int _2087,    std::shared_ptr< monty::ndarray< int,1 > > _2088,    int _2089,    std::shared_ptr< monty::ndarray< int,1 > > _2090,    std::shared_ptr< monty::ndarray< long long,1 > > _2091) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2085,_2086,_2087,_2088,_2089,_2090,_2091); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2085,    const std::string &  _2086,    int _2087,    std::shared_ptr< monty::ndarray< int,1 > > _2088,    int _2089,    std::shared_ptr< monty::ndarray< int,1 > > _2090,    std::shared_ptr< monty::ndarray< long long,1 > > _2091){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2088(_2088 ? _2088->raw() : nullptr, _2088 ? _2088->size(0) : 0);
    _checked_ptr_1<int> _ptr__2090(_2090 ? _2090->raw() : nullptr, _2090 ? _2090->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2091(_2091 ? _2091->raw() : nullptr, _2091 ? _2091->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2085,_2086,_2088,_2090);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2087;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2091;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2090;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2089;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2088;
  }
}void mosek::fusion::p_LinearPSDConstraint::domainToString(long long _2092,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2093){
  std::shared_ptr< monty::ndarray< int,1 > > _2094 = ::mosek::fusion::p_Set::idxtokey(shape,_2092);
  _checked_ptr_1<int> _ptr__2094(_2094 ? _2094->raw() : nullptr,_2094 ? _2094->size(0) : 0);
  _2093->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2094[(int)0]);
  int _7739 = (int)1;
  int _7740 = (int)((_2094)->size(0));
  for (int _2095 = _7739; _2095 < _7740; ++_2095)
  {
    {
      _2093->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2094[_2095]);
    }
  }
  _2093->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _7741 = (int)1;
  int _7742 = (int)((_2094)->size(0));
  for (int _2096 = _7741; _2096 < _7742; ++_2096)
  {
    {
      _2093->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2096)));
    }
  }
  _2093->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2097){
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2097)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearPSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2098,    monty::rc_ptr< ::mosek::fusion::Model > _2099){ return new mosek::fusion::PSDConstraint(_2098,_2099); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2098,    monty::rc_ptr< ::mosek::fusion::Model > _2099) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2098,_2099); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2098,    monty::rc_ptr< ::mosek::fusion::Model > _2099){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2098,_2099);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2098)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2098)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2098)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2098)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2098)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2098)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2098)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2098)->conedim1;
  }
}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2100,    const std::string &  _2101,    int _2102,    std::shared_ptr< monty::ndarray< int,1 > > _2103,    int _2104,    int _2105,    std::shared_ptr< monty::ndarray< long long,1 > > _2106,    std::shared_ptr< monty::ndarray< int,1 > > _2107){ return new mosek::fusion::PSDConstraint(_2100,_2101,_2102,_2103,_2104,_2105,_2106,_2107); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2100,    const std::string &  _2101,    int _2102,    std::shared_ptr< monty::ndarray< int,1 > > _2103,    int _2104,    int _2105,    std::shared_ptr< monty::ndarray< long long,1 > > _2106,    std::shared_ptr< monty::ndarray< int,1 > > _2107) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2100,_2101,_2102,_2103,_2104,_2105,_2106,_2107); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2100,    const std::string &  _2101,    int _2102,    std::shared_ptr< monty::ndarray< int,1 > > _2103,    int _2104,    int _2105,    std::shared_ptr< monty::ndarray< long long,1 > > _2106,    std::shared_ptr< monty::ndarray< int,1 > > _2107){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2103(_2103 ? _2103->raw() : nullptr, _2103 ? _2103->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2106(_2106 ? _2106->raw() : nullptr, _2106 ? _2106->size(0) : 0);
    _checked_ptr_1<int> _ptr__2107(_2107 ? _2107->raw() : nullptr, _2107 ? _2107->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2100,_2101,_2103,::mosek::fusion::p_PSDConstraint::computenidxs(_2103,_2104,_2105,_2107));
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2102;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2107;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2106;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2101;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2103;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2104;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2105;
    names_flushed = false;
  }
}std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2108){
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2108)).as<::mosek::fusion::ModelConstraint>();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int,1 > > _2109,int _2110,int _2111,std::shared_ptr< monty::ndarray< int,1 > > _2112){
  _checked_ptr_1<int> _ptr__2109(_2109 ? _2109->raw() : nullptr, _2109 ? _2109->size(0) : 0);
  _checked_ptr_1<int> _ptr__2112(_2112 ? _2112->raw() : nullptr, _2112 ? _2112->size(0) : 0);
  int _2113 = (int)((_2109)->size(0));
  bool _2114 = (_2110 < _2111);
  int _7743;
  bool _7744 = _2114;
  if (_7744)
  {
    _7743 = _2110;
  }
  else
  {
    _7743 = _2111;
  }
  int _2115 = _7743;
  int _7745;
  bool _7746 = _2114;
  if (_7746)
  {
    _7745 = _2111;
  }
  else
  {
    _7745 = _2110;
  }
  int _2116 = _7745;
  std::shared_ptr< monty::ndarray< int,1 > > _2117 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__2117(_2117 ? _2117->raw() : nullptr,_2117 ? _2117->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2118 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__2118(_2118 ? _2118->raw() : nullptr,_2118 ? _2118->size(0) : 0);
  int _2119 = (int)1;
  int _7747 = (int)0;
  int _7748 = (int)((_2109)->size(0));
  for (int _2120 = _7747; _2120 < _7748; ++_2120)
  {
    {
      _2119 *= _ptr__2109[_2120];
    }
  }
  int _7749 = (int)0;
  int _7750 = _2115;
  for (int _2121 = _7749; _2121 < _7750; ++_2121)
  {
    {
      _ptr__2117[(int)0] *= _ptr__2109[_2121];
    }
  }
  _ptr__2117[(int)1] = _ptr__2109[_2115];
  int _7751 = safe_add( _2115,(int)1 );
  int _7752 = _2116;
  for (int _2122 = _7751; _2122 < _7752; ++_2122)
  {
    {
      _ptr__2117[(int)2] *= _ptr__2109[_2122];
    }
  }
  _ptr__2117[(int)3] = _ptr__2109[_2116];
  int _7753 = safe_add( _2116,(int)1 );
  int _7754 = _2113;
  for (int _2123 = _7753; _2123 < _7754; ++_2123)
  {
    {
      _ptr__2117[(int)4] *= _ptr__2109[_2123];
    }
  }
  _ptr__2118[(int)4] = (int)1;
  int _7755 = (int)1;
  int _7756 = (int)5;
  for (int _2124 = _7755; _2124 < _7756; ++_2124)
  {
    {
      _ptr__2118[(((int)5 - _2124) - (int)1)] = safe_mul( _ptr__2118[((int)5 - _2124)],_ptr__2117[((int)5 - _2124)] );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2125 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2119)));
  _checked_ptr_1<int> _ptr__2125(_2125 ? _2125->raw() : nullptr,_2125 ? _2125->size(0) : 0);
  int _2126 = (int)0;
  if (_2114)
  {
    {
      int _7757 = (int)0;
      int _7758 = _ptr__2117[(int)0];
      for (int _2127 = _7757; _2127 < _7758; ++_2127)
      {
        {
          int _7759 = (int)0;
          int _7760 = _ptr__2117[(int)1];
          for (int _2128 = _7759; _2128 < _7760; ++_2128)
          {
            {
              int _7761 = (int)0;
              int _7762 = _ptr__2117[(int)2];
              for (int _2129 = _7761; _2129 < _7762; ++_2129)
              {
                {
                  int _7763 = _2128;
                  int _7764 = _ptr__2117[(int)1];
                  for (int _2130 = _7763; _2130 < _7764; ++_2130)
                  {
                    {
                      int _7765 = (int)0;
                      int _7766 = _ptr__2117[(int)4];
                      for (int _2131 = _7765; _2131 < _7766; ++_2131)
                      {
                        {
                          _ptr__2125[safe_add( safe_add( safe_add( safe_add( safe_mul( _2127,_ptr__2118[(int)0] ),safe_mul( _2128,_ptr__2118[(int)1] ) ),safe_mul( _2129,_ptr__2118[(int)2] ) ),safe_mul( _2130,_ptr__2118[(int)3] ) ),safe_mul( _2131,_ptr__2118[(int)4] ) )] = _ptr__2112[_2126];
                          _ptr__2125[safe_add( safe_add( safe_add( safe_add( safe_mul( _2127,_ptr__2118[(int)0] ),safe_mul( _2130,_ptr__2118[(int)1] ) ),safe_mul( _2129,_ptr__2118[(int)2] ) ),safe_mul( _2128,_ptr__2118[(int)3] ) ),safe_mul( _2131,_ptr__2118[(int)4] ) )] = _ptr__2112[_2126];
                          ++ _2126;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _7767 = (int)0;
      int _7768 = _ptr__2117[(int)0];
      for (int _2132 = _7767; _2132 < _7768; ++_2132)
      {
        {
          int _7769 = (int)0;
          int _7770 = _ptr__2117[(int)1];
          for (int _2133 = _7769; _2133 < _7770; ++_2133)
          {
            {
              int _7771 = (int)0;
              int _7772 = _ptr__2117[(int)2];
              for (int _2134 = _7771; _2134 < _7772; ++_2134)
              {
                {
                  int _7773 = (int)0;
                  int _7774 = safe_add( _2133,(int)1 );
                  for (int _2135 = _7773; _2135 < _7774; ++_2135)
                  {
                    {
                      int _7775 = (int)0;
                      int _7776 = _ptr__2117[(int)4];
                      for (int _2136 = _7775; _2136 < _7776; ++_2136)
                      {
                        {
                          _ptr__2125[safe_add( safe_add( safe_add( safe_add( safe_mul( _2132,_ptr__2118[(int)0] ),safe_mul( _2133,_ptr__2118[(int)1] ) ),safe_mul( _2134,_ptr__2118[(int)2] ) ),safe_mul( _2135,_ptr__2118[(int)3] ) ),safe_mul( _2136,_ptr__2118[(int)4] ) )] = _ptr__2112[_2126];
                          _ptr__2125[safe_add( safe_add( safe_add( safe_add( safe_mul( _2132,_ptr__2118[(int)0] ),safe_mul( _2135,_ptr__2118[(int)1] ) ),safe_mul( _2134,_ptr__2118[(int)2] ) ),safe_mul( _2133,_ptr__2118[(int)3] ) ),safe_mul( _2136,_ptr__2118[(int)4] ) )] = _ptr__2112[_2126];
                          ++ _2126;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2125;
}
void mosek::fusion::p_PSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barmatidx() { return _impl->barmatidx; }
void mosek::fusion::ConstraintCache::set_barmatidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmatidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConstraintCache::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConstraintCache::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
long long mosek::fusion::ConstraintCache::get_nbarnz() { return _impl->nbarnz; }
void mosek::fusion::ConstraintCache::set_nbarnz(long long _val) { _impl->nbarnz = _val; }
long long mosek::fusion::ConstraintCache::get_nunordered() { return _impl->nunordered; }
void mosek::fusion::ConstraintCache::set_nunordered(long long _val) { _impl->nunordered = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subi() { return _impl->buffer_subi; }
void mosek::fusion::ConstraintCache::set_buffer_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subj() { return _impl->buffer_subj; }
void mosek::fusion::ConstraintCache::set_buffer_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subj = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_buffer_cof() { return _impl->buffer_cof; }
void mosek::fusion::ConstraintCache::set_buffer_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->buffer_cof = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConstraintCache::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_cof() { return _impl->cof; }
void mosek::fusion::ConstraintCache::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subi() { return _impl->subi; }
void mosek::fusion::ConstraintCache::set_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subj() { return _impl->subj; }
void mosek::fusion::ConstraintCache::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
long long mosek::fusion::ConstraintCache::get_nnz() { return _impl->nnz; }
void mosek::fusion::ConstraintCache::set_nnz(long long _val) { _impl->nnz = _val; }
int mosek::fusion::ConstraintCache::get_nrows() { return _impl->nrows; }
void mosek::fusion::ConstraintCache::set_nrows(int _val) { _impl->nrows = _val; }
mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2137){ return new mosek::fusion::ConstraintCache(_2137); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2137) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2137); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2137){monty::rc_reserve __reserve_this(_pubthis);   {
    nrows = mosek::fusion::p_ConstraintCache::_get_impl(_2137)->nrows;
    nnz = mosek::fusion::p_ConstraintCache::_get_impl(_2137)->nnz;
    std::shared_ptr< monty::ndarray< int,1 > > _7777;
    bool _7778 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->subj.get());
    if (_7778)
    {
      _7777 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->subj);
    }
    else
    {
      _7777 = nullptr;
    }
    subj = _7777;
    std::shared_ptr< monty::ndarray< int,1 > > _7779;
    bool _7780 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->subi.get());
    if (_7780)
    {
      _7779 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->subi);
    }
    else
    {
      _7779 = nullptr;
    }
    subi = _7779;
    std::shared_ptr< monty::ndarray< double,1 > > _7781;
    bool _7782 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->cof.get());
    if (_7782)
    {
      _7781 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->cof);
    }
    else
    {
      _7781 = nullptr;
    }
    cof = _7781;
    std::shared_ptr< monty::ndarray< double,1 > > _7783;
    bool _7784 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->bfix.get());
    if (_7784)
    {
      _7783 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->bfix);
    }
    else
    {
      _7783 = nullptr;
    }
    bfix = _7783;
    std::shared_ptr< monty::ndarray< double,1 > > _7785;
    bool _7786 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->buffer_cof.get());
    if (_7786)
    {
      _7785 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->buffer_cof);
    }
    else
    {
      _7785 = nullptr;
    }
    buffer_cof = _7785;
    std::shared_ptr< monty::ndarray< int,1 > > _7787;
    bool _7788 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->buffer_subj.get());
    if (_7788)
    {
      _7787 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->buffer_subj);
    }
    else
    {
      _7787 = nullptr;
    }
    buffer_subj = _7787;
    std::shared_ptr< monty::ndarray< int,1 > > _7789;
    bool _7790 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->buffer_subi.get());
    if (_7790)
    {
      _7789 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->buffer_subi);
    }
    else
    {
      _7789 = nullptr;
    }
    buffer_subi = _7789;
    nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_2137)->nunordered;
    nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_2137)->nbarnz;
    std::shared_ptr< monty::ndarray< int,1 > > _7791;
    bool _7792 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->barsubi.get());
    if (_7792)
    {
      _7791 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->barsubi);
    }
    else
    {
      _7791 = nullptr;
    }
    barsubi = _7791;
    std::shared_ptr< monty::ndarray< int,1 > > _7793;
    bool _7794 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->barsubj.get());
    if (_7794)
    {
      _7793 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->barsubj);
    }
    else
    {
      _7793 = nullptr;
    }
    barsubj = _7793;
    std::shared_ptr< monty::ndarray< int,1 > > _7795;
    bool _7796 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2137)->barmatidx.get());
    if (_7796)
    {
      _7795 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2137)->barmatidx);
    }
    else
    {
      _7795 = nullptr;
    }
    barmatidx = _7795;
  }
}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2138,    std::shared_ptr< monty::ndarray< double,1 > > _2139,    std::shared_ptr< monty::ndarray< int,1 > > _2140,    std::shared_ptr< monty::ndarray< double,1 > > _2141,    std::shared_ptr< monty::ndarray< int,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144){ return new mosek::fusion::ConstraintCache(_2138,_2139,_2140,_2141,_2142,_2143,_2144); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2138,    std::shared_ptr< monty::ndarray< double,1 > > _2139,    std::shared_ptr< monty::ndarray< int,1 > > _2140,    std::shared_ptr< monty::ndarray< double,1 > > _2141,    std::shared_ptr< monty::ndarray< int,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2138,_2139,_2140,_2141,_2142,_2143,_2144); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _2138,    std::shared_ptr< monty::ndarray< double,1 > > _2139,    std::shared_ptr< monty::ndarray< int,1 > > _2140,    std::shared_ptr< monty::ndarray< double,1 > > _2141,    std::shared_ptr< monty::ndarray< int,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2138(_2138 ? _2138->raw() : nullptr, _2138 ? _2138->size(0) : 0);
    _checked_ptr_1<double> _ptr__2139(_2139 ? _2139->raw() : nullptr, _2139 ? _2139->size(0) : 0);
    _checked_ptr_1<int> _ptr__2140(_2140 ? _2140->raw() : nullptr, _2140 ? _2140->size(0) : 0);
    _checked_ptr_1<double> _ptr__2141(_2141 ? _2141->raw() : nullptr, _2141 ? _2141->size(0) : 0);
    _checked_ptr_1<int> _ptr__2142(_2142 ? _2142->raw() : nullptr, _2142 ? _2142->size(0) : 0);
    _checked_ptr_1<int> _ptr__2143(_2143 ? _2143->raw() : nullptr, _2143 ? _2143->size(0) : 0);
    _checked_ptr_1<int> _ptr__2144(_2144 ? _2144->raw() : nullptr, _2144 ? _2144->size(0) : 0);
    nrows = ((int)((_2138)->size(0)) - (int)1);
    nnz = _ptr__2138[((int)((_2138)->size(0)) - (int)1)];
    subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)));
    if ((NULL != _2141.get()))
    {
      {
        bfix = _2141;
      }
    }
    else
    {
      {
        bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)));
      }
    }
    if (((NULL != _2142.get()) && ((NULL != _2143.get()) && (NULL != _2144.get()))))
    {
      {
        nbarnz = (int)((_2142)->size(0));
        if ((nbarnz > (int)((_2143)->size(0))))
        {
          {
            nbarnz = (int)((_2143)->size(0));
          }
        }
        {}
        if ((nbarnz > (int)((_2144)->size(0))))
        {
          {
            nbarnz = (int)((_2144)->size(0));
          }
        }
        {}
        barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        ::mosek::fusion::Utils::Tools::arraycopy(_2142,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2143,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2144,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
      }
    }
    else
    {
      {
        nbarnz = (int)0;
        barsubi = nullptr;
        barsubj = nullptr;
        barmatidx = nullptr;
      }
    }
    ::mosek::fusion::Utils::Tools::arraycopy(_2140,(long long)0,subj,(long long)0,nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_2139,(long long)0,cof,(long long)0,nnz);
    int _7797 = (int)0;
    int _7798 = nrows;
    for (int _2145 = _7797; _2145 < _7798; ++_2145)
    {
      {
        long long _7799 = _ptr__2138[_2145];
        long long _7800 = _ptr__2138[safe_add( _2145,(int)1 )];
        for (long long _2146 = _7799; _2146 < _7800; ++_2146)
        {
          {
            ((*subi)(_2146)) = _2145;
          }
        }
      }
    }
    buffer_cof = nullptr;
    buffer_subj = nullptr;
    buffer_subi = nullptr;
    nunordered = (long long)0;
  }
}void mosek::fusion::p_ConstraintCache::unchecked_add_fx(std::shared_ptr< monty::ndarray< double,1 > > _2147){
  _checked_ptr_1<double> _ptr__2147(_2147 ? _2147->raw() : nullptr, _2147 ? _2147->size(0) : 0);
  int _7801 = (int)0;
  int _7802 = nrows;
  for (int _2148 = _7801; _2148 < _7802; ++_2148)
  {
    {
      ((*bfix)(_2148)) = (((*bfix)(_2148)) + _ptr__2147[_2148]);
    }
  }
}
long long mosek::fusion::p_ConstraintCache::order_barentries(){
  std::vector<long long> _7803;
  for (long long _2150 = (long long)0, _7804 = nbarnz; _2150 < _7804 ; ++_2150)
  {
    _7803.push_back(_2150);
  }
  auto _7805 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7803.size()),_7803.begin(),_7803.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _2149 = _7805;
  _checked_ptr_1<long long> _ptr__2149(_2149 ? _2149->raw() : nullptr,_2149 ? _2149->size(0) : 0);
  if ((!::mosek::fusion::p_Sort::issorted(_2149,barsubi,barsubj,(long long)((int)0),nbarnz,false)))
  {
    {
      ::mosek::fusion::p_Sort::argsort(_2149,barsubi,barsubj,(long long)((int)0),nbarnz,false);
      std::shared_ptr< monty::ndarray< int,1 > > _2151 = barsubi;
      _checked_ptr_1<int> _ptr__2151(_2151 ? _2151->raw() : nullptr,_2151 ? _2151->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2152 = barsubj;
      _checked_ptr_1<int> _ptr__2152(_2152 ? _2152->raw() : nullptr,_2152 ? _2152->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2153 = barmatidx;
      _checked_ptr_1<int> _ptr__2153(_2153 ? _2153->raw() : nullptr,_2153 ? _2153->size(0) : 0);
      std::vector<int> _7806;
      for (long long _2154 = (int)0, _7807 = nbarnz; _2154 < _7807 ; ++_2154)
      {
        _7806.push_back(_ptr__2151[_ptr__2149[_2154]]);
      }
      auto _7808 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7806.size()),_7806.begin(),_7806.end()));
      barsubi = _7808;
      std::vector<int> _7809;
      for (long long _2155 = (int)0, _7810 = nbarnz; _2155 < _7810 ; ++_2155)
      {
        _7809.push_back(_ptr__2152[_ptr__2149[_2155]]);
      }
      auto _7811 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7809.size()),_7809.begin(),_7809.end()));
      barsubj = _7811;
      std::vector<int> _7812;
      for (long long _2156 = (int)0, _7813 = nbarnz; _2156 < _7813 ; ++_2156)
      {
        _7812.push_back(_ptr__2153[_ptr__2149[_2156]]);
      }
      auto _7814 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7812.size()),_7812.begin(),_7812.end()));
      barmatidx = _7814;
    }
  }
  {}
  return nbarnz;
}
void mosek::fusion::p_ConstraintCache::add_bar(std::shared_ptr< monty::ndarray< int,1 > > _2157,std::shared_ptr< monty::ndarray< int,1 > > _2158,std::shared_ptr< monty::ndarray< int,1 > > _2159){
  _checked_ptr_1<int> _ptr__2157(_2157 ? _2157->raw() : nullptr, _2157 ? _2157->size(0) : 0);
  _checked_ptr_1<int> _ptr__2158(_2158 ? _2158->raw() : nullptr, _2158 ? _2158->size(0) : 0);
  _checked_ptr_1<int> _ptr__2159(_2159 ? _2159->raw() : nullptr, _2159 ? _2159->size(0) : 0);
  if ((NULL != _2157.get()))
  {
    {
      int _2160 = (int)((_2157)->size(0));
      if (((int)((_2157)->size(0)) <= safe_add( nbarnz,_2160 )))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2161 = barsubi;
          _checked_ptr_1<int> _ptr__2161(_2161 ? _2161->raw() : nullptr,_2161 ? _2161->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2162 = barsubj;
          _checked_ptr_1<int> _ptr__2162(_2162 ? _2162->raw() : nullptr,_2162 ? _2162->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2163 = barmatidx;
          _checked_ptr_1<int> _ptr__2163(_2163 ? _2163->raw() : nullptr,_2163 ? _2163->size(0) : 0);
          long long _7815;
          bool _7816 = (safe_mul( (int)2,nbarnz ) > safe_add( nbarnz,_2160 ));
          if (_7816)
          {
            _7815 = safe_mul( (int)2,nbarnz );
          }
          else
          {
            _7815 = safe_add( nbarnz,safe_mul( _2160,(int)2 ) );
          }
          long long _2164 = _7815;
          barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2164)));
          barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2164)));
          barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2164)));
          if ((nbarnz > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_2161,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2162,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2163,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
            }
          }
          {}
        }
      }
      {}
      ::mosek::fusion::Utils::Tools::arraycopy(_2157,(long long)((int)0),barsubi,nbarnz,(long long)(_2160));
      ::mosek::fusion::Utils::Tools::arraycopy(_2158,(long long)((int)0),barsubj,nbarnz,(long long)(_2160));
      ::mosek::fusion::Utils::Tools::arraycopy(_2159,(long long)((int)0),barmatidx,nbarnz,(long long)(_2160));
      nbarnz += _2160;
    }
  }
  {}
}
void mosek::fusion::p_ConstraintCache::unchecked_add_l(std::shared_ptr< monty::ndarray< long long,1 > > _2165,std::shared_ptr< monty::ndarray< int,1 > > _2166,std::shared_ptr< monty::ndarray< double,1 > > _2167,std::shared_ptr< monty::ndarray< double,1 > > _2168){
  _checked_ptr_1<long long> _ptr__2165(_2165 ? _2165->raw() : nullptr, _2165 ? _2165->size(0) : 0);
  _checked_ptr_1<int> _ptr__2166(_2166 ? _2166->raw() : nullptr, _2166 ? _2166->size(0) : 0);
  _checked_ptr_1<double> _ptr__2167(_2167 ? _2167->raw() : nullptr, _2167 ? _2167->size(0) : 0);
  _checked_ptr_1<double> _ptr__2168(_2168 ? _2168->raw() : nullptr, _2168 ? _2168->size(0) : 0);
  long long _2169 = safe_add( nunordered,_ptr__2165[nrows] );
  long long _2170 = _ptr__2165[nrows];
  std::shared_ptr< monty::ndarray< int,1 > > _2171;
  _checked_ptr_1<int> _ptr__2171(_2171 ? _2171->raw() : nullptr,_2171 ? _2171->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2172;
  _checked_ptr_1<int> _ptr__2172(_2172 ? _2172->raw() : nullptr,_2172 ? _2172->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2173;
  _checked_ptr_1<double> _ptr__2173(_2173 ? _2173->raw() : nullptr,_2173 ? _2173->size(0) : 0);
  if (((NULL == buffer_cof.get()) || ((int)((buffer_cof)->size(0)) < _2169)))
  {
    {
      _2171 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2169)));
      _ptr__2171.update(_2171 ? _2171->raw() : nullptr, _2171 ? _2171->size(0) : 0);
      _2172 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2169)));
      _ptr__2172.update(_2172 ? _2172->raw() : nullptr, _2172 ? _2172->size(0) : 0);
      _2173 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2169)));
      _ptr__2173.update(_2173 ? _2173->raw() : nullptr, _2173 ? _2173->size(0) : 0);
      if ((NULL != buffer_cof.get()))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_2171,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_2172,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_2173,(long long)0,nunordered);
        }
      }
      {}
    }
  }
  else
  {
    {
      _2171 = buffer_subi;
      _ptr__2171.update(_2171 ? _2171->raw() : nullptr, _2171 ? _2171->size(0) : 0);
      _2172 = buffer_subj;
      _ptr__2172.update(_2172 ? _2172->raw() : nullptr, _2172 ? _2172->size(0) : 0);
      _2173 = buffer_cof;
      _ptr__2173.update(_2173 ? _2173->raw() : nullptr, _2173 ? _2173->size(0) : 0);
    }
  }
  int _7817 = (int)0;
  int _7818 = nrows;
  for (int _2174 = _7817; _2174 < _7818; ++_2174)
  {
    {
      long long _7819 = _ptr__2165[_2174];
      long long _7820 = _ptr__2165[safe_add( _2174,(int)1 )];
      for (long long _2175 = _7819; _2175 < _7820; ++_2175)
      {
        {
          _ptr__2171[safe_add( nunordered,_2175 )] = _2174;
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_2166,(long long)0,_2172,nunordered,_2170);
  ::mosek::fusion::Utils::Tools::arraycopy(_2167,(long long)0,_2173,nunordered,_2170);
  buffer_subi = _2171;
  buffer_subj = _2172;
  buffer_cof = _2173;
  if ((NULL != _2168.get()))
  {
    {
      int _7821 = (int)0;
      int _7822 = nrows;
      for (int _2176 = _7821; _2176 < _7822; ++_2176)
      {
        {
          ((*bfix)(_2176)) = (((*bfix)(_2176)) + _ptr__2168[_2176]);
        }
      }
    }
  }
  {}
  nunordered = _2169;
}
void mosek::fusion::ConstraintCache :: add(std::shared_ptr< monty::ndarray< long long,1 > > _2177,std::shared_ptr< monty::ndarray< int,1 > > _2178,std::shared_ptr< monty::ndarray< double,1 > > _2179,std::shared_ptr< monty::ndarray< double,1 > > _2180) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_2177,_2178,_2179,_2180); }void mosek::fusion::p_ConstraintCache::add(std::shared_ptr< monty::ndarray< long long,1 > > _2177,std::shared_ptr< monty::ndarray< int,1 > > _2178,std::shared_ptr< monty::ndarray< double,1 > > _2179,std::shared_ptr< monty::ndarray< double,1 > > _2180){
  _checked_ptr_1<long long> _ptr__2177(_2177 ? _2177->raw() : nullptr, _2177 ? _2177->size(0) : 0);
  _checked_ptr_1<int> _ptr__2178(_2178 ? _2178->raw() : nullptr, _2178 ? _2178->size(0) : 0);
  _checked_ptr_1<double> _ptr__2179(_2179 ? _2179->raw() : nullptr, _2179 ? _2179->size(0) : 0);
  _checked_ptr_1<double> _ptr__2180(_2180 ? _2180->raw() : nullptr, _2180 ? _2180->size(0) : 0);
  if ((((int)((_2177)->size(0)) != safe_add( nrows,(int)1 )) || ((NULL != _2180.get()) && ((int)((_2180)->size(0)) != nrows))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));
    }
  }
  {}
  unchecked_add_l(_2177,_2178,_2179,_2180);
}
long long mosek::fusion::ConstraintCache :: flush(std::shared_ptr< monty::ndarray< int,1 > > _2181,std::shared_ptr< monty::ndarray< int,1 > > _2182,std::shared_ptr< monty::ndarray< double,1 > > _2183,std::shared_ptr< monty::ndarray< double,1 > > _2184) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_2181,_2182,_2183,_2184); }long long mosek::fusion::p_ConstraintCache::flush(std::shared_ptr< monty::ndarray< int,1 > > _2181,std::shared_ptr< monty::ndarray< int,1 > > _2182,std::shared_ptr< monty::ndarray< double,1 > > _2183,std::shared_ptr< monty::ndarray< double,1 > > _2184){
  _checked_ptr_1<int> _ptr__2181(_2181 ? _2181->raw() : nullptr, _2181 ? _2181->size(0) : 0);
  _checked_ptr_1<int> _ptr__2182(_2182 ? _2182->raw() : nullptr, _2182 ? _2182->size(0) : 0);
  _checked_ptr_1<double> _ptr__2183(_2183 ? _2183->raw() : nullptr, _2183 ? _2183->size(0) : 0);
  _checked_ptr_1<double> _ptr__2184(_2184 ? _2184->raw() : nullptr, _2184 ? _2184->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2185 = nullptr;
  _checked_ptr_1<long long> _ptr__2185(_2185 ? _2185->raw() : nullptr,_2185 ? _2185->size(0) : 0);
  if (((NULL != bfix.get()) && (NULL != _2184.get())))
  {
    {
      int _7823 = (int)0;
      int _7824 = nrows;
      for (int _2186 = _7823; _2186 < _7824; ++_2186)
      {
        {
          _ptr__2184[_2186] = ((*bfix)(_2186));
        }
      }
    }
  }
  {}
  if ((nunordered == (long long)0))
  {
    {
      return (long long)0;
    }
  }
  {}
  bool _2187 = false;
  {
    int _2188 = (int)1;
    while ( ((_2188 < nunordered) && ((((*buffer_subi)((_2188 - (int)1))) < ((*buffer_subi)(_2188))) || ((((*buffer_subi)((_2188 - (int)1))) == ((*buffer_subi)(_2188))) && (((*buffer_subj)((_2188 - (int)1))) <= ((*buffer_subj)(_2188)))))) )
    {
      {
        ++ _2188;
      }
    }
    _2187 = (_2188 == nunordered);
  }
  if ((!_2187))
  {
    {
      std::vector<long long> _7825;
      for (long long _2189 = (int)0, _7826 = nunordered; _2189 < _7826 ; ++_2189)
      {
        _7825.push_back(_2189);
      }
      auto _7827 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7825.size()),_7825.begin(),_7825.end()));
      _2185 = _7827;
      _ptr__2185.update(_2185 ? _2185->raw() : nullptr, _2185 ? _2185->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2185,buffer_subi,buffer_subj,(long long)0,nunordered);
    }
  }
  {}
  long long _2190 = nnz;
  std::shared_ptr< monty::ndarray< int,1 > > _2191 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2190 ))));
  _checked_ptr_1<int> _ptr__2191(_2191 ? _2191->raw() : nullptr,_2191 ? _2191->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2192 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2190 ))));
  _checked_ptr_1<int> _ptr__2192(_2192 ? _2192->raw() : nullptr,_2192 ? _2192->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2193 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( nunordered,_2190 ))));
  _checked_ptr_1<double> _ptr__2193(_2193 ? _2193->raw() : nullptr,_2193 ? _2193->size(0) : 0);
  long long _2194 = (long long)0;
  if (_2187)
  {
    {
      long long _2195 = (long long)0;
      int _2196 = (int)0;
      long long _2197 = nunordered;
      long long _2198 = _2190;
      int _2199 = (int)0;
      int _2200 = (int)0;
      while ( ((_2200 < _2198) && (_2199 < _2197)) )
      {
        {
          if (((((*subi)(_2200)) < ((*buffer_subi)(_2199))) || ((((*subi)(_2200)) == ((*buffer_subi)(_2199))) && (((*subj)(_2200)) < ((*buffer_subj)(_2199))))))
          {
            {
              _ptr__2191[_2196] = ((*subi)(_2200));
              _ptr__2192[_2196] = ((*subj)(_2200));
              _ptr__2193[_2196] = ((*cof)(_2200));
              ++ _2200;
              ++ _2196;
            }
          }
          else if(((((*subi)(_2200)) > ((*buffer_subi)(_2199))) || ((((*subi)(_2200)) == ((*buffer_subi)(_2199))) && (((*subj)(_2200)) > ((*buffer_subj)(_2199))))))
          {
            {
              _ptr__2191[_2196] = ((*buffer_subi)(_2199));
              _ptr__2192[_2196] = ((*buffer_subj)(_2199));
              _ptr__2193[_2196] = ((*buffer_cof)(_2199));
              _ptr__2181[_2194] = _ptr__2191[_2196];
              _ptr__2182[_2194] = _ptr__2192[_2196];
              _ptr__2183[_2194] = _ptr__2193[_2196];
              ++ _2194;
              ++ _2199;
              ++ _2196;
            }
          }
          else
          {
            {
              _ptr__2191[_2196] = ((*subi)(_2200));
              _ptr__2192[_2196] = ((*subj)(_2200));
              _ptr__2193[_2196] = ((*cof)(_2200));
              while ( ((_2200 < (int)((subi)->size(0))) && ((_2199 < (int)((buffer_subi)->size(0))) && ((((*subi)(_2200)) == ((*buffer_subi)(_2199))) && (((*subj)(_2200)) == ((*buffer_subj)(_2199)))))) )
              {
                {
                  _ptr__2193[_2196] = (_ptr__2193[_2196] + ((*buffer_cof)(_2199)));
                  ++ _2199;
                }
              }
              _ptr__2181[_2194] = _ptr__2191[_2196];
              _ptr__2182[_2194] = _ptr__2192[_2196];
              _ptr__2183[_2194] = _ptr__2193[_2196];
              ++ _2194;
              ++ _2200;
              ++ _2196;
            }
          }
        }
      }
      while ( (_2200 < _2198) )
      {
        {
          _ptr__2191[_2196] = ((*subi)(_2200));
          _ptr__2192[_2196] = ((*subj)(_2200));
          _ptr__2193[_2196] = ((*cof)(_2200));
          ++ _2200;
          ++ _2196;
        }
      }
      while ( (_2199 < _2197) )
      {
        {
          _ptr__2191[_2196] = ((*buffer_subi)(_2199));
          _ptr__2192[_2196] = ((*buffer_subj)(_2199));
          _ptr__2193[_2196] = ((*buffer_cof)(_2199));
          _ptr__2181[_2194] = _ptr__2191[_2196];
          _ptr__2182[_2194] = _ptr__2192[_2196];
          _ptr__2183[_2194] = _ptr__2193[_2196];
          ++ _2194;
          ++ _2199;
          ++ _2196;
        }
      }
      nnz = _2196;
    }
  }
  else
  {
    {
      long long _2201 = (long long)0;
      int _2202 = (int)0;
      long long _2203 = nunordered;
      long long _2204 = _2190;
      int _2205 = (int)0;
      int _2206 = (int)0;
      while ( ((_2206 < _2204) && (_2205 < _2203)) )
      {
        {
          if (((((*subi)(_2206)) < ((*buffer_subi)(_ptr__2185[_2205]))) || ((((*subi)(_2206)) == ((*buffer_subi)(_ptr__2185[_2205]))) && (((*subj)(_2206)) < ((*buffer_subj)(_ptr__2185[_2205]))))))
          {
            {
              _ptr__2191[_2202] = ((*subi)(_2206));
              _ptr__2192[_2202] = ((*subj)(_2206));
              _ptr__2193[_2202] = ((*cof)(_2206));
              ++ _2206;
              ++ _2202;
            }
          }
          else if(((((*subi)(_2206)) > ((*buffer_subi)(_ptr__2185[_2205]))) || ((((*subi)(_2206)) == ((*buffer_subi)(_ptr__2185[_2205]))) && (((*subj)(_2206)) > ((*buffer_subj)(_ptr__2185[_2205]))))))
          {
            {
              _ptr__2191[_2202] = ((*buffer_subi)(_ptr__2185[_2205]));
              _ptr__2192[_2202] = ((*buffer_subj)(_ptr__2185[_2205]));
              _ptr__2193[_2202] = ((*buffer_cof)(_ptr__2185[_2205]));
              _ptr__2181[_2194] = _ptr__2191[_2202];
              _ptr__2182[_2194] = _ptr__2192[_2202];
              _ptr__2183[_2194] = _ptr__2193[_2202];
              ++ _2194;
              ++ _2205;
              ++ _2202;
            }
          }
          else
          {
            {
              _ptr__2191[_2202] = ((*subi)(_2206));
              _ptr__2192[_2202] = ((*subj)(_2206));
              _ptr__2193[_2202] = ((*cof)(_2206));
              while ( ((((*subi)(_2206)) == ((*buffer_subi)(_ptr__2185[_2205]))) && (((*subj)(_2206)) == ((*buffer_subj)(_ptr__2185[_2205])))) )
              {
                {
                  _ptr__2193[_2202] = (_ptr__2193[_2202] + ((*buffer_cof)(_ptr__2185[_2205])));
                  ++ _2205;
                }
              }
              _ptr__2181[_2194] = _ptr__2191[_2202];
              _ptr__2182[_2194] = _ptr__2192[_2202];
              _ptr__2183[_2194] = _ptr__2193[_2202];
              ++ _2194;
              ++ _2206;
              ++ _2202;
            }
          }
        }
      }
      nnz = _2202;
    }
  }
  subi = _2191;
  subj = _2192;
  cof = _2193;
  nunordered = (long long)0;
  return _2194;
}
long long mosek::fusion::ConstraintCache :: numUnsorted() { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted(){
  return nunordered;
}
monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::__mosek_2fusion_2ConstraintCache__clone(){
  return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(::mosek::fusion::ConstraintCache::t(_pubthis));
}
void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2207,    std::shared_ptr< monty::ndarray< int,1 > > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209){ return new mosek::fusion::SliceConstraint(_2207,_2208,_2209); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2207,    std::shared_ptr< monty::ndarray< int,1 > > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2207,_2208,_2209); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2207,    std::shared_ptr< monty::ndarray< int,1 > > _2208,    std::shared_ptr< monty::ndarray< int,1 > > _2209){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2208(_2208 ? _2208->raw() : nullptr, _2208 ? _2208->size(0) : 0);
    _checked_ptr_1<int> _ptr__2209(_2209 ? _2209->raw() : nullptr, _2209 ? _2209->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2207,_2208,_2209);
  }
}std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_SliceConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2210 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2210->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2210->toString();
}
void mosek::fusion::p_SliceConstraint::destroy(){}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2211,    monty::rc_ptr< ::mosek::fusion::Model > _2212){ return new mosek::fusion::RangedConstraint(_2211,_2212); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2211,    monty::rc_ptr< ::mosek::fusion::Model > _2212) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2211,_2212); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2211,    monty::rc_ptr< ::mosek::fusion::Model > _2212){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2211,_2212);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2211)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2211)->nativeidxs;
  }
}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2213,    const std::string &  _2214,    std::shared_ptr< monty::ndarray< int,1 > > _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216){ return new mosek::fusion::RangedConstraint(_2213,_2214,_2215,_2216); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2213,    const std::string &  _2214,    std::shared_ptr< monty::ndarray< int,1 > > _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2213,_2214,_2215,_2216); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2213,    const std::string &  _2214,    std::shared_ptr< monty::ndarray< int,1 > > _2215,    std::shared_ptr< monty::ndarray< int,1 > > _2216){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2215(_2215 ? _2215->raw() : nullptr, _2215 ? _2215->size(0) : 0);
    _checked_ptr_1<int> _ptr__2216(_2216 ? _2216->raw() : nullptr, _2216 ? _2216->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2213,_2214,_2215,_2216);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2215;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2216;
  }
}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2217){
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2217)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_RangedConstraint::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2218,    monty::rc_ptr< ::mosek::fusion::Model > _2219){ return new mosek::fusion::ConicConstraint(_2218,_2219); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2218,    monty::rc_ptr< ::mosek::fusion::Model > _2219) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2218,_2219); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2218,    monty::rc_ptr< ::mosek::fusion::Model > _2219){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2218,_2219);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2218)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2218)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2218)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2218)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2218)->nativeidxs;
    nativeslack = mosek::fusion::p_ConicConstraint::_get_impl(_2218)->nativeslack;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2218)->names_flushed;
  }
}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2220,    const std::string &  _2221,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2222,    std::shared_ptr< monty::ndarray< int,1 > > _2223,    int _2224,    std::shared_ptr< monty::ndarray< int,1 > > _2225,    std::shared_ptr< monty::ndarray< int,1 > > _2226){ return new mosek::fusion::ConicConstraint(_2220,_2221,_2222,_2223,_2224,_2225,_2226); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2220,    const std::string &  _2221,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2222,    std::shared_ptr< monty::ndarray< int,1 > > _2223,    int _2224,    std::shared_ptr< monty::ndarray< int,1 > > _2225,    std::shared_ptr< monty::ndarray< int,1 > > _2226) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2220,_2221,_2222,_2223,_2224,_2225,_2226); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2220,    const std::string &  _2221,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2222,    std::shared_ptr< monty::ndarray< int,1 > > _2223,    int _2224,    std::shared_ptr< monty::ndarray< int,1 > > _2225,    std::shared_ptr< monty::ndarray< int,1 > > _2226){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2223(_2223 ? _2223->raw() : nullptr, _2223 ? _2223->size(0) : 0);
    _checked_ptr_1<int> _ptr__2225(_2225 ? _2225->raw() : nullptr, _2225 ? _2225->size(0) : 0);
    _checked_ptr_1<int> _ptr__2226(_2226 ? _2226->raw() : nullptr, _2226 ? _2226->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2220,_2221,_2223,_2225);
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2222;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2223;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2221;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2225;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeslack = _2226;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2224;
    names_flushed = false;
  }
}void mosek::fusion::p_ConicConstraint::flushNames(){
  ::mosek::fusion::p_ModelConstraint::flushNames();
  int _2227 = (int)((nativeslack)->size(0));
  monty::rc_ptr< ::mosek::fusion::Model > _2228 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          int _7828 = (int)0;
          int _7829 = _2227;
          for (int _2229 = _7828; _2229 < _7829; ++_2229)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2228.get())->task_var_name(((*nativeslack)(_2229)),std::string (""));
            }
          }
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2230 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          int _7830 = (int)0;
          int _7831 = _2227;
          for (int _2231 = _7830; _2231 < _7831; ++_2231)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2228.get())->task_var_name(((*nativeslack)(_2231)),_2230->__mosek_2fusion_2Utils_2StringBuffer__clear()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,(long long)(_2231)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("].coneslack"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2232 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2232->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2232->toString();
}
void mosek::fusion::p_ConicConstraint::domainToString(long long _2233,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2234){
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2235){
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2235)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_ConicConstraint::destroy(){nativeslack.reset();nativeidxs.reset();shape.reset();dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2236,    monty::rc_ptr< ::mosek::fusion::Model > _2237){ return new mosek::fusion::LinearConstraint(_2236,_2237); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2236,    monty::rc_ptr< ::mosek::fusion::Model > _2237) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2236,_2237); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2236,    monty::rc_ptr< ::mosek::fusion::Model > _2237){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2236,_2237);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2236)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2236)->name;
  }
}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2238,    const std::string &  _2239,    int _2240,    std::shared_ptr< monty::ndarray< int,1 > > _2241,    std::shared_ptr< monty::ndarray< int,1 > > _2242){ return new mosek::fusion::LinearConstraint(_2238,_2239,_2240,_2241,_2242); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2238,    const std::string &  _2239,    int _2240,    std::shared_ptr< monty::ndarray< int,1 > > _2241,    std::shared_ptr< monty::ndarray< int,1 > > _2242) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2238,_2239,_2240,_2241,_2242); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2238,    const std::string &  _2239,    int _2240,    std::shared_ptr< monty::ndarray< int,1 > > _2241,    std::shared_ptr< monty::ndarray< int,1 > > _2242){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2241(_2241 ? _2241->raw() : nullptr, _2241 ? _2241->size(0) : 0);
    _checked_ptr_1<int> _ptr__2242(_2242 ? _2242->raw() : nullptr, _2242 ? _2242->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2238,_2239,_2241,_2242);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2240;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2239;
  }
}std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2243 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2243->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2243->toString();
}
void mosek::fusion::p_LinearConstraint::domainToString(long long _2244,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2245){
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2246){
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2246)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearConstraint::destroy(){}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2247,    monty::rc_ptr< ::mosek::fusion::Model > _2248){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2247,_2248);
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2247)->name;
    names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_2247)->names_flushed;
    nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2247)->nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2247)->shape;
  }
}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2249,    const std::string &  _2250,    std::shared_ptr< monty::ndarray< int,1 > > _2251,    std::shared_ptr< monty::ndarray< int,1 > > _2252){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2251(_2251 ? _2251->raw() : nullptr, _2251 ? _2251->size(0) : 0);
    _checked_ptr_1<int> _ptr__2252(_2252 ? _2252->raw() : nullptr, _2252 ? _2252->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2249,_2251,_2252);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2250;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->nativeidxs = _2252;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2251;
  }
}std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2253 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2253->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2253->toString();
}
void mosek::fusion::p_ModelConstraint::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _2254 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if ((!names_flushed))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          mosek::fusion::p_Model::_get_impl(_2254.get())->connames(nativeidxs,std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_pubthis->getSize())}),std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2255 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          _2255->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
          if ((_pubthis->getND() > (int)0))
          {
            {
              _2255->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
              int _7832 = (int)1;
              int _7833 = _pubthis->getND();
              for (int _2256 = _7832; _2256 < _7833; ++_2256)
              {
                {
                  _2255->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2256);
                }
              }
            }
          }
          {}
          _2255->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
          std::shared_ptr< monty::ndarray< int,1 > > _7834;
          bool _7835 = (_pubthis->getND() > (int)0);
          if (_7835)
          {
            _7834 = _pubthis->getShape();
          }
          else
          {
            _7834 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
          }
          mosek::fusion::p_Model::_get_impl(_2254.get())->connames(nativeidxs,_2255->toString(),_7834,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
          names_flushed = true;
        }
      }
    }
  }
  {}
}
void mosek::fusion::p_ModelConstraint::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2258,    monty::rc_ptr< ::mosek::fusion::Model > _2259){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _2259;
    shape = mosek::fusion::p_Constraint::_get_impl(_2258)->shape;
    nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2258)->nativeidxs;
  }
}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2260,    std::shared_ptr< monty::ndarray< int,1 > > _2261,    std::shared_ptr< monty::ndarray< int,1 > > _2262){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2261(_2261 ? _2261->raw() : nullptr, _2261 ? _2261->size(0) : 0);
    _checked_ptr_1<int> _ptr__2262(_2262 ? _2262->raw() : nullptr, _2262 ? _2262->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2260;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2261;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->nativeidxs = _2262;
  }
}std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< long long,1 > > _2263,long long _2264,std::shared_ptr< monty::ndarray< std::string,1 > > _2265){
  _checked_ptr_1<long long> _ptr__2263(_2263 ? _2263->raw() : nullptr, _2263 ? _2263->size(0) : 0);
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2266 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2266(_2266 ? _2266->raw() : nullptr,_2266 ? _2266->size(0) : 0);
  values(false,(int)0,_2266);
  return _2266;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2267 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2267(_2267 ? _2267->raw() : nullptr,_2267 ? _2267->size(0) : 0);
  values(true,(int)0,_2267);
  return _2267;
}
void mosek::fusion::p_Constraint::values(bool _2268,int _2269,std::shared_ptr< monty::ndarray< double,1 > > _2270){
  _checked_ptr_1<double> _ptr__2270(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
  model->getConstraintValues(_2268,nativeidxs,_2270,_2269);
}
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2271) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2271); }void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2271){
  _checked_ptr_1<double> _ptr__2271(_2271 ? _2271->raw() : nullptr, _2271 ? _2271->size(0) : 0);
  mosek::fusion::p_Model::_get_impl(model.get())->update_bfix(nativeidxs,_2271);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2272) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2272); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2272){
  std::shared_ptr< monty::ndarray< int,1 > > _2273 = _2272->getShape();
  _checked_ptr_1<int> _ptr__2273(_2273 ? _2273->raw() : nullptr,_2273 ? _2273->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2273)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _7836 = (int)0;
  int _7837 = (int)((_2273)->size(0));
  for (int _2274 = _7836; _2274 < _7837; ++_2274)
  {
    {
      if ((_ptr__2273[_2274] != ((*shape)(_2274))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _7838 = (int)((_2273)->size(0));
  int _7839 = (int)((shape)->size(0));
  for (int _2275 = _7838; _2275 < _7839; ++_2275)
  {
    {
      if ((((*shape)(_2275)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2272);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2276,monty::rc_ptr< ::mosek::fusion::Variable > _2277,bool _2278) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2276,_2277,_2278); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2276,monty::rc_ptr< ::mosek::fusion::Variable > _2277,bool _2278){
  int _2279 = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int,1 > > _2280 = _2276->getShape();
  _checked_ptr_1<int> _ptr__2280(_2280 ? _2280->raw() : nullptr,_2280 ? _2280->size(0) : 0);
  if ((_2279 < (int)((_2280)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _7840 = (int)0;
  int _7841 = (int)((_2280)->size(0));
  for (int _2281 = _7840; _2281 < _7841; ++_2281)
  {
    {
      if ((_ptr__2280[_2281] != ((*shape)(_2281))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _7842 = (int)((_2280)->size(0));
  int _7843 = (int)((shape)->size(0));
  for (int _2282 = _7842; _2282 < _7843; ++_2282)
  {
    {
      if ((((*shape)(_2282)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _2283 = _2277->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2284 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2283)));
  _checked_ptr_1<long long> _ptr__2284(_2284 ? _2284->raw() : nullptr,_2284 ? _2284->size(0) : 0);
  if ((_2283 < _2277->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2285 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2283)));
      _checked_ptr_1<long long> _ptr__2285(_2285 ? _2285->raw() : nullptr,_2285 ? _2285->size(0) : 0);
      _2277->inst((int)0,_2285,(int)0,_2284);
    }
  }
  else
  {
    {
      _2277->inst((int)0,_2284);
    }
  }
  int _7844 = (int)0;
  int _7845 = _2283;
  for (int _2286 = _7844; _2286 < _7845; ++_2286)
  {
    {
      if ((_ptr__2284[_2286] < (int)0))
      {
        {
          throw ::mosek::fusion::UnimplementedError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2287;
  _checked_ptr_1<int> _ptr__2287(_2287 ? _2287->raw() : nullptr,_2287 ? _2287->size(0) : 0);
  {
    bool _2288 = true;
    int _7846 = (int)0;
    int _7847 = (_2283 - (int)1);
    for (int _2289 = _7846; _2289 < _7847; ++_2289)
    {
      {
        _2288 = (_2288 && (_ptr__2284[_2289] < _ptr__2284[safe_add( _2289,(int)1 )]));
      }
    }
    if (_2288)
    {
      {
        std::vector<int> _7848;
        for (int _2290 = (int)0, _7849 = _2283; _2290 < _7849 ; ++_2290)
        {
          _7848.push_back((int)(_ptr__2284[_2290] - (int)1));
        }
        auto _7850 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7848.size()),_7848.begin(),_7848.end()));
        _2287 = _7850;
        _ptr__2287.update(_2287 ? _2287->raw() : nullptr, _2287 ? _2287->size(0) : 0);
      }
    }
    else
    {
      {
        std::vector<long long> _7851;
        for (int _2292 = (int)0, _7852 = _2283; _2292 < _7852 ; ++_2292)
        {
          _7851.push_back(_2292);
        }
        auto _7853 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7851.size()),_7851.begin(),_7851.end()));
        std::shared_ptr< monty::ndarray< long long,1 > > _2291 = _7853;
        _checked_ptr_1<long long> _ptr__2291(_2291 ? _2291->raw() : nullptr,_2291 ? _2291->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2291,_2284,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2283));
        int _2293 = (int)1;
        int _7854 = (int)1;
        int _7855 = _2283;
        for (int _2294 = _7854; _2294 < _7855; ++_2294)
        {
          {
            if ((_ptr__2284[_ptr__2291[(_2294 - (int)1)]] < _ptr__2284[_ptr__2291[_2294]]))
            {
              {
                ++ _2293;
              }
            }
            {}
          }
        }
        _2287 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2293)));
        _ptr__2287.update(_2287 ? _2287->raw() : nullptr, _2287 ? _2287->size(0) : 0);
        int _2295 = (int)0;
        _ptr__2287[(int)0] = (int)(_ptr__2284[_ptr__2291[(int)0]] - (int)1);
        int _7856 = (int)1;
        int _7857 = _2283;
        for (int _2296 = _7856; _2296 < _7857; ++_2296)
        {
          {
            if ((_ptr__2284[(_2296 - (int)1)] < _ptr__2284[_2296]))
            {
              {
                _ptr__2287[_2295] = (int)(_ptr__2284[_ptr__2291[_2296]] - (int)1);
                ++ _2295;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2276,_2287,_2278);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2297,monty::rc_ptr< ::mosek::fusion::Variable > _2298) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2297,_2298); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2297,monty::rc_ptr< ::mosek::fusion::Variable > _2298){
  _pubthis->update(_2297,_2298,false);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model(){
  return model;
}
int mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd(){
  return (int)((shape)->size(0));
}
long long mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size(){
  long long _2299 = (int)1;
  int _7858 = (int)0;
  int _7859 = (int)((shape)->size(0));
  for (int _2300 = _7858; _2300 < _7859; ++_2300)
  {
    {
      _2299 *= ((*shape)(_2300));
    }
  }
  return _2299;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2301,    int _2302) { return mosek::fusion::p_Constraint::stack(_2301,_2302); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2301,int _2302){
  return ::mosek::fusion::p_Constraint::dstack(_2301,_2302);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2303,    monty::rc_ptr< ::mosek::fusion::Constraint > _2304,    monty::rc_ptr< ::mosek::fusion::Constraint > _2305,    int _2306) { return mosek::fusion::p_Constraint::stack(_2303,_2304,_2305,_2306); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2303,monty::rc_ptr< ::mosek::fusion::Constraint > _2304,monty::rc_ptr< ::mosek::fusion::Constraint > _2305,int _2306){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2303.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2304.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2305.get())}),_2306);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2307,    monty::rc_ptr< ::mosek::fusion::Constraint > _2308,    int _2309) { return mosek::fusion::p_Constraint::stack(_2307,_2308,_2309); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2307,monty::rc_ptr< ::mosek::fusion::Constraint > _2308,int _2309){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2307.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2308.get())}),_2309);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2310) { return mosek::fusion::p_Constraint::hstack(_2310); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2310){
  return ::mosek::fusion::p_Constraint::dstack(_2310,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2311) { return mosek::fusion::p_Constraint::vstack(_2311); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2311){
  return ::mosek::fusion::p_Constraint::dstack(_2311,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2312,    monty::rc_ptr< ::mosek::fusion::Constraint > _2313,    monty::rc_ptr< ::mosek::fusion::Constraint > _2314) { return mosek::fusion::p_Constraint::hstack(_2312,_2313,_2314); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2312,monty::rc_ptr< ::mosek::fusion::Constraint > _2313,monty::rc_ptr< ::mosek::fusion::Constraint > _2314){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2312.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2313.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2314.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2315,    monty::rc_ptr< ::mosek::fusion::Constraint > _2316,    monty::rc_ptr< ::mosek::fusion::Constraint > _2317) { return mosek::fusion::p_Constraint::vstack(_2315,_2316,_2317); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2315,monty::rc_ptr< ::mosek::fusion::Constraint > _2316,monty::rc_ptr< ::mosek::fusion::Constraint > _2317){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2315.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2316.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2317.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2318,    monty::rc_ptr< ::mosek::fusion::Constraint > _2319) { return mosek::fusion::p_Constraint::hstack(_2318,_2319); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2318,monty::rc_ptr< ::mosek::fusion::Constraint > _2319){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2318.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2319.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2320,    monty::rc_ptr< ::mosek::fusion::Constraint > _2321) { return mosek::fusion::p_Constraint::vstack(_2320,_2321); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2320,monty::rc_ptr< ::mosek::fusion::Constraint > _2321){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2320.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2321.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2322,int _2323){
  monty::rc_ptr< ::mosek::fusion::Model > _2324 = nullptr;
  {
    int _7860 = (int)0;
    int _7861 = (int)((_2322)->size(0));
    for (int _2325 = _7860; _2325 < _7861; ++_2325)
    {
      {
        if ((NULL == _2324.get()))
        {
          {
            _2324 = ((*_2322)(_2325))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2322)(_2325)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2322)(_2325)))->model != _2324)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2326 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _7862;
            bool _7863 = ((int)((mosek::fusion::p_Model::_get_impl(_2324.get())->getName()).size()) > (int)0);
            if (_7863)
            {
              _7862 = mosek::fusion::p_Model::_get_impl(_2324.get())->getName();
            }
            else
            {
              _7862 = std::string ("?");
            }
            std::string _2327 = _7862;
            std::string _7864;
            bool _7865 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2322)(_2325))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_7865)
            {
              _7864 = mosek::fusion::p_Model::_get_impl(((*_2322)(_2325))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _7864 = std::string ("?");
            }
            std::string _2328 = _7864;
            _2326->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2327)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2328)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2326->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2322)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2322)->size(0)) == (int)1))
  {
    {
      return ((*_2322)((int)1));
    }
  }
  else
  {
    {
      int _2329 = (int)((_2322)->size(0));
      int _2330 = (int)1;
      int _7866 = (int)0;
      int _7867 = _2329;
      for (int _2331 = _7866; _2331 < _7867; ++_2331)
      {
        {
          int _7868;
          bool _7869 = (((*_2322)(_2331))->getND() > _2330);
          if (_7869)
          {
            _7868 = ((*_2322)(_2331))->getND();
          }
          else
          {
            _7868 = _2330;
          }
          _2330 = _7868;
        }
      }
      if ((_2323 == _2330))
      {
        {
          ++ _2330;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,2 > > _2332 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2329,_2330)));
      int _7870 = (int)0;
      int _7871 = _2329;
      for (int _2333 = _7870; _2333 < _7871; ++_2333)
      {
        {
          int _7872 = (int)0;
          int _7873 = _2330;
          for (int _2334 = _7872; _2334 < _7873; ++_2334)
          {
            {
              ((*_2332)(_2333,_2334)) = (int)1;
            }
          }
        }
      }
      std::vector<int> _7874;
      for (int _2336 = (int)0, _7875 = _2329; _2336 < _7875 ; ++_2336)
      {
        _7874.push_back(((*_2322)(_2336))->getSize());
      }
      auto _7876 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7874.size()),_7874.begin(),_7874.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2335 = _7876;
      _checked_ptr_1<int> _ptr__2335(_2335 ? _2335->raw() : nullptr,_2335 ? _2335->size(0) : 0);
      int _2337 = (int)0;
      int _7877 = (int)0;
      int _7878 = _2329;
      for (int _2338 = _7877; _2338 < _7878; ++_2338)
      {
        {
          _2337 += _ptr__2335[_2338];
        }
      }
      int _7879 = (int)0;
      int _7880 = _2329;
      for (int _2339 = _7879; _2339 < _7880; ++_2339)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2340 = ((*_2322)(_2339))->getShape();
          _checked_ptr_1<int> _ptr__2340(_2340 ? _2340->raw() : nullptr,_2340 ? _2340->size(0) : 0);
          int _7881 = (int)0;
          int _7882 = (int)((_2340)->size(0));
          for (int _2341 = _7881; _2341 < _7882; ++_2341)
          {
            {
              ((*_2332)(_2339,_2341)) = _ptr__2340[_2341];
            }
          }
        }
      }
      if (((_2323 < (int)0) || (_2323 > _2330)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int _7883 = (int)0;
      int _7884 = _2323;
      for (int _2342 = _7883; _2342 < _7884; ++_2342)
      {
        {
          int _7885 = (int)1;
          int _7886 = _2329;
          for (int _2343 = _7885; _2343 < _7886; ++_2343)
          {
            {
              if ((((*_2332)((int)0,_2342)) != ((*_2332)(_2343,_2342))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int _7887 = safe_add( _2323,(int)1 );
      int _7888 = _2330;
      for (int _2344 = _7887; _2344 < _7888; ++_2344)
      {
        {
          int _7889 = (int)1;
          int _7890 = _2329;
          for (int _2345 = _7889; _2345 < _7890; ++_2345)
          {
            {
              if ((((*_2332)((int)0,_2344)) != ((*_2332)(_2345,_2344))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2337)));
      _checked_ptr_1<int> _ptr__2346(_2346 ? _2346->raw() : nullptr,_2346 ? _2346->size(0) : 0);
      std::vector<int> _7891;
      for (int _2348 = (int)0, _7892 = _2330; _2348 < _7892 ; ++_2348)
      {
        _7891.push_back(((*_2332)((int)0,_2348)));
      }
      auto _7893 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7891.size()),_7891.begin(),_7891.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2347 = _7893;
      _checked_ptr_1<int> _ptr__2347(_2347 ? _2347->raw() : nullptr,_2347 ? _2347->size(0) : 0);
      int _7894 = (int)0;
      int _7895 = _2330;
      for (int _2349 = _7894; _2349 < _7895; ++_2349)
      {
        {
          _ptr__2347[_2323] += ((*_2332)(_2349,_2323));
        }
      }
      {
        int _2350 = (int)((_2347)->size(0));
        std::shared_ptr< monty::ndarray< long long,1 > > _2351 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( (int)((_2322)->size(0)),(int)1 ))));
        _checked_ptr_1<long long> _ptr__2351(_2351 ? _2351->raw() : nullptr,_2351 ? _2351->size(0) : 0);
        int _7896 = (int)0;
        int _7897 = (int)((_2322)->size(0));
        for (int _2352 = _7896; _2352 < _7897; ++_2352)
        {
          {
            _ptr__2351[safe_add( _2352,(int)1 )] = safe_add( _ptr__2351[_2352],((*_2332)(_2352,_2323)) );
          }
        }
        if ((_2323 == (int)0))
        {
          {
            int _2353 = (int)0;
            int _7898 = (int)0;
            int _7899 = _2329;
            for (int _2354 = _7898; _2354 < _7899; ++_2354)
            {
              {
                int _2355 = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2322)(_2354)))->nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2322)(_2354)))->nativeidxs,(int)0,_2346,_2353,_2355);
                _2353 += _2355;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _7900;
            for (int _2357 = (int)0, _7901 = _2329; _2357 < _7901 ; ++_2357)
            {
              _7900.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2322)(_2357)))->nativeidxs);
            }
            auto _7902 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_7900.size()),_7900.begin(),_7900.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2356 = _7902;
            if ((_2323 < _2330))
            {
              {
                int _2358 = (int)1;
                int _7903 = (int)0;
                int _7904 = _2323;
                for (int _2359 = _7903; _2359 < _7904; ++_2359)
                {
                  {
                    _2358 *= _ptr__2347[_2359];
                  }
                }
                int _2360 = (int)1;
                int _7905 = safe_add( _2323,(int)1 );
                int _7906 = _2330;
                for (int _2361 = _7905; _2361 < _7906; ++_2361)
                {
                  {
                    _2360 *= _ptr__2347[_2361];
                  }
                }
                int _2362 = (int)0;
                int _7907 = (int)0;
                int _7908 = _2358;
                for (int _2363 = _7907; _2363 < _7908; ++_2363)
                {
                  {
                    int _7909 = (int)0;
                    int _7910 = _2329;
                    for (int _2364 = _7909; _2364 < _7910; ++_2364)
                    {
                      {
                        int _2365 = (int)0;
                        int _2366 = ((*_2332)(_2364,_2323));
                        int _7911 = (int)0;
                        int _7912 = _2366;
                        for (int _2367 = _7911; _2367 < _7912; ++_2367)
                        {
                          {
                            int _7913 = (int)0;
                            int _7914 = _2360;
                            for (int _2368 = _7913; _2368 < _7914; ++_2368)
                            {
                              {
                                _ptr__2346[_2362] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2322)(_2329)))->nativeidxs)(safe_add( safe_mul( safe_mul( _2363,_2360 ),_2366 ),_2365 )));
                                ++ _2362;
                                ++ _2365;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int _2369 = (int)1;
                int _7915 = (int)0;
                int _7916 = _2330;
                for (int _2370 = _7915; _2370 < _7916; ++_2370)
                {
                  {
                    _2369 *= _ptr__2347[_2370];
                  }
                }
                int _2371 = (int)0;
                int _7917 = (int)0;
                int _7918 = _2369;
                for (int _2372 = _7917; _2372 < _7918; ++_2372)
                {
                  {
                    int _7919 = (int)0;
                    int _7920 = _2329;
                    for (int _2373 = _7919; _2373 < _7920; ++_2373)
                    {
                      {
                        _ptr__2346[_2371] = ((*((*_2356)(_2373)))(_2372));
                        ++ _2371;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2324,_2347,_2346)).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2374) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2374); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2374) { return __mosek_2fusion_2Constraint__index(_2374); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2374){
  _checked_ptr_1<int> _ptr__2374(_2374 ? _2374->raw() : nullptr, _2374 ? _2374->size(0) : 0);
  if (((int)((_2374)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7921 = (int)0;
      int _7922 = (int)((shape)->size(0));
      for (int _2375 = _7921; _2375 < _7922; ++_2375)
      {
        {
          if (((_ptr__2374[_2375] < (int)0) || (_ptr__2374[_2375] > ((*shape)(_2375)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int _2376 = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< long long,1 > > _2377 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2376)));
      _checked_ptr_1<long long> _ptr__2377(_2377 ? _2377->raw() : nullptr,_2377 ? _2377->size(0) : 0);
      _ptr__2377[(_2376 - (int)1)] = (int)1;
      int _7923 = (int)1;
      int _7924 = _2376;
      for (int _2378 = _7923; _2378 < _7924; ++_2378)
      {
        {
          _ptr__2377[((_2376 - _2378) - (int)1)] = safe_mul( _ptr__2377[(_2376 - _2378)],((*shape)(_2378)) );
        }
      }
      int _2379 = (int)0;
      int _7925 = (int)0;
      int _7926 = _2376;
      for (int _2380 = _7925; _2380 < _7926; ++_2380)
      {
        {
          _2379 += (int)safe_mul( _ptr__2377[_2380],_ptr__2374[_2380] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2379)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int _2381) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2381); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int _2381) { return __mosek_2fusion_2Constraint__index(_2381); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int _2381){
  if ((((int)((shape)->size(0)) == (int)0) && (_2381 == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_2381 < (int)0) || (_2381 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2381)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2382,std::shared_ptr< monty::ndarray< int,1 > > _2383) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2382,_2383); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2382,std::shared_ptr< monty::ndarray< int,1 > > _2383) { return __mosek_2fusion_2Constraint__slice(_2382,_2383); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2382,std::shared_ptr< monty::ndarray< int,1 > > _2383){
  _checked_ptr_1<int> _ptr__2382(_2382 ? _2382->raw() : nullptr, _2382 ? _2382->size(0) : 0);
  _checked_ptr_1<int> _ptr__2383(_2383 ? _2383->raw() : nullptr, _2383 ? _2383->size(0) : 0);
  if (((int)((_2382)->size(0)) != (int)((_2383)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_2382)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _7927 = (int)0;
      int _7928 = (int)((shape)->size(0));
      for (int _2384 = _7927; _2384 < _7928; ++_2384)
      {
        {
          if (((_ptr__2382[_2384] < (int)0) || (_ptr__2383[_2384] > ((*shape)(_2384)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__2382[_2384] > _ptr__2383[_2384]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int _2385 = (int)((shape)->size(0));
      std::vector<int> _7929;
      for (int _2387 = (int)0, _7930 = _2385; _2387 < _7930 ; ++_2387)
      {
        _7929.push_back((_ptr__2383[_2387] - _ptr__2382[_2387]));
      }
      auto _7931 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7929.size()),_7929.begin(),_7929.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2386 = _7931;
      _checked_ptr_1<int> _ptr__2386(_2386 ? _2386->raw() : nullptr,_2386 ? _2386->size(0) : 0);
      int _2388 = (int)1;
      int _7932 = (int)0;
      int _7933 = _2385;
      for (int _2389 = _7932; _2389 < _7933; ++_2389)
      {
        {
          _2388 *= (_ptr__2383[_2389] - _ptr__2382[_2389]);
        }
      }
      if ((_2388 == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_2386,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2390 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2388)));
          _checked_ptr_1<int> _ptr__2390(_2390 ? _2390->raw() : nullptr,_2390 ? _2390->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2391 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2385)));
            _checked_ptr_1<int> _ptr__2391(_2391 ? _2391->raw() : nullptr,_2391 ? _2391->size(0) : 0);
            _ptr__2391[(_2385 - (int)1)] = (int)1;
            int _7934 = (int)1;
            int _7935 = _2385;
            for (int _2392 = _7934; _2392 < _7935; ++_2392)
            {
              {
                _ptr__2391[((_2385 - _2392) - (int)1)] = safe_mul( _ptr__2391[(_2385 - _2392)],((*shape)((_2385 - _2392))) );
              }
            }
            int _2393 = (int)0;
            int _7936 = (int)0;
            int _7937 = _2385;
            for (int _2394 = _7936; _2394 < _7937; ++_2394)
            {
              {
                _2393 += safe_mul( _ptr__2382[_2394],_ptr__2391[_2394] );
              }
            }
            std::vector<int> _7938;
            for (int _2396 = (int)0, _7939 = _2385; _2396 < _7939 ; ++_2396)
            {
              _7938.push_back(_2393);
            }
            auto _7940 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7938.size()),_7938.begin(),_7938.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2395 = _7940;
            _checked_ptr_1<int> _ptr__2395(_2395 ? _2395->raw() : nullptr,_2395 ? _2395->size(0) : 0);
            std::vector<int> _7941;
            for (int _2398 = (int)0, _7942 = _2385; _2398 < _7942 ; ++_2398)
            {
              _7941.push_back(_ptr__2382[_2398]);
            }
            auto _7943 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7941.size()),_7941.begin(),_7941.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2397 = _7943;
            _checked_ptr_1<int> _ptr__2397(_2397 ? _2397->raw() : nullptr,_2397 ? _2397->size(0) : 0);
            int _7944 = (int)0;
            int _7945 = _2388;
            for (int _2399 = _7944; _2399 < _7945; ++_2399)
            {
              {
                _ptr__2390[_2399] = ((*nativeidxs)(_ptr__2395[(_2385 - (int)1)]));
                _ptr__2397[(_2385 - (int)1)] += (int)1;
                _ptr__2395[(_2385 - (int)1)] += _ptr__2391[(_2385 - (int)1)];
                if ((_ptr__2397[(_2385 - (int)1)] >= _ptr__2383[(_2385 - (int)1)]))
                {
                  {
                    int _2400 = (_2385 - (int)1);
                    while ( ((_2400 > (int)0) && (_ptr__2397[_2400] >= _ptr__2383[_2400])) )
                    {
                      {
                        _ptr__2397[_2400] = _ptr__2382[_2400];
                        _ptr__2397[(_2400 - (int)1)] += (int)1;
                        _ptr__2395[(_2400 - (int)1)] += _ptr__2391[(_2400 - (int)1)];
                        -- _2400;
                      }
                    }
                    int _7946 = safe_add( _2400,(int)1 );
                    int _7947 = _2385;
                    for (int _2401 = _7946; _2401 < _7947; ++_2401)
                    {
                      {
                        _ptr__2395[_2401] = _ptr__2395[_2400];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_2386,_2390)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int _2402,int _2403) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2402,_2403); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int _2402,int _2403) { return __mosek_2fusion_2Constraint__slice(_2402,_2403); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int _2402,int _2403){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2402 == (int)0) && (_2403 == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_2402 < (int)0) || (_2403 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2402 > _2403))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int> _7948;
      for (int _2404 = _2402, _7949 = _2403; _2404 < _7949 ; ++_2404)
      {
        _7948.push_back(((*nativeidxs)(_2404)));
      }
      auto _7950 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7948.size()),_7948.begin(),_7948.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_2403 - _2402))}),_7950)).as<::mosek::fusion::Constraint>();
    }
  }
}
int mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }int mosek::fusion::p_Constraint::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }int mosek::fusion::p_Constraint::getSize(){
  int _2405 = (int)1;
  int _7951 = (int)0;
  int _7952 = (int)((shape)->size(0));
  for (int _2406 = _7951; _2406 < _7952; ++_2406)
  {
    {
      _2405 *= ((*shape)(_2406));
    }
  }
  return _2405;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel(){
  return model;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getShape(){
  std::vector<int> _7953;
  for (int _2407 = (int)0, _7954 = (int)((shape)->size(0)); _2407 < _7954 ; ++_2407)
  {
    _7953.push_back(((*shape)(_2407)));
  }
  auto _7955 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7953.size()),_7953.begin(),_7953.end()));
  return _7955;
}
void mosek::fusion::p_Constraint::destroy(){nativeidxs.reset();shape.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::Set::size  ( std::shared_ptr< monty::ndarray< int,1 > > _2408) { return mosek::fusion::p_Set::size(_2408); }long long mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int,1 > > _2408){
  _checked_ptr_1<int> _ptr__2408(_2408 ? _2408->raw() : nullptr, _2408 ? _2408->size(0) : 0);
  long long _2409 = (long long)1;
  int _7956 = (int)0;
  int _7957 = (int)((_2408)->size(0));
  for (int _2410 = _7956; _2410 < _7957; ++_2410)
  {
    {
      _2409 *= _ptr__2408[_2410];
    }
  }
  return _2409;
}
bool mosek::fusion::Set::match  ( std::shared_ptr< monty::ndarray< int,1 > > _2411,    std::shared_ptr< monty::ndarray< int,1 > > _2412) { return mosek::fusion::p_Set::match(_2411,_2412); }bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int,1 > > _2411,std::shared_ptr< monty::ndarray< int,1 > > _2412){
  _checked_ptr_1<int> _ptr__2411(_2411 ? _2411->raw() : nullptr, _2411 ? _2411->size(0) : 0);
  _checked_ptr_1<int> _ptr__2412(_2412 ? _2412->raw() : nullptr, _2412 ? _2412->size(0) : 0);
  if (((int)((_2411)->size(0)) != (int)((_2412)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int _7958 = (int)0;
  int _7959 = (int)((_2411)->size(0));
  for (int _2413 = _7958; _2413 < _7959; ++_2413)
  {
    {
      if ((_ptr__2411[_2413] != _ptr__2412[_2413]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
long long mosek::fusion::Set::linearidx  ( std::shared_ptr< monty::ndarray< int,1 > > _2414,    std::shared_ptr< monty::ndarray< int,1 > > _2415) { return mosek::fusion::p_Set::linearidx(_2414,_2415); }long long mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int,1 > > _2414,std::shared_ptr< monty::ndarray< int,1 > > _2415){
  _checked_ptr_1<int> _ptr__2414(_2414 ? _2414->raw() : nullptr, _2414 ? _2414->size(0) : 0);
  _checked_ptr_1<int> _ptr__2415(_2415 ? _2415->raw() : nullptr, _2415 ? _2415->size(0) : 0);
  long long _2416 = _ptr__2415[(int)0];
  int _7960 = (int)1;
  int _7961 = (int)((_2415)->size(0));
  for (int _2417 = _7960; _2417 < _7961; ++_2417)
  {
    {
      _2416 = safe_add( safe_mul( _2416,_ptr__2414[_2417] ),_ptr__2415[_2417] );
    }
  }
  return _2416;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2418,    long long _2419) { return mosek::fusion::p_Set::idxtokey(_2418,_2419); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2418,long long _2419){
  _checked_ptr_1<int> _ptr__2418(_2418 ? _2418->raw() : nullptr, _2418 ? _2418->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2420 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2418)->size(0)))));
  _checked_ptr_1<int> _ptr__2420(_2420 ? _2420->raw() : nullptr,_2420 ? _2420->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_2418,_2419,_2420);
  return _2420;
}
void mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2421,    long long _2422,    std::shared_ptr< monty::ndarray< int,1 > > _2423) { mosek::fusion::p_Set::idxtokey(_2421,_2422,_2423); }void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2421,long long _2422,std::shared_ptr< monty::ndarray< int,1 > > _2423){
  _checked_ptr_1<int> _ptr__2421(_2421 ? _2421->raw() : nullptr, _2421 ? _2421->size(0) : 0);
  _checked_ptr_1<int> _ptr__2423(_2423 ? _2423->raw() : nullptr, _2423 ? _2423->size(0) : 0);
  int _2424 = (int)((_2421)->size(0));
  if ((_2424 > (int)0))
  {
    {
      long long _2425 = _2422;
      int _7962 = (int)0;
      int _7963 = (_2424 - (int)1);
      for (int _2426 = _7962; _2426 < _7963; ++_2426)
      {
        {
          _ptr__2423[((_2424 - _2426) - (int)1)] = (int)(_2425 % _ptr__2421[((_2424 - _2426) - (int)1)]);
          _2425 /= _ptr__2421[((_2424 - _2426) - (int)1)];
        }
      }
      _ptr__2423[(int)0] = (int)_2425;
    }
  }
  {}
}
std::string mosek::fusion::Set::indexToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2427,    long long _2428) { return mosek::fusion::p_Set::indexToString(_2427,_2428); }std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int,1 > > _2427,long long _2428){
  _checked_ptr_1<int> _ptr__2427(_2427 ? _2427->raw() : nullptr, _2427 ? _2427->size(0) : 0);
  int _2429 = (int)((_2427)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2430 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_2429 == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_2429 == (int)1))
  {
    {
      return _2430->__mosek_2fusion_2Utils_2StringBuffer__a(_2428)->toString();
    }
  }
  else
  {
    {
      long long _2431 = _2428;
      std::shared_ptr< monty::ndarray< int,1 > > _2432 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2429)));
      _checked_ptr_1<int> _ptr__2432(_2432 ? _2432->raw() : nullptr,_2432 ? _2432->size(0) : 0);
      int _7964 = (int)1;
      int _7965 = _2429;
      for (int _2433 = _7964; _2433 < _7965; ++_2433)
      {
        {
          _ptr__2432[(_2429 - _2433)] = (int)(_2431 % _ptr__2427[(_2429 - _2433)]);
          _2431 /= _ptr__2427[(_2429 - _2433)];
        }
      }
      _ptr__2432[(int)0] = (int)_2431;
      _2430->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2432[(int)0]);
      int _7966 = (int)1;
      int _7967 = _2429;
      for (int _2434 = _7966; _2434 < _7967; ++_2434)
      {
        {
          _2430->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2432[_2434]);
        }
      }
      return _2430->toString();
    }
  }
}
std::string mosek::fusion::Set::keyToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2435) { return mosek::fusion::p_Set::keyToString(_2435); }std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int,1 > > _2435){
  _checked_ptr_1<int> _ptr__2435(_2435 ? _2435->raw() : nullptr, _2435 ? _2435->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2436 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2436->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2435[(int)0]);
  int _7968 = (int)1;
  int _7969 = (int)((_2435)->size(0));
  for (int _2437 = _7968; _2437 < _7969; ++_2437)
  {
    {
      _2436->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2435[_2437]);
    }
  }
  return _2436->toString();
}
void mosek::fusion::Set::indexToKey  ( std::shared_ptr< monty::ndarray< int,1 > > _2438,    long long _2439,    std::shared_ptr< monty::ndarray< int,1 > > _2440) { mosek::fusion::p_Set::indexToKey(_2438,_2439,_2440); }void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int,1 > > _2438,long long _2439,std::shared_ptr< monty::ndarray< int,1 > > _2440){
  _checked_ptr_1<int> _ptr__2438(_2438 ? _2438->raw() : nullptr, _2438 ? _2438->size(0) : 0);
  _checked_ptr_1<int> _ptr__2440(_2440 ? _2440->raw() : nullptr, _2440 ? _2440->size(0) : 0);
  int _2441 = (int)((_2438)->size(0));
  if ((_2441 == (int)1))
  {
    {
      _ptr__2440[(int)0] = (int)_2439;
    }
  }
  else
  {
    {
      long long _2442 = _2439;
      int _7970 = (int)1;
      int _7971 = _2441;
      for (int _2443 = _7970; _2443 < _7971; ++_2443)
      {
        {
          _ptr__2440[(_2441 - _2443)] = (int)(_2442 % _ptr__2438[(_2441 - _2443)]);
          _2442 /= _ptr__2438[(_2441 - _2443)];
        }
      }
      _ptr__2440[(int)0] = (int)_2442;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::Set::strides  ( std::shared_ptr< monty::ndarray< int,1 > > _2444) { return mosek::fusion::p_Set::strides(_2444); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int,1 > > _2444){
  _checked_ptr_1<int> _ptr__2444(_2444 ? _2444->raw() : nullptr, _2444 ? _2444->size(0) : 0);
  int _2445 = (int)((_2444)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2446 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2445)));
  _checked_ptr_1<long long> _ptr__2446(_2446 ? _2446->raw() : nullptr,_2446 ? _2446->size(0) : 0);
  _ptr__2446[(_2445 - (int)1)] = (int)1;
  int _7972 = (int)1;
  int _7973 = _2445;
  for (int _2447 = _7972; _2447 < _7973; ++_2447)
  {
    {
      _ptr__2446[((_2445 - _2447) - (int)1)] = safe_mul( _ptr__2446[(_2445 - _2447)],_ptr__2444[(_2445 - _2447)] );
    }
  }
  return _2446;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2448,    std::shared_ptr< monty::ndarray< int,1 > > _2449) { return mosek::fusion::p_Set::make(_2448,_2449); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2448,std::shared_ptr< monty::ndarray< int,1 > > _2449){
  _checked_ptr_1<int> _ptr__2448(_2448 ? _2448->raw() : nullptr, _2448 ? _2448->size(0) : 0);
  _checked_ptr_1<int> _ptr__2449(_2449 ? _2449->raw() : nullptr, _2449 ? _2449->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2450 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((_2448)->size(0)),(int)((_2449)->size(0)) ))));
  _checked_ptr_1<int> _ptr__2450(_2450 ? _2450->raw() : nullptr,_2450 ? _2450->size(0) : 0);
  int _7974 = (int)0;
  int _7975 = (int)((_2448)->size(0));
  for (int _2451 = _7974; _2451 < _7975; ++_2451)
  {
    {
      _ptr__2450[_2451] = _ptr__2448[_2451];
    }
  }
  int _7976 = (int)0;
  int _7977 = (int)((_2449)->size(0));
  for (int _2452 = _7976; _2452 < _7977; ++_2452)
  {
    {
      _ptr__2450[safe_add( (int)((_2448)->size(0)),_2452 )] = _ptr__2449[_2452];
    }
  }
  return _2450;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2453) { return mosek::fusion::p_Set::make(_2453); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2453){
  _checked_ptr_1<int> _ptr__2453(_2453 ? _2453->raw() : nullptr, _2453 ? _2453->size(0) : 0);
  std::vector<int> _7978;
  for (int _2454 = (int)0, _7979 = (int)((_2453)->size(0)); _2454 < _7979 ; ++_2454)
  {
    _7978.push_back(_ptr__2453[_2454]);
  }
  auto _7980 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7978.size()),_7978.begin(),_7978.end()));
  return _7980;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2455,    int _2456,    int _2457) { return mosek::fusion::p_Set::make(_2455,_2456,_2457); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2455,int _2456,int _2457){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2455),(int)(_2456),(int)(_2457)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2458,    int _2459) { return mosek::fusion::p_Set::make(_2458,_2459); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2458,int _2459){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2458),(int)(_2459)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2460) { return mosek::fusion::p_Set::make(_2460); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2460){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2460)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::scalar(){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _2461) { return mosek::fusion::p_Set::make(_2461); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _2461){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2461)->size(0)))});
}
void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConeDomain::p_ConeDomain  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2462,    double _2463,    std::shared_ptr< monty::ndarray< int,1 > > _2464){ return new mosek::fusion::ConeDomain(_2462,_2463,_2464); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2462,    double _2463,    std::shared_ptr< monty::ndarray< int,1 > > _2464) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2462,_2463,_2464); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2462,    double _2463,    std::shared_ptr< monty::ndarray< int,1 > > _2464){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2464(_2464 ? _2464->raw() : nullptr, _2464 ? _2464->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7981;
    bool _7982 = (NULL != _2464.get());
    if (_7982)
    {
      _7981 = ::mosek::fusion::p_Set::make(_2464);
    }
    else
    {
      _7981 = nullptr;
    }
    shape = _7981;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2463;
    key = _2462;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2463;
  }
}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2465,    std::shared_ptr< monty::ndarray< int,1 > > _2466){ return new mosek::fusion::ConeDomain(_2465,_2466); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2465,    std::shared_ptr< monty::ndarray< int,1 > > _2466) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2465,_2466); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2465,    std::shared_ptr< monty::ndarray< int,1 > > _2466){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2466(_2466 ? _2466->raw() : nullptr, _2466 ? _2466->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_2465,1.0,_2466);
  }
}bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2467){
  _checked_ptr_1<int> _ptr__2467(_2467 ? _2467->raw() : nullptr, _2467 ? _2467->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_2467,shape));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral(){
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }bool mosek::fusion::p_ConeDomain::axisIsSet(){
  return axisset;
}
int mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_ConeDomain::getAxis(){
  return axisidx;
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int _2468) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_2468); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int _2468) { return __mosek_2fusion_2ConeDomain__axis(_2468); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int _2468){
  axisidx = _2468;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
void mosek::fusion::p_ConeDomain::destroy(){shape.reset();}void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2469,    int _2470){ return new mosek::fusion::LinPSDDomain(_2469,_2470); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2469,    int _2470) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2469,_2470); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2469,    int _2470){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2469(_2469 ? _2469->raw() : nullptr, _2469 ? _2469->size(0) : 0);
    mosek::fusion::p_LinPSDDomain::_get_impl(::mosek::fusion::LinPSDDomain::t(_pubthis))->conedim = _2470;
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2469);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2471){ return new mosek::fusion::LinPSDDomain(_2471); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2471) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2471); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2471){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2471(_2471 ? _2471->raw() : nullptr, _2471 ? _2471->size(0) : 0);
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2471);
    conedim = ((int)((shape)->size(0)) - (int)1);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (){ return new mosek::fusion::LinPSDDomain(); }mosek::fusion::LinPSDDomain::LinPSDDomain  () :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinPSDDomain::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    conedim = (int)0;
    shape = nullptr;
  }
}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2472,    std::shared_ptr< monty::ndarray< int,1 > > _2473,    int _2474,    int _2475){ return new mosek::fusion::PSDDomain(_2472,_2473,_2474,_2475); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2472,    std::shared_ptr< monty::ndarray< int,1 > > _2473,    int _2474,    int _2475) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2472,_2473,_2474,_2475); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2472,    std::shared_ptr< monty::ndarray< int,1 > > _2473,    int _2474,    int _2475){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2473(_2473 ? _2473->raw() : nullptr, _2473 ? _2473->size(0) : 0);
    axisIsSet = true;
    shape = _2473;
    key = _2472;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2474;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2475;
    int _2476 = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _2474) && (((int)((shape)->size(0)) > _2475) && ((_2474 >= (int)0) && ((_2475 >= (int)0) && (_2474 != _2475)))))) && (((*shape)(_2474)) == ((*shape)(_2475)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478){ return new mosek::fusion::PSDDomain(_2477,_2478); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2477,_2478); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2478(_2478 ? _2478->raw() : nullptr, _2478 ? _2478->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_2477,_2478,((int)((_2478)->size(0)) - (int)2),((int)((_2478)->size(0)) - (int)1));
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2479){ return new mosek::fusion::PSDDomain(_2479); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2479) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2479); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2479){monty::rc_reserve __reserve_this(_pubthis);   {
    shape = nullptr;
    key = _2479;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
  }
}monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int _2480,int _2481) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_2480,_2481); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int _2480,int _2481) { return __mosek_2fusion_2PSDDomain__axis(_2480,_2481); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int _2480,int _2481){
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2480;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2481;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_2480 >= (int)0) && ((_2481 >= (int)0) && (_2480 != _2481))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _2480) && (((int)((shape)->size(0)) > _2481) && ((_2480 >= (int)0) && ((_2481 >= (int)0) && (_2480 != _2481)))))) && (((*shape)(_2480)) == ((*shape)(_2481))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2482){ return new mosek::fusion::SymmetricRangeDomain(_2482); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2482) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_2482); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2482){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_RangeDomain::_initialize(_2482);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _7983;
    bool _7984 = (NULL == shape.get());
    if (_7984)
    {
      _7983 = (int)0;
    }
    else
    {
      _7983 = ((*shape)((int)0));
    }
    dim = _7983;
  }
}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2483,    std::shared_ptr< monty::ndarray< double,1 > > _2484,    std::shared_ptr< monty::ndarray< double,1 > > _2485,    std::shared_ptr< monty::ndarray< int,1 > > _2486){ return new mosek::fusion::RangeDomain(_2483,_2484,_2485,_2486); }mosek::fusion::RangeDomain::RangeDomain  (bool _2483,    std::shared_ptr< monty::ndarray< double,1 > > _2484,    std::shared_ptr< monty::ndarray< double,1 > > _2485,    std::shared_ptr< monty::ndarray< int,1 > > _2486) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2483,_2484,_2485,_2486); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2483,    std::shared_ptr< monty::ndarray< double,1 > > _2484,    std::shared_ptr< monty::ndarray< double,1 > > _2485,    std::shared_ptr< monty::ndarray< int,1 > > _2486){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2484(_2484 ? _2484->raw() : nullptr, _2484 ? _2484->size(0) : 0);
    _checked_ptr_1<double> _ptr__2485(_2485 ? _2485->raw() : nullptr, _2485 ? _2485->size(0) : 0);
    _checked_ptr_1<int> _ptr__2486(_2486 ? _2486->raw() : nullptr, _2486 ? _2486->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2483,_2484,_2485,_2486,nullptr,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2487,    std::shared_ptr< monty::ndarray< double,1 > > _2488,    std::shared_ptr< monty::ndarray< double,1 > > _2489,    std::shared_ptr< monty::ndarray< int,1 > > _2490,    std::shared_ptr< monty::ndarray< int,2 > > _2491){ return new mosek::fusion::RangeDomain(_2487,_2488,_2489,_2490,_2491); }mosek::fusion::RangeDomain::RangeDomain  (bool _2487,    std::shared_ptr< monty::ndarray< double,1 > > _2488,    std::shared_ptr< monty::ndarray< double,1 > > _2489,    std::shared_ptr< monty::ndarray< int,1 > > _2490,    std::shared_ptr< monty::ndarray< int,2 > > _2491) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2487,_2488,_2489,_2490,_2491); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2487,    std::shared_ptr< monty::ndarray< double,1 > > _2488,    std::shared_ptr< monty::ndarray< double,1 > > _2489,    std::shared_ptr< monty::ndarray< int,1 > > _2490,    std::shared_ptr< monty::ndarray< int,2 > > _2491){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2488(_2488 ? _2488->raw() : nullptr, _2488 ? _2488->size(0) : 0);
    _checked_ptr_1<double> _ptr__2489(_2489 ? _2489->raw() : nullptr, _2489 ? _2489->size(0) : 0);
    _checked_ptr_1<int> _ptr__2490(_2490 ? _2490->raw() : nullptr, _2490 ? _2490->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2487,_2488,_2489,_2490,_2491,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2492,    std::shared_ptr< monty::ndarray< double,1 > > _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< int,1 > > _2495,    std::shared_ptr< monty::ndarray< int,2 > > _2496,    int _2497){ return new mosek::fusion::RangeDomain(_2492,_2493,_2494,_2495,_2496,_2497); }mosek::fusion::RangeDomain::RangeDomain  (bool _2492,    std::shared_ptr< monty::ndarray< double,1 > > _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< int,1 > > _2495,    std::shared_ptr< monty::ndarray< int,2 > > _2496,    int _2497) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2492,_2493,_2494,_2495,_2496,_2497); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2492,    std::shared_ptr< monty::ndarray< double,1 > > _2493,    std::shared_ptr< monty::ndarray< double,1 > > _2494,    std::shared_ptr< monty::ndarray< int,1 > > _2495,    std::shared_ptr< monty::ndarray< int,2 > > _2496,    int _2497){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2493(_2493 ? _2493->raw() : nullptr, _2493 ? _2493->size(0) : 0);
    _checked_ptr_1<double> _ptr__2494(_2494 ? _2494->raw() : nullptr, _2494 ? _2494->size(0) : 0);
    _checked_ptr_1<int> _ptr__2495(_2495 ? _2495->raw() : nullptr, _2495 ? _2495->size(0) : 0);
    cardinal_flag = false;
    shape = _2495;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _2492;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _2494;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _2493;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _2496;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2498){ return new mosek::fusion::RangeDomain(_2498); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2498) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2498); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2498){monty::rc_reserve __reserve_this(_pubthis);   {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_2498)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_2498)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_2498)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_2498)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_2498)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_2498)->lb;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_2498)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2499) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2499); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2499) { return __mosek_2fusion_2RangeDomain__sparse(_2499); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2499){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2499)->size(0)),(int)((_2499)->size(1)))));
  {
    int _2500 = (int)0;
    for(;(_2500 < (int)((_2499)->size(0)));++ _2500)
    {
      {
        {
          int _2501 = (int)0;
          for(;(_2501 < (int)((_2499)->size(1)));++ _2501)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2500,_2501)) = ((*_2499)(_2500,_2501));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2502) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2502); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2502) { return __mosek_2fusion_2RangeDomain__sparse(_2502); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2502){
  _checked_ptr_1<int> _ptr__2502(_2502 ? _2502->raw() : nullptr, _2502 ? _2502->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2502)->size(0)),(int)1)));
  int _7985 = (int)0;
  int _7986 = (int)((_2502)->size(0));
  for (int _2503 = _7985; _2503 < _7986; ++_2503)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2503,(int)0)) = _ptr__2502[_2503];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2504) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2504); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2504) { return __mosek_2fusion_2RangeDomain__withShape(_2504); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2504){
  _checked_ptr_1<int> _ptr__2504(_2504 ? _2504->raw() : nullptr, _2504 ? _2504->size(0) : 0);
  shape = _2504;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2505){
  _checked_ptr_1<int> _ptr__2505(_2505 ? _2505->raw() : nullptr, _2505 ? _2505->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_2505)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int _7987 = (int)0;
      int _7988 = (int)((shape)->size(0));
      for (int _2506 = _7987; _2506 < _7988; ++_2506)
      {
        {
          if ((((*shape)(_2506)) != _ptr__2505[_2506]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();sparsity.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2507){ return new mosek::fusion::SymmetricLinearDomain(_2507); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2507) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_2507); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2507){monty::rc_reserve __reserve_this(_pubthis);   {
    dom = _2507;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2507)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2507)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2507)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2507)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _7989;
    bool _7990 = (NULL == shape.get());
    if (_7990)
    {
      _7989 = (int)0;
    }
    else
    {
      _7989 = ((*shape)((int)0));
    }
    dim = _7989;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2508) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2508); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2508) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2508); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2508){
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2508)->size(0)),(int)((_2508)->size(1)))));
  {
    int _2509 = (int)0;
    for(;(_2509 < (int)((_2508)->size(0)));++ _2509)
    {
      {
        {
          int _2510 = (int)0;
          for(;(_2510 < (int)((_2508)->size(1)));++ _2510)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2509,_2510)) = ((*_2508)(_2509,_2510));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2511) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2511); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2511) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2511); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2511){
  _checked_ptr_1<int> _ptr__2511(_2511 ? _2511->raw() : nullptr, _2511 ? _2511->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2511)->size(0)),(int)1)));
  int _7991 = (int)0;
  int _7992 = (int)((_2511)->size(0));
  for (int _2512 = _7991; _2512 < _7992; ++_2512)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2512,(int)0)) = _ptr__2511[_2512];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2513){
  _checked_ptr_1<int> _ptr__2513(_2513 ? _2513->raw() : nullptr, _2513 ? _2513->size(0) : 0);
  int _7993 = (int)0;
  int _7994 = (int)((_2513)->size(0));
  for (int _2514 = _7993; _2514 < _7994; ++_2514)
  {
    {
      if ((_ptr__2513[_2514] == ((*shape)(_2514))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_SymmetricLinearDomain::destroy(){sparsity.reset();shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2515,    bool _2516,    std::shared_ptr< monty::ndarray< double,1 > > _2517,    std::shared_ptr< monty::ndarray< int,1 > > _2518){ return new mosek::fusion::LinearDomain(_2515,_2516,_2517,_2518); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2515,    bool _2516,    std::shared_ptr< monty::ndarray< double,1 > > _2517,    std::shared_ptr< monty::ndarray< int,1 > > _2518) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2515,_2516,_2517,_2518); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2515,    bool _2516,    std::shared_ptr< monty::ndarray< double,1 > > _2517,    std::shared_ptr< monty::ndarray< int,1 > > _2518){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2517(_2517 ? _2517->raw() : nullptr, _2517 ? _2517->size(0) : 0);
    _checked_ptr_1<int> _ptr__2518(_2518 ? _2518->raw() : nullptr, _2518 ? _2518->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_2515,_2516,_2517,_2518,nullptr,(int)1);
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2519,    bool _2520,    std::shared_ptr< monty::ndarray< double,1 > > _2521,    std::shared_ptr< monty::ndarray< int,1 > > _2522,    std::shared_ptr< monty::ndarray< int,2 > > _2523,    int _2524){ return new mosek::fusion::LinearDomain(_2519,_2520,_2521,_2522,_2523,_2524); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2519,    bool _2520,    std::shared_ptr< monty::ndarray< double,1 > > _2521,    std::shared_ptr< monty::ndarray< int,1 > > _2522,    std::shared_ptr< monty::ndarray< int,2 > > _2523,    int _2524) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2519,_2520,_2521,_2522,_2523,_2524); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2519,    bool _2520,    std::shared_ptr< monty::ndarray< double,1 > > _2521,    std::shared_ptr< monty::ndarray< int,1 > > _2522,    std::shared_ptr< monty::ndarray< int,2 > > _2523,    int _2524){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2521(_2521 ? _2521->raw() : nullptr, _2521 ? _2521->size(0) : 0);
    _checked_ptr_1<int> _ptr__2522(_2522 ? _2522->raw() : nullptr, _2522 ? _2522->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _2520;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _2522;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _2519;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _2521;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _2523;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2525){ return new mosek::fusion::LinearDomain(_2525); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2525) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2525); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2525){monty::rc_reserve __reserve_this(_pubthis);   {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_2525)->scalable;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2525)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2525)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_2525)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2525)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2525)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_2525)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2526) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2526); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2526) { return __mosek_2fusion_2LinearDomain__sparse(_2526); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2526){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2526)->size(0)),(int)((_2526)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int _2527 = (int)0;
    for(;(_2527 < (int)((_2526)->size(0)));++ _2527)
    {
      {
        {
          int _2528 = (int)0;
          for(;(_2528 < (int)((_2526)->size(1)));++ _2528)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2527,_2528)) = ((*_2526)(_2527,_2528));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2529) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2529); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2529) { return __mosek_2fusion_2LinearDomain__sparse(_2529); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2529){
  _checked_ptr_1<int> _ptr__2529(_2529 ? _2529->raw() : nullptr, _2529 ? _2529->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2529)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int _7995 = (int)0;
  int _7996 = (int)((_2529)->size(0));
  for (int _2530 = _7995; _2530 < _7996; ++_2530)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2530,(int)0)) = _ptr__2529[_2530];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2531) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2531); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2531) { return __mosek_2fusion_2LinearDomain__withShape(_2531); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2531){
  _checked_ptr_1<int> _ptr__2531(_2531 ? _2531->raw() : nullptr, _2531 ? _2531->size(0) : 0);
  shape = _2531;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2532){
  _checked_ptr_1<int> _ptr__2532(_2532 ? _2532->raw() : nullptr, _2532 ? _2532->size(0) : 0);
  if ((!scalable))
  {
    {
      int _7997 = (int)0;
      int _7998 = (int)((_2532)->size(0));
      for (int _2533 = _7997; _2533 < _7998; ++_2533)
      {
        {
          if ((_ptr__2532[_2533] == ((*shape)(_2533))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinearDomain::destroy(){sparsity.reset();bnd.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int,1 > > _2534){
  _checked_ptr_1<int> _ptr__2534(_2534 ? _2534->raw() : nullptr, _2534 ? _2534->size(0) : 0);
  long long _2535 = (long long)1;
  int _7999 = (int)0;
  int _8000 = (int)((_2534)->size(0));
  for (int _2536 = _7999; _2536 < _8000; ++_2536)
  {
    {
      _2535 *= _ptr__2534[_2536];
    }
  }
  return _2535;
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _2537,monty::rc_ptr< ::mosek::fusion::Matrix > _2538){
  if (_2538->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2539 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2538->numNonzeros())));
      _checked_ptr_1<int> _ptr__2539(_2539 ? _2539->raw() : nullptr,_2539 ? _2539->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2540 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2538->numNonzeros())));
      _checked_ptr_1<int> _ptr__2540(_2540 ? _2540->raw() : nullptr,_2540 ? _2540->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2541 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2538->numNonzeros())));
      _checked_ptr_1<double> _ptr__2541(_2541 ? _2541->raw() : nullptr,_2541 ? _2541->size(0) : 0);
      _2538->getDataAsTriplets(_2539,_2540,_2541);
      std::shared_ptr< monty::ndarray< int,2 > > _2542 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2539)->size(0)),(int)2)));
      int _8001 = (int)0;
      int _8002 = (int)((_2539)->size(0));
      for (int _2543 = _8001; _2543 < _8002; ++_2543)
      {
        {
          ((*_2542)(_2543,(int)0)) = _ptr__2539[_2543];
          ((*_2542)(_2543,(int)1)) = _ptr__2540[_2543];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_2537,false,_2541,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2538)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2538)->dimj)}),_2542,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_2537,false,_2538->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2538)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2538)->dimj)}),nullptr,(int)1);
    }
  }
}
long long mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int,1 > > _2544){
  _checked_ptr_1<int> _ptr__2544(_2544 ? _2544->raw() : nullptr, _2544 ? _2544->size(0) : 0);
  long long _2545 = (int)1;
  int _8003 = (int)0;
  int _8004 = (int)((_2544)->size(0));
  for (int _2546 = _8003; _2546 < _8004; ++_2546)
  {
    {
      _2545 *= _ptr__2544[_2546];
    }
  }
  return _2545;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _2547,std::shared_ptr< monty::ndarray< double,1 > > _2548,std::shared_ptr< monty::ndarray< double,1 > > _2549,std::shared_ptr< monty::ndarray< int,2 > > _2550,std::shared_ptr< monty::ndarray< int,1 > > _2551){
  _checked_ptr_1<double> _ptr__2548(_2548 ? _2548->raw() : nullptr, _2548 ? _2548->size(0) : 0);
  _checked_ptr_1<double> _ptr__2549(_2549 ? _2549->raw() : nullptr, _2549 ? _2549->size(0) : 0);
  _checked_ptr_1<int> _ptr__2551(_2551 ? _2551->raw() : nullptr, _2551 ? _2551->size(0) : 0);
  if (((!_2547) && ((int)((_2548)->size(0)) != (int)((_2549)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _2550.get()) && ((int)((_2550)->size(0)) != (int)((_2548)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int _8005 = (int)0;
  int _8006 = (int)((_2549)->size(0));
  for (int _2552 = _8005; _2552 < _8006; ++_2552)
  {
    {
      if ((_ptr__2548[_2552] > _ptr__2549[_2552]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _2551.get()) && (::mosek::fusion::p_Domain::dimsize(_2551) != (int)((_2548)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_2547,_2548,_2549,_2551)->__mosek_2fusion_2RangeDomain__sparse(_2550);
}
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2553) { return mosek::fusion::p_Domain::symmetric(_2553); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2553){
  return _2553->__mosek_2fusion_2RangeDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2554) { return mosek::fusion::p_Domain::symmetric(_2554); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2554){
  return _2554->__mosek_2fusion_2LinearDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2555,    std::shared_ptr< monty::ndarray< int,2 > > _2556) { return mosek::fusion::p_Domain::sparse(_2555,_2556); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2555,std::shared_ptr< monty::ndarray< int,2 > > _2556){
  return _2555->__mosek_2fusion_2RangeDomain__sparse(_2556);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2557,    std::shared_ptr< monty::ndarray< int,1 > > _2558) { return mosek::fusion::p_Domain::sparse(_2557,_2558); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2557,std::shared_ptr< monty::ndarray< int,1 > > _2558){
  _checked_ptr_1<int> _ptr__2558(_2558 ? _2558->raw() : nullptr, _2558 ? _2558->size(0) : 0);
  return _2557->__mosek_2fusion_2RangeDomain__sparse(_2558);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2559,    std::shared_ptr< monty::ndarray< int,2 > > _2560) { return mosek::fusion::p_Domain::sparse(_2559,_2560); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2559,std::shared_ptr< monty::ndarray< int,2 > > _2560){
  return _2559->__mosek_2fusion_2LinearDomain__sparse(_2560);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2561,    std::shared_ptr< monty::ndarray< int,1 > > _2562) { return mosek::fusion::p_Domain::sparse(_2561,_2562); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2561,std::shared_ptr< monty::ndarray< int,1 > > _2562){
  _checked_ptr_1<int> _ptr__2562(_2562 ? _2562->raw() : nullptr, _2562 ? _2562->size(0) : 0);
  return _2561->__mosek_2fusion_2LinearDomain__sparse(_2562);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _2563) { return mosek::fusion::p_Domain::integral(_2563); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _2563){
  return _2563->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _2564) { return mosek::fusion::p_Domain::integral(_2564); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _2564){
  return _2564->__mosek_2fusion_2LinearDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _2565) { return mosek::fusion::p_Domain::integral(_2565); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _2565){
  return _2565->__mosek_2fusion_2ConeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _2566,    int _2567) { return mosek::fusion::p_Domain::axis(_2566,_2567); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _2566,int _2567){
  return _2566->__mosek_2fusion_2ConeDomain__axis(_2567);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2568,    std::shared_ptr< monty::ndarray< int,1 > > _2569) { return mosek::fusion::p_Domain::inDPowerCone(_2568,_2569); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2568,std::shared_ptr< monty::ndarray< int,1 > > _2569){
  _checked_ptr_1<int> _ptr__2569(_2569 ? _2569->raw() : nullptr, _2569 ? _2569->size(0) : 0);
  std::vector<int> _8007;
  for (int _2570 = (int)0, _8008 = (int)((_2569)->size(0)); _2570 < _8008 ; ++_2570)
  {
    _8007.push_back(_ptr__2569[_2570]);
  }
  auto _8009 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8007.size()),_8007.begin(),_8007.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2568,_8009);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2571,    int _2572) { return mosek::fusion::p_Domain::inDPowerCone(_2571,_2572); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2571,int _2572){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2571,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2572),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _2573) { return mosek::fusion::p_Domain::inDPowerCone(_2573); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _2573){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_2573,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2574,    std::shared_ptr< monty::ndarray< int,1 > > _2575) { return mosek::fusion::p_Domain::inPPowerCone(_2574,_2575); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2574,std::shared_ptr< monty::ndarray< int,1 > > _2575){
  _checked_ptr_1<int> _ptr__2575(_2575 ? _2575->raw() : nullptr, _2575 ? _2575->size(0) : 0);
  std::vector<int> _8010;
  for (int _2576 = (int)0, _8011 = (int)((_2575)->size(0)); _2576 < _8011 ; ++_2576)
  {
    _8010.push_back(_ptr__2575[_2576]);
  }
  auto _8012 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8010.size()),_8010.begin(),_8010.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2574,_8012);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2577,    int _2578) { return mosek::fusion::p_Domain::inPPowerCone(_2577,_2578); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2577,int _2578){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2577,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2578),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _2579) { return mosek::fusion::p_Domain::inPPowerCone(_2579); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _2579){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_2579,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2580) { return mosek::fusion::p_Domain::inDExpCone(_2580); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int,1 > > _2580){
  _checked_ptr_1<int> _ptr__2580(_2580 ? _2580->raw() : nullptr, _2580 ? _2580->size(0) : 0);
  std::vector<int> _8013;
  for (int _2581 = (int)0, _8014 = (int)((_2580)->size(0)); _2581 < _8014 ; ++_2581)
  {
    _8013.push_back(_ptr__2580[_2581]);
  }
  auto _8015 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8013.size()),_8013.begin(),_8013.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_8015);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( int _2582) { return mosek::fusion::p_Domain::inDExpCone(_2582); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int _2582){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2582),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2583) { return mosek::fusion::p_Domain::inPExpCone(_2583); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int,1 > > _2583){
  _checked_ptr_1<int> _ptr__2583(_2583 ? _2583->raw() : nullptr, _2583 ? _2583->size(0) : 0);
  std::vector<int> _8016;
  for (int _2584 = (int)0, _8017 = (int)((_2583)->size(0)); _2584 < _8017 ; ++_2584)
  {
    _8016.push_back(_ptr__2583[_2584]);
  }
  auto _8018 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8016.size()),_8016.begin(),_8016.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_8018);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( int _2585) { return mosek::fusion::p_Domain::inPExpCone(_2585); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int _2585){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2585),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2586) { return mosek::fusion::p_Domain::inRotatedQCone(_2586); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int,1 > > _2586){
  _checked_ptr_1<int> _ptr__2586(_2586 ? _2586->raw() : nullptr, _2586 ? _2586->size(0) : 0);
  std::vector<int> _8019;
  for (int _2587 = (int)0, _8020 = (int)((_2586)->size(0)); _2587 < _8020 ; ++_2587)
  {
    _8019.push_back(_ptr__2586[_2587]);
  }
  auto _8021 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8019.size()),_8019.begin(),_8019.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,_8021);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _2588,    int _2589) { return mosek::fusion::p_Domain::inRotatedQCone(_2588,_2589); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _2588,int _2589){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2588),(int)(_2589)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _2590) { return mosek::fusion::p_Domain::inRotatedQCone(_2590); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _2590){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2590)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _2591) { return mosek::fusion::p_Domain::inQCone(_2591); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int,1 > > _2591){
  _checked_ptr_1<int> _ptr__2591(_2591 ? _2591->raw() : nullptr, _2591 ? _2591->size(0) : 0);
  std::vector<int> _8022;
  for (int _2592 = (int)0, _8023 = (int)((_2591)->size(0)); _2592 < _8023 ; ++_2592)
  {
    _8022.push_back(_ptr__2591[_2592]);
  }
  auto _8024 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8022.size()),_8022.begin(),_8022.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,_8024);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _2593,    int _2594) { return mosek::fusion::p_Domain::inQCone(_2593,_2594); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _2593,int _2594){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2593),(int)(_2594)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _2595) { return mosek::fusion::p_Domain::inQCone(_2595); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _2595){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2595)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _2596,    int _2597) { return mosek::fusion::p_Domain::isLinPSD(_2596,_2597); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _2596,int _2597){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _2596,safe_add( _2596,(int)1 ) ) / (int)2),_2597));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _2598) { return mosek::fusion::p_Domain::isLinPSD(_2598); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _2598){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _2598,safe_add( _2598,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain();
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _2599,    int _2600) { return mosek::fusion::p_Domain::isTrilPSD(_2599,_2600); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _2599,int _2600){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2600),(int)(_2599),(int)(_2599)}),(int)1,(int)2);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _2601) { return mosek::fusion::p_Domain::isTrilPSD(_2601); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _2601){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2601),(int)(_2601)}),(int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _2602,    int _2603) { return mosek::fusion::p_Domain::inPSDCone(_2602,_2603); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _2602,int _2603){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2603),(int)(_2602),(int)(_2602)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _2604) { return mosek::fusion::p_Domain::inPSDCone(_2604); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _2604){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2604),(int)(_2604)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _2605) { return mosek::fusion::p_Domain::binary(_2605); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int,1 > > _2605){
  _checked_ptr_1<int> _ptr__2605(_2605 ? _2605->raw() : nullptr, _2605 ? _2605->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_2605)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _2606,    int _2607) { return mosek::fusion::p_Domain::binary(_2606,_2607); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _2606,int _2607){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2606),(int)(_2607)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _2608) { return mosek::fusion::p_Domain::binary(_2608); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _2608){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2608)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2609,    std::shared_ptr< monty::ndarray< double,1 > > _2610,    std::shared_ptr< monty::ndarray< int,1 > > _2611) { return mosek::fusion::p_Domain::inRange(_2609,_2610,_2611); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2609,std::shared_ptr< monty::ndarray< double,1 > > _2610,std::shared_ptr< monty::ndarray< int,1 > > _2611){
  _checked_ptr_1<double> _ptr__2609(_2609 ? _2609->raw() : nullptr, _2609 ? _2609->size(0) : 0);
  _checked_ptr_1<double> _ptr__2610(_2610 ? _2610->raw() : nullptr, _2610 ? _2610->size(0) : 0);
  _checked_ptr_1<int> _ptr__2611(_2611 ? _2611->raw() : nullptr, _2611 ? _2611->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2609,_2610,_2611);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2612,    double _2613,    std::shared_ptr< monty::ndarray< int,1 > > _2614) { return mosek::fusion::p_Domain::inRange(_2612,_2613,_2614); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2612,double _2613,std::shared_ptr< monty::ndarray< int,1 > > _2614){
  _checked_ptr_1<double> _ptr__2612(_2612 ? _2612->raw() : nullptr, _2612 ? _2612->size(0) : 0);
  _checked_ptr_1<int> _ptr__2614(_2614 ? _2614->raw() : nullptr, _2614 ? _2614->size(0) : 0);
  std::vector<double> _8025;
  for (int _2615 = (int)0, _8026 = (int)((_2612)->size(0)); _2615 < _8026 ; ++_2615)
  {
    _8025.push_back(_2613);
  }
  auto _8027 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8025.size()),_8025.begin(),_8025.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2612,_8027,_2614);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2616,    std::shared_ptr< monty::ndarray< double,1 > > _2617,    std::shared_ptr< monty::ndarray< int,1 > > _2618) { return mosek::fusion::p_Domain::inRange(_2616,_2617,_2618); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2616,std::shared_ptr< monty::ndarray< double,1 > > _2617,std::shared_ptr< monty::ndarray< int,1 > > _2618){
  _checked_ptr_1<double> _ptr__2617(_2617 ? _2617->raw() : nullptr, _2617 ? _2617->size(0) : 0);
  _checked_ptr_1<int> _ptr__2618(_2618 ? _2618->raw() : nullptr, _2618 ? _2618->size(0) : 0);
  std::vector<double> _8028;
  for (int _2619 = (int)0, _8029 = (int)((_2617)->size(0)); _2619 < _8029 ; ++_2619)
  {
    _8028.push_back(_2616);
  }
  auto _8030 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8028.size()),_8028.begin(),_8028.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_8030,_2617,_2618);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2620,    double _2621,    std::shared_ptr< monty::ndarray< int,1 > > _2622) { return mosek::fusion::p_Domain::inRange(_2620,_2621,_2622); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2620,double _2621,std::shared_ptr< monty::ndarray< int,1 > > _2622){
  _checked_ptr_1<int> _ptr__2622(_2622 ? _2622->raw() : nullptr, _2622 ? _2622->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2620)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2621)}),_2622);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2623,    std::shared_ptr< monty::ndarray< double,1 > > _2624) { return mosek::fusion::p_Domain::inRange(_2623,_2624); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2623,std::shared_ptr< monty::ndarray< double,1 > > _2624){
  _checked_ptr_1<double> _ptr__2623(_2623 ? _2623->raw() : nullptr, _2623 ? _2623->size(0) : 0);
  _checked_ptr_1<double> _ptr__2624(_2624 ? _2624->raw() : nullptr, _2624 ? _2624->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2623,_2624,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2623)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _2625,    double _2626) { return mosek::fusion::p_Domain::inRange(_2625,_2626); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _2625,double _2626){
  _checked_ptr_1<double> _ptr__2625(_2625 ? _2625->raw() : nullptr, _2625 ? _2625->size(0) : 0);
  std::vector<double> _8031;
  for (int _2627 = (int)0, _8032 = (int)((_2625)->size(0)); _2627 < _8032 ; ++_2627)
  {
    _8031.push_back(_2626);
  }
  auto _8033 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8031.size()),_8031.begin(),_8031.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2625,_8033,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2625)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2628,    std::shared_ptr< monty::ndarray< double,1 > > _2629) { return mosek::fusion::p_Domain::inRange(_2628,_2629); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2628,std::shared_ptr< monty::ndarray< double,1 > > _2629){
  _checked_ptr_1<double> _ptr__2629(_2629 ? _2629->raw() : nullptr, _2629 ? _2629->size(0) : 0);
  std::vector<double> _8034;
  for (int _2630 = (int)0, _8035 = (int)((_2629)->size(0)); _2630 < _8035 ; ++_2630)
  {
    _8034.push_back(_2628);
  }
  auto _8036 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8034.size()),_8034.begin(),_8034.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_8036,_2629,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2629)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _2631,    double _2632) { return mosek::fusion::p_Domain::inRange(_2631,_2632); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _2631,double _2632){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2631)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2632)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2633) { return mosek::fusion::p_Domain::greaterThan(_2633); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _2633){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_2633);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635) { return mosek::fusion::p_Domain::greaterThan(_2634,_2635); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _2634,std::shared_ptr< monty::ndarray< int,1 > > _2635){
  _checked_ptr_1<double> _ptr__2634(_2634 ? _2634->raw() : nullptr, _2634 ? _2634->size(0) : 0);
  _checked_ptr_1<int> _ptr__2635(_2635 ? _2635->raw() : nullptr, _2635 ? _2635->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2634),_2635);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _2636) { return mosek::fusion::p_Domain::greaterThan(_2636); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _2636){
  std::vector<double> _8037;
  for (int _2637 = (int)0, _8038 = (int)((_2636)->size(0)); _2637 < _8038 ; ++_2637)
  {
    for (int _2638 = (int)0, _8039 = (int)((_2636)->size(1)); _2638 < _8039 ; ++_2638)
    {
      _8037.push_back(((*_2636)(_2637,_2638)));
    }
  }
  auto _8040 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8037.size()),_8037.begin(),_8037.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_8040,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2636)->size(0))),(int)((int)((_2636)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2639) { return mosek::fusion::p_Domain::greaterThan(_2639); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _2639){
  _checked_ptr_1<double> _ptr__2639(_2639 ? _2639->raw() : nullptr, _2639 ? _2639->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2639),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2639)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2640,    std::shared_ptr< monty::ndarray< int,1 > > _2641) { return mosek::fusion::p_Domain::greaterThan(_2640,_2641); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2640,std::shared_ptr< monty::ndarray< int,1 > > _2641){
  _checked_ptr_1<int> _ptr__2641(_2641 ? _2641->raw() : nullptr, _2641 ? _2641->size(0) : 0);
  std::vector<double> _8041;
  for (long long _2642 = (int)0, _8042 = ::mosek::fusion::p_Domain::prod(_2641); _2642 < _8042 ; ++_2642)
  {
    _8041.push_back(_2640);
  }
  auto _8043 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8041.size()),_8041.begin(),_8041.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8043,_2641);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2643,    int _2644,    int _2645) { return mosek::fusion::p_Domain::greaterThan(_2643,_2644,_2645); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2643,int _2644,int _2645){
  std::vector<double> _8044;
  for (int _2646 = (int)0, _8045 = safe_mul( _2645,_2644 ); _2646 < _8045 ; ++_2646)
  {
    _8044.push_back(_2643);
  }
  auto _8046 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8044.size()),_8044.begin(),_8044.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8046,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2644),(int)(_2645)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2647,    int _2648) { return mosek::fusion::p_Domain::greaterThan(_2647,_2648); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2647,int _2648){
  std::vector<double> _8047;
  for (int _2649 = (int)0, _8048 = _2648; _2649 < _8048 ; ++_2649)
  {
    _8047.push_back(_2647);
  }
  auto _8049 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8047.size()),_8047.begin(),_8047.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_8049,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2648)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _2650) { return mosek::fusion::p_Domain::greaterThan(_2650); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _2650){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2650)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2651) { return mosek::fusion::p_Domain::lessThan(_2651); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _2651){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_2651);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653) { return mosek::fusion::p_Domain::lessThan(_2652,_2653); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _2652,std::shared_ptr< monty::ndarray< int,1 > > _2653){
  _checked_ptr_1<double> _ptr__2652(_2652 ? _2652->raw() : nullptr, _2652 ? _2652->size(0) : 0);
  _checked_ptr_1<int> _ptr__2653(_2653 ? _2653->raw() : nullptr, _2653 ? _2653->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2652),_2653);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _2654) { return mosek::fusion::p_Domain::lessThan(_2654); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _2654){
  std::vector<double> _8050;
  for (int _2655 = (int)0, _8051 = (int)((_2654)->size(0)); _2655 < _8051 ; ++_2655)
  {
    for (int _2656 = (int)0, _8052 = (int)((_2654)->size(1)); _2656 < _8052 ; ++_2656)
    {
      _8050.push_back(((*_2654)(_2655,_2656)));
    }
  }
  auto _8053 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8050.size()),_8050.begin(),_8050.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_8053,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2654)->size(0))),(int)((int)((_2654)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _2657) { return mosek::fusion::p_Domain::lessThan(_2657); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _2657){
  _checked_ptr_1<double> _ptr__2657(_2657 ? _2657->raw() : nullptr, _2657 ? _2657->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_2657),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2657)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2658,    std::shared_ptr< monty::ndarray< int,1 > > _2659) { return mosek::fusion::p_Domain::lessThan(_2658,_2659); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2658,std::shared_ptr< monty::ndarray< int,1 > > _2659){
  _checked_ptr_1<int> _ptr__2659(_2659 ? _2659->raw() : nullptr, _2659 ? _2659->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2658)}),_2659);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2660,    int _2661,    int _2662) { return mosek::fusion::p_Domain::lessThan(_2660,_2661,_2662); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2660,int _2661,int _2662){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2660)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2661),(int)(_2662)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2663,    int _2664) { return mosek::fusion::p_Domain::lessThan(_2663,_2664); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2663,int _2664){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2663)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2664)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _2665) { return mosek::fusion::p_Domain::lessThan(_2665); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _2665){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2665)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _2666) { return mosek::fusion::p_Domain::equalsTo(_2666); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _2666){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_2666);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _2667,    std::shared_ptr< monty::ndarray< int,1 > > _2668) { return mosek::fusion::p_Domain::equalsTo(_2667,_2668); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _2667,std::shared_ptr< monty::ndarray< int,1 > > _2668){
  _checked_ptr_1<double> _ptr__2667(_2667 ? _2667->raw() : nullptr, _2667 ? _2667->size(0) : 0);
  _checked_ptr_1<int> _ptr__2668(_2668 ? _2668->raw() : nullptr, _2668 ? _2668->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_2667),_2668);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _2669) { return mosek::fusion::p_Domain::equalsTo(_2669); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _2669){
  std::vector<double> _8054;
  for (int _2670 = (int)0, _8055 = (int)((_2669)->size(0)); _2670 < _8055 ; ++_2670)
  {
    for (int _2671 = (int)0, _8056 = (int)((_2669)->size(1)); _2671 < _8056 ; ++_2671)
    {
      _8054.push_back(((*_2669)(_2670,_2671)));
    }
  }
  auto _8057 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8054.size()),_8054.begin(),_8054.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_8057,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2669)->size(0))),(int)((int)((_2669)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _2672) { return mosek::fusion::p_Domain::equalsTo(_2672); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _2672){
  _checked_ptr_1<double> _ptr__2672(_2672 ? _2672->raw() : nullptr, _2672 ? _2672->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_2672),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2672)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2673,    std::shared_ptr< monty::ndarray< int,1 > > _2674) { return mosek::fusion::p_Domain::equalsTo(_2673,_2674); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2673,std::shared_ptr< monty::ndarray< int,1 > > _2674){
  _checked_ptr_1<int> _ptr__2674(_2674 ? _2674->raw() : nullptr, _2674 ? _2674->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2673)}),_2674);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2675,    int _2676,    int _2677) { return mosek::fusion::p_Domain::equalsTo(_2675,_2676,_2677); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2675,int _2676,int _2677){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2675)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2676),(int)(_2677)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2678,    int _2679) { return mosek::fusion::p_Domain::equalsTo(_2678,_2679); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2678,int _2679){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2678)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2679)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _2680) { return mosek::fusion::p_Domain::equalsTo(_2680); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _2680){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_2680)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _2681) { return mosek::fusion::p_Domain::unbounded(_2681); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int,1 > > _2681){
  _checked_ptr_1<int> _ptr__2681(_2681 ? _2681->raw() : nullptr, _2681 ? _2681->size(0) : 0);
  std::vector<int> _8058;
  for (int _2682 = (int)0, _8059 = (int)((_2681)->size(0)); _2682 < _8059 ; ++_2682)
  {
    _8058.push_back(_ptr__2681[_2682]);
  }
  auto _8060 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8058.size()),_8058.begin(),_8058.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_8060);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _2683,    int _2684) { return mosek::fusion::p_Domain::unbounded(_2683,_2684); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _2683,int _2684){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2683),(int)(_2684)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _2685) { return mosek::fusion::p_Domain::unbounded(_2685); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _2685){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2685)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprConst::p_ExprConst  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2686,    std::shared_ptr< monty::ndarray< long long,1 > > _2687,    std::shared_ptr< monty::ndarray< double,1 > > _2688){ return new mosek::fusion::ExprConst(_2686,_2687,_2688); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2686,    std::shared_ptr< monty::ndarray< long long,1 > > _2687,    std::shared_ptr< monty::ndarray< double,1 > > _2688) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_2686,_2687,_2688); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2686,    std::shared_ptr< monty::ndarray< long long,1 > > _2687,    std::shared_ptr< monty::ndarray< double,1 > > _2688){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2686(_2686 ? _2686->raw() : nullptr, _2686 ? _2686->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2687(_2687 ? _2687->raw() : nullptr, _2687 ? _2687->size(0) : 0);
    _checked_ptr_1<double> _ptr__2688(_2688 ? _2688->raw() : nullptr, _2688 ? _2688->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_2686);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_2688);
    std::shared_ptr< monty::ndarray< long long,1 > > _8061;
    bool _8062 = (NULL != _2687.get());
    if (_8062)
    {
      _8061 = ::mosek::fusion::Utils::Tools::arraycopy(_2687);
    }
    else
    {
      _8061 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _8061;
    ::mosek::fusion::p_ExprConst::validate(_2686,_2688,_2687);
  }
}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2689,    std::shared_ptr< monty::ndarray< long long,1 > > _2690,    double _2691){ return new mosek::fusion::ExprConst(_2689,_2690,_2691); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _2689,    std::shared_ptr< monty::ndarray< long long,1 > > _2690,    double _2691) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_2689,_2690,_2691); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2689,    std::shared_ptr< monty::ndarray< long long,1 > > _2690,    double _2691){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2689(_2689 ? _2689->raw() : nullptr, _2689 ? _2689->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2690(_2690 ? _2690->raw() : nullptr, _2690 ? _2690->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_2689);
    long long _8063;
    bool _8064 = (NULL == _2690.get());
    if (_8064)
    {
      _8063 = ::mosek::fusion::p_Set::size(_2689);
    }
    else
    {
      _8063 = (int)((_2690)->size(0));
    }
    long long _2692 = _8063;
    std::vector<double> _8065;
    for (long long _2693 = (int)0, _8066 = _2692; _2693 < _8066 ; ++_2693)
    {
      _8065.push_back(_2691);
    }
    auto _8067 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8065.size()),_8065.begin(),_8065.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _8067;
    std::shared_ptr< monty::ndarray< long long,1 > > _8068;
    bool _8069 = (NULL != _2690.get());
    if (_8069)
    {
      _8068 = ::mosek::fusion::Utils::Tools::arraycopy(_2690);
    }
    else
    {
      _8068 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _8068;
    ::mosek::fusion::p_ExprConst::validate(_2689,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_2690);
  }
}void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2694,monty::rc_ptr< ::mosek::fusion::WorkStack > _2695,monty::rc_ptr< ::mosek::fusion::WorkStack > _2696) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_2694,_2695,_2696); }void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2694,monty::rc_ptr< ::mosek::fusion::WorkStack > _2695,monty::rc_ptr< ::mosek::fusion::WorkStack > _2696){
  std::shared_ptr< monty::ndarray< int,1 > > _2697 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__2697(_2697 ? _2697->raw() : nullptr,_2697 ? _2697->size(0) : 0);
  int _2698 = (int)((bfix)->size(0));
  bool _2699 = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_2697)));
  int _2700 = _2694->alloci32(safe_add( _2698,(int)1 ));
  int _8070;
  bool _8071 = _2699;
  if (_8071)
  {
    _8070 = (int)1;
  }
  else
  {
    _8070 = (int)0;
  }
  _2694->pushi32(_8070);
  _2694->pushi32((int)0);
  _2694->pushi32(_2698);
  int _8072 = (int)0;
  int _8073 = (int)((_2697)->size(0));
  for (int _2701 = _8072; _2701 < _8073; ++_2701)
  {
    {
      _2694->pushi32(_ptr__2697[_2701]);
    }
  }
  _2694->pushi32((int)((_2697)->size(0)));
  if ((NULL != sparsity.get()))
  {
    {
      int _2702 = _2694->alloci64((int)((sparsity)->size(0)));
      std::shared_ptr< monty::ndarray< long long,1 > > _2703 = mosek::fusion::p_WorkStack::_get_impl(_2694)->i64;
      _checked_ptr_1<long long> _ptr__2703(_2703 ? _2703->raw() : nullptr,_2703 ? _2703->size(0) : 0);
      int _8074 = (int)0;
      int _8075 = (int)((sparsity)->size(0));
      for (int _2704 = _8074; _2704 < _8075; ++_2704)
      {
        {
          _ptr__2703[safe_add( _2702,_2704 )] = ((*sparsity)(_2704));
        }
      }
    }
  }
  {}
  int _2705 = _2694->allocf64((int)((bfix)->size(0)));
  std::shared_ptr< monty::ndarray< double,1 > > _2706 = mosek::fusion::p_WorkStack::_get_impl(_2694)->f64;
  _checked_ptr_1<double> _ptr__2706(_2706 ? _2706->raw() : nullptr,_2706 ? _2706->size(0) : 0);
  int _8076 = (int)0;
  int _8077 = (int)((bfix)->size(0));
  for (int _2707 = _8076; _2707 < _8077; ++_2707)
  {
    {
      _ptr__2706[safe_add( _2705,_2707 )] = ((*bfix)(_2707));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2708 = mosek::fusion::p_WorkStack::_get_impl(_2694)->i32;
  _checked_ptr_1<int> _ptr__2708(_2708 ? _2708->raw() : nullptr,_2708 ? _2708->size(0) : 0);
  int _8078 = (int)0;
  int _8079 = safe_add( _2698,(int)1 );
  for (int _2709 = _8078; _2709 < _8079; ++_2709)
  {
    {
      _ptr__2708[safe_add( _2700,_2709 )] = (int)0;
    }
  }
}
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int,1 > > _2710,std::shared_ptr< monty::ndarray< double,1 > > _2711,std::shared_ptr< monty::ndarray< long long,1 > > _2712){
  _checked_ptr_1<int> _ptr__2710(_2710 ? _2710->raw() : nullptr, _2710 ? _2710->size(0) : 0);
  _checked_ptr_1<double> _ptr__2711(_2711 ? _2711->raw() : nullptr, _2711 ? _2711->size(0) : 0);
  _checked_ptr_1<long long> _ptr__2712(_2712 ? _2712->raw() : nullptr, _2712 ? _2712->size(0) : 0);
  long long _2713 = ::mosek::fusion::p_Set::size(_2710);
  if ((NULL != _2712.get()))
  {
    {
      if (((int)((_2712)->size(0)) != (int)((_2711)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      int _8080 = (int)0;
      int _8081 = (int)((_2712)->size(0));
      for (int _2714 = _8080; _2714 < _8081; ++_2714)
      {
        {
          if (((_ptr__2712[_2714] < (int)0) || (_ptr__2712[_2714] >= _2713)))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_2711)->size(0)) != _2713))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprConst::toString(){
  return std::string ("ExprConst()");
}
void mosek::fusion::p_ExprConst::destroy(){sparsity.reset();bfix.reset();}void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPick::p_ExprPick  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2715,    std::shared_ptr< monty::ndarray< int,2 > > _2716){ return new mosek::fusion::ExprPick(_2715,_2716); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2715,    std::shared_ptr< monty::ndarray< int,2 > > _2716) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_2715,_2716); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2715,    std::shared_ptr< monty::ndarray< int,2 > > _2716){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2716)->size(0)))}));
    std::shared_ptr< monty::ndarray< int,1 > > _2717 = _2715->getShape();
    _checked_ptr_1<int> _ptr__2717(_2717 ? _2717->raw() : nullptr,_2717 ? _2717->size(0) : 0);
    int _2718 = (int)((_2717)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _2715;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_2716)->size(0)))));
    std::shared_ptr< monty::ndarray< long long,1 > > _2719 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<long long> _ptr__2719(_2719 ? _2719->raw() : nullptr,_2719 ? _2719->size(0) : 0);
    if (((int)((_2716)->size(1)) != _2718))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    int _8082 = (int)0;
    int _8083 = (int)((_2716)->size(0));
    for (int _2720 = _8082; _2720 < _8083; ++_2720)
    {
      {
        int _8084 = (int)0;
        int _8085 = _2718;
        for (int _2721 = _8084; _2721 < _8085; ++_2721)
        {
          {
            if (((((*_2716)(_2720,_2721)) < (int)0) || (((*_2716)(_2720,_2721)) >= _ptr__2717[_2721])))
            {
              {
                throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
              }
            }
            {}
          }
        }
      }
    }
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2722 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2718)));
      _checked_ptr_1<long long> _ptr__2722(_2722 ? _2722->raw() : nullptr,_2722 ? _2722->size(0) : 0);
      _ptr__2722[(_2718 - (int)1)] = (int)1;
      int _8086 = (int)1;
      int _8087 = _2718;
      for (int _2723 = _8086; _2723 < _8087; ++_2723)
      {
        {
          _ptr__2722[((_2718 - _2723) - (int)1)] = safe_mul( _ptr__2722[(_2718 - _2723)],_ptr__2717[(_2718 - _2723)] );
        }
      }
      int _8088 = (int)0;
      int _8089 = (int)((_2716)->size(0));
      for (int _2724 = _8088; _2724 < _8089; ++_2724)
      {
        {
          long long _2725 = (long long)0;
          int _8090 = (int)0;
          int _8091 = _2718;
          for (int _2726 = _8090; _2726 < _8091; ++_2726)
          {
            {
              _2725 += safe_mul( _ptr__2722[_2726],((*_2716)(_2724,_2726)) );
            }
          }
          _ptr__2719[_2724] = _2725;
        }
      }
    }
  }
}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2727,    std::shared_ptr< monty::ndarray< long long,1 > > _2728){ return new mosek::fusion::ExprPick(_2727,_2728); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _2727,    std::shared_ptr< monty::ndarray< long long,1 > > _2728) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_2727,_2728); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2727,    std::shared_ptr< monty::ndarray< long long,1 > > _2728){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2728(_2728 ? _2728->raw() : nullptr, _2728 ? _2728->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2728)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _2727;
    std::shared_ptr< monty::ndarray< int,1 > > _2729 = _2727->getShape();
    _checked_ptr_1<int> _ptr__2729(_2729 ? _2729->raw() : nullptr,_2729 ? _2729->size(0) : 0);
    long long _2730 = ::mosek::fusion::p_Set::size(_2729);
    int _8092 = (int)0;
    int _8093 = (int)((_2728)->size(0));
    for (int _2731 = _8092; _2731 < _8093; ++_2731)
    {
      {
        if (((_ptr__2728[_2731] < (int)0) || (_ptr__2728[_2731] >= _2730)))
        {
          {
            throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
          }
        }
        {}
      }
    }
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_2728);
  }
}void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2732,monty::rc_ptr< ::mosek::fusion::WorkStack > _2733,monty::rc_ptr< ::mosek::fusion::WorkStack > _2734) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_2732,_2733,_2734); }void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2732,monty::rc_ptr< ::mosek::fusion::WorkStack > _2733,monty::rc_ptr< ::mosek::fusion::WorkStack > _2734){
  expr->eval(_2733,_2732,_2734);
  _2733->pop_expr();
  int _2735 = mosek::fusion::p_WorkStack::_get_impl(_2733)->nd;
  int _2736 = mosek::fusion::p_WorkStack::_get_impl(_2733)->shape_base;
  int _2737 = mosek::fusion::p_WorkStack::_get_impl(_2733)->nelem;
  int _2738 = mosek::fusion::p_WorkStack::_get_impl(_2733)->nnz;
  bool _2739 = mosek::fusion::p_WorkStack::_get_impl(_2733)->hassp;
  int _2740 = mosek::fusion::p_WorkStack::_get_impl(_2733)->ptr_base;
  int _2741 = mosek::fusion::p_WorkStack::_get_impl(_2733)->sp_base;
  int _2742 = mosek::fusion::p_WorkStack::_get_impl(_2733)->nidxs_base;
  int _2743 = mosek::fusion::p_WorkStack::_get_impl(_2733)->bfix_base;
  int _2744 = mosek::fusion::p_WorkStack::_get_impl(_2733)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _2745 = mosek::fusion::p_WorkStack::_get_impl(_2733)->i32;
  _checked_ptr_1<int> _ptr__2745(_2745 ? _2745->raw() : nullptr,_2745 ? _2745->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2746 = mosek::fusion::p_WorkStack::_get_impl(_2733)->i64;
  _checked_ptr_1<long long> _ptr__2746(_2746 ? _2746->raw() : nullptr,_2746 ? _2746->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2747 = mosek::fusion::p_WorkStack::_get_impl(_2733)->f64;
  _checked_ptr_1<double> _ptr__2747(_2747 ? _2747->raw() : nullptr,_2747 ? _2747->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2748 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<long long> _ptr__2748(_2748 ? _2748->raw() : nullptr,_2748 ? _2748->size(0) : 0);
  if ((!_2739))
  {
    {
      int _2749 = (int)((_2748)->size(0));
      int _2750 = (int)1;
      int _2751 = (int)0;
      int _8094 = (int)0;
      int _8095 = (int)((_2748)->size(0));
      for (int _2752 = _8094; _2752 < _8095; ++_2752)
      {
        {
          _2751 += (_ptr__2745[safe_add( safe_add( _2740,_ptr__2748[_2752] ),(int)1 )] - _ptr__2745[safe_add( _2740,_ptr__2748[_2752] )]);
        }
      }
      _2732->alloc_expr(_2750,_2749,_2751,false);
      int _2753 = mosek::fusion::p_WorkStack::_get_impl(_2732)->cof_base;
      int _2754 = mosek::fusion::p_WorkStack::_get_impl(_2732)->bfix_base;
      int _2755 = mosek::fusion::p_WorkStack::_get_impl(_2732)->nidxs_base;
      int _2756 = mosek::fusion::p_WorkStack::_get_impl(_2732)->ptr_base;
      int _2757 = mosek::fusion::p_WorkStack::_get_impl(_2732)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2758 = mosek::fusion::p_WorkStack::_get_impl(_2732)->i32;
      _checked_ptr_1<int> _ptr__2758(_2758 ? _2758->raw() : nullptr,_2758 ? _2758->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2759 = mosek::fusion::p_WorkStack::_get_impl(_2732)->i64;
      _checked_ptr_1<long long> _ptr__2759(_2759 ? _2759->raw() : nullptr,_2759 ? _2759->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2760 = mosek::fusion::p_WorkStack::_get_impl(_2732)->f64;
      _checked_ptr_1<double> _ptr__2760(_2760 ? _2760->raw() : nullptr,_2760 ? _2760->size(0) : 0);
      _ptr__2758[_2757] = (int)((_2748)->size(0));
      int _2761 = (int)0;
      _ptr__2758[_2756] = (int)0;
      int _8096 = (int)0;
      int _8097 = (int)((_2748)->size(0));
      for (int _2762 = _8096; _2762 < _8097; ++_2762)
      {
        {
          int _8098 = _ptr__2745[safe_add( _2740,_ptr__2748[_2762] )];
          int _8099 = _ptr__2745[safe_add( safe_add( _2740,_ptr__2748[_2762] ),(int)1 )];
          for (int _2763 = _8098; _2763 < _8099; ++_2763)
          {
            {
              _ptr__2759[safe_add( _2755,_2761 )] = _ptr__2746[safe_add( _2742,_2763 )];
              _ptr__2760[safe_add( _2753,_2761 )] = _ptr__2747[safe_add( _2744,_2763 )];
              ++ _2761;
            }
          }
          _ptr__2760[safe_add( _2754,_2762 )] = _ptr__2747[safe_add( _2743,_ptr__2748[_2762] )];
          _ptr__2758[safe_add( safe_add( _2756,_2762 ),(int)1 )] = _2761;
        }
      }
    }
  }
  else
  {
    {
      int _2764 = (int)1;
      int _2765 = (int)((_2748)->size(0));
      int _2766 = (int)0;
      std::shared_ptr< monty::ndarray< long long,1 > > _2767 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<long long> _ptr__2767(_2767 ? _2767->raw() : nullptr,_2767 ? _2767->size(0) : 0);
      int _2768 = _2734->alloci32((int)((_2767)->size(0)));
      std::shared_ptr< monty::ndarray< int,1 > > _2769 = mosek::fusion::p_WorkStack::_get_impl(_2734)->i32;
      _checked_ptr_1<int> _ptr__2769(_2769 ? _2769->raw() : nullptr,_2769 ? _2769->size(0) : 0);
      int _8100 = (int)0;
      int _8101 = (int)((_2767)->size(0));
      for (int _2770 = _8100; _2770 < _8101; ++_2770)
      {
        {
          int _2771 = _2737;
          int _2772 = (int)0;
          while ( (_2772 < (_2771 - (int)1)) )
          {
            {
              int _2773 = (safe_add( safe_add( _2771,_2772 ),(int)1 ) / (int)2);
              if ((_ptr__2746[safe_add( _2741,_2773 )] >= _ptr__2767[_2770]))
              {
                {
                  _2771 = _2773;
                }
              }
              else
              {
                {
                  _2772 = _2773;
                }
              }
            }
          }
          ++ _2772;
          if (((_2772 < _2737) && (_ptr__2746[safe_add( _2741,_2772 )] == _ptr__2767[_2770])))
          {
            {
              _ptr__2769[safe_add( _2768,_2770 )] = _2772;
              _2766 += (_ptr__2745[safe_add( safe_add( _2740,_2772 ),(int)1 )] - _ptr__2745[safe_add( _2740,_2772 )]);
            }
          }
          else
          {
            {
              _ptr__2769[safe_add( _2768,_2770 )] = (-(int)1);
            }
          }
        }
      }
      _2732->alloc_expr(_2764,_2765,_2766,false);
      int _2774 = mosek::fusion::p_WorkStack::_get_impl(_2732)->ptr_base;
      int _2775 = mosek::fusion::p_WorkStack::_get_impl(_2732)->nidxs_base;
      int _2776 = mosek::fusion::p_WorkStack::_get_impl(_2732)->cof_base;
      int _2777 = mosek::fusion::p_WorkStack::_get_impl(_2732)->bfix_base;
      int _2778 = mosek::fusion::p_WorkStack::_get_impl(_2732)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2779 = mosek::fusion::p_WorkStack::_get_impl(_2732)->i32;
      _checked_ptr_1<int> _ptr__2779(_2779 ? _2779->raw() : nullptr,_2779 ? _2779->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2780 = mosek::fusion::p_WorkStack::_get_impl(_2732)->i64;
      _checked_ptr_1<long long> _ptr__2780(_2780 ? _2780->raw() : nullptr,_2780 ? _2780->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2781 = mosek::fusion::p_WorkStack::_get_impl(_2732)->f64;
      _checked_ptr_1<double> _ptr__2781(_2781 ? _2781->raw() : nullptr,_2781 ? _2781->size(0) : 0);
      _ptr__2779[_2778] = (int)((_2767)->size(0));
      _ptr__2779[_2774] = (int)0;
      int _2782 = (int)0;
      int _8102 = (int)0;
      int _8103 = (int)((_2767)->size(0));
      for (int _2783 = _8102; _2783 < _8103; ++_2783)
      {
        {
          if ((_ptr__2769[safe_add( _2768,_2783 )] >= (int)0))
          {
            {
              int _2784 = _ptr__2769[safe_add( _2768,_2783 )];
              int _8104 = _ptr__2745[safe_add( _2740,_2784 )];
              int _8105 = _ptr__2745[safe_add( safe_add( _2740,_2784 ),(int)1 )];
              for (int _2785 = _8104; _2785 < _8105; ++_2785)
              {
                {
                  _ptr__2780[safe_add( _2775,_2782 )] = _ptr__2746[safe_add( _2742,_2785 )];
                  _ptr__2781[safe_add( _2776,_2782 )] = _ptr__2747[safe_add( _2744,_2785 )];
                  ++ _2782;
                }
              }
              _ptr__2781[safe_add( _2777,_2783 )] = _ptr__2747[safe_add( _2743,_2784 )];
            }
          }
          else
          {
            {
              _ptr__2781[safe_add( _2777,_2783 )] = 0.0;
            }
          }
          _ptr__2779[safe_add( safe_add( _2774,_2783 ),(int)1 )] = _2782;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprPick::toString(){
  return std::string ("ExprPick()");
}
void mosek::fusion::p_ExprPick::destroy(){idxs.reset();expr.reset();}void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSlice::p_ExprSlice  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _2786,    std::shared_ptr< monty::ndarray< int,1 > > _2787,    std::shared_ptr< monty::ndarray< int,1 > > _2788){ return new mosek::fusion::ExprSlice(_2786,_2787,_2788); }mosek::fusion::ExprSlice::ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _2786,    std::shared_ptr< monty::ndarray< int,1 > > _2787,    std::shared_ptr< monty::ndarray< int,1 > > _2788) :    ExprSlice(new mosek::fusion::p_ExprSlice(this)){ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_2786,_2787,_2788); }void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2786,    std::shared_ptr< monty::ndarray< int,1 > > _2787,    std::shared_ptr< monty::ndarray< int,1 > > _2788){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2787(_2787 ? _2787->raw() : nullptr, _2787 ? _2787->size(0) : 0);
    _checked_ptr_1<int> _ptr__2788(_2788 ? _2788->raw() : nullptr, _2788 ? _2788->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_2786->getShape(),_2787,_2788));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _2786;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _2787;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _2788;
  }
}void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2789,monty::rc_ptr< ::mosek::fusion::WorkStack > _2790,monty::rc_ptr< ::mosek::fusion::WorkStack > _2791) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_2789,_2790,_2791); }void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2789,monty::rc_ptr< ::mosek::fusion::WorkStack > _2790,monty::rc_ptr< ::mosek::fusion::WorkStack > _2791){
  expr->eval(_2790,_2789,_2791);
  int _2792 = _2790->popi32();
  int _2793 = _2790->popi32(_2792);
  int _2794 = _2790->popi32();
  int _2795 = _2790->popi32();
  bool _2796 = (_2790->popi32() != (int)0);
  int _2797 = _2790->popi32(safe_add( _2794,(int)1 ));
  int _8106;
  bool _8107 = _2796;
  if (_8107)
  {
    _8106 = _2790->popi64(_2794);
  }
  else
  {
    _8106 = (-(int)1);
  }
  int _2798 = _8106;
  int _2799 = _2790->popi64(_2795);
  int _2800 = _2790->popf64(_2794);
  int _2801 = _2790->popf64(_2795);
  std::shared_ptr< monty::ndarray< int,1 > > _2802 = mosek::fusion::p_WorkStack::_get_impl(_2790)->i32;
  _checked_ptr_1<int> _ptr__2802(_2802 ? _2802->raw() : nullptr,_2802 ? _2802->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2803 = mosek::fusion::p_WorkStack::_get_impl(_2790)->i64;
  _checked_ptr_1<long long> _ptr__2803(_2803 ? _2803->raw() : nullptr,_2803 ? _2803->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2804 = mosek::fusion::p_WorkStack::_get_impl(_2790)->f64;
  _checked_ptr_1<double> _ptr__2804(_2804 ? _2804->raw() : nullptr,_2804 ? _2804->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2805 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2792)));
  _checked_ptr_1<long long> _ptr__2805(_2805 ? _2805->raw() : nullptr,_2805 ? _2805->size(0) : 0);
  _ptr__2805[(_2792 - (int)1)] = (int)1;
  int _8108 = (int)1;
  int _8109 = _2792;
  for (int _2806 = _8108; _2806 < _8109; ++_2806)
  {
    {
      _ptr__2805[((_2792 - _2806) - (int)1)] = safe_mul( _ptr__2805[(_2792 - _2806)],_ptr__2802[(safe_add( _2793,_2792 ) - _2806)] );
    }
  }
  int _2807 = (int)0;
  int _2808 = (int)0;
  if (_2796)
  {
    {
      int _8110 = (int)0;
      int _8111 = _2794;
      for (int _2809 = _8110; _2809 < _8111; ++_2809)
      {
        {
          bool _2810 = true;
          int _8112 = (int)0;
          int _8113 = _2792;
          for (int _2811 = _8112; _2811 < _8113; ++_2811)
          {
            {
              long long _2812 = ((_ptr__2803[safe_add( _2798,_2809 )] / _ptr__2805[_2811]) % _ptr__2802[safe_add( _2793,_2811 )]);
              _2810 = (_2810 && ((_2812 >= ((*first)(_2811))) && (_2812 < ((*last)(_2811)))));
            }
          }
          if (_2810)
          {
            {
              _2808 += (_ptr__2802[safe_add( safe_add( _2797,_2809 ),(int)1 )] - _ptr__2802[safe_add( _2797,_2809 )]);
              ++ _2807;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _2807 = (int)1;
      int _8114 = (int)0;
      int _8115 = _2792;
      for (int _2813 = _8114; _2813 < _8115; ++_2813)
      {
        {
          _2807 *= (((*last)(_2813)) - ((*first)(_2813)));
        }
      }
      int _8116 = (int)0;
      int _8117 = _2794;
      for (int _2814 = _8116; _2814 < _8117; ++_2814)
      {
        {
          bool _2815 = true;
          int _8118 = (int)0;
          int _8119 = _2792;
          for (int _2816 = _8118; _2816 < _8119; ++_2816)
          {
            {
              long long _2817 = ((_2814 / _ptr__2805[_2816]) % _ptr__2802[safe_add( _2793,_2816 )]);
              _2815 = (_2815 && ((_2817 >= ((*first)(_2816))) && (_2817 < ((*last)(_2816)))));
            }
          }
          if (_2815)
          {
            {
              _2808 += (_ptr__2802[safe_add( safe_add( _2797,_2814 ),(int)1 )] - _ptr__2802[safe_add( _2797,_2814 )]);
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _8120;
  for (int _2819 = (int)0, _8121 = _2792; _2819 < _8121 ; ++_2819)
  {
    _8120.push_back((((*last)(_2819)) - ((*first)(_2819))));
  }
  auto _8122 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8120.size()),_8120.begin(),_8120.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _2818 = _8122;
  _checked_ptr_1<int> _ptr__2818(_2818 ? _2818->raw() : nullptr,_2818 ? _2818->size(0) : 0);
  int _2820 = _2789->allocf64(_2808);
  int _2821 = _2789->allocf64(_2807);
  int _2822 = _2789->alloci64(_2808);
  int _8123;
  bool _8124 = _2796;
  if (_8124)
  {
    _8123 = _2789->alloci64(_2807);
  }
  else
  {
    _8123 = (-(int)1);
  }
  int _2823 = _8123;
  int _2824 = _2789->alloci32(safe_add( _2807,(int)1 ));
  int _8125;
  bool _8126 = _2796;
  if (_8126)
  {
    _8125 = (int)1;
  }
  else
  {
    _8125 = (int)0;
  }
  _2789->pushi32(_8125);
  _2789->pushi32(_2808);
  _2789->pushi32(_2807);
  int _8127 = (int)0;
  int _8128 = _2792;
  for (int _2825 = _8127; _2825 < _8128; ++_2825)
  {
    {
      _2789->pushi32(_ptr__2818[_2825]);
    }
  }
  _2789->pushi32(_2792);
  std::shared_ptr< monty::ndarray< int,1 > > _2826 = mosek::fusion::p_WorkStack::_get_impl(_2789)->i32;
  _checked_ptr_1<int> _ptr__2826(_2826 ? _2826->raw() : nullptr,_2826 ? _2826->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2827 = mosek::fusion::p_WorkStack::_get_impl(_2789)->i64;
  _checked_ptr_1<long long> _ptr__2827(_2827 ? _2827->raw() : nullptr,_2827 ? _2827->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2828 = mosek::fusion::p_WorkStack::_get_impl(_2789)->f64;
  _checked_ptr_1<double> _ptr__2828(_2828 ? _2828->raw() : nullptr,_2828 ? _2828->size(0) : 0);
  _ptr__2826[_2824] = (int)0;
  std::shared_ptr< monty::ndarray< long long,1 > > _2829 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2792)));
  _checked_ptr_1<long long> _ptr__2829(_2829 ? _2829->raw() : nullptr,_2829 ? _2829->size(0) : 0);
  _ptr__2829[(_2792 - (int)1)] = (int)1;
  int _8129 = (int)1;
  int _8130 = _2792;
  for (int _2830 = _8129; _2830 < _8130; ++_2830)
  {
    {
      _ptr__2829[((_2792 - _2830) - (int)1)] = safe_mul( _ptr__2829[(_2792 - _2830)],_ptr__2818[(_2792 - _2830)] );
    }
  }
  int _2831 = (int)0;
  int _2832 = (int)0;
  if (_2796)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2833 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2792)));
      _checked_ptr_1<int> _ptr__2833(_2833 ? _2833->raw() : nullptr,_2833 ? _2833->size(0) : 0);
      int _8131 = (int)0;
      int _8132 = _2794;
      for (int _2834 = _8131; _2834 < _8132; ++_2834)
      {
        {
          bool _2835 = true;
          int _8133 = (int)0;
          int _8134 = _2792;
          for (int _2836 = _8133; _2836 < _8134; ++_2836)
          {
            {
              _ptr__2833[_2836] = (int)((_ptr__2803[safe_add( _2798,_2834 )] / _ptr__2805[_2836]) % _ptr__2802[safe_add( _2793,_2836 )]);
              _2835 = (_2835 && ((_ptr__2833[_2836] >= ((*first)(_2836))) && (_ptr__2833[_2836] < ((*last)(_2836)))));
            }
          }
          if (_2835)
          {
            {
              int _8135 = _ptr__2802[safe_add( _2797,_2834 )];
              int _8136 = _ptr__2802[safe_add( safe_add( _2797,_2834 ),(int)1 )];
              for (int _2837 = _8135; _2837 < _8136; ++_2837)
              {
                {
                  _ptr__2827[safe_add( _2822,_2832 )] = _ptr__2803[safe_add( _2799,_2837 )];
                  _ptr__2828[safe_add( _2820,_2832 )] = _ptr__2804[safe_add( _2801,_2837 )];
                  ++ _2832;
                }
              }
              long long _2838 = (long long)0;
              int _8137 = (int)0;
              int _8138 = _2792;
              for (int _2839 = _8137; _2839 < _8138; ++_2839)
              {
                {
                  _2838 += safe_mul( _ptr__2829[_2839],(_ptr__2833[_2839] - ((*first)(_2839))) );
                }
              }
              _ptr__2827[safe_add( _2823,_2831 )] = _2838;
              _ptr__2828[safe_add( _2821,_2831 )] = _ptr__2804[safe_add( _2800,_2834 )];
              _ptr__2826[safe_add( safe_add( _2824,_2831 ),(int)1 )] = _2832;
              ++ _2831;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _8139 = (int)0;
      int _8140 = _2794;
      for (int _2840 = _8139; _2840 < _8140; ++_2840)
      {
        {
          bool _2841 = true;
          int _8141 = (int)0;
          int _8142 = _2792;
          for (int _2842 = _8141; _2842 < _8142; ++_2842)
          {
            {
              long long _2843 = ((_2840 / _ptr__2805[_2842]) % _ptr__2802[safe_add( _2793,_2842 )]);
              _2841 = (_2841 && ((_2843 >= ((*first)(_2842))) && (_2843 < ((*last)(_2842)))));
            }
          }
          if (_2841)
          {
            {
              int _8143 = _ptr__2802[safe_add( _2797,_2840 )];
              int _8144 = _ptr__2802[safe_add( safe_add( _2797,_2840 ),(int)1 )];
              for (int _2844 = _8143; _2844 < _8144; ++_2844)
              {
                {
                  _ptr__2827[safe_add( _2822,_2832 )] = _ptr__2803[safe_add( _2799,_2844 )];
                  _ptr__2828[safe_add( _2820,_2832 )] = _ptr__2804[safe_add( _2801,_2844 )];
                  ++ _2832;
                }
              }
              _ptr__2828[safe_add( _2821,_2831 )] = _ptr__2804[safe_add( _2800,_2840 )];
              _ptr__2826[safe_add( safe_add( _2824,_2831 ),(int)1 )] = _2832;
              ++ _2831;
            }
          }
          {}
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int,1 > > _2845,std::shared_ptr< monty::ndarray< int,1 > > _2846,std::shared_ptr< monty::ndarray< int,1 > > _2847){
  _checked_ptr_1<int> _ptr__2845(_2845 ? _2845->raw() : nullptr, _2845 ? _2845->size(0) : 0);
  _checked_ptr_1<int> _ptr__2846(_2846 ? _2846->raw() : nullptr, _2846 ? _2846->size(0) : 0);
  _checked_ptr_1<int> _ptr__2847(_2847 ? _2847->raw() : nullptr, _2847 ? _2847->size(0) : 0);
  if ((((int)((_2845)->size(0)) != (int)((_2846)->size(0))) || ((int)((_2845)->size(0)) != (int)((_2847)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int _8145 = (int)0;
  int _8146 = (int)((_2845)->size(0));
  for (int _2848 = _8145; _2848 < _8146; ++_2848)
  {
    {
      if (((_ptr__2846[_2848] < (int)0) || ((_ptr__2847[_2848] < _ptr__2846[_2848]) || (_ptr__2847[_2848] > _ptr__2845[_2848]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _8147;
  for (int _2849 = (int)0, _8148 = (int)((_2845)->size(0)); _2849 < _8148 ; ++_2849)
  {
    _8147.push_back((_ptr__2847[_2849] - _ptr__2846[_2849]));
  }
  auto _8149 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8147.size()),_8147.begin(),_8147.end()));
  return _8149;
}
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSlice::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2850 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int _8150 = (int)1;
  int _8151 = (int)((first)->size(0));
  for (int _2851 = _8150; _2851 < _8151; ++_2851)
  {
    {
      _2850->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_2851)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_2851)));
    }
  }
  _2850->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2850->toString();
}
void mosek::fusion::p_ExprSlice::destroy(){last.reset();first.reset();expr.reset();}void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2852,    monty::rc_ptr< ::mosek::fusion::Expression > _2853){ return new mosek::fusion::ExprPermuteDims(_2852,_2853); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2852,    monty::rc_ptr< ::mosek::fusion::Expression > _2853) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_2852,_2853); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2852,    monty::rc_ptr< ::mosek::fusion::Expression > _2853){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2852(_2852 ? _2852->raw() : nullptr, _2852 ? _2852->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_2852,_2853,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _2854 = _2853->getShape();
    _checked_ptr_1<int> _ptr__2854(_2854 ? _2854->raw() : nullptr,_2854 ? _2854->size(0) : 0);
    if (((int)((_2852)->size(0)) != (int)((_2854)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int> _8152;
    for (int _2856 = (int)0, _8153 = (int)((_2852)->size(0)); _2856 < _8153 ; ++_2856)
    {
      _8152.push_back((int)0);
    }
    auto _8154 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8152.size()),_8152.begin(),_8152.end()));
    std::shared_ptr< monty::ndarray< int,1 > > _2855 = _8154;
    _checked_ptr_1<int> _ptr__2855(_2855 ? _2855->raw() : nullptr,_2855 ? _2855->size(0) : 0);
    int _8155 = (int)0;
    int _8156 = (int)((_2855)->size(0));
    for (int _2857 = _8155; _2857 < _8156; ++_2857)
    {
      {
        if (((_ptr__2852[_2857] < (int)0) || (_ptr__2852[_2857] > (int)((_2854)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__2855[_ptr__2852[_2857]];
      }
    }
    int _8157 = (int)0;
    int _8158 = (int)((_2855)->size(0));
    for (int _2858 = _8157; _2858 < _8158; ++_2858)
    {
      {
        if (((_ptr__2855[_2858] < (int)1) || (_ptr__2855[_2858] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2859,    monty::rc_ptr< ::mosek::fusion::Expression > _2860,    int _2861){ return new mosek::fusion::ExprPermuteDims(_2859,_2860,_2861); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _2859,    monty::rc_ptr< ::mosek::fusion::Expression > _2860,    int _2861) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_2859,_2860,_2861); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2859,    monty::rc_ptr< ::mosek::fusion::Expression > _2860,    int _2861){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2859(_2859 ? _2859->raw() : nullptr, _2859 ? _2859->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_2859,_2860->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _2860;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_2859);
  }
}void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2862,monty::rc_ptr< ::mosek::fusion::WorkStack > _2863,monty::rc_ptr< ::mosek::fusion::WorkStack > _2864) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_2862,_2863,_2864); }void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2862,monty::rc_ptr< ::mosek::fusion::WorkStack > _2863,monty::rc_ptr< ::mosek::fusion::WorkStack > _2864){
  expr->eval(_2863,_2862,_2864);
  int _2865 = _2863->popi32();
  int _2866 = _2863->popi32(_2865);
  std::shared_ptr< monty::ndarray< long long,1 > > _2867 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2865)));
  _checked_ptr_1<long long> _ptr__2867(_2867 ? _2867->raw() : nullptr,_2867 ? _2867->size(0) : 0);
  _ptr__2867[(_2865 - (int)1)] = (int)1;
  int _8159 = (int)1;
  int _8160 = _2865;
  for (int _2868 = _8159; _2868 < _8160; ++_2868)
  {
    {
      _ptr__2867[((_2865 - _2868) - (int)1)] = safe_mul( _ptr__2867[(_2865 - _2868)],((*mosek::fusion::p_WorkStack::_get_impl(_2863)->i32)((safe_add( _2866,_2865 ) - _2868))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2869 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2865)));
  _checked_ptr_1<int> _ptr__2869(_2869 ? _2869->raw() : nullptr,_2869 ? _2869->size(0) : 0);
  _ptr__2869[(_2865 - (int)1)] = (int)1;
  int _8161 = (int)1;
  int _8162 = _2865;
  for (int _2870 = _8161; _2870 < _8162; ++_2870)
  {
    {
      _ptr__2869[((_2865 - _2870) - (int)1)] = safe_mul( _ptr__2869[(_2865 - _2870)],((*mosek::fusion::p_WorkStack::_get_impl(_2863)->i32)(safe_add( _2866,((*dperm)((_2865 - _2870))) ))) );
    }
  }
  int _2871 = _2863->popi32();
  int _2872 = _2863->popi32();
  bool _2873 = (_2863->popi32() != (int)0);
  int _2874 = _2863->popi32(safe_add( _2871,(int)1 ));
  int _8163;
  bool _8164 = (!_2873);
  if (_8164)
  {
    _8163 = (-(int)1);
  }
  else
  {
    _8163 = _2863->popi64(_2871);
  }
  int _2875 = _8163;
  int _2876 = _2863->popi64(_2872);
  int _2877 = _2863->popf64(_2871);
  int _2878 = _2863->popf64(_2872);
  std::shared_ptr< monty::ndarray< int,1 > > _2879 = mosek::fusion::p_WorkStack::_get_impl(_2863)->i32;
  _checked_ptr_1<int> _ptr__2879(_2879 ? _2879->raw() : nullptr,_2879 ? _2879->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2880 = mosek::fusion::p_WorkStack::_get_impl(_2863)->i64;
  _checked_ptr_1<long long> _ptr__2880(_2880 ? _2880->raw() : nullptr,_2880 ? _2880->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2881 = mosek::fusion::p_WorkStack::_get_impl(_2863)->f64;
  _checked_ptr_1<double> _ptr__2881(_2881 ? _2881->raw() : nullptr,_2881 ? _2881->size(0) : 0);
  if (_2873)
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2882 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2871)));
      _checked_ptr_1<long long> _ptr__2882(_2882 ? _2882->raw() : nullptr,_2882 ? _2882->size(0) : 0);
      {
        int _8165 = (int)0;
        int _8166 = _2871;
        for (int _2883 = _8165; _2883 < _8166; ++_2883)
        {
          {
            long long _2884 = (long long)0;
            int _8167 = (int)0;
            int _8168 = _2865;
            for (int _2885 = _8167; _2885 < _8168; ++_2885)
            {
              {
                _2884 += safe_mul( ((_ptr__2880[safe_add( _2875,_2883 )] / _ptr__2867[_2885]) % _ptr__2879[safe_add( _2866,_2885 )]),_ptr__2869[((*dperm)(_2885))] );
              }
            }
            _ptr__2882[_2883] = _2884;
          }
        }
      }
      std::vector<long long> _8169;
      for (int _2887 = (int)0, _8170 = _2871; _2887 < _8170 ; ++_2887)
      {
        _8169.push_back(_2887);
      }
      auto _8171 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8169.size()),_8169.begin(),_8169.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _2886 = _8171;
      _checked_ptr_1<long long> _ptr__2886(_2886 ? _2886->raw() : nullptr,_2886 ? _2886->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2886,_2882,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2871));
      int _2888 = _2862->alloci32(safe_add( _2871,(int)1 ));
      int _2889 = _2862->alloci64(_2872);
      int _2890 = _2862->alloci64(_2871);
      int _2891 = _2862->allocf64(_2872);
      int _2892 = _2862->allocf64(_2871);
      _2862->pushi32((int)1);
      _2862->pushi32(_2872);
      _2862->pushi32(_2871);
      int _8172 = (int)0;
      int _8173 = _2865;
      for (int _2893 = _8172; _2893 < _8173; ++_2893)
      {
        {
          _2862->pushi32(_ptr__2879[safe_add( _2866,((*dperm)(_2893)) )]);
        }
      }
      _2862->pushi32(_2865);
      std::shared_ptr< monty::ndarray< int,1 > > _2894 = mosek::fusion::p_WorkStack::_get_impl(_2862)->i32;
      _checked_ptr_1<int> _ptr__2894(_2894 ? _2894->raw() : nullptr,_2894 ? _2894->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2895 = mosek::fusion::p_WorkStack::_get_impl(_2862)->i64;
      _checked_ptr_1<long long> _ptr__2895(_2895 ? _2895->raw() : nullptr,_2895 ? _2895->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2896 = mosek::fusion::p_WorkStack::_get_impl(_2862)->f64;
      _checked_ptr_1<double> _ptr__2896(_2896 ? _2896->raw() : nullptr,_2896 ? _2896->size(0) : 0);
      _ptr__2894[_2888] = (int)0;
      int _2897 = (int)0;
      int _2898 = (int)0;
      int _8174 = (int)0;
      int _8175 = _2871;
      for (int _2899 = _8174; _2899 < _8175; ++_2899)
      {
        {
          long long _2900 = _ptr__2886[_2899];
          int _8176 = _ptr__2879[safe_add( _2874,_2900 )];
          int _8177 = _ptr__2879[safe_add( safe_add( _2874,_2900 ),(int)1 )];
          for (int _2901 = _8176; _2901 < _8177; ++_2901)
          {
            {
              _ptr__2895[safe_add( _2889,_2898 )] = _ptr__2880[safe_add( _2876,_2901 )];
              _ptr__2896[safe_add( _2891,_2898 )] = _ptr__2881[safe_add( _2878,_2901 )];
              ++ _2898;
            }
          }
          _ptr__2895[safe_add( _2890,_2899 )] = _ptr__2882[_2900];
          _ptr__2896[safe_add( _2892,_2899 )] = _ptr__2881[safe_add( _2877,_2900 )];
          ++ _2897;
          _ptr__2894[safe_add( safe_add( _2888,_2899 ),(int)1 )] = _2898;
        }
      }
    }
  }
  else
  {
    {
      int _2902 = _2862->alloci32(safe_add( _2871,(int)1 ));
      int _2903 = _2862->alloci64(_2872);
      int _2904 = _2862->allocf64(_2872);
      int _2905 = _2862->allocf64(_2871);
      _2862->pushi32((int)0);
      _2862->pushi32(_2872);
      _2862->pushi32(_2871);
      int _8178 = (int)0;
      int _8179 = _2865;
      for (int _2906 = _8178; _2906 < _8179; ++_2906)
      {
        {
          _2862->pushi32(_ptr__2879[safe_add( _2866,((*dperm)(_2906)) )]);
        }
      }
      _2862->pushi32(_2865);
      std::shared_ptr< monty::ndarray< int,1 > > _2907 = mosek::fusion::p_WorkStack::_get_impl(_2862)->i32;
      _checked_ptr_1<int> _ptr__2907(_2907 ? _2907->raw() : nullptr,_2907 ? _2907->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2908 = mosek::fusion::p_WorkStack::_get_impl(_2862)->i64;
      _checked_ptr_1<long long> _ptr__2908(_2908 ? _2908->raw() : nullptr,_2908 ? _2908->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2909 = mosek::fusion::p_WorkStack::_get_impl(_2862)->f64;
      _checked_ptr_1<double> _ptr__2909(_2909 ? _2909->raw() : nullptr,_2909 ? _2909->size(0) : 0);
      _ptr__2907[_2902] = (int)0;
      int _2910 = (int)0;
      int _2911 = (int)0;
      int _8180 = (int)0;
      int _8181 = _2871;
      for (int _2912 = _8180; _2912 < _8181; ++_2912)
      {
        {
          long long _2913 = (long long)0;
          int _8182 = (int)0;
          int _8183 = _2865;
          for (int _2914 = _8182; _2914 < _8183; ++_2914)
          {
            {
              _2913 += safe_mul( ((_2912 / _ptr__2867[((*dperm)(_2914))]) % _ptr__2879[safe_add( _2866,((*dperm)(_2914)) )]),_ptr__2869[_2914] );
            }
          }
          int _8184 = _ptr__2879[safe_add( _2874,_2913 )];
          int _8185 = _ptr__2879[safe_add( safe_add( _2874,_2913 ),(int)1 )];
          for (int _2915 = _8184; _2915 < _8185; ++_2915)
          {
            {
              _ptr__2908[safe_add( _2903,_2911 )] = _ptr__2880[safe_add( _2876,_2915 )];
              _ptr__2909[safe_add( _2904,_2911 )] = _ptr__2881[safe_add( _2878,_2915 )];
              ++ _2911;
            }
          }
          _ptr__2909[safe_add( _2905,_2910 )] = _ptr__2881[safe_add( _2877,_2913 )];
          ++ _2910;
          _ptr__2907[safe_add( _2902,_2910 )] = _2911;
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int,1 > > _2916,std::shared_ptr< monty::ndarray< int,1 > > _2917){
  _checked_ptr_1<int> _ptr__2916(_2916 ? _2916->raw() : nullptr, _2916 ? _2916->size(0) : 0);
  _checked_ptr_1<int> _ptr__2917(_2917 ? _2917->raw() : nullptr, _2917 ? _2917->size(0) : 0);
  std::vector<int> _8186;
  for (int _2918 = (int)0, _8187 = (int)((_2916)->size(0)); _2918 < _8187 ; ++_2918)
  {
    _8186.push_back(_ptr__2917[_ptr__2916[_2918]]);
  }
  auto _8188 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8186.size()),_8186.begin(),_8186.end()));
  return _8188;
}
void mosek::fusion::p_ExprPermuteDims::destroy(){dperm.reset();expr.reset();}void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprTranspose::p_ExprTranspose  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _2919){ return new mosek::fusion::ExprTranspose(_2919); }mosek::fusion::ExprTranspose::ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _2919) :    ExprTranspose(new mosek::fusion::p_ExprTranspose(this)){ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_2919); }void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _2919){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_2919->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _2919;
  }
}void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2920,monty::rc_ptr< ::mosek::fusion::WorkStack > _2921,monty::rc_ptr< ::mosek::fusion::WorkStack > _2922) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_2920,_2921,_2922); }void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2920,monty::rc_ptr< ::mosek::fusion::WorkStack > _2921,monty::rc_ptr< ::mosek::fusion::WorkStack > _2922){
  expr->eval(_2921,_2920,_2922);
  _2921->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_2921)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int _2923 = mosek::fusion::p_WorkStack::_get_impl(_2921)->shape_base;
      int _2924 = mosek::fusion::p_WorkStack::_get_impl(_2921)->nelem;
      int _2925 = mosek::fusion::p_WorkStack::_get_impl(_2921)->nnz;
      bool _2926 = mosek::fusion::p_WorkStack::_get_impl(_2921)->hassp;
      int _2927 = mosek::fusion::p_WorkStack::_get_impl(_2921)->ptr_base;
      int _2928 = mosek::fusion::p_WorkStack::_get_impl(_2921)->sp_base;
      int _2929 = mosek::fusion::p_WorkStack::_get_impl(_2921)->nidxs_base;
      int _2930 = mosek::fusion::p_WorkStack::_get_impl(_2921)->bfix_base;
      int _2931 = mosek::fusion::p_WorkStack::_get_impl(_2921)->cof_base;
      int _2932 = ((*mosek::fusion::p_WorkStack::_get_impl(_2921)->i32)(_2923));
      int _2933 = ((*mosek::fusion::p_WorkStack::_get_impl(_2921)->i32)(safe_add( _2923,(int)1 )));
      std::shared_ptr< monty::ndarray< int,1 > > _2934 = mosek::fusion::p_WorkStack::_get_impl(_2921)->i32;
      _checked_ptr_1<int> _ptr__2934(_2934 ? _2934->raw() : nullptr,_2934 ? _2934->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2935 = mosek::fusion::p_WorkStack::_get_impl(_2921)->i64;
      _checked_ptr_1<long long> _ptr__2935(_2935 ? _2935->raw() : nullptr,_2935 ? _2935->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2936 = mosek::fusion::p_WorkStack::_get_impl(_2921)->f64;
      _checked_ptr_1<double> _ptr__2936(_2936 ? _2936->raw() : nullptr,_2936 ? _2936->size(0) : 0);
      _2920->alloc_expr((int)2,_2924,_2925,_2926);
      int _2937 = mosek::fusion::p_WorkStack::_get_impl(_2920)->ptr_base;
      int _2938 = mosek::fusion::p_WorkStack::_get_impl(_2920)->nidxs_base;
      int _2939 = mosek::fusion::p_WorkStack::_get_impl(_2920)->sp_base;
      int _2940 = mosek::fusion::p_WorkStack::_get_impl(_2920)->cof_base;
      int _2941 = mosek::fusion::p_WorkStack::_get_impl(_2920)->bfix_base;
      int _2942 = mosek::fusion::p_WorkStack::_get_impl(_2920)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _2943 = mosek::fusion::p_WorkStack::_get_impl(_2920)->i32;
      _checked_ptr_1<int> _ptr__2943(_2943 ? _2943->raw() : nullptr,_2943 ? _2943->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2944 = mosek::fusion::p_WorkStack::_get_impl(_2920)->i64;
      _checked_ptr_1<long long> _ptr__2944(_2944 ? _2944->raw() : nullptr,_2944 ? _2944->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2945 = mosek::fusion::p_WorkStack::_get_impl(_2920)->f64;
      _checked_ptr_1<double> _ptr__2945(_2945 ? _2945->raw() : nullptr,_2945 ? _2945->size(0) : 0);
      _ptr__2943[_2942] = _2933;
      _ptr__2943[safe_add( _2942,(int)1 )] = _2932;
      if (_2926)
      {
        {
          int _2946 = _2922->alloci32(_2924);
          int _2947 = _2922->alloci32(safe_add( _2933,(int)1 ));
          std::shared_ptr< monty::ndarray< int,1 > > _2948 = mosek::fusion::p_WorkStack::_get_impl(_2922)->i32;
          _checked_ptr_1<int> _ptr__2948(_2948 ? _2948->raw() : nullptr,_2948 ? _2948->size(0) : 0);
          int _8189 = (int)0;
          int _8190 = safe_add( _2933,(int)1 );
          for (int _2949 = _8189; _2949 < _8190; ++_2949)
          {
            {
              _ptr__2948[safe_add( _2947,_2949 )] = (int)0;
            }
          }
          int _8191 = (int)0;
          int _8192 = _2924;
          for (int _2950 = _8191; _2950 < _8192; ++_2950)
          {
            {
              ++ _ptr__2948[safe_add( safe_add( _2947,(_ptr__2935[safe_add( _2928,_2950 )] % _2933) ),(int)1 )];
            }
          }
          int _8193 = (int)0;
          int _8194 = _2933;
          for (int _2951 = _8193; _2951 < _8194; ++_2951)
          {
            {
              _ptr__2948[safe_add( safe_add( _2947,_2951 ),(int)1 )] += _ptr__2948[safe_add( _2947,_2951 )];
            }
          }
          int _8195 = (int)0;
          int _8196 = _2924;
          for (int _2952 = _8195; _2952 < _8196; ++_2952)
          {
            {
              long long _2953 = (_ptr__2935[safe_add( _2928,_2952 )] % _2933);
              _ptr__2948[safe_add( _2946,_ptr__2948[safe_add( _2947,_2953 )] )] = _2952;
              ++ _ptr__2948[safe_add( _2947,_2953 )];
            }
          }
          _ptr__2943[_2937] = (int)0;
          int _2954 = (int)0;
          int _8197 = (int)0;
          int _8198 = _2924;
          for (int _2955 = _8197; _2955 < _8198; ++_2955)
          {
            {
              int _2956 = _ptr__2948[safe_add( _2946,_2955 )];
              int _8199 = _ptr__2934[safe_add( _2927,_2956 )];
              int _8200 = _ptr__2934[safe_add( safe_add( _2927,_2956 ),(int)1 )];
              for (int _2957 = _8199; _2957 < _8200; ++_2957)
              {
                {
                  _ptr__2944[safe_add( _2938,_2954 )] = _ptr__2935[safe_add( _2929,_2957 )];
                  _ptr__2945[safe_add( _2940,_2954 )] = _ptr__2936[safe_add( _2931,_2957 )];
                  ++ _2954;
                }
              }
              long long _2958 = (_ptr__2935[safe_add( _2928,_2956 )] / _2933);
              long long _2959 = (_ptr__2935[safe_add( _2928,_2956 )] % _2933);
              _ptr__2943[safe_add( safe_add( _2937,_2955 ),(int)1 )] = _2954;
              _ptr__2944[safe_add( _2939,_2955 )] = safe_add( safe_mul( _2959,_2932 ),_2958 );
              _ptr__2945[safe_add( _2941,_2955 )] = _ptr__2936[safe_add( _2930,_2956 )];
            }
          }
        }
      }
      else
      {
        {
          _ptr__2943[_2937] = (int)0;
          int _2960 = (int)0;
          int _2961 = (int)0;
          int _8201 = (int)0;
          int _8202 = _2933;
          for (int _2962 = _8201; _2962 < _8202; ++_2962)
          {
            {
              int _8203 = (int)0;
              int _8204 = _2932;
              for (int _2963 = _8203; _2963 < _8204; ++_2963)
              {
                {
                  int _2964 = safe_add( safe_mul( _2963,_2933 ),_2962 );
                  int _8205 = _ptr__2934[safe_add( _2927,_2964 )];
                  int _8206 = _ptr__2934[safe_add( safe_add( _2927,_2964 ),(int)1 )];
                  for (int _2965 = _8205; _2965 < _8206; ++_2965)
                  {
                    {
                      _ptr__2944[safe_add( _2938,_2960 )] = _ptr__2935[safe_add( _2929,_2965 )];
                      _ptr__2945[safe_add( _2940,_2960 )] = _ptr__2936[safe_add( _2931,_2965 )];
                      ++ _2960;
                    }
                  }
                  _ptr__2945[safe_add( _2941,_2961 )] = _ptr__2936[safe_add( _2930,_2964 )];
                  _ptr__2943[safe_add( safe_add( _2937,_2961 ),(int)1 )] = _2960;
                  ++ _2961;
                }
              }
            }
          }
        }
      }
      _2922->clear();
    }
  }
}
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprTranspose::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int,1 > > _2966){
  _checked_ptr_1<int> _ptr__2966(_2966 ? _2966->raw() : nullptr, _2966 ? _2966->size(0) : 0);
  if (((int)((_2966)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__2966[(int)1]),(int)(_ptr__2966[(int)0])});
    }
  }
}
void mosek::fusion::p_ExprTranspose::destroy(){expr.reset();}void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprStack::p_ExprStack  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _2967,    int _2968){ return new mosek::fusion::ExprStack(_2967,_2968); }mosek::fusion::ExprStack::ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _2967,    int _2968) :    ExprStack(new mosek::fusion::p_ExprStack(this)){ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_2967,_2968); }void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _2967,    int _2968){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_2967,_2968));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _8207;
    for (int _2969 = (int)0, _8208 = (int)((_2967)->size(0)); _2969 < _8208 ; ++_2969)
    {
      _8207.push_back(((*_2967)(_2969)));
    }
    auto _8209 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_8207.size()),_8207.begin(),_8207.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _8209;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _2968;
  }
}void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2970,monty::rc_ptr< ::mosek::fusion::WorkStack > _2971,monty::rc_ptr< ::mosek::fusion::WorkStack > _2972) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_2970,_2971,_2972); }void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2970,monty::rc_ptr< ::mosek::fusion::WorkStack > _2971,monty::rc_ptr< ::mosek::fusion::WorkStack > _2972){
  int _2973 = (int)((exprs)->size(0));
  if ((_2973 == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_2970,_2971,_2972);
    }
  }
  else
  {
    {
      int _8210 = (int)0;
      int _8211 = _2973;
      for (int _2974 = _8210; _2974 < _8211; ++_2974)
      {
        {
          ((*exprs)(((_2973 - _2974) - (int)1)))->eval(_2971,_2970,_2972);
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2975 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__2975(_2975 ? _2975->raw() : nullptr,_2975 ? _2975->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2976 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__2976(_2976 ? _2976->raw() : nullptr,_2976 ? _2976->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2977 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__2977(_2977 ? _2977->raw() : nullptr,_2977 ? _2977->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2978 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__2978(_2978 ? _2978->raw() : nullptr,_2978 ? _2978->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _2979 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_2973)));
      std::shared_ptr< monty::ndarray< int,1 > > _2980 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__2980(_2980 ? _2980->raw() : nullptr,_2980 ? _2980->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2981 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__2981(_2981 ? _2981->raw() : nullptr,_2981 ? _2981->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2982 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__2982(_2982 ? _2982->raw() : nullptr,_2982 ? _2982->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2983 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__2983(_2983 ? _2983->raw() : nullptr,_2983 ? _2983->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2984 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__2984(_2984 ? _2984->raw() : nullptr,_2984 ? _2984->size(0) : 0);
      int _8212 = (int)0;
      int _8213 = _2973;
      for (int _2985 = _8212; _2985 < _8213; ++_2985)
      {
        {
          _2971->pop_expr();
          _ptr__2975[_2985] = mosek::fusion::p_WorkStack::_get_impl(_2971)->nd;
          _ptr__2976[_2985] = mosek::fusion::p_WorkStack::_get_impl(_2971)->shape_base;
          _ptr__2977[_2985] = mosek::fusion::p_WorkStack::_get_impl(_2971)->nelem;
          _ptr__2978[_2985] = mosek::fusion::p_WorkStack::_get_impl(_2971)->nnz;
          ((*_2979)(_2985)) = mosek::fusion::p_WorkStack::_get_impl(_2971)->hassp;
          _ptr__2980[_2985] = mosek::fusion::p_WorkStack::_get_impl(_2971)->ptr_base;
          _ptr__2982[_2985] = mosek::fusion::p_WorkStack::_get_impl(_2971)->sp_base;
          _ptr__2981[_2985] = mosek::fusion::p_WorkStack::_get_impl(_2971)->nidxs_base;
          _ptr__2984[_2985] = mosek::fusion::p_WorkStack::_get_impl(_2971)->bfix_base;
          _ptr__2983[_2985] = mosek::fusion::p_WorkStack::_get_impl(_2971)->cof_base;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2986 = mosek::fusion::p_WorkStack::_get_impl(_2971)->i32;
      _checked_ptr_1<int> _ptr__2986(_2986 ? _2986->raw() : nullptr,_2986 ? _2986->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2987 = mosek::fusion::p_WorkStack::_get_impl(_2971)->i64;
      _checked_ptr_1<long long> _ptr__2987(_2987 ? _2987->raw() : nullptr,_2987 ? _2987->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2988 = mosek::fusion::p_WorkStack::_get_impl(_2971)->f64;
      _checked_ptr_1<double> _ptr__2988(_2988 ? _2988->raw() : nullptr,_2988 ? _2988->size(0) : 0);
      int _2989 = _ptr__2975[(int)0];
      int _2990 = _ptr__2976[(int)0];
      bool _2991 = (!((*_2979)((int)0)));
      bool _2992 = false;
      int _8214 = (int)1;
      int _8215 = _2973;
      for (int _2993 = _8214; _2993 < _8215; ++_2993)
      {
        {
          _2992 = (_2992 || ((dim != _2993) && (_ptr__2975[_2993] != _2989)));
          if ((!_2992))
          {
            {
              int _8216 = (int)0;
              int _8217 = dim;
              for (int _2994 = _8216; _2994 < _8217; ++_2994)
              {
                {
                  _2992 = (_2992 || (_ptr__2986[safe_add( _2990,_2994 )] != _ptr__2986[safe_add( _ptr__2976[_2993],_2994 )]));
                }
              }
            }
          }
          {}
          if ((!_2992))
          {
            {
              int _8218 = safe_add( dim,(int)1 );
              int _8219 = _2989;
              for (int _2995 = _8218; _2995 < _8219; ++_2995)
              {
                {
                  _2992 = (_2992 || (_ptr__2986[safe_add( _2990,_2995 )] != _ptr__2986[safe_add( _ptr__2976[_2993],_2995 )]));
                }
              }
            }
          }
          {}
          _2991 = (_2991 && (!((*_2979)(_2993))));
        }
      }
      if (_2992)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int _2996 = (int)0;
      if ((dim < _2989))
      {
        {
          int _8220 = (int)0;
          int _8221 = _2973;
          for (int _2997 = _8220; _2997 < _8221; ++_2997)
          {
            {
              _2996 += _ptr__2986[safe_add( _ptr__2976[_2997],dim )];
            }
          }
        }
      }
      else
      {
        {
          _2996 = _2973;
        }
      }
      int _8222;
      bool _8223 = (dim < _2989);
      if (_8223)
      {
        _8222 = _2989;
      }
      else
      {
        _8222 = safe_add( _2989,(int)1 );
      }
      int _2998 = _8222;
      if ((_2998 != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Oops!!"));
        }
      }
      {}
      int _2999 = (int)0;
      int _3000 = (int)0;
      {
        int _8224 = (int)0;
        int _8225 = _2973;
        for (int _3001 = _8224; _3001 < _8225; ++_3001)
        {
          {
            _3000 += _ptr__2978[_3001];
          }
        }
        int _8226 = (int)0;
        int _8227 = _2973;
        for (int _3002 = _8226; _3002 < _8227; ++_3002)
        {
          {
            _2999 += _ptr__2977[_3002];
          }
        }
      }
      int _3003 = (int)1;
      int _8228 = (int)0;
      int _8229 = dim;
      for (int _3004 = _8228; _3004 < _8229; ++_3004)
      {
        {
          _3003 *= _ptr__2986[safe_add( _2990,_3004 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _8230;
      bool _8231 = (dim < _2989);
      if (_8231)
      {
        std::vector<int> _8232;
        for (int _3006 = (int)0, _8233 = _2973; _3006 < _8233 ; ++_3006)
        {
          _8232.push_back(_ptr__2986[safe_add( _ptr__2976[_3006],dim )]);
        }
        auto _8234 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8232.size()),_8232.begin(),_8232.end()));
        _8230 = _8234;
      }
      else
      {
        std::vector<int> _8235;
        for (int _3007 = (int)0, _8236 = _2973; _3007 < _8236 ; ++_3007)
        {
          _8235.push_back((int)1);
        }
        auto _8237 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8235.size()),_8235.begin(),_8235.end()));
        _8230 = _8237;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3005 = _8230;
      _checked_ptr_1<int> _ptr__3005(_3005 ? _3005->raw() : nullptr,_3005 ? _3005->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3008 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2973)));
      _checked_ptr_1<int> _ptr__3008(_3008 ? _3008->raw() : nullptr,_3008 ? _3008->size(0) : 0);
      _ptr__3008[(int)0] = (int)0;
      int _8238 = (int)1;
      int _8239 = _2973;
      for (int _3009 = _8238; _3009 < _8239; ++_3009)
      {
        {
          _ptr__3008[_3009] = safe_add( _ptr__3008[(_3009 - (int)1)],_ptr__3005[(_3009 - (int)1)] );
        }
      }
      int _3010 = (int)0;
      int _8240 = (int)0;
      int _8241 = _2973;
      for (int _3011 = _8240; _3011 < _8241; ++_3011)
      {
        {
          _3010 += _ptr__3005[_3011];
        }
      }
      int _3012 = (int)1;
      int _8242 = safe_add( dim,(int)1 );
      int _8243 = _2989;
      for (int _3013 = _8242; _3013 < _8243; ++_3013)
      {
        {
          _3012 *= _ptr__2986[safe_add( _2990,_3013 )];
        }
      }
      if (_2991)
      {
        {
          _2970->alloc_expr(_2998,_2999,_3000,false);
          int _3014 = mosek::fusion::p_WorkStack::_get_impl(_2970)->ptr_base;
          int _3015 = mosek::fusion::p_WorkStack::_get_impl(_2970)->shape_base;
          int _3016 = mosek::fusion::p_WorkStack::_get_impl(_2970)->nidxs_base;
          int _3017 = mosek::fusion::p_WorkStack::_get_impl(_2970)->cof_base;
          int _3018 = mosek::fusion::p_WorkStack::_get_impl(_2970)->bfix_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3019 = mosek::fusion::p_WorkStack::_get_impl(_2970)->i32;
          _checked_ptr_1<int> _ptr__3019(_3019 ? _3019->raw() : nullptr,_3019 ? _3019->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3020 = mosek::fusion::p_WorkStack::_get_impl(_2970)->i64;
          _checked_ptr_1<long long> _ptr__3020(_3020 ? _3020->raw() : nullptr,_3020 ? _3020->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3021 = mosek::fusion::p_WorkStack::_get_impl(_2970)->f64;
          _checked_ptr_1<double> _ptr__3021(_3021 ? _3021->raw() : nullptr,_3021 ? _3021->size(0) : 0);
          int _8244 = (int)0;
          int _8245 = _2989;
          for (int _3022 = _8244; _3022 < _8245; ++_3022)
          {
            {
              _ptr__3019[safe_add( _3015,_3022 )] = _ptr__2986[safe_add( _2990,_3022 )];
            }
          }
          _ptr__3019[safe_add( _3015,dim )] = _2996;
          {
            _ptr__3019[_3014] = (int)0;
            {
              int _3023 = (int)0;
              int _8246 = (int)0;
              int _8247 = _2973;
              for (int _3024 = _8246; _3024 < _8247; ++_3024)
              {
                {
                  int _3025 = _ptr__2980[_3024];
                  int _3026 = (int)0;
                  int _8248 = (int)0;
                  int _8249 = _3003;
                  for (int _3027 = _8248; _3027 < _8249; ++_3027)
                  {
                    {
                      int _8250 = (int)0;
                      int _8251 = _ptr__3005[_3024];
                      for (int _3028 = _8250; _3028 < _8251; ++_3028)
                      {
                        {
                          int _8252 = (int)0;
                          int _8253 = _3012;
                          for (int _3029 = _8252; _3029 < _8253; ++_3029)
                          {
                            {
                              int _3030 = safe_add( safe_add( _3029,safe_mul( safe_add( _3028,_3023 ),_3012 ) ),safe_mul( safe_mul( _3027,_3010 ),_3012 ) );
                              int _3031 = (_ptr__2986[safe_add( safe_add( _3025,_3026 ),(int)1 )] - _ptr__2986[safe_add( _3025,_3026 )]);
                              _ptr__3019[safe_add( safe_add( _3014,_3030 ),(int)1 )] = _3031;
                              _ptr__3021[safe_add( _3018,_3030 )] = _ptr__2988[safe_add( _ptr__2984[_3024],_3026 )];
                              ++ _3026;
                            }
                          }
                        }
                      }
                    }
                  }
                  _3023 += _ptr__3005[_3024];
                }
              }
              int _8254 = (int)0;
              int _8255 = _2999;
              for (int _3032 = _8254; _3032 < _8255; ++_3032)
              {
                {
                  _ptr__3019[safe_add( safe_add( _3014,_3032 ),(int)1 )] += _ptr__3019[safe_add( _3014,_3032 )];
                }
              }
            }
            {
              int _3033 = (int)0;
              int _8256 = (int)0;
              int _8257 = _2973;
              for (int _3034 = _8256; _3034 < _8257; ++_3034)
              {
                {
                  int _3035 = _ptr__2980[_3034];
                  int _3036 = (int)0;
                  int _8258 = (int)0;
                  int _8259 = _3003;
                  for (int _3037 = _8258; _3037 < _8259; ++_3037)
                  {
                    {
                      int _8260 = (int)0;
                      int _8261 = _ptr__3005[_3034];
                      for (int _3038 = _8260; _3038 < _8261; ++_3038)
                      {
                        {
                          int _8262 = (int)0;
                          int _8263 = _3012;
                          for (int _3039 = _8262; _3039 < _8263; ++_3039)
                          {
                            {
                              int _3040 = safe_add( safe_add( _3039,safe_mul( safe_add( _3038,_3033 ),_3012 ) ),safe_mul( safe_mul( _3037,_3010 ),_3012 ) );
                              int _3041 = _ptr__2986[safe_add( _3035,_3036 )];
                              int _3042 = (_ptr__2986[safe_add( safe_add( _3035,_3036 ),(int)1 )] - _3041);
                              int _8264 = (int)0;
                              int _8265 = _3042;
                              for (int _3043 = _8264; _3043 < _8265; ++_3043)
                              {
                                {
                                  _ptr__3020[safe_add( safe_add( _3016,_ptr__3019[safe_add( _3014,_3040 )] ),_3043 )] = _ptr__2987[safe_add( safe_add( _ptr__2981[_3034],_3041 ),_3043 )];
                                }
                              }
                              int _8266 = (int)0;
                              int _8267 = _3042;
                              for (int _3044 = _8266; _3044 < _8267; ++_3044)
                              {
                                {
                                  _ptr__3021[safe_add( safe_add( _3017,_ptr__3019[safe_add( _3014,_3040 )] ),_3044 )] = _ptr__2988[safe_add( safe_add( _ptr__2983[_3034],_3041 ),_3044 )];
                                }
                              }
                              ++ _3036;
                            }
                          }
                        }
                      }
                    }
                  }
                  _3033 += _ptr__3005[_3034];
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _3045 = (int)1;
          int _8268 = (int)0;
          int _8269 = dim;
          for (int _3046 = _8268; _3046 < _8269; ++_3046)
          {
            {
              _3045 *= _ptr__2986[safe_add( _2990,_3046 )];
            }
          }
          _3045 *= _2996;
          int _8270 = safe_add( dim,(int)1 );
          int _8271 = _2989;
          for (int _3047 = _8270; _3047 < _8271; ++_3047)
          {
            {
              _3045 *= _ptr__2986[safe_add( _2990,_3047 )];
            }
          }
          bool _3048 = (_2999 < _3045);
          _2970->alloc_expr(_2998,_2999,_3000,_3048);
          int _3049 = mosek::fusion::p_WorkStack::_get_impl(_2970)->ptr_base;
          int _3050 = mosek::fusion::p_WorkStack::_get_impl(_2970)->nidxs_base;
          int _8272;
          bool _8273 = _3048;
          if (_8273)
          {
            _8272 = mosek::fusion::p_WorkStack::_get_impl(_2970)->sp_base;
          }
          else
          {
            _8272 = _2970->alloci64(_2999);
          }
          int _3051 = _8272;
          int _3052 = mosek::fusion::p_WorkStack::_get_impl(_2970)->cof_base;
          int _3053 = mosek::fusion::p_WorkStack::_get_impl(_2970)->bfix_base;
          int _3054 = mosek::fusion::p_WorkStack::_get_impl(_2970)->shape_base;
          int _8274 = (int)0;
          int _8275 = _2989;
          for (int _3055 = _8274; _3055 < _8275; ++_3055)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_2970)->i32)(safe_add( _3054,_3055 ))) = _ptr__2986[safe_add( _2990,_3055 )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_2970)->i32)(safe_add( _3054,dim ))) = _2996;
          int _3056 = _2972->alloci32(safe_add( _2999,(int)1 ));
          int _3057 = _2972->alloci64(_3000);
          int _3058 = _2972->alloci64(_2999);
          int _3059 = _2972->allocf64(_3000);
          int _3060 = _2972->allocf64(_2999);
          std::shared_ptr< monty::ndarray< int,1 > > _3061 = mosek::fusion::p_WorkStack::_get_impl(_2970)->i32;
          _checked_ptr_1<int> _ptr__3061(_3061 ? _3061->raw() : nullptr,_3061 ? _3061->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3062 = mosek::fusion::p_WorkStack::_get_impl(_2970)->i64;
          _checked_ptr_1<long long> _ptr__3062(_3062 ? _3062->raw() : nullptr,_3062 ? _3062->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3063 = mosek::fusion::p_WorkStack::_get_impl(_2970)->f64;
          _checked_ptr_1<double> _ptr__3063(_3063 ? _3063->raw() : nullptr,_3063 ? _3063->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _3064 = mosek::fusion::p_WorkStack::_get_impl(_2972)->i32;
          _checked_ptr_1<int> _ptr__3064(_3064 ? _3064->raw() : nullptr,_3064 ? _3064->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3065 = mosek::fusion::p_WorkStack::_get_impl(_2972)->i64;
          _checked_ptr_1<long long> _ptr__3065(_3065 ? _3065->raw() : nullptr,_3065 ? _3065->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3066 = mosek::fusion::p_WorkStack::_get_impl(_2972)->f64;
          _checked_ptr_1<double> _ptr__3066(_3066 ? _3066->raw() : nullptr,_3066 ? _3066->size(0) : 0);
          {
            int _3067 = (int)0;
            int _3068 = (int)0;
            int _8276 = (int)0;
            int _8277 = _2973;
            for (int _3069 = _8276; _3069 < _8277; ++_3069)
            {
              {
                ::mosek::fusion::Utils::Tools::arraycopy(_2987,_ptr__2981[_3069],_3065,safe_add( _3057,_3068 ),_ptr__2978[_3069]);
                ::mosek::fusion::Utils::Tools::arraycopy(_2988,_ptr__2983[_3069],_3066,safe_add( _3059,_3068 ),_ptr__2978[_3069]);
                ::mosek::fusion::Utils::Tools::arraycopy(_2988,_ptr__2984[_3069],_3066,safe_add( _3060,_3067 ),_ptr__2977[_3069]);
                _3068 += _ptr__2978[_3069];
                _3067 += _ptr__2977[_3069];
              }
            }
          }
          {
            _ptr__3064[_3056] = (int)0;
            int _3070 = (int)0;
            int _3071 = (int)0;
            int _8278 = (int)0;
            int _8279 = _2973;
            for (int _3072 = _8278; _3072 < _8279; ++_3072)
            {
              {
                int _3073 = _ptr__3005[_3072];
                int _3074 = safe_mul( _3073,_3012 );
                int _3075 = _3012;
                if (((*_2979)(_3072)))
                {
                  {
                    int _8280 = (int)0;
                    int _8281 = _ptr__2977[_3072];
                    for (int _3076 = _8280; _3076 < _8281; ++_3076)
                    {
                      {
                        long long _3077 = (_ptr__2987[safe_add( _ptr__2982[_3072],_3076 )] / _3074);
                        long long _3078 = ((_ptr__2987[safe_add( _ptr__2982[_3072],_3076 )] / _3075) % _3073);
                        long long _3079 = (_ptr__2987[safe_add( _ptr__2982[_3072],_3076 )] % _3012);
                        _ptr__3065[safe_add( _3058,_3071 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _3077,_2996 ),_3078 ),_ptr__3008[_3072] ),_3012 ),_3079 );
                        _ptr__3064[safe_add( safe_add( _3056,_3071 ),(int)1 )] = safe_add( _3070,_ptr__2986[safe_add( safe_add( _ptr__2980[_3072],_3076 ),(int)1 )] );
                        ++ _3071;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _3080 = (int)0;
                    int _8282 = (int)0;
                    int _8283 = _3003;
                    for (int _3081 = _8282; _3081 < _8283; ++_3081)
                    {
                      {
                        int _8284 = (int)0;
                        int _8285 = _3073;
                        for (int _3082 = _8284; _3082 < _8285; ++_3082)
                        {
                          {
                            int _8286 = (int)0;
                            int _8287 = _3012;
                            for (int _3083 = _8286; _3083 < _8287; ++_3083)
                            {
                              {
                                _ptr__3065[safe_add( _3058,_3071 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _3081,_2996 ),_3082 ),_ptr__3008[_3072] ),_3012 ),_3083 );
                                _ptr__3064[safe_add( safe_add( _3056,_3071 ),(int)1 )] = safe_add( _3070,_ptr__2986[safe_add( safe_add( _ptr__2980[_3072],_3080 ),(int)1 )] );
                                ++ _3071;
                                ++ _3080;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _3070 += _ptr__2978[_3072];
              }
            }
          }
          if ((dim > (int)0))
          {
            {
              int _3084 = (int)0;
              int _8288 = (int)0;
              int _8289 = _2998;
              for (int _3085 = _8288; _3085 < _8289; ++_3085)
              {
                {
                  if ((_3084 < _ptr__3061[safe_add( _3054,_3085 )]))
                  {
                    {
                      _3084 = _ptr__3061[safe_add( _3054,_3085 )];
                    }
                  }
                  {}
                }
              }
              std::shared_ptr< monty::ndarray< long long,1 > > _3086 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2998)));
              _checked_ptr_1<long long> _ptr__3086(_3086 ? _3086->raw() : nullptr,_3086 ? _3086->size(0) : 0);
              _ptr__3086[(_2998 - (int)1)] = (int)1;
              int _8290 = (int)1;
              int _8291 = _2998;
              for (int _3087 = _8290; _3087 < _8291; ++_3087)
              {
                {
                  _ptr__3086[((_2998 - _3087) - (int)1)] = safe_mul( _ptr__3086[(_2998 - _3087)],_ptr__3061[(safe_add( _3054,_2998 ) - _3087)] );
                }
              }
              int _3088 = _2972->alloci32(_2999);
              int _3089 = _2972->alloci32(_2999);
              int _3090 = _2972->alloci32(safe_add( _3084,(int)1 ));
              std::shared_ptr< monty::ndarray< int,1 > > _3091 = mosek::fusion::p_WorkStack::_get_impl(_2972)->i32;
              _checked_ptr_1<int> _ptr__3091(_3091 ? _3091->raw() : nullptr,_3091 ? _3091->size(0) : 0);
              std::shared_ptr< monty::ndarray< long long,1 > > _3092 = mosek::fusion::p_WorkStack::_get_impl(_2972)->i64;
              _checked_ptr_1<long long> _ptr__3092(_3092 ? _3092->raw() : nullptr,_3092 ? _3092->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _3093 = mosek::fusion::p_WorkStack::_get_impl(_2972)->f64;
              _checked_ptr_1<double> _ptr__3093(_3093 ? _3093->raw() : nullptr,_3093 ? _3093->size(0) : 0);
              {
                int _8292 = (int)0;
                int _8293 = _2999;
                for (int _3094 = _8292; _3094 < _8293; ++_3094)
                {
                  {
                    _ptr__3091[safe_add( _3088,_3094 )] = _3094;
                  }
                }
                int _8294 = (int)0;
                int _8295 = _2998;
                for (int _3095 = _8294; _3095 < _8295; ++_3095)
                {
                  {
                    int _3096 = ((_2998 - _3095) - (int)1);
                    int _3097 = _ptr__3061[safe_add( _3054,_3096 )];
                    int _8296 = (int)0;
                    int _8297 = safe_add( _3097,(int)1 );
                    for (int _3098 = _8296; _3098 < _8297; ++_3098)
                    {
                      {
                        _ptr__3091[safe_add( _3090,_3098 )] = (int)0;
                      }
                    }
                    int _8298 = (int)0;
                    int _8299 = _2999;
                    for (int _3099 = _8298; _3099 < _8299; ++_3099)
                    {
                      {
                        int _3100 = _ptr__3091[safe_add( _3088,_3099 )];
                        long long _3101 = ((_ptr__3092[safe_add( _3058,_3100 )] / _ptr__3086[_3096]) % _3097);
                        ++ _ptr__3091[safe_add( safe_add( _3090,_3101 ),(int)1 )];
                      }
                    }
                    {
                      int _8300 = (int)0;
                      int _8301 = _3097;
                      for (int _3102 = _8300; _3102 < _8301; ++_3102)
                      {
                        {
                          _ptr__3091[safe_add( safe_add( _3090,_3102 ),(int)1 )] += _ptr__3091[safe_add( _3090,_3102 )];
                        }
                      }
                      int _8302 = (int)0;
                      int _8303 = _2999;
                      for (int _3103 = _8302; _3103 < _8303; ++_3103)
                      {
                        {
                          int _3104 = _ptr__3091[safe_add( _3088,_3103 )];
                          long long _3105 = ((_ptr__3092[safe_add( _3058,_3104 )] / _ptr__3086[_3096]) % _3097);
                          _ptr__3091[safe_add( _3089,_ptr__3091[safe_add( _3090,_3105 )] )] = _3104;
                          ++ _ptr__3091[safe_add( _3090,_3105 )];
                        }
                      }
                    }
                    int _3106 = _3088;
                    _3088 = _3089;
                    _3089 = _3106;
                  }
                }
                int _3107 = (int)0;
                _ptr__3061[_3049] = (int)0;
                int _8304 = (int)0;
                int _8305 = _2999;
                for (int _3108 = _8304; _3108 < _8305; ++_3108)
                {
                  {
                    int _3109 = _ptr__3091[safe_add( _3088,_3108 )];
                    int _3110 = _ptr__3091[safe_add( _3056,_3109 )];
                    int _3111 = _ptr__3091[safe_add( safe_add( _3056,_3109 ),(int)1 )];
                    int _3112 = (_3111 - _3110);
                    _ptr__3061[safe_add( safe_add( _3049,_3108 ),(int)1 )] = safe_add( _ptr__3061[safe_add( _3049,_3108 )],_3112 );
                    _ptr__3063[safe_add( _3053,_3108 )] = _ptr__3093[safe_add( _3060,_3109 )];
                    _ptr__3062[safe_add( _3051,_3108 )] = _ptr__3092[safe_add( _3058,_3109 )];
                    int _8306 = _3110;
                    int _8307 = _3111;
                    for (int _3113 = _8306; _3113 < _8307; ++_3113)
                    {
                      {
                        _ptr__3062[safe_add( _3050,_3107 )] = _ptr__3092[safe_add( _3057,_3113 )];
                        _ptr__3063[safe_add( _3052,_3107 )] = _ptr__3093[safe_add( _3059,_3113 )];
                        ++ _3107;
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            {
              int _3114 = (int)0;
              _ptr__3061[_3049] = (int)0;
              int _8308 = (int)0;
              int _8309 = _2999;
              for (int _3115 = _8308; _3115 < _8309; ++_3115)
              {
                {
                  int _3116 = _ptr__3064[safe_add( _3056,_3115 )];
                  int _3117 = _ptr__3064[safe_add( safe_add( _3056,_3115 ),(int)1 )];
                  int _3118 = (_3117 - _3116);
                  _ptr__3061[safe_add( safe_add( _3049,_3115 ),(int)1 )] = safe_add( _ptr__3061[safe_add( _3049,_3115 )],_3118 );
                  _ptr__3063[safe_add( _3053,_3115 )] = _ptr__3066[safe_add( _3060,_3115 )];
                  _ptr__3062[safe_add( _3051,_3115 )] = _ptr__3065[safe_add( _3058,_3115 )];
                  int _8310 = _3116;
                  int _8311 = _3117;
                  for (int _3119 = _8310; _3119 < _8311; ++_3119)
                  {
                    {
                      _ptr__3062[safe_add( _3050,_3114 )] = _ptr__3065[safe_add( _3057,_3119 )];
                      _ptr__3063[safe_add( _3052,_3114 )] = _ptr__3066[safe_add( _3059,_3119 )];
                      ++ _3114;
                    }
                  }
                }
              }
            }
          }
          if ((!_3048))
          {
            {
              _2970->popi64(_2999);
            }
          }
          {}
          _2972->clear();
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _3120,int _3121){
  if (((int)((_3120)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_3120)->size(0)) == (int)1))
  {
    {
      return ((*_3120)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _8312;
      for (int _3123 = (int)0, _8313 = (int)((_3120)->size(0)); _3123 < _8313 ; ++_3123)
      {
        _8312.push_back(((*_3120)(_3123))->getShape());
      }
      auto _8314 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_8312.size()),_8312.begin(),_8312.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _3122 = _8314;
      std::shared_ptr< monty::ndarray< int,1 > > _3124 = ((*_3122)((int)0));
      _checked_ptr_1<int> _ptr__3124(_3124 ? _3124->raw() : nullptr,_3124 ? _3124->size(0) : 0);
      int _3125 = (int)((_3124)->size(0));
      int _8315 = (int)1;
      int _8316 = (int)((_3122)->size(0));
      for (int _3126 = _8315; _3126 < _8316; ++_3126)
      {
        {
          if ((_3125 != (int)((((*_3122)(_3126)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int _8317 = (int)0;
          int _8318 = _3121;
          for (int _3127 = _8317; _3127 < _8318; ++_3127)
          {
            {
              if ((_ptr__3124[_3127] != ((*((*_3122)(_3126)))(_3127))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int _8319 = safe_add( _3121,(int)1 );
          int _8320 = _3125;
          for (int _3128 = _8319; _3128 < _8320; ++_3128)
          {
            {
              if ((_ptr__3124[_3128] != ((*((*_3122)(_3126)))(_3128))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_3121 == _3125))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _3129 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _3125,(int)1 ))));
          _checked_ptr_1<int> _ptr__3129(_3129 ? _3129->raw() : nullptr,_3129 ? _3129->size(0) : 0);
          int _8321 = (int)0;
          int _8322 = _3125;
          for (int _3130 = _8321; _3130 < _8322; ++_3130)
          {
            {
              _ptr__3129[_3130] = _ptr__3124[_3130];
            }
          }
          _ptr__3129[_3125] = (int)((_3122)->size(0));
          return _3129;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _3131 = _3124;
          _checked_ptr_1<int> _ptr__3131(_3131 ? _3131->raw() : nullptr,_3131 ? _3131->size(0) : 0);
          int _8323 = (int)1;
          int _8324 = (int)((_3122)->size(0));
          for (int _3132 = _8323; _3132 < _8324; ++_3132)
          {
            {
              _ptr__3131[_3121] += ((*((*_3122)(_3132)))(_3121));
            }
          }
          return _3131;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprStack::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3133 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int _8325 = (int)1;
  int _8326 = (int)((exprs)->size(0));
  for (int _3134 = _8325; _3134 < _8326; ++_3134)
  {
    {
      _3133->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_3134))->toString());
    }
  }
  _3133->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _3133->toString();
}
void mosek::fusion::p_ExprStack::destroy(){exprs.reset();}void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprInner::p_ExprInner  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3135,    std::shared_ptr< monty::ndarray< long long,1 > > _3136,    std::shared_ptr< monty::ndarray< double,1 > > _3137){ return new mosek::fusion::ExprInner(_3135,_3136,_3137); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3135,    std::shared_ptr< monty::ndarray< long long,1 > > _3136,    std::shared_ptr< monty::ndarray< double,1 > > _3137) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3135,_3136,_3137); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3135,    std::shared_ptr< monty::ndarray< long long,1 > > _3136,    std::shared_ptr< monty::ndarray< double,1 > > _3137){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__3136(_3136 ? _3136->raw() : nullptr, _3136 ? _3136->size(0) : 0);
    _checked_ptr_1<double> _ptr__3137(_3137 ? _3137->raw() : nullptr, _3137 ? _3137->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _3135;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _3136;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _3137;
    if (((int)((_3136)->size(0)) != (int)((_3137)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int,1 > > _3138 = _3135->getShape();
    _checked_ptr_1<int> _ptr__3138(_3138 ? _3138->raw() : nullptr,_3138 ? _3138->size(0) : 0);
    long long _3139 = ::mosek::fusion::p_Set::size(_3138);
    int _8327 = (int)1;
    int _8328 = (int)((_3136)->size(0));
    for (int _3140 = _8327; _3140 < _8328; ++_3140)
    {
      {
        if ((_ptr__3136[_3140] <= _ptr__3136[(_3140 - (int)1)]))
        {
          {
            throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
          }
        }
        {}
      }
    }
    if (((int)((_3136)->size(0)) > (int)0))
    {
      {
        if (((_ptr__3136[(int)0] < (int)0) || (_ptr__3136[((int)((_3136)->size(0)) - (int)1)] > _3139)))
        {
          {
            throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
          }
        }
        {}
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3141,    std::shared_ptr< monty::ndarray< double,1 > > _3142){ return new mosek::fusion::ExprInner(_3141,_3142); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3141,    std::shared_ptr< monty::ndarray< double,1 > > _3142) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3141,_3142); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3141,    std::shared_ptr< monty::ndarray< double,1 > > _3142){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3142(_3142 ? _3142->raw() : nullptr, _3142 ? _3142->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_3141,::mosek::fusion::p_ExprInner::range((int)((_3142)->size(0))),_3142);
    std::shared_ptr< monty::ndarray< int,1 > > _3143 = _3141->getShape();
    _checked_ptr_1<int> _ptr__3143(_3143 ? _3143->raw() : nullptr,_3143 ? _3143->size(0) : 0);
    if ((((int)((_3143)->size(0)) != (int)1) || (_ptr__3143[(int)0] != (int)((_3142)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3144,    std::shared_ptr< monty::ndarray< int,2 > > _3145,    std::shared_ptr< monty::ndarray< double,1 > > _3146){ return new mosek::fusion::ExprInner(_3144,_3145,_3146); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _3144,    std::shared_ptr< monty::ndarray< int,2 > > _3145,    std::shared_ptr< monty::ndarray< double,1 > > _3146) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_3144,_3145,_3146); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3144,    std::shared_ptr< monty::ndarray< int,2 > > _3145,    std::shared_ptr< monty::ndarray< double,1 > > _3146){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3146(_3146 ? _3146->raw() : nullptr, _3146 ? _3146->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_3144,::mosek::fusion::p_ExprInner::convert(_3144->getShape(),_3145),_3146);
  }
}void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3147,monty::rc_ptr< ::mosek::fusion::WorkStack > _3148,monty::rc_ptr< ::mosek::fusion::WorkStack > _3149) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_3147,_3148,_3149); }void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3147,monty::rc_ptr< ::mosek::fusion::WorkStack > _3148,monty::rc_ptr< ::mosek::fusion::WorkStack > _3149){
  expr->eval(_3148,_3147,_3149);
  int _3150 = _3148->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _3151 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3150)));
  _checked_ptr_1<int> _ptr__3151(_3151 ? _3151->raw() : nullptr,_3151 ? _3151->size(0) : 0);
  _3148->popi32(_3150,_3151,(int)0);
  int _3152 = _3148->popi32();
  int _3153 = _3148->popi32();
  bool _3154 = (_3148->popi32() != (int)0);
  int _3155 = _3148->popi32(safe_add( _3152,(int)1 ));
  int _8329;
  bool _8330 = _3154;
  if (_8330)
  {
    _8329 = _3148->popi64(_3152);
  }
  else
  {
    _8329 = (int)0;
  }
  int _3156 = _8329;
  int _3157 = _3148->popi64(_3153);
  int _3158 = _3148->popf64(_3152);
  int _3159 = _3148->popf64(_3153);
  std::shared_ptr< monty::ndarray< int,1 > > _3160 = mosek::fusion::p_WorkStack::_get_impl(_3148)->i32;
  _checked_ptr_1<int> _ptr__3160(_3160 ? _3160->raw() : nullptr,_3160 ? _3160->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3161 = mosek::fusion::p_WorkStack::_get_impl(_3148)->i64;
  _checked_ptr_1<long long> _ptr__3161(_3161 ? _3161->raw() : nullptr,_3161 ? _3161->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3162 = mosek::fusion::p_WorkStack::_get_impl(_3148)->f64;
  _checked_ptr_1<double> _ptr__3162(_3162 ? _3162->raw() : nullptr,_3162 ? _3162->size(0) : 0);
  int _3163 = (int)0;
  if (_3154)
  {
    {
      int _3164 = (int)0;
      int _3165 = (int)0;
      while ( ((_3165 < (int)((vsub)->size(0))) && (_3164 < _3152)) )
      {
        {
          if ((_ptr__3161[safe_add( _3156,_3164 )] < ((*vsub)(_3165))))
          {
            {
              ++ _3164;
            }
          }
          else if((_ptr__3161[safe_add( _3156,_3164 )] > ((*vsub)(_3165))))
          {
            {
              ++ _3165;
            }
          }
          else
          {
            {
              _3163 += (_ptr__3160[safe_add( safe_add( _3155,_3164 ),(int)1 )] - _ptr__3160[safe_add( _3155,_3164 )]);
              ++ _3165;
              ++ _3164;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _8331 = (int)0;
      int _8332 = (int)((vsub)->size(0));
      for (int _3166 = _8331; _3166 < _8332; ++_3166)
      {
        {
          _3163 += (_ptr__3160[safe_add( safe_add( _3155,((*vsub)(_3166)) ),(int)1 )] - _ptr__3160[safe_add( _3155,((*vsub)(_3166)) )]);
        }
      }
    }
  }
  int _3167 = _3147->alloci32((int)2);
  int _3168 = _3147->alloci64(_3163);
  int _3169 = _3147->allocf64(_3163);
  int _3170 = _3147->allocf64((int)1);
  _3147->pushi32((int)0);
  _3147->pushi32(_3163);
  _3147->pushi32((int)1);
  _3147->pushi32((int)0);
  std::shared_ptr< monty::ndarray< int,1 > > _3171 = mosek::fusion::p_WorkStack::_get_impl(_3147)->i32;
  _checked_ptr_1<int> _ptr__3171(_3171 ? _3171->raw() : nullptr,_3171 ? _3171->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3172 = mosek::fusion::p_WorkStack::_get_impl(_3147)->i64;
  _checked_ptr_1<long long> _ptr__3172(_3172 ? _3172->raw() : nullptr,_3172 ? _3172->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3173 = mosek::fusion::p_WorkStack::_get_impl(_3147)->f64;
  _checked_ptr_1<double> _ptr__3173(_3173 ? _3173->raw() : nullptr,_3173 ? _3173->size(0) : 0);
  _ptr__3171[_3167] = (int)0;
  _ptr__3171[safe_add( _3167,(int)1 )] = _3163;
  int _3174 = (int)0;
  double _3175 = 0.0;
  if (_3154)
  {
    {
      int _3176 = (int)0;
      int _3177 = (int)0;
      while ( ((_3177 < (int)((vsub)->size(0))) && (_3176 < _3152)) )
      {
        {
          if ((_ptr__3161[safe_add( _3156,_3176 )] < ((*vsub)(_3177))))
          {
            {
              ++ _3176;
            }
          }
          else if((_ptr__3161[safe_add( _3156,_3176 )] > ((*vsub)(_3177))))
          {
            {
              ++ _3177;
            }
          }
          else
          {
            {
              int _3178 = _ptr__3160[safe_add( _3155,_3176 )];
              int _3179 = _ptr__3160[safe_add( safe_add( _3155,_3176 ),(int)1 )];
              int _8333 = _3178;
              int _8334 = _3179;
              for (int _3180 = _8333; _3180 < _8334; ++_3180)
              {
                {
                  _ptr__3172[safe_add( _3168,_3174 )] = _ptr__3161[safe_add( _3157,_3180 )];
                  _ptr__3173[safe_add( _3169,_3174 )] = (((*vcof)(_3177)) * _ptr__3162[safe_add( _3159,_3180 )]);
                  ++ _3174;
                }
              }
              _3175 += (((*vcof)(_3177)) * _ptr__3162[safe_add( _3158,_3176 )]);
              ++ _3177;
              ++ _3176;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _8335 = (int)0;
      int _8336 = (int)((vsub)->size(0));
      for (int _3181 = _8335; _3181 < _8336; ++_3181)
      {
        {
          int _3182 = _ptr__3160[safe_add( _3155,((*vsub)(_3181)) )];
          int _3183 = _ptr__3160[safe_add( safe_add( _3155,((*vsub)(_3181)) ),(int)1 )];
          int _8337 = _3182;
          int _8338 = _3183;
          for (int _3184 = _8337; _3184 < _8338; ++_3184)
          {
            {
              _ptr__3172[safe_add( _3168,_3174 )] = _ptr__3161[safe_add( _3157,_3184 )];
              _ptr__3173[safe_add( _3169,_3174 )] = (((*vcof)(_3181)) * _ptr__3162[safe_add( _3159,_3184 )]);
              ++ _3174;
            }
          }
          _3175 += (((*vcof)(_3181)) * _ptr__3162[safe_add( _3158,((*vsub)(_3181)) )]);
        }
      }
    }
  }
  _ptr__3173[_3170] = _3175;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::range(int _3185){
  std::vector<long long> _8339;
  for (int _3186 = (int)0, _8340 = _3185; _3186 < _8340 ; ++_3186)
  {
    _8339.push_back(_3186);
  }
  auto _8341 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8339.size()),_8339.begin(),_8339.end()));
  return _8341;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int,1 > > _3187,std::shared_ptr< monty::ndarray< int,2 > > _3188){
  _checked_ptr_1<int> _ptr__3187(_3187 ? _3187->raw() : nullptr, _3187 ? _3187->size(0) : 0);
  int _3189 = (int)((_3187)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _3190 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3189)));
  _checked_ptr_1<long long> _ptr__3190(_3190 ? _3190->raw() : nullptr,_3190 ? _3190->size(0) : 0);
  _ptr__3190[(_3189 - (int)1)] = (int)1;
  int _8342 = (int)1;
  int _8343 = _3189;
  for (int _3191 = _8342; _3191 < _8343; ++_3191)
  {
    {
      _ptr__3190[((_3189 - _3191) - (int)1)] = safe_mul( _ptr__3190[(_3189 - _3191)],_ptr__3187[(_3189 - _3191)] );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _3192 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3188)->size(0)))));
  _checked_ptr_1<long long> _ptr__3192(_3192 ? _3192->raw() : nullptr,_3192 ? _3192->size(0) : 0);
  int _8344 = (int)0;
  int _8345 = (int)((_3188)->size(0));
  for (int _3193 = _8344; _3193 < _8345; ++_3193)
  {
    {
      int _8346 = (int)0;
      int _8347 = _3189;
      for (int _3194 = _8346; _3194 < _8347; ++_3194)
      {
        {
          _ptr__3192[_3193] += safe_mul( _ptr__3190[_3194],((*_3188)(_3193,_3194)) );
        }
      }
    }
  }
  return _3192;
}
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprInner::toString(){
  return std::string ("ExprInner()");
}
void mosek::fusion::p_ExprInner::destroy(){vcof.reset();vsub.reset();expr.reset();}void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _3195,    int _3196,    std::shared_ptr< monty::ndarray< int,1 > > _3197,    std::shared_ptr< monty::ndarray< int,1 > > _3198,    std::shared_ptr< monty::ndarray< double,1 > > _3199,    monty::rc_ptr< ::mosek::fusion::Expression > _3200,    int _3201){ return new mosek::fusion::ExprMulDiagRight(_3195,_3196,_3197,_3198,_3199,_3200,_3201); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _3195,    int _3196,    std::shared_ptr< monty::ndarray< int,1 > > _3197,    std::shared_ptr< monty::ndarray< int,1 > > _3198,    std::shared_ptr< monty::ndarray< double,1 > > _3199,    monty::rc_ptr< ::mosek::fusion::Expression > _3200,    int _3201) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_3195,_3196,_3197,_3198,_3199,_3200,_3201); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _3195,    int _3196,    std::shared_ptr< monty::ndarray< int,1 > > _3197,    std::shared_ptr< monty::ndarray< int,1 > > _3198,    std::shared_ptr< monty::ndarray< double,1 > > _3199,    monty::rc_ptr< ::mosek::fusion::Expression > _3200,    int _3201){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3197(_3197 ? _3197->raw() : nullptr, _3197 ? _3197->size(0) : 0);
    _checked_ptr_1<int> _ptr__3198(_3198 ? _3198->raw() : nullptr, _3198 ? _3198->size(0) : 0);
    _checked_ptr_1<double> _ptr__3199(_3199 ? _3199->raw() : nullptr, _3199 ? _3199->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3196)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _3195;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _3196;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _3197;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _3198;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _3199;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _3200;
  }
}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _3202,    int _3203,    std::shared_ptr< monty::ndarray< int,1 > > _3204,    std::shared_ptr< monty::ndarray< int,1 > > _3205,    std::shared_ptr< monty::ndarray< double,1 > > _3206,    monty::rc_ptr< ::mosek::fusion::Expression > _3207){ return new mosek::fusion::ExprMulDiagRight(_3202,_3203,_3204,_3205,_3206,_3207); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _3202,    int _3203,    std::shared_ptr< monty::ndarray< int,1 > > _3204,    std::shared_ptr< monty::ndarray< int,1 > > _3205,    std::shared_ptr< monty::ndarray< double,1 > > _3206,    monty::rc_ptr< ::mosek::fusion::Expression > _3207) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_3202,_3203,_3204,_3205,_3206,_3207); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _3202,    int _3203,    std::shared_ptr< monty::ndarray< int,1 > > _3204,    std::shared_ptr< monty::ndarray< int,1 > > _3205,    std::shared_ptr< monty::ndarray< double,1 > > _3206,    monty::rc_ptr< ::mosek::fusion::Expression > _3207){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3204(_3204 ? _3204->raw() : nullptr, _3204 ? _3204->size(0) : 0);
    _checked_ptr_1<int> _ptr__3205(_3205 ? _3205->raw() : nullptr, _3205 ? _3205->size(0) : 0);
    _checked_ptr_1<double> _ptr__3206(_3206 ? _3206->raw() : nullptr, _3206 ? _3206->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_3202,_3203,_3204,_3205,_3206,_3207,::mosek::fusion::p_ExprMulDiagRight::validate(_3202,_3203,_3204,_3205,_3206,_3207));
  }
}void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3208,monty::rc_ptr< ::mosek::fusion::WorkStack > _3209,monty::rc_ptr< ::mosek::fusion::WorkStack > _3210) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_3208,_3209,_3210); }void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3208,monty::rc_ptr< ::mosek::fusion::WorkStack > _3209,monty::rc_ptr< ::mosek::fusion::WorkStack > _3210){
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_3209,_3208,_3210);
  int _3211 = (int)0;
  int _3212 = (int)99999;
  int _3213 = (int)0;
  bool _3214 = (_3209->peeki32((int)5) != (int)0);
  if (_3214)
  {
    {
      _3213 = _3209->peeki32((int)2);
      _3212 = _3209->alloci32(safe_add( _3213,(int)1 ));
      _3211 += safe_add( _3213,(int)1 );
    }
  }
  {}
  int _3215 = (int)((mval)->size(0));
  int _3216 = _3209->alloci32(_3215);
  int _3217 = _3209->alloci32(safe_add( mdim1,(int)1 ));
  _3211 += safe_add( safe_add( _3215,mdim1 ),(int)1 );
  {
    std::shared_ptr< monty::ndarray< int,1 > > _3218 = mosek::fusion::p_WorkStack::_get_impl(_3209)->i32;
    _checked_ptr_1<int> _ptr__3218(_3218 ? _3218->raw() : nullptr,_3218 ? _3218->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _3219 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj;
    _checked_ptr_1<int> _ptr__3219(_3219 ? _3219->raw() : nullptr,_3219 ? _3219->size(0) : 0);
    {
      int _8348 = (int)0;
      int _8349 = safe_add( mdim1,(int)1 );
      for (int _3220 = _8348; _3220 < _8349; ++_3220)
      {
        {
          _ptr__3218[safe_add( _3217,_3220 )] = (int)0;
        }
      }
      int _8350 = (int)0;
      int _8351 = _3215;
      for (int _3221 = _8350; _3221 < _8351; ++_3221)
      {
        {
          ++ _ptr__3218[safe_add( safe_add( _3217,_ptr__3219[_3221] ),(int)1 )];
        }
      }
      int _8352 = (int)0;
      int _8353 = mdim1;
      for (int _3222 = _8352; _3222 < _8353; ++_3222)
      {
        {
          _ptr__3218[safe_add( safe_add( _3217,_3222 ),(int)1 )] += _ptr__3218[safe_add( _3217,_3222 )];
        }
      }
      int _8354 = (int)0;
      int _8355 = _3215;
      for (int _3223 = _8354; _3223 < _8355; ++_3223)
      {
        {
          _ptr__3218[safe_add( _3216,_ptr__3218[safe_add( _3217,_ptr__3219[_3223] )] )] = _3223;
          ++ _ptr__3218[safe_add( _3217,_ptr__3219[_3223] )];
        }
      }
      int _8356 = (int)0;
      int _8357 = mdim1;
      for (int _3224 = _8356; _3224 < _8357; ++_3224)
      {
        {
          _ptr__3218[(safe_add( _3217,mdim1 ) - _3224)] = _ptr__3218[((safe_add( _3217,mdim1 ) - _3224) - (int)1)];
        }
      }
      _ptr__3218[_3217] = (int)0;
    }
  }
  _3209->popi32(_3211);
  int _3225 = _3209->popi32();
  if ((_3225 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3226 = _3209->popi32();
  int _3227 = _3209->popi32();
  int _3228 = _3209->popi32();
  int _3229 = _3209->popi32();
  bool _3230 = (_3209->popi32() != (int)0);
  int _3231 = _3209->popi32(safe_add( _3228,(int)1 ));
  int _8358;
  bool _8359 = _3230;
  if (_8359)
  {
    _8358 = _3209->popi64(_3228);
  }
  else
  {
    _8358 = (int)9999;
  }
  int _3232 = _8358;
  int _3233 = _3209->popi64(_3229);
  int _3234 = _3209->popf64(_3228);
  int _3235 = _3209->popf64(_3229);
  std::shared_ptr< monty::ndarray< int,1 > > _3236 = mosek::fusion::p_WorkStack::_get_impl(_3209)->i32;
  _checked_ptr_1<int> _ptr__3236(_3236 ? _3236->raw() : nullptr,_3236 ? _3236->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3237 = mosek::fusion::p_WorkStack::_get_impl(_3209)->i64;
  _checked_ptr_1<long long> _ptr__3237(_3237 ? _3237->raw() : nullptr,_3237 ? _3237->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3238 = mosek::fusion::p_WorkStack::_get_impl(_3209)->f64;
  _checked_ptr_1<double> _ptr__3238(_3238 ? _3238->raw() : nullptr,_3238 ? _3238->size(0) : 0);
  if (_3230)
  {
    {
      int _8360 = (int)0;
      int _8361 = safe_add( _3227,(int)1 );
      for (int _3239 = _8360; _3239 < _8361; ++_3239)
      {
        {
          _ptr__3236[safe_add( _3212,_3239 )] = (int)0;
        }
      }
      int _8362 = (int)0;
      int _8363 = _3228;
      for (int _3240 = _8362; _3240 < _8363; ++_3240)
      {
        {
          ++ _ptr__3236[safe_add( safe_add( _3212,(_ptr__3237[safe_add( _3232,_3240 )] / _3226) ),(int)1 )];
        }
      }
      int _8364 = (int)0;
      int _8365 = _3227;
      for (int _3241 = _8364; _3241 < _8365; ++_3241)
      {
        {
          _ptr__3236[safe_add( safe_add( _3212,_3241 ),(int)1 )] += _ptr__3236[safe_add( _3212,_3241 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3242 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi;
      _checked_ptr_1<int> _ptr__3242(_3242 ? _3242->raw() : nullptr,_3242 ? _3242->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3243 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval;
      _checked_ptr_1<double> _ptr__3243(_3243 ? _3243->raw() : nullptr,_3243 ? _3243->size(0) : 0);
      int _3244 = (int)0;
      int _3245 = (int)0;
      {
        int _8366 = (int)0;
        int _8367 = _3227;
        for (int _3246 = _8366; _3246 < _8367; ++_3246)
        {
          {
            int _3247 = _ptr__3236[safe_add( safe_add( _3217,_3246 ),(int)1 )];
            int _3248 = _ptr__3236[safe_add( _3217,_3246 )];
            int _3249 = _ptr__3236[safe_add( safe_add( _3212,_3246 ),(int)1 )];
            int _3250 = _ptr__3236[safe_add( _3212,_3246 )];
            bool _3251 = false;
            while ( ((_3250 < _3249) && (_3248 < _3247)) )
            {
              {
                int _3252 = _ptr__3236[safe_add( _3216,_3248 )];
                long long _3253 = (_ptr__3237[safe_add( _3232,_3250 )] % _3226);
                if ((_ptr__3242[_3252] < _3253))
                {
                  {
                    ++ _3248;
                  }
                }
                else if((_ptr__3242[_3252] > _3253))
                {
                  {
                    ++ _3250;
                  }
                }
                else
                {
                  {
                    _3251 = true;
                    _3244 += (_ptr__3236[safe_add( safe_add( _3231,_3250 ),(int)1 )] - _ptr__3236[safe_add( _3231,_3250 )]);
                    ++ _3250;
                    ++ _3248;
                  }
                }
              }
            }
            if (_3251)
            {
              {
                ++ _3245;
              }
            }
            {}
          }
        }
      }
      bool _3254 = (_3245 < _3227);
      int _3255 = _3208->alloci32(safe_add( _3245,(int)1 ));
      int _3256 = _3208->alloci64(_3244);
      int _3257 = _3208->alloci64(_3245);
      int _3258 = _3208->allocf64(_3244);
      int _3259 = _3208->allocf64(_3245);
      int _8368;
      bool _8369 = _3254;
      if (_8369)
      {
        _8368 = (int)1;
      }
      else
      {
        _8368 = (int)0;
      }
      _3208->pushi32(_8368);
      _3208->pushi32(_3244);
      _3208->pushi32(_3245);
      _3208->pushi32(_3227);
      _3208->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3260 = mosek::fusion::p_WorkStack::_get_impl(_3208)->i32;
      _checked_ptr_1<int> _ptr__3260(_3260 ? _3260->raw() : nullptr,_3260 ? _3260->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3261 = mosek::fusion::p_WorkStack::_get_impl(_3208)->i64;
      _checked_ptr_1<long long> _ptr__3261(_3261 ? _3261->raw() : nullptr,_3261 ? _3261->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3262 = mosek::fusion::p_WorkStack::_get_impl(_3208)->f64;
      _checked_ptr_1<double> _ptr__3262(_3262 ? _3262->raw() : nullptr,_3262 ? _3262->size(0) : 0);
      {
        int _3263 = (int)0;
        int _3264 = (int)0;
        _ptr__3260[_3255] = (int)0;
        int _8370 = (int)0;
        int _8371 = _3227;
        for (int _3265 = _8370; _3265 < _8371; ++_3265)
        {
          {
            int _3266 = _ptr__3236[safe_add( safe_add( _3217,_3265 ),(int)1 )];
            int _3267 = _ptr__3236[safe_add( _3217,_3265 )];
            int _3268 = _ptr__3236[safe_add( safe_add( _3212,_3265 ),(int)1 )];
            int _3269 = _ptr__3236[safe_add( _3212,_3265 )];
            bool _3270 = false;
            double _3271 = 0.0;
            while ( ((_3269 < _3268) && (_3267 < _3266)) )
            {
              {
                int _3272 = _ptr__3236[safe_add( _3216,_3267 )];
                long long _3273 = (_ptr__3237[safe_add( _3232,_3269 )] % _3226);
                if ((_ptr__3242[_3272] < _3273))
                {
                  {
                    ++ _3267;
                  }
                }
                else if((_ptr__3242[_3272] > _3273))
                {
                  {
                    ++ _3269;
                  }
                }
                else
                {
                  {
                    _3270 = true;
                    int _8372 = _ptr__3236[safe_add( _3231,_3269 )];
                    int _8373 = _ptr__3236[safe_add( safe_add( _3231,_3269 ),(int)1 )];
                    for (int _3274 = _8372; _3274 < _8373; ++_3274)
                    {
                      {
                        _ptr__3261[safe_add( _3256,_3264 )] = _ptr__3237[safe_add( _3233,_3274 )];
                        _ptr__3262[safe_add( _3258,_3264 )] = (_ptr__3238[safe_add( _3235,_3274 )] * _ptr__3243[_3272]);
                        ++ _3264;
                      }
                    }
                    _3271 += (_ptr__3238[safe_add( _3234,_3269 )] * _ptr__3243[_3272]);
                    ++ _3269;
                    ++ _3267;
                  }
                }
              }
            }
            if (_3270)
            {
              {
                _ptr__3260[safe_add( safe_add( _3255,_3263 ),(int)1 )] = _3264;
                _ptr__3261[safe_add( _3257,_3263 )] = _3265;
                _ptr__3262[safe_add( _3259,_3263 )] = _3271;
                ++ _3263;
              }
            }
            {}
          }
        }
      }
      if ((!_3254))
      {
        {
          _3208->popi64(_3245);
        }
      }
      {}
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _3275 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi;
      _checked_ptr_1<int> _ptr__3275(_3275 ? _3275->raw() : nullptr,_3275 ? _3275->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3276 = mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval;
      _checked_ptr_1<double> _ptr__3276(_3276 ? _3276->raw() : nullptr,_3276 ? _3276->size(0) : 0);
      int _3277 = (int)0;
      int _3278 = (int)0;
      {
        int _8374 = (int)0;
        int _8375 = _3227;
        for (int _3279 = _8374; _3279 < _8375; ++_3279)
        {
          {
            bool _3280 = false;
            int _8376 = _ptr__3236[safe_add( _3217,_3279 )];
            int _8377 = _ptr__3236[safe_add( safe_add( _3217,_3279 ),(int)1 )];
            for (int _3281 = _8376; _3281 < _8377; ++_3281)
            {
              {
                int _3282 = _ptr__3236[safe_add( _3216,_3281 )];
                int _3283 = safe_add( safe_mul( _3279,_3226 ),_ptr__3275[_3282] );
                _3278 += (_ptr__3236[safe_add( safe_add( _3231,_3283 ),(int)1 )] - _ptr__3236[safe_add( _3231,_3283 )]);
                if ((_ptr__3236[safe_add( safe_add( _3231,_3283 ),(int)1 )] > _ptr__3236[safe_add( _3231,_3283 )]))
                {
                  {
                    _3280 = true;
                  }
                }
                {}
              }
            }
            if (_3280)
            {
              {
                ++ _3277;
              }
            }
            {}
          }
        }
      }
      bool _3284 = (_3277 < _3227);
      int _3285 = _3208->alloci32(safe_add( _3277,(int)1 ));
      int _3286 = _3208->alloci64(_3278);
      int _3287 = _3208->alloci64(_3277);
      int _3288 = _3208->allocf64(_3278);
      int _3289 = _3208->allocf64(_3277);
      int _8378;
      bool _8379 = _3284;
      if (_8379)
      {
        _8378 = (int)1;
      }
      else
      {
        _8378 = (int)0;
      }
      _3208->pushi32(_8378);
      _3208->pushi32(_3278);
      _3208->pushi32(_3277);
      _3208->pushi32(_3227);
      _3208->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3290 = mosek::fusion::p_WorkStack::_get_impl(_3208)->i32;
      _checked_ptr_1<int> _ptr__3290(_3290 ? _3290->raw() : nullptr,_3290 ? _3290->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3291 = mosek::fusion::p_WorkStack::_get_impl(_3208)->i64;
      _checked_ptr_1<long long> _ptr__3291(_3291 ? _3291->raw() : nullptr,_3291 ? _3291->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3292 = mosek::fusion::p_WorkStack::_get_impl(_3208)->f64;
      _checked_ptr_1<double> _ptr__3292(_3292 ? _3292->raw() : nullptr,_3292 ? _3292->size(0) : 0);
      {
        int _3293 = (int)0;
        int _3294 = (int)0;
        _ptr__3290[_3285] = (int)0;
        int _8380 = (int)0;
        int _8381 = _3227;
        for (int _3295 = _8380; _3295 < _8381; ++_3295)
        {
          {
            bool _3296 = false;
            double _3297 = 0.0;
            int _8382 = _ptr__3236[safe_add( _3217,_3295 )];
            int _8383 = _ptr__3236[safe_add( safe_add( _3217,_3295 ),(int)1 )];
            for (int _3298 = _8382; _3298 < _8383; ++_3298)
            {
              {
                int _3299 = _ptr__3236[safe_add( _3216,_3298 )];
                int _3300 = safe_add( safe_mul( _3295,_3226 ),_ptr__3275[_3299] );
                int _8384 = _ptr__3236[safe_add( _3231,_3300 )];
                int _8385 = _ptr__3236[safe_add( safe_add( _3231,_3300 ),(int)1 )];
                for (int _3301 = _8384; _3301 < _8385; ++_3301)
                {
                  {
                    _3296 = true;
                    _ptr__3291[safe_add( _3286,_3294 )] = _ptr__3237[safe_add( _3233,_3301 )];
                    _ptr__3292[safe_add( _3288,_3294 )] = (_ptr__3238[safe_add( _3235,_3301 )] * _ptr__3276[_3299]);
                    ++ _3294;
                  }
                }
                _3297 += (_ptr__3238[safe_add( _3234,_3300 )] * _ptr__3276[_3299]);
              }
            }
            if (_3296)
            {
              {
                _ptr__3292[safe_add( _3289,_3293 )] = _3297;
                _ptr__3291[safe_add( _3287,_3293 )] = _3295;
                _ptr__3290[safe_add( safe_add( _3285,_3293 ),(int)1 )] = _3294;
                ++ _3293;
              }
            }
            {}
          }
        }
      }
      if ((!_3284))
      {
        {
          _3208->popi64(_3277);
        }
      }
      {}
    }
  }
}
int mosek::fusion::p_ExprMulDiagRight::validate(int _3302,int _3303,std::shared_ptr< monty::ndarray< int,1 > > _3304,std::shared_ptr< monty::ndarray< int,1 > > _3305,std::shared_ptr< monty::ndarray< double,1 > > _3306,monty::rc_ptr< ::mosek::fusion::Expression > _3307){
  _checked_ptr_1<int> _ptr__3304(_3304 ? _3304->raw() : nullptr, _3304 ? _3304->size(0) : 0);
  _checked_ptr_1<int> _ptr__3305(_3305 ? _3305->raw() : nullptr, _3305 ? _3305->size(0) : 0);
  _checked_ptr_1<double> _ptr__3306(_3306 ? _3306->raw() : nullptr, _3306 ? _3306->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3308 = _3307->getShape();
  _checked_ptr_1<int> _ptr__3308(_3308 ? _3308->raw() : nullptr,_3308 ? _3308->size(0) : 0);
  if (((int)((_3308)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3309 = _ptr__3308[(int)0];
  int _3310 = _ptr__3308[(int)1];
  if (((_3302 < (int)0) || ((_3303 < (int)0) || ((_3309 < (int)0) || (_3310 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3302 != _3310) || (_3303 != _3309)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3304)->size(0)) != (int)((_3305)->size(0))) || ((int)((_3304)->size(0)) != (int)((_3306)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3311 = (int)((_3304)->size(0));
  int _8386 = (int)0;
  int _8387 = _3311;
  for (int _3312 = _8386; _3312 < _8387; ++_3312)
  {
    {
      if (((_ptr__3304[_3312] < (int)0) || ((_ptr__3304[_3312] >= _3302) || ((_ptr__3305[_3312] < (int)0) || (_ptr__3305[_3312] >= _3303)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
        }
      }
      {}
    }
  }
  int _8388 = (int)0;
  int _8389 = (_3311 - (int)1);
  for (int _3313 = _8388; _3313 < _8389; ++_3313)
  {
    {
      if (((_ptr__3304[_3313] > _ptr__3304[safe_add( _3313,(int)1 )]) || ((_ptr__3304[_3313] == _ptr__3304[safe_add( _3313,(int)1 )]) && (_ptr__3305[_3313] >= _ptr__3305[safe_add( _3313,(int)1 )]))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
        }
      }
      {}
    }
  }
  int _8390 = (int)0;
  int _8391 = _3311;
  for (int _3314 = _8390; _3314 < _8391; ++_3314)
  {
    {
      if (((_ptr__3304[_3314] < (int)0) || ((_ptr__3304[_3314] >= _3302) || ((_ptr__3305[_3314] < (int)0) || (_ptr__3305[_3314] >= _3303)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
        }
      }
      {}
    }
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagRight::toString(){
  return std::string ("ExprMulDiagRight()");
}
void mosek::fusion::p_ExprMulDiagRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _3315,    int _3316,    std::shared_ptr< monty::ndarray< int,1 > > _3317,    std::shared_ptr< monty::ndarray< int,1 > > _3318,    std::shared_ptr< monty::ndarray< double,1 > > _3319,    monty::rc_ptr< ::mosek::fusion::Expression > _3320,    int _3321){ return new mosek::fusion::ExprMulDiagLeft(_3315,_3316,_3317,_3318,_3319,_3320,_3321); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _3315,    int _3316,    std::shared_ptr< monty::ndarray< int,1 > > _3317,    std::shared_ptr< monty::ndarray< int,1 > > _3318,    std::shared_ptr< monty::ndarray< double,1 > > _3319,    monty::rc_ptr< ::mosek::fusion::Expression > _3320,    int _3321) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_3315,_3316,_3317,_3318,_3319,_3320,_3321); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _3315,    int _3316,    std::shared_ptr< monty::ndarray< int,1 > > _3317,    std::shared_ptr< monty::ndarray< int,1 > > _3318,    std::shared_ptr< monty::ndarray< double,1 > > _3319,    monty::rc_ptr< ::mosek::fusion::Expression > _3320,    int _3321){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3317(_3317 ? _3317->raw() : nullptr, _3317 ? _3317->size(0) : 0);
    _checked_ptr_1<int> _ptr__3318(_3318 ? _3318->raw() : nullptr, _3318 ? _3318->size(0) : 0);
    _checked_ptr_1<double> _ptr__3319(_3319 ? _3319->raw() : nullptr, _3319 ? _3319->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3315)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _3315;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _3316;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _3317;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _3318;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _3319;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _3320;
  }
}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _3322,    int _3323,    std::shared_ptr< monty::ndarray< int,1 > > _3324,    std::shared_ptr< monty::ndarray< int,1 > > _3325,    std::shared_ptr< monty::ndarray< double,1 > > _3326,    monty::rc_ptr< ::mosek::fusion::Expression > _3327){ return new mosek::fusion::ExprMulDiagLeft(_3322,_3323,_3324,_3325,_3326,_3327); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _3322,    int _3323,    std::shared_ptr< monty::ndarray< int,1 > > _3324,    std::shared_ptr< monty::ndarray< int,1 > > _3325,    std::shared_ptr< monty::ndarray< double,1 > > _3326,    monty::rc_ptr< ::mosek::fusion::Expression > _3327) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_3322,_3323,_3324,_3325,_3326,_3327); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _3322,    int _3323,    std::shared_ptr< monty::ndarray< int,1 > > _3324,    std::shared_ptr< monty::ndarray< int,1 > > _3325,    std::shared_ptr< monty::ndarray< double,1 > > _3326,    monty::rc_ptr< ::mosek::fusion::Expression > _3327){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3324(_3324 ? _3324->raw() : nullptr, _3324 ? _3324->size(0) : 0);
    _checked_ptr_1<int> _ptr__3325(_3325 ? _3325->raw() : nullptr, _3325 ? _3325->size(0) : 0);
    _checked_ptr_1<double> _ptr__3326(_3326 ? _3326->raw() : nullptr, _3326 ? _3326->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_3322,_3323,_3324,_3325,_3326,_3327,::mosek::fusion::p_ExprMulDiagLeft::validate(_3322,_3323,_3324,_3325,_3326,_3327));
  }
}void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3328,monty::rc_ptr< ::mosek::fusion::WorkStack > _3329,monty::rc_ptr< ::mosek::fusion::WorkStack > _3330) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_3328,_3329,_3330); }void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3328,monty::rc_ptr< ::mosek::fusion::WorkStack > _3329,monty::rc_ptr< ::mosek::fusion::WorkStack > _3330){
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_3329,_3328,_3330);
  if ((_3329->peeki32() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3331 = (int)((msubi)->size(0));
  int _3332 = (int)9999;
  int _3333 = (int)9999;
  int _3334 = (int)0;
  int _3335 = _3329->peeki32((int)5);
  if ((_3335 != (int)0))
  {
    {
      int _3336 = _3329->peeki32((int)1);
      int _3337 = _3329->peeki32((int)3);
      _3332 = _3329->alloci32(safe_add( _3336,(int)1 ));
      _3333 = _3329->alloci32(_3337);
      _3334 += safe_add( safe_add( _3337,_3336 ),(int)1 );
    }
  }
  {}
  int _3338 = _3329->alloci32(safe_add( mdim0,(int)1 ));
  _3334 += safe_add( mdim0,(int)1 );
  _3329->popi32(_3334);
  std::shared_ptr< monty::ndarray< int,1 > > _3339 = mosek::fusion::p_WorkStack::_get_impl(_3329)->i32;
  _checked_ptr_1<int> _ptr__3339(_3339 ? _3339->raw() : nullptr,_3339 ? _3339->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3340 = mosek::fusion::p_WorkStack::_get_impl(_3329)->i64;
  _checked_ptr_1<long long> _ptr__3340(_3340 ? _3340->raw() : nullptr,_3340 ? _3340->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3341 = mosek::fusion::p_WorkStack::_get_impl(_3329)->f64;
  _checked_ptr_1<double> _ptr__3341(_3341 ? _3341->raw() : nullptr,_3341 ? _3341->size(0) : 0);
  int _8392 = (int)0;
  int _8393 = safe_add( mdim0,(int)1 );
  for (int _3342 = _8392; _3342 < _8393; ++_3342)
  {
    {
      _ptr__3339[safe_add( _3338,_3342 )] = (int)0;
    }
  }
  int _8394 = (int)0;
  int _8395 = _3331;
  for (int _3343 = _8394; _3343 < _8395; ++_3343)
  {
    {
      ++ _ptr__3339[safe_add( safe_add( _3338,((*msubi)(_3343)) ),(int)1 )];
    }
  }
  int _8396 = (int)0;
  int _8397 = mdim0;
  for (int _3344 = _8396; _3344 < _8397; ++_3344)
  {
    {
      _ptr__3339[safe_add( safe_add( _3338,_3344 ),(int)1 )] += _ptr__3339[safe_add( _3338,_3344 )];
    }
  }
  int _3345 = _3329->popi32();
  int _3346 = _3329->popi32();
  int _3347 = _3329->popi32();
  int _3348 = _3329->popi32();
  int _3349 = _3329->popi32();
  bool _3350 = (_3329->popi32() != (int)0);
  int _3351 = _3329->popi32(safe_add( _3348,(int)1 ));
  int _8398;
  bool _8399 = _3350;
  if (_8399)
  {
    _8398 = _3329->popi64(_3348);
  }
  else
  {
    _8398 = (int)9999;
  }
  int _3352 = _8398;
  int _3353 = _3329->popi64(_3349);
  int _3354 = _3329->popf64(_3348);
  int _3355 = _3329->popf64(_3349);
  if ((!_3350))
  {
    {
      int _3356 = (int)((msubi)->size(0));
      int _3357 = (int)0;
      int _8400 = (int)0;
      int _8401 = mdim0;
      for (int _3358 = _8400; _3358 < _8401; ++_3358)
      {
        {
          if ((_ptr__3339[safe_add( _3338,_3358 )] < _ptr__3339[safe_add( safe_add( _3338,_3358 ),(int)1 )]))
          {
            {
              ++ _3357;
            }
          }
          {}
        }
      }
      bool _3359 = (_3357 < mdim0);
      int _3360 = _3328->alloci32(safe_add( _3357,(int)1 ));
      int _3361 = _3328->alloci64(_3356);
      int _3362 = _3328->alloci64(_3357);
      int _3363 = _3328->allocf64(_3356);
      int _3364 = _3328->allocf64(_3357);
      int _8402;
      bool _8403 = _3359;
      if (_8403)
      {
        _8402 = (int)1;
      }
      else
      {
        _8402 = (int)0;
      }
      _3328->pushi32(_8402);
      _3328->pushi32(_3356);
      _3328->pushi32(_3357);
      _3328->pushi32(mdim0);
      _3328->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3365 = mosek::fusion::p_WorkStack::_get_impl(_3328)->i32;
      _checked_ptr_1<int> _ptr__3365(_3365 ? _3365->raw() : nullptr,_3365 ? _3365->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3366 = mosek::fusion::p_WorkStack::_get_impl(_3328)->i64;
      _checked_ptr_1<long long> _ptr__3366(_3366 ? _3366->raw() : nullptr,_3366 ? _3366->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3367 = mosek::fusion::p_WorkStack::_get_impl(_3328)->f64;
      _checked_ptr_1<double> _ptr__3367(_3367 ? _3367->raw() : nullptr,_3367 ? _3367->size(0) : 0);
      {
        _ptr__3365[_3360] = (int)0;
        int _3368 = (int)0;
        int _3369 = (int)0;
        int _8404 = (int)0;
        int _8405 = mdim0;
        for (int _3370 = _8404; _3370 < _8405; ++_3370)
        {
          {
            if ((_ptr__3339[safe_add( _3338,_3370 )] < _ptr__3339[safe_add( safe_add( _3338,_3370 ),(int)1 )]))
            {
              {
                int _3371 = (int)0;
                int _8406 = _ptr__3339[safe_add( _3338,_3370 )];
                int _8407 = _ptr__3339[safe_add( safe_add( _3338,_3370 ),(int)1 )];
                for (int _3372 = _8406; _3372 < _8407; ++_3372)
                {
                  {
                    int _3373 = ((*msubj)(_3372));
                    int _3374 = safe_add( safe_mul( _3373,_3346 ),_3370 );
                    int _8408 = _ptr__3339[safe_add( _3351,_3374 )];
                    int _8409 = _ptr__3339[safe_add( safe_add( _3351,_3374 ),(int)1 )];
                    for (int _3375 = _8408; _3375 < _8409; ++_3375)
                    {
                      {
                        _ptr__3366[safe_add( _3361,_3369 )] = _ptr__3340[safe_add( _3353,_3375 )];
                        _ptr__3367[safe_add( _3363,_3369 )] = (_ptr__3341[safe_add( _3355,_3375 )] * ((*mval)(_3372)));
                        ++ _3369;
                      }
                    }
                  }
                }
                _ptr__3367[safe_add( _3364,_3368 )] = _3371;
                _ptr__3366[safe_add( _3362,_3368 )] = _3370;
                _ptr__3365[safe_add( safe_add( _3360,_3368 ),(int)1 )] = _3369;
                ++ _3368;
              }
            }
            {}
          }
        }
      }
      if ((!_3359))
      {
        {
          _3328->popi64(_3357);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _8410 = (int)0;
      int _8411 = safe_add( _3346,(int)1 );
      for (int _3376 = _8410; _3376 < _8411; ++_3376)
      {
        {
          _ptr__3339[safe_add( _3332,_3376 )] = (int)0;
        }
      }
      int _8412 = (int)0;
      int _8413 = _3348;
      for (int _3377 = _8412; _3377 < _8413; ++_3377)
      {
        {
          ++ _ptr__3339[safe_add( safe_add( _3332,(_ptr__3340[safe_add( _3352,_3377 )] % _3346) ),(int)1 )];
        }
      }
      int _8414 = (int)0;
      int _8415 = _3346;
      for (int _3378 = _8414; _3378 < _8415; ++_3378)
      {
        {
          _ptr__3339[safe_add( safe_add( _3332,_3378 ),(int)1 )] += _ptr__3339[safe_add( _3332,_3378 )];
        }
      }
      int _8416 = (int)0;
      int _8417 = _3348;
      for (int _3379 = _8416; _3379 < _8417; ++_3379)
      {
        {
          long long _3380 = (_ptr__3340[safe_add( _3352,_3379 )] % _3346);
          _ptr__3339[safe_add( _3333,_ptr__3339[safe_add( _3332,_3380 )] )] = _3379;
          ++ _ptr__3339[safe_add( _3332,_3380 )];
        }
      }
      int _8418 = (int)0;
      int _8419 = _3346;
      for (int _3381 = _8418; _3381 < _8419; ++_3381)
      {
        {
          _ptr__3339[(safe_add( _3332,_3346 ) - _3381)] = _ptr__3339[((safe_add( _3332,_3346 ) - _3381) - (int)1)];
        }
      }
      _ptr__3339[_3332] = (int)0;
      int _3382 = (int)0;
      int _3383 = (int)0;
      {
        int _8420 = (int)0;
        int _8421 = mdim0;
        for (int _3384 = _8420; _3384 < _8421; ++_3384)
        {
          {
            int _3385 = _ptr__3339[safe_add( safe_add( _3332,_3384 ),(int)1 )];
            int _3386 = _ptr__3339[safe_add( _3332,_3384 )];
            int _3387 = _ptr__3339[safe_add( safe_add( _3338,_3384 ),(int)1 )];
            int _3388 = _ptr__3339[safe_add( _3338,_3384 )];
            bool _3389 = false;
            while ( ((_3388 < _3387) && (_3386 < _3385)) )
            {
              {
                int _3390 = _ptr__3339[safe_add( _3333,_3386 )];
                long long _3391 = (_ptr__3340[safe_add( _3352,_3390 )] / _3346);
                if ((((*msubj)(_3388)) < _3391))
                {
                  {
                    ++ _3388;
                  }
                }
                else if((((*msubj)(_3388)) > _3391))
                {
                  {
                    ++ _3386;
                  }
                }
                else
                {
                  {
                    _3389 = true;
                    _3383 += (_ptr__3339[safe_add( safe_add( _3351,_3390 ),(int)1 )] - _ptr__3339[safe_add( _3351,_3390 )]);
                    ++ _3388;
                    ++ _3386;
                  }
                }
              }
            }
            if (_3389)
            {
              {
                ++ _3382;
              }
            }
            {}
          }
        }
      }
      int _3392 = _3382;
      int _3393 = _3383;
      bool _3394 = (_3392 < mdim0);
      int _3395 = _3328->alloci32(safe_add( _3392,(int)1 ));
      int _3396 = _3328->alloci64(_3393);
      int _3397 = _3328->alloci64(_3392);
      int _3398 = _3328->allocf64(_3393);
      int _3399 = _3328->allocf64(_3392);
      int _8422;
      bool _8423 = _3394;
      if (_8423)
      {
        _8422 = (int)1;
      }
      else
      {
        _8422 = (int)0;
      }
      _3328->pushi32(_8422);
      _3328->pushi32(_3393);
      _3328->pushi32(_3392);
      _3328->pushi32(mdim0);
      _3328->pushi32((int)1);
      std::shared_ptr< monty::ndarray< int,1 > > _3400 = mosek::fusion::p_WorkStack::_get_impl(_3328)->i32;
      _checked_ptr_1<int> _ptr__3400(_3400 ? _3400->raw() : nullptr,_3400 ? _3400->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3401 = mosek::fusion::p_WorkStack::_get_impl(_3328)->i64;
      _checked_ptr_1<long long> _ptr__3401(_3401 ? _3401->raw() : nullptr,_3401 ? _3401->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3402 = mosek::fusion::p_WorkStack::_get_impl(_3328)->f64;
      _checked_ptr_1<double> _ptr__3402(_3402 ? _3402->raw() : nullptr,_3402 ? _3402->size(0) : 0);
      {
        _ptr__3400[_3395] = (int)0;
        int _3403 = (int)0;
        int _3404 = (int)0;
        int _8424 = (int)0;
        int _8425 = mdim0;
        for (int _3405 = _8424; _3405 < _8425; ++_3405)
        {
          {
            int _3406 = _ptr__3339[safe_add( safe_add( _3332,_3405 ),(int)1 )];
            int _3407 = _ptr__3339[safe_add( _3332,_3405 )];
            int _3408 = _ptr__3339[safe_add( safe_add( _3338,_3405 ),(int)1 )];
            int _3409 = _ptr__3339[safe_add( _3338,_3405 )];
            bool _3410 = false;
            double _3411 = 0.0;
            while ( ((_3409 < _3408) && (_3407 < _3406)) )
            {
              {
                int _3412 = _ptr__3339[safe_add( _3333,_3407 )];
                long long _3413 = (_ptr__3340[safe_add( _3352,_3412 )] / _3346);
                if ((((*msubj)(_3409)) < _3413))
                {
                  {
                    ++ _3409;
                  }
                }
                else if((((*msubj)(_3409)) > _3413))
                {
                  {
                    ++ _3407;
                  }
                }
                else
                {
                  {
                    _3410 = true;
                    int _8426 = _ptr__3339[safe_add( _3351,_3412 )];
                    int _8427 = _ptr__3339[safe_add( safe_add( _3351,_3412 ),(int)1 )];
                    for (int _3414 = _8426; _3414 < _8427; ++_3414)
                    {
                      {
                        _ptr__3401[safe_add( _3396,_3404 )] = _ptr__3340[safe_add( _3353,_3414 )];
                        _ptr__3402[safe_add( _3398,_3404 )] = (_ptr__3341[safe_add( _3355,_3414 )] * ((*mval)(_3409)));
                        ++ _3404;
                      }
                    }
                    _3411 += _ptr__3341[safe_add( _3354,_3412 )];
                    ++ _3409;
                    ++ _3407;
                  }
                }
              }
            }
            if (_3410)
            {
              {
                _ptr__3401[safe_add( _3397,_3403 )] = _3405;
                _ptr__3402[safe_add( _3399,_3403 )] = (_3411 * ((*mval)(_3409)));
                _ptr__3400[safe_add( safe_add( _3395,_3403 ),(int)1 )] = _3404;
                ++ _3403;
              }
            }
            {}
          }
        }
      }
      if ((!_3394))
      {
        {
          _3328->popi64(_3392);
        }
      }
      {}
    }
  }
}
int mosek::fusion::p_ExprMulDiagLeft::validate(int _3415,int _3416,std::shared_ptr< monty::ndarray< int,1 > > _3417,std::shared_ptr< monty::ndarray< int,1 > > _3418,std::shared_ptr< monty::ndarray< double,1 > > _3419,monty::rc_ptr< ::mosek::fusion::Expression > _3420){
  _checked_ptr_1<int> _ptr__3417(_3417 ? _3417->raw() : nullptr, _3417 ? _3417->size(0) : 0);
  _checked_ptr_1<int> _ptr__3418(_3418 ? _3418->raw() : nullptr, _3418 ? _3418->size(0) : 0);
  _checked_ptr_1<double> _ptr__3419(_3419 ? _3419->raw() : nullptr, _3419 ? _3419->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3421 = _3420->getShape();
  _checked_ptr_1<int> _ptr__3421(_3421 ? _3421->raw() : nullptr,_3421 ? _3421->size(0) : 0);
  if (((int)((_3421)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3422 = _ptr__3421[(int)0];
  int _3423 = _ptr__3421[(int)1];
  if (((_3415 < (int)0) || (_3416 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3416 != _3422) || (_3415 != _3423)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3417)->size(0)) != (int)((_3418)->size(0))) || ((int)((_3417)->size(0)) != (int)((_3419)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3424 = (int)((_3417)->size(0));
  int _8428 = (int)0;
  int _8429 = _3424;
  for (int _3425 = _8428; _3425 < _8429; ++_3425)
  {
    {
      if (((_ptr__3417[_3425] < (int)0) || ((_ptr__3417[_3425] >= _3415) || ((_ptr__3418[_3425] < (int)0) || (_ptr__3418[_3425] >= _3416)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
        }
      }
      {}
    }
  }
  int _8430 = (int)0;
  int _8431 = (_3424 - (int)1);
  for (int _3426 = _8430; _3426 < _8431; ++_3426)
  {
    {
      if (((_ptr__3417[_3426] > _ptr__3417[safe_add( _3426,(int)1 )]) || ((_ptr__3417[_3426] == _ptr__3417[safe_add( _3426,(int)1 )]) && (_ptr__3418[_3426] >= _ptr__3418[safe_add( _3426,(int)1 )]))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
        }
      }
      {}
    }
  }
  int _8432 = (int)0;
  int _8433 = _3424;
  for (int _3427 = _8432; _3427 < _8433; ++_3427)
  {
    {
      if (((_ptr__3417[_3427] < (int)0) || ((_ptr__3417[_3427] >= _3415) || ((_ptr__3418[_3427] < (int)0) || (_ptr__3418[_3427] >= _3416)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
        }
      }
      {}
    }
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagLeft::toString(){
  return std::string ("ExprMulDiagLeft()");
}
void mosek::fusion::p_ExprMulDiagLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulElement::p_ExprMulElement  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3428,    std::shared_ptr< monty::ndarray< long long,1 > > _3429,    monty::rc_ptr< ::mosek::fusion::Expression > _3430){ return new mosek::fusion::ExprMulElement(_3428,_3429,_3430); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3428,    std::shared_ptr< monty::ndarray< long long,1 > > _3429,    monty::rc_ptr< ::mosek::fusion::Expression > _3430) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_3428,_3429,_3430); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _3428,    std::shared_ptr< monty::ndarray< long long,1 > > _3429,    monty::rc_ptr< ::mosek::fusion::Expression > _3430){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3428(_3428 ? _3428->raw() : nullptr, _3428 ? _3428->size(0) : 0);
    _checked_ptr_1<long long> _ptr__3429(_3429 ? _3429->raw() : nullptr, _3429 ? _3429->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_3428,_3429,_3430,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _3431 = _3430->getShape();
    _checked_ptr_1<int> _ptr__3431(_3431 ? _3431->raw() : nullptr,_3431 ? _3431->size(0) : 0);
    if (((int)((_3428)->size(0)) != (int)((_3429)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    long long _3432 = ::mosek::fusion::p_Set::size(_3431);
    int _8434 = (int)0;
    int _8435 = (int)((_3429)->size(0));
    for (int _3433 = _8434; _3433 < _8435; ++_3433)
    {
      {
        if (((_ptr__3429[_3433] < (int)0) || (_ptr__3429[_3433] >= _3432)))
        {
          {
            throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
          }
        }
        {}
      }
    }
    int _8436 = (int)0;
    int _8437 = ((int)((_3429)->size(0)) - (int)1);
    for (int _3434 = _8436; _3434 < _8437; ++_3434)
    {
      {
        if ((_ptr__3429[_3434] >= _ptr__3429[safe_add( _3434,(int)1 )]))
        {
          {
            throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3435,    std::shared_ptr< monty::ndarray< long long,1 > > _3436,    monty::rc_ptr< ::mosek::fusion::Expression > _3437,    int _3438){ return new mosek::fusion::ExprMulElement(_3435,_3436,_3437,_3438); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _3435,    std::shared_ptr< monty::ndarray< long long,1 > > _3436,    monty::rc_ptr< ::mosek::fusion::Expression > _3437,    int _3438) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_3435,_3436,_3437,_3438); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _3435,    std::shared_ptr< monty::ndarray< long long,1 > > _3436,    monty::rc_ptr< ::mosek::fusion::Expression > _3437,    int _3438){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__3435(_3435 ? _3435->raw() : nullptr, _3435 ? _3435->size(0) : 0);
    _checked_ptr_1<long long> _ptr__3436(_3436 ? _3436->raw() : nullptr, _3436 ? _3436->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_3437->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _3437;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _3435;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _3436;
  }
}void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3439,monty::rc_ptr< ::mosek::fusion::WorkStack > _3440,monty::rc_ptr< ::mosek::fusion::WorkStack > _3441) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_3439,_3440,_3441); }void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3439,monty::rc_ptr< ::mosek::fusion::WorkStack > _3440,monty::rc_ptr< ::mosek::fusion::WorkStack > _3441){
  expr->eval(_3440,_3439,_3441);
  int _3442 = _3440->popi32();
  int _3443 = _3440->popi32(_3442);
  int _3444 = _3440->popi32();
  int _3445 = _3440->popi32();
  bool _3446 = (_3440->popi32() != (int)0);
  int _3447 = _3440->popi32(safe_add( _3444,(int)1 ));
  int _8438;
  bool _8439 = _3446;
  if (_8439)
  {
    _8438 = _3440->popi64(_3444);
  }
  else
  {
    _8438 = (-(int)1);
  }
  int _3448 = _8438;
  int _3449 = _3440->popi64(_3445);
  int _3450 = _3440->popf64(_3444);
  int _3451 = _3440->popf64(_3445);
  std::shared_ptr< monty::ndarray< int,1 > > _3452 = mosek::fusion::p_WorkStack::_get_impl(_3440)->i32;
  _checked_ptr_1<int> _ptr__3452(_3452 ? _3452->raw() : nullptr,_3452 ? _3452->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3453 = mosek::fusion::p_WorkStack::_get_impl(_3440)->i64;
  _checked_ptr_1<long long> _ptr__3453(_3453 ? _3453->raw() : nullptr,_3453 ? _3453->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3454 = mosek::fusion::p_WorkStack::_get_impl(_3440)->f64;
  _checked_ptr_1<double> _ptr__3454(_3454 ? _3454->raw() : nullptr,_3454 ? _3454->size(0) : 0);
  int _3455 = (int)0;
  int _3456 = (int)0;
  if ((!_3446))
  {
    {
      _3456 = (int)((msp)->size(0));
      int _8440 = (int)0;
      int _8441 = (int)((msp)->size(0));
      for (int _3457 = _8440; _3457 < _8441; ++_3457)
      {
        {
          _3455 += (_ptr__3452[safe_add( safe_add( _3447,((*msp)(_3457)) ),(int)1 )] - _ptr__3452[safe_add( _3447,((*msp)(_3457)) )]);
        }
      }
    }
  }
  else
  {
    {
      int _3458 = (int)((msp)->size(0));
      int _3459 = (int)0;
      int _3460 = _3444;
      int _3461 = (int)0;
      while ( ((_3459 < _3458) && (_3461 < _3460)) )
      {
        {
          if ((((*msp)(_3459)) < _ptr__3453[safe_add( _3448,_3461 )]))
          {
            {
              ++ _3459;
            }
          }
          else if((((*msp)(_3459)) > _ptr__3453[safe_add( _3448,_3461 )]))
          {
            {
              ++ _3461;
            }
          }
          else
          {
            {
              _3455 += (_ptr__3452[safe_add( safe_add( _3447,_3461 ),(int)1 )] - _ptr__3452[safe_add( _3447,_3461 )]);
              ++ _3459;
              ++ _3461;
              ++ _3456;
            }
          }
        }
      }
    }
  }
  int _3462 = _3439->alloci32(safe_add( _3456,(int)1 ));
  int _3463 = _3439->alloci64(_3455);
  int _3464 = _3439->alloci64(_3456);
  int _3465 = _3439->allocf64(_3455);
  int _3466 = _3439->allocf64(_3456);
  int _3467 = (int)1;
  int _8442 = (int)0;
  int _8443 = _3442;
  for (int _3468 = _8442; _3468 < _8443; ++_3468)
  {
    {
      _3467 *= _ptr__3452[safe_add( _3443,_3468 )];
    }
  }
  bool _3469 = (_3456 < _3467);
  int _8444;
  bool _8445 = _3469;
  if (_8445)
  {
    _8444 = (int)1;
  }
  else
  {
    _8444 = (int)0;
  }
  _3439->pushi32(_8444);
  _3439->pushi32(_3455);
  _3439->pushi32(_3456);
  int _3470 = _3439->alloci32(_3442);
  _3439->pushi32(_3442);
  std::shared_ptr< monty::ndarray< int,1 > > _3471 = mosek::fusion::p_WorkStack::_get_impl(_3439)->i32;
  _checked_ptr_1<int> _ptr__3471(_3471 ? _3471->raw() : nullptr,_3471 ? _3471->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3472 = mosek::fusion::p_WorkStack::_get_impl(_3439)->i64;
  _checked_ptr_1<long long> _ptr__3472(_3472 ? _3472->raw() : nullptr,_3472 ? _3472->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3473 = mosek::fusion::p_WorkStack::_get_impl(_3439)->f64;
  _checked_ptr_1<double> _ptr__3473(_3473 ? _3473->raw() : nullptr,_3473 ? _3473->size(0) : 0);
  {
    int _3474 = (int)0;
    int _3475 = (int)0;
    _ptr__3471[_3462] = (int)0;
    int _8446 = (int)0;
    int _8447 = _3442;
    for (int _3476 = _8446; _3476 < _8447; ++_3476)
    {
      {
        _ptr__3471[safe_add( _3470,_3476 )] = _ptr__3452[safe_add( _3443,_3476 )];
      }
    }
    if ((!_3446))
    {
      {
        int _8448 = (int)0;
        int _8449 = (int)((msp)->size(0));
        for (int _3477 = _8448; _3477 < _8449; ++_3477)
        {
          {
            int _3478 = _ptr__3452[safe_add( _3447,((*msp)(_3477)) )];
            int _3479 = _ptr__3452[safe_add( safe_add( _3447,((*msp)(_3477)) ),(int)1 )];
            int _8450 = _3478;
            int _8451 = _3479;
            for (int _3480 = _8450; _3480 < _8451; ++_3480)
            {
              {
                _ptr__3472[safe_add( _3463,_3475 )] = _ptr__3453[safe_add( _3449,_3480 )];
                _ptr__3473[safe_add( _3465,_3475 )] = (_ptr__3454[safe_add( _3451,_3480 )] * ((*mcof)(_3477)));
                ++ _3475;
              }
            }
            _ptr__3471[safe_add( safe_add( _3462,_3477 ),(int)1 )] = _3475;
            _ptr__3473[safe_add( _3466,_3477 )] = (_ptr__3454[safe_add( _3450,((*msp)(_3477)) )] * ((*mcof)(_3477)));
            _ptr__3472[safe_add( _3464,_3477 )] = ((*msp)(_3477));
          }
        }
      }
    }
    else
    {
      {
        int _3481 = (int)((msp)->size(0));
        int _3482 = (int)0;
        int _3483 = _3444;
        int _3484 = (int)0;
        while ( ((_3482 < _3481) && (_3484 < _3483)) )
        {
          {
            if ((((*msp)(_3482)) < _ptr__3453[safe_add( _3448,_3484 )]))
            {
              {
                ++ _3482;
              }
            }
            else if((((*msp)(_3482)) > _ptr__3453[safe_add( _3448,_3484 )]))
            {
              {
                ++ _3484;
              }
            }
            else
            {
              {
                int _3485 = _ptr__3452[safe_add( _3447,_3484 )];
                int _3486 = _ptr__3452[safe_add( safe_add( _3447,_3484 ),(int)1 )];
                int _8452 = _3485;
                int _8453 = _3486;
                for (int _3487 = _8452; _3487 < _8453; ++_3487)
                {
                  {
                    _ptr__3472[safe_add( _3463,_3475 )] = _ptr__3453[safe_add( _3449,_3487 )];
                    _ptr__3473[safe_add( _3463,_3475 )] = (_ptr__3454[safe_add( _3449,_3487 )] * ((*mcof)(_3482)));
                    ++ _3475;
                  }
                }
                _ptr__3471[safe_add( safe_add( _3462,_3474 ),(int)1 )] = _3475;
                _ptr__3473[safe_add( _3466,_3474 )] = (_ptr__3454[safe_add( _3450,_3484 )] * ((*mcof)(_3482)));
                _ptr__3472[safe_add( _3464,_3474 )] = ((*msp)(_3482));
                ++ _3474;
                ++ _3482;
                ++ _3484;
              }
            }
          }
        }
      }
    }
  }
  if ((!_3469))
  {
    {
      _3439->popi64(_3456);
    }
  }
  {}
}
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulElement::toString(){
  return std::string ("ExprMulElement()");
}
void mosek::fusion::p_ExprMulElement::destroy(){expr.reset();msp.reset();mcof.reset();}void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst  (double _3488,    monty::rc_ptr< ::mosek::fusion::Expression > _3489){ return new mosek::fusion::ExprMulScalarConst(_3488,_3489); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst  (double _3488,    monty::rc_ptr< ::mosek::fusion::Expression > _3489) :    ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this)){ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_3488,_3489); }void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _3488,    monty::rc_ptr< ::mosek::fusion::Expression > _3489){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3489->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _3488;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _3489;
  }
}void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3490,monty::rc_ptr< ::mosek::fusion::WorkStack > _3491,monty::rc_ptr< ::mosek::fusion::WorkStack > _3492) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_3490,_3491,_3492); }void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3490,monty::rc_ptr< ::mosek::fusion::WorkStack > _3491,monty::rc_ptr< ::mosek::fusion::WorkStack > _3492){
  expr->eval(_3490,_3491,_3492);
  int _3493 = _3490->peeki32((int)0);
  int _3494 = _3490->peeki32(safe_add( _3493,(int)1 ));
  int _3495 = _3490->peeki32(safe_add( _3493,(int)2 ));
  int _3496 = (mosek::fusion::p_WorkStack::_get_impl(_3490)->pf64 - _3494);
  int _3497 = (_3496 - _3495);
  std::shared_ptr< monty::ndarray< double,1 > > _3498 = mosek::fusion::p_WorkStack::_get_impl(_3490)->f64;
  _checked_ptr_1<double> _ptr__3498(_3498 ? _3498->raw() : nullptr,_3498 ? _3498->size(0) : 0);
  int _8454 = (int)0;
  int _8455 = safe_add( _3495,_3494 );
  for (int _3499 = _8454; _3499 < _8455; ++_3499)
  {
    {
      _ptr__3498[safe_add( _3497,_3499 )] *= c;
    }
  }
}
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarConst::toString(){
  return std::string ("ExprMulScalarConst()");
}
void mosek::fusion::p_ExprMulScalarConst::destroy(){expr.reset();}void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprScalarMul::p_ExprScalarMul  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _3500,    int _3501,    std::shared_ptr< monty::ndarray< int,1 > > _3502,    std::shared_ptr< monty::ndarray< int,1 > > _3503,    std::shared_ptr< monty::ndarray< double,1 > > _3504,    monty::rc_ptr< ::mosek::fusion::Expression > _3505,    int _3506){ return new mosek::fusion::ExprScalarMul(_3500,_3501,_3502,_3503,_3504,_3505,_3506); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _3500,    int _3501,    std::shared_ptr< monty::ndarray< int,1 > > _3502,    std::shared_ptr< monty::ndarray< int,1 > > _3503,    std::shared_ptr< monty::ndarray< double,1 > > _3504,    monty::rc_ptr< ::mosek::fusion::Expression > _3505,    int _3506) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_3500,_3501,_3502,_3503,_3504,_3505,_3506); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _3500,    int _3501,    std::shared_ptr< monty::ndarray< int,1 > > _3502,    std::shared_ptr< monty::ndarray< int,1 > > _3503,    std::shared_ptr< monty::ndarray< double,1 > > _3504,    monty::rc_ptr< ::mosek::fusion::Expression > _3505,    int _3506){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3502(_3502 ? _3502->raw() : nullptr, _3502 ? _3502->size(0) : 0);
    _checked_ptr_1<int> _ptr__3503(_3503 ? _3503->raw() : nullptr, _3503 ? _3503->size(0) : 0);
    _checked_ptr_1<double> _ptr__3504(_3504 ? _3504->raw() : nullptr, _3504 ? _3504->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3500),(int)(_3501)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _3500;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _3501;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _3502;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _3503;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _3504;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _3505;
  }
}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _3507,    int _3508,    std::shared_ptr< monty::ndarray< int,1 > > _3509,    std::shared_ptr< monty::ndarray< int,1 > > _3510,    std::shared_ptr< monty::ndarray< double,1 > > _3511,    monty::rc_ptr< ::mosek::fusion::Expression > _3512){ return new mosek::fusion::ExprScalarMul(_3507,_3508,_3509,_3510,_3511,_3512); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _3507,    int _3508,    std::shared_ptr< monty::ndarray< int,1 > > _3509,    std::shared_ptr< monty::ndarray< int,1 > > _3510,    std::shared_ptr< monty::ndarray< double,1 > > _3511,    monty::rc_ptr< ::mosek::fusion::Expression > _3512) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_3507,_3508,_3509,_3510,_3511,_3512); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _3507,    int _3508,    std::shared_ptr< monty::ndarray< int,1 > > _3509,    std::shared_ptr< monty::ndarray< int,1 > > _3510,    std::shared_ptr< monty::ndarray< double,1 > > _3511,    monty::rc_ptr< ::mosek::fusion::Expression > _3512){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3509(_3509 ? _3509->raw() : nullptr, _3509 ? _3509->size(0) : 0);
    _checked_ptr_1<int> _ptr__3510(_3510 ? _3510->raw() : nullptr, _3510 ? _3510->size(0) : 0);
    _checked_ptr_1<double> _ptr__3511(_3511 ? _3511->raw() : nullptr, _3511 ? _3511->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_3507,_3508,_3509,_3510,_3511,_3512,::mosek::fusion::p_ExprScalarMul::validate(_3507,_3508,_3509,_3510,_3511,_3512));
  }
}void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3513,monty::rc_ptr< ::mosek::fusion::WorkStack > _3514,monty::rc_ptr< ::mosek::fusion::WorkStack > _3515) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_3513,_3514,_3515); }void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3513,monty::rc_ptr< ::mosek::fusion::WorkStack > _3514,monty::rc_ptr< ::mosek::fusion::WorkStack > _3515){
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_3514,_3513,_3515);
  _3514->pop_expr();
  int _3516 = mosek::fusion::p_WorkStack::_get_impl(_3514)->nd;
  int _3517 = mosek::fusion::p_WorkStack::_get_impl(_3514)->nelem;
  int _3518 = mosek::fusion::p_WorkStack::_get_impl(_3514)->nnz;
  bool _3519 = mosek::fusion::p_WorkStack::_get_impl(_3514)->hassp;
  int _3520 = mosek::fusion::p_WorkStack::_get_impl(_3514)->ptr_base;
  int _3521 = mosek::fusion::p_WorkStack::_get_impl(_3514)->sp_base;
  int _3522 = mosek::fusion::p_WorkStack::_get_impl(_3514)->nidxs_base;
  int _3523 = mosek::fusion::p_WorkStack::_get_impl(_3514)->bfix_base;
  int _3524 = mosek::fusion::p_WorkStack::_get_impl(_3514)->cof_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3525 = mosek::fusion::p_WorkStack::_get_impl(_3514)->i64;
  _checked_ptr_1<long long> _ptr__3525(_3525 ? _3525->raw() : nullptr,_3525 ? _3525->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3526 = mosek::fusion::p_WorkStack::_get_impl(_3514)->f64;
  _checked_ptr_1<double> _ptr__3526(_3526 ? _3526->raw() : nullptr,_3526 ? _3526->size(0) : 0);
  int _3527 = (int)((mval)->size(0));
  if ((_3516 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_3517 == (int)0))
  {
    {
      _3513->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_3513)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3513)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_3513)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_3513)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      _3513->alloc_expr((int)2,_3527,safe_mul( _3527,_3518 ),true);
      int _3528 = mosek::fusion::p_WorkStack::_get_impl(_3513)->ptr_base;
      int _3529 = mosek::fusion::p_WorkStack::_get_impl(_3513)->nidxs_base;
      int _3530 = mosek::fusion::p_WorkStack::_get_impl(_3513)->sp_base;
      int _3531 = mosek::fusion::p_WorkStack::_get_impl(_3513)->cof_base;
      int _3532 = mosek::fusion::p_WorkStack::_get_impl(_3513)->bfix_base;
      int _3533 = mosek::fusion::p_WorkStack::_get_impl(_3513)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _3534 = mosek::fusion::p_WorkStack::_get_impl(_3513)->i32;
      _checked_ptr_1<int> _ptr__3534(_3534 ? _3534->raw() : nullptr,_3534 ? _3534->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3535 = mosek::fusion::p_WorkStack::_get_impl(_3513)->i64;
      _checked_ptr_1<long long> _ptr__3535(_3535 ? _3535->raw() : nullptr,_3535 ? _3535->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3536 = mosek::fusion::p_WorkStack::_get_impl(_3513)->f64;
      _checked_ptr_1<double> _ptr__3536(_3536 ? _3536->raw() : nullptr,_3536 ? _3536->size(0) : 0);
      _ptr__3534[_3533] = mdim0;
      _ptr__3534[safe_add( _3533,(int)1 )] = mdim1;
      int _3537 = (int)0;
      _ptr__3534[_3528] = (int)0;
      int _8456 = (int)0;
      int _8457 = _3527;
      for (int _3538 = _8456; _3538 < _8457; ++_3538)
      {
        {
          int _8458 = (int)0;
          int _8459 = _3518;
          for (int _3539 = _8458; _3539 < _8459; ++_3539)
          {
            {
              _ptr__3535[safe_add( _3529,_3537 )] = _ptr__3525[safe_add( _3522,_3539 )];
              _ptr__3536[safe_add( _3531,_3537 )] = (_ptr__3526[safe_add( _3524,_3539 )] * ((*mval)(_3538)));
              ++ _3537;
            }
          }
          _ptr__3535[safe_add( _3530,_3538 )] = safe_add( safe_mul( ((*msubi)(_3538)),mdim1 ),((*msubj)(_3538)) );
          _ptr__3536[safe_add( _3532,_3538 )] = (((*mval)(_3538)) * _ptr__3526[_3523]);
          _ptr__3534[safe_add( safe_add( _3528,_3538 ),(int)1 )] = _3537;
        }
      }
    }
  }
}
int mosek::fusion::p_ExprScalarMul::validate(int _3540,int _3541,std::shared_ptr< monty::ndarray< int,1 > > _3542,std::shared_ptr< monty::ndarray< int,1 > > _3543,std::shared_ptr< monty::ndarray< double,1 > > _3544,monty::rc_ptr< ::mosek::fusion::Expression > _3545){
  _checked_ptr_1<int> _ptr__3542(_3542 ? _3542->raw() : nullptr, _3542 ? _3542->size(0) : 0);
  _checked_ptr_1<int> _ptr__3543(_3543 ? _3543->raw() : nullptr, _3543 ? _3543->size(0) : 0);
  _checked_ptr_1<double> _ptr__3544(_3544 ? _3544->raw() : nullptr, _3544 ? _3544->size(0) : 0);
  int _3546 = _3545->getND();
  if ((_3546 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_3540 < (int)0) || (_3541 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_3542)->size(0)) != (int)((_3543)->size(0))) || ((int)((_3542)->size(0)) != (int)((_3544)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3547 = (int)((_3542)->size(0));
  int _8460 = (int)0;
  int _8461 = _3547;
  for (int _3548 = _8460; _3548 < _8461; ++_3548)
  {
    {
      if (((_ptr__3542[_3548] < (int)0) || ((_ptr__3542[_3548] >= _3540) || ((_ptr__3543[_3548] < (int)0) || (_ptr__3543[_3548] >= _3541)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
        }
      }
      {}
    }
  }
  int _8462 = (int)0;
  int _8463 = (_3547 - (int)1);
  for (int _3549 = _8462; _3549 < _8463; ++_3549)
  {
    {
      if (((_ptr__3542[_3549] > _ptr__3542[safe_add( _3549,(int)1 )]) || ((_ptr__3542[_3549] == _ptr__3542[safe_add( _3549,(int)1 )]) && (_ptr__3543[_3549] >= _ptr__3543[safe_add( _3549,(int)1 )]))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
        }
      }
      {}
    }
  }
  int _8464 = (int)0;
  int _8465 = _3547;
  for (int _3550 = _8464; _3550 < _8465; ++_3550)
  {
    {
      if (((_ptr__3542[_3550] < (int)0) || ((_ptr__3542[_3550] >= _3540) || ((_ptr__3543[_3550] < (int)0) || (_ptr__3543[_3550] >= _3541)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
        }
      }
      {}
    }
  }
  return (int)1;
}
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprScalarMul::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprScalarMul::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulRight::p_ExprMulRight  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _3551,    int _3552,    std::shared_ptr< monty::ndarray< int,1 > > _3553,    std::shared_ptr< monty::ndarray< int,1 > > _3554,    std::shared_ptr< monty::ndarray< double,1 > > _3555,    monty::rc_ptr< ::mosek::fusion::Expression > _3556,    int _3557){ return new mosek::fusion::ExprMulRight(_3551,_3552,_3553,_3554,_3555,_3556,_3557); }mosek::fusion::ExprMulRight::ExprMulRight  (int _3551,    int _3552,    std::shared_ptr< monty::ndarray< int,1 > > _3553,    std::shared_ptr< monty::ndarray< int,1 > > _3554,    std::shared_ptr< monty::ndarray< double,1 > > _3555,    monty::rc_ptr< ::mosek::fusion::Expression > _3556,    int _3557) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_3551,_3552,_3553,_3554,_3555,_3556,_3557); }void mosek::fusion::p_ExprMulRight::_initialize  (int _3551,    int _3552,    std::shared_ptr< monty::ndarray< int,1 > > _3553,    std::shared_ptr< monty::ndarray< int,1 > > _3554,    std::shared_ptr< monty::ndarray< double,1 > > _3555,    monty::rc_ptr< ::mosek::fusion::Expression > _3556,    int _3557){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3553(_3553 ? _3553->raw() : nullptr, _3553 ? _3553->size(0) : 0);
    _checked_ptr_1<int> _ptr__3554(_3554 ? _3554->raw() : nullptr, _3554 ? _3554->size(0) : 0);
    _checked_ptr_1<double> _ptr__3555(_3555 ? _3555->raw() : nullptr, _3555 ? _3555->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_3552,_3556->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _3551;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _3552;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _3553;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _3554;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _3555;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _3556;
  }
}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _3558,    int _3559,    std::shared_ptr< monty::ndarray< int,1 > > _3560,    std::shared_ptr< monty::ndarray< int,1 > > _3561,    std::shared_ptr< monty::ndarray< double,1 > > _3562,    monty::rc_ptr< ::mosek::fusion::Expression > _3563){ return new mosek::fusion::ExprMulRight(_3558,_3559,_3560,_3561,_3562,_3563); }mosek::fusion::ExprMulRight::ExprMulRight  (int _3558,    int _3559,    std::shared_ptr< monty::ndarray< int,1 > > _3560,    std::shared_ptr< monty::ndarray< int,1 > > _3561,    std::shared_ptr< monty::ndarray< double,1 > > _3562,    monty::rc_ptr< ::mosek::fusion::Expression > _3563) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_3558,_3559,_3560,_3561,_3562,_3563); }void mosek::fusion::p_ExprMulRight::_initialize  (int _3558,    int _3559,    std::shared_ptr< monty::ndarray< int,1 > > _3560,    std::shared_ptr< monty::ndarray< int,1 > > _3561,    std::shared_ptr< monty::ndarray< double,1 > > _3562,    monty::rc_ptr< ::mosek::fusion::Expression > _3563){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3560(_3560 ? _3560->raw() : nullptr, _3560 ? _3560->size(0) : 0);
    _checked_ptr_1<int> _ptr__3561(_3561 ? _3561->raw() : nullptr, _3561 ? _3561->size(0) : 0);
    _checked_ptr_1<double> _ptr__3562(_3562 ? _3562->raw() : nullptr, _3562 ? _3562->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_3558,_3559,_3560,_3561,_3562,_3563,::mosek::fusion::p_ExprMulRight::validate(_3558,_3559,_3560,_3561,_3562,_3563));
  }
}void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3564,monty::rc_ptr< ::mosek::fusion::WorkStack > _3565,monty::rc_ptr< ::mosek::fusion::WorkStack > _3566) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_3564,_3565,_3566); }void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3564,monty::rc_ptr< ::mosek::fusion::WorkStack > _3565,monty::rc_ptr< ::mosek::fusion::WorkStack > _3566){
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_3565,_3564,_3566);
  _3565->peek_expr();
  int _3567 = mosek::fusion::p_WorkStack::_get_impl(_3565)->nd;
  bool _3568 = mosek::fusion::p_WorkStack::_get_impl(_3565)->hassp;
  int _3569 = (int)((mval)->size(0));
  bool _3570 = (_3569 < safe_mul( mdim0,mdim1 ));
  int _3571 = ((*mosek::fusion::p_WorkStack::_get_impl(_3565)->i32)(mosek::fusion::p_WorkStack::_get_impl(_3565)->shape_base));
  if (_3570)
  {
    {
      int _3572 = _3565->alloci32(safe_add( mdim1,(int)1 ));
      int _3573 = _3565->alloci32(_3569);
      int _3574 = _3565->alloci32(safe_add( _3571,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3575 = mosek::fusion::p_WorkStack::_get_impl(_3565)->i32;
      _checked_ptr_1<int> _ptr__3575(_3575 ? _3575->raw() : nullptr,_3575 ? _3575->size(0) : 0);
      int _8466 = (int)0;
      int _8467 = safe_add( mdim1,(int)1 );
      for (int _3576 = _8466; _3576 < _8467; ++_3576)
      {
        {
          _ptr__3575[safe_add( _3572,_3576 )] = (int)0;
        }
      }
      int _8468 = (int)0;
      int _8469 = _3569;
      for (int _3577 = _8468; _3577 < _8469; ++_3577)
      {
        {
          ++ _ptr__3575[safe_add( safe_add( _3572,((*msubj)(_3577)) ),(int)1 )];
        }
      }
      int _8470 = (int)0;
      int _8471 = mdim1;
      for (int _3578 = _8470; _3578 < _8471; ++_3578)
      {
        {
          _ptr__3575[safe_add( safe_add( _3572,_3578 ),(int)1 )] += _ptr__3575[safe_add( _3572,_3578 )];
        }
      }
      int _8472 = (int)0;
      int _8473 = _3569;
      for (int _3579 = _8472; _3579 < _8473; ++_3579)
      {
        {
          _ptr__3575[safe_add( _3573,_3579 )] = _ptr__3575[safe_add( _3572,((*msubj)(_3579)) )];
          ++ _ptr__3575[safe_add( _3572,((*msubj)(_3579)) )];
        }
      }
      int _8474 = (int)0;
      int _8475 = mdim1;
      for (int _3580 = _8474; _3580 < _8475; ++_3580)
      {
        {
          _ptr__3575[(safe_add( _3572,mdim1 ) - _3580)] = _ptr__3575[((safe_add( _3572,mdim1 ) - _3580) - (int)1)];
        }
      }
      _ptr__3575[_3572] = (int)0;
      int _8476 = (int)0;
      int _8477 = safe_add( _3571,(int)1 );
      for (int _3581 = _8476; _3581 < _8477; ++_3581)
      {
        {
          _ptr__3575[safe_add( _3574,_3581 )] = (int)0;
        }
      }
      _3565->popi32(safe_add( safe_add( safe_add( _3571,mdim1 ),(int)2 ),_3569 ));
      int _3582 = _3565->popi32();
      if ((_3582 != (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
        }
      }
      {}
      int _3583 = _3565->popi32();
      int _3584 = _3565->popi32();
      int _3585 = _3565->popi32();
      int _3586 = _3565->popi32();
      bool _3587 = (_3565->popi32() != (int)0);
      int _3588 = _3565->popi32(safe_add( _3585,(int)1 ));
      int _8478;
      bool _8479 = _3587;
      if (_8479)
      {
        _8478 = _3565->popi64(_3585);
      }
      else
      {
        _8478 = (int)999999;
      }
      int _3589 = _8478;
      int _3590 = _3565->popi64(_3586);
      int _3591 = _3565->popf64(_3585);
      int _3592 = _3565->popf64(_3586);
      std::shared_ptr< monty::ndarray< int,1 > > _3593 = mosek::fusion::p_WorkStack::_get_impl(_3565)->i32;
      _checked_ptr_1<int> _ptr__3593(_3593 ? _3593->raw() : nullptr,_3593 ? _3593->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3594 = mosek::fusion::p_WorkStack::_get_impl(_3565)->i64;
      _checked_ptr_1<long long> _ptr__3594(_3594 ? _3594->raw() : nullptr,_3594 ? _3594->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3595 = mosek::fusion::p_WorkStack::_get_impl(_3565)->f64;
      _checked_ptr_1<double> _ptr__3595(_3595 ? _3595->raw() : nullptr,_3595 ? _3595->size(0) : 0);
      if (_3587)
      {
        {
          int _8480 = (int)0;
          int _8481 = _3585;
          for (int _3596 = _8480; _3596 < _8481; ++_3596)
          {
            {
              ++ _ptr__3593[safe_add( safe_add( _3574,(_ptr__3594[safe_add( _3589,_3596 )] / _3583) ),(int)1 )];
            }
          }
          int _8482 = (int)0;
          int _8483 = _3584;
          for (int _3597 = _8482; _3597 < _8483; ++_3597)
          {
            {
              _ptr__3593[safe_add( safe_add( _3574,_3597 ),(int)1 )] += _ptr__3593[safe_add( _3574,_3597 )];
            }
          }
          int _3598 = (int)0;
          int _3599 = (int)0;
          int _8484 = (int)0;
          int _8485 = _3584;
          for (int _3600 = _8484; _3600 < _8485; ++_3600)
          {
            {
              int _8486 = (int)0;
              int _8487 = mdim1;
              for (int _3601 = _8486; _3601 < _8487; ++_3601)
              {
                {
                  bool _3602 = false;
                  int _3603 = _ptr__3593[safe_add( safe_add( _3574,_3600 ),(int)1 )];
                  int _3604 = _ptr__3593[safe_add( _3574,_3600 )];
                  int _3605 = _ptr__3593[safe_add( safe_add( _3572,_3601 ),(int)1 )];
                  int _3606 = _ptr__3593[safe_add( _3572,_3601 )];
                  while ( ((_3604 < _3603) && (_3606 < _3605)) )
                  {
                    {
                      int _3607 = _ptr__3593[safe_add( _3573,_3606 )];
                      if (((_ptr__3594[safe_add( _3589,_3604 )] % _3583) < ((*msubi)(_3607))))
                      {
                        {
                          ++ _3604;
                        }
                      }
                      else if(((_ptr__3594[safe_add( _3589,_3604 )] % _3583) > ((*msubi)(_3607))))
                      {
                        {
                          ++ _3606;
                        }
                      }
                      else
                      {
                        {
                          _3599 += (_ptr__3593[safe_add( safe_add( _3588,_3604 ),(int)1 )] - _ptr__3593[safe_add( _3588,_3604 )]);
                          ++ _3604;
                          ++ _3606;
                          _3602 = true;
                        }
                      }
                    }
                  }
                  if (_3602)
                  {
                    {
                      ++ _3598;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _3608 = (_3598 < safe_mul( _3584,mdim1 ));
          _3564->alloc_expr((int)2,_3598,_3599,_3608);
          int _3609 = mosek::fusion::p_WorkStack::_get_impl(_3564)->ptr_base;
          int _3610 = mosek::fusion::p_WorkStack::_get_impl(_3564)->nidxs_base;
          int _8488;
          bool _8489 = _3608;
          if (_8489)
          {
            _8488 = mosek::fusion::p_WorkStack::_get_impl(_3564)->sp_base;
          }
          else
          {
            _8488 = _3564->alloci64(_3598);
          }
          int _3611 = _8488;
          int _3612 = mosek::fusion::p_WorkStack::_get_impl(_3564)->cof_base;
          int _3613 = mosek::fusion::p_WorkStack::_get_impl(_3564)->bfix_base;
          int _3614 = mosek::fusion::p_WorkStack::_get_impl(_3564)->shape_base;
          std::shared_ptr< monty::ndarray< int,1 > > _3615 = mosek::fusion::p_WorkStack::_get_impl(_3564)->i32;
          _checked_ptr_1<int> _ptr__3615(_3615 ? _3615->raw() : nullptr,_3615 ? _3615->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3616 = mosek::fusion::p_WorkStack::_get_impl(_3564)->i64;
          _checked_ptr_1<long long> _ptr__3616(_3616 ? _3616->raw() : nullptr,_3616 ? _3616->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3617 = mosek::fusion::p_WorkStack::_get_impl(_3564)->f64;
          _checked_ptr_1<double> _ptr__3617(_3617 ? _3617->raw() : nullptr,_3617 ? _3617->size(0) : 0);
          _ptr__3615[_3614] = _3584;
          _ptr__3615[safe_add( _3614,(int)1 )] = mdim1;
          int _3618 = (int)0;
          int _3619 = (int)0;
          _ptr__3615[_3609] = (int)0;
          int _8490 = (int)0;
          int _8491 = _3584;
          for (int _3620 = _8490; _3620 < _8491; ++_3620)
          {
            {
              int _8492 = (int)0;
              int _8493 = mdim1;
              for (int _3621 = _8492; _3621 < _8493; ++_3621)
              {
                {
                  bool _3622 = false;
                  double _3623 = 0.0;
                  int _3624 = _ptr__3593[safe_add( safe_add( _3574,_3620 ),(int)1 )];
                  int _3625 = _ptr__3593[safe_add( _3574,_3620 )];
                  int _3626 = _ptr__3593[safe_add( safe_add( _3572,_3621 ),(int)1 )];
                  int _3627 = _ptr__3593[safe_add( _3572,_3621 )];
                  while ( ((_3625 < _3624) && (_3627 < _3626)) )
                  {
                    {
                      int _3628 = _ptr__3593[safe_add( _3573,_3627 )];
                      if (((_ptr__3594[safe_add( _3589,_3625 )] % _3583) < ((*msubi)(_3628))))
                      {
                        {
                          ++ _3625;
                        }
                      }
                      else if(((_ptr__3594[safe_add( _3589,_3625 )] % _3583) > ((*msubi)(_3628))))
                      {
                        {
                          ++ _3627;
                        }
                      }
                      else
                      {
                        {
                          int _3629 = (_ptr__3593[safe_add( safe_add( _3588,_3625 ),(int)1 )] - _ptr__3593[safe_add( _3588,_3625 )]);
                          _3623 += (((*mval)(_3628)) * _ptr__3595[safe_add( _3591,_3625 )]);
                          int _8494 = (int)0;
                          int _8495 = _3629;
                          for (int _3630 = _8494; _3630 < _8495; ++_3630)
                          {
                            {
                              _ptr__3616[safe_add( safe_add( _3610,_3619 ),_3630 )] = _ptr__3594[safe_add( safe_add( _3590,_ptr__3593[safe_add( _3588,_3625 )] ),_3630 )];
                            }
                          }
                          int _8496 = (int)0;
                          int _8497 = _3629;
                          for (int _3631 = _8496; _3631 < _8497; ++_3631)
                          {
                            {
                              _ptr__3617[safe_add( safe_add( _3612,_3619 ),_3631 )] = (_ptr__3595[safe_add( safe_add( _3592,_ptr__3593[safe_add( _3588,_3625 )] ),_3631 )] * ((*mval)(_3628)));
                            }
                          }
                          _3619 += _3629;
                          ++ _3625;
                          ++ _3627;
                          _3622 = true;
                        }
                      }
                      if (_3622)
                      {
                        {
                          _ptr__3615[safe_add( safe_add( _3609,_3618 ),(int)1 )] = _3619;
                          _ptr__3617[safe_add( _3613,_3618 )] = _3623;
                          _ptr__3616[safe_add( _3611,_3618 )] = safe_add( safe_mul( _3620,mdim1 ),_3621 );
                          ++ _3618;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          if ((!_3608))
          {
            {
              _3564->popi64(_3598);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _3632 = safe_mul( _3584,mdim1 );
          int _3633 = (int)0;
          int _8498 = (int)0;
          int _8499 = _3584;
          for (int _3634 = _8498; _3634 < _8499; ++_3634)
          {
            {
              int _8500 = (int)0;
              int _8501 = mdim1;
              for (int _3635 = _8500; _3635 < _8501; ++_3635)
              {
                {
                  int _8502 = _ptr__3593[safe_add( _3572,_3635 )];
                  int _8503 = _ptr__3593[safe_add( safe_add( _3572,_3635 ),(int)1 )];
                  for (int _3636 = _8502; _3636 < _8503; ++_3636)
                  {
                    {
                      int _3637 = _ptr__3593[safe_add( _3573,_3636 )];
                      int _3638 = safe_add( safe_mul( _3634,_3583 ),((*msubi)(_3637)) );
                      _3633 += (_ptr__3593[safe_add( safe_add( _3588,_3638 ),(int)1 )] - _ptr__3593[safe_add( _3588,_3638 )]);
                    }
                  }
                }
              }
            }
          }
          bool _3639 = (_3632 < safe_mul( _3584,mdim1 ));
          int _3640 = _3564->alloci32(safe_add( _3632,(int)1 ));
          int _8504;
          bool _8505 = _3639;
          if (_8505)
          {
            _8504 = (int)1;
          }
          else
          {
            _8504 = (int)0;
          }
          _3564->pushi32(_8504);
          _3564->pushi32(_3633);
          _3564->pushi32(_3632);
          _3564->pushi32(_3584);
          _3564->pushi32(mdim1);
          _3564->pushi32((int)2);
          int _3641 = _3564->alloci64(_3633);
          int _3642 = _3564->alloci64(_3632);
          int _3643 = _3564->allocf64(_3633);
          int _3644 = _3564->allocf64(_3632);
          std::shared_ptr< monty::ndarray< int,1 > > _3645 = mosek::fusion::p_WorkStack::_get_impl(_3564)->i32;
          _checked_ptr_1<int> _ptr__3645(_3645 ? _3645->raw() : nullptr,_3645 ? _3645->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3646 = mosek::fusion::p_WorkStack::_get_impl(_3564)->i64;
          _checked_ptr_1<long long> _ptr__3646(_3646 ? _3646->raw() : nullptr,_3646 ? _3646->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3647 = mosek::fusion::p_WorkStack::_get_impl(_3564)->f64;
          _checked_ptr_1<double> _ptr__3647(_3647 ? _3647->raw() : nullptr,_3647 ? _3647->size(0) : 0);
          int _3648 = (int)0;
          int _3649 = (int)0;
          _ptr__3645[_3640] = (int)0;
          int _8506 = (int)0;
          int _8507 = _3584;
          for (int _3650 = _8506; _3650 < _8507; ++_3650)
          {
            {
              int _8508 = (int)0;
              int _8509 = mdim1;
              for (int _3651 = _8508; _3651 < _8509; ++_3651)
              {
                {
                  int _3652 = safe_mul( _3650,_3583 );
                  double _3653 = 0.0;
                  int _8510 = _ptr__3593[safe_add( _3572,_3651 )];
                  int _8511 = _ptr__3593[safe_add( safe_add( _3572,_3651 ),(int)1 )];
                  for (int _3654 = _8510; _3654 < _8511; ++_3654)
                  {
                    {
                      int _3655 = _ptr__3593[safe_add( _3573,_3654 )];
                      int _3656 = safe_add( _3652,((*msubi)(_3655)) );
                      int _3657 = _ptr__3593[safe_add( _3588,_3656 )];
                      int _3658 = (_ptr__3593[safe_add( safe_add( _3588,_3656 ),(int)1 )] - _ptr__3593[safe_add( _3588,_3656 )]);
                      int _8512 = (int)0;
                      int _8513 = _3658;
                      for (int _3659 = _8512; _3659 < _8513; ++_3659)
                      {
                        {
                          _ptr__3646[safe_add( safe_add( _3641,_3649 ),_3659 )] = _ptr__3594[safe_add( safe_add( _3590,_3657 ),_3659 )];
                        }
                      }
                      int _8514 = (int)0;
                      int _8515 = _3658;
                      for (int _3660 = _8514; _3660 < _8515; ++_3660)
                      {
                        {
                          _ptr__3647[safe_add( safe_add( _3643,_3649 ),_3660 )] = (_ptr__3595[safe_add( safe_add( _3592,_3657 ),_3660 )] * ((*mval)(_3655)));
                        }
                      }
                      _3653 += (_ptr__3595[safe_add( safe_add( _3591,_3652 ),((*msubi)(_3655)) )] * ((*mval)(_3655)));
                      _3649 += _3658;
                    }
                  }
                  _ptr__3645[safe_add( safe_add( _3640,_3648 ),(int)1 )] = _3649;
                  _ptr__3647[safe_add( _3644,_3648 )] = _3653;
                  _ptr__3646[safe_add( _3642,_3648 )] = safe_add( safe_mul( _3650,mdim1 ),_3651 );
                  ++ _3648;
                }
              }
            }
          }
          if ((!_3639))
          {
            {
              _3564->popi64(_3632);
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _3661 = _3566->alloci32(safe_add( _3571,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3662 = mosek::fusion::p_WorkStack::_get_impl(_3566)->i32;
      _checked_ptr_1<int> _ptr__3662(_3662 ? _3662->raw() : nullptr,_3662 ? _3662->size(0) : 0);
      int _8516 = (int)0;
      int _8517 = safe_add( _3571,(int)1 );
      for (int _3663 = _8516; _3663 < _8517; ++_3663)
      {
        {
          _ptr__3662[safe_add( _3661,_3663 )] = (int)0;
        }
      }
      _3565->pop_expr();
      std::shared_ptr< monty::ndarray< int,1 > > _3664 = mosek::fusion::p_WorkStack::_get_impl(_3565)->i32;
      _checked_ptr_1<int> _ptr__3664(_3664 ? _3664->raw() : nullptr,_3664 ? _3664->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3665 = mosek::fusion::p_WorkStack::_get_impl(_3565)->i64;
      _checked_ptr_1<long long> _ptr__3665(_3665 ? _3665->raw() : nullptr,_3665 ? _3665->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3666 = mosek::fusion::p_WorkStack::_get_impl(_3565)->f64;
      _checked_ptr_1<double> _ptr__3666(_3666 ? _3666->raw() : nullptr,_3666 ? _3666->size(0) : 0);
      int _3667 = mosek::fusion::p_WorkStack::_get_impl(_3565)->nd;
      int _3668 = mosek::fusion::p_WorkStack::_get_impl(_3565)->nelem;
      int _3669 = mosek::fusion::p_WorkStack::_get_impl(_3565)->nnz;
      bool _3670 = mosek::fusion::p_WorkStack::_get_impl(_3565)->hassp;
      int _3671 = _3669;
      int _3672 = _3668;
      int _3673 = mosek::fusion::p_WorkStack::_get_impl(_3565)->shape_base;
      int _3674 = mosek::fusion::p_WorkStack::_get_impl(_3565)->ptr_base;
      int _3675 = mosek::fusion::p_WorkStack::_get_impl(_3565)->sp_base;
      int _3676 = mosek::fusion::p_WorkStack::_get_impl(_3565)->nidxs_base;
      int _3677 = mosek::fusion::p_WorkStack::_get_impl(_3565)->bfix_base;
      int _3678 = mosek::fusion::p_WorkStack::_get_impl(_3565)->cof_base;
      int _3679 = _ptr__3664[_3673];
      int _3680 = _ptr__3664[safe_add( _3673,(int)1 )];
      if ((_3667 != (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _3681 = mosek::fusion::p_WorkStack::_get_impl(_3565)->i32;
      _checked_ptr_1<int> _ptr__3681(_3681 ? _3681->raw() : nullptr,_3681 ? _3681->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3682 = mosek::fusion::p_WorkStack::_get_impl(_3565)->i64;
      _checked_ptr_1<long long> _ptr__3682(_3682 ? _3682->raw() : nullptr,_3682 ? _3682->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3683 = mosek::fusion::p_WorkStack::_get_impl(_3565)->f64;
      _checked_ptr_1<double> _ptr__3683(_3683 ? _3683->raw() : nullptr,_3683 ? _3683->size(0) : 0);
      int _3684 = safe_mul( _3679,mdim1 );
      int _3685 = safe_mul( _3669,mdim1 );
      bool _3686 = false;
      int _3687 = (int)2;
      _3564->alloc_expr(_3687,_3684,_3685,_3686);
      std::shared_ptr< monty::ndarray< int,1 > > _3688 = mosek::fusion::p_WorkStack::_get_impl(_3564)->i32;
      _checked_ptr_1<int> _ptr__3688(_3688 ? _3688->raw() : nullptr,_3688 ? _3688->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3689 = mosek::fusion::p_WorkStack::_get_impl(_3564)->i64;
      _checked_ptr_1<long long> _ptr__3689(_3689 ? _3689->raw() : nullptr,_3689 ? _3689->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3690 = mosek::fusion::p_WorkStack::_get_impl(_3564)->f64;
      _checked_ptr_1<double> _ptr__3690(_3690 ? _3690->raw() : nullptr,_3690 ? _3690->size(0) : 0);
      int _3691 = mosek::fusion::p_WorkStack::_get_impl(_3564)->shape_base;
      int _3692 = mosek::fusion::p_WorkStack::_get_impl(_3564)->ptr_base;
      int _3693 = mosek::fusion::p_WorkStack::_get_impl(_3564)->nidxs_base;
      int _3694 = mosek::fusion::p_WorkStack::_get_impl(_3564)->sp_base;
      int _3695 = mosek::fusion::p_WorkStack::_get_impl(_3564)->cof_base;
      int _3696 = mosek::fusion::p_WorkStack::_get_impl(_3564)->bfix_base;
      _ptr__3688[_3691] = _3679;
      _ptr__3688[safe_add( _3691,(int)1 )] = mdim1;
      int _3697 = (int)0;
      int _3698 = (int)0;
      _ptr__3688[_3692] = (int)0;
      if (_3670)
      {
        {
          int _8518 = (int)0;
          int _8519 = _3668;
          for (int _3699 = _8518; _3699 < _8519; ++_3699)
          {
            {
              ++ _ptr__3662[safe_add( safe_add( _3661,(_ptr__3682[safe_add( _3675,_3699 )] / _3680) ),(int)1 )];
            }
          }
          int _8520 = (int)0;
          int _8521 = _3679;
          for (int _3700 = _8520; _3700 < _8521; ++_3700)
          {
            {
              _ptr__3662[safe_add( safe_add( _3661,_3700 ),(int)1 )] += _ptr__3662[safe_add( _3661,_3700 )];
            }
          }
          int _8522 = (int)0;
          int _8523 = _3679;
          for (int _3701 = _8522; _3701 < _8523; ++_3701)
          {
            {
              int _8524 = (int)0;
              int _8525 = mdim1;
              for (int _3702 = _8524; _3702 < _8525; ++_3702)
              {
                {
                  double _3703 = 0.0;
                  int _3704 = (int)0;
                  int _8526 = _ptr__3662[safe_add( _3661,_3701 )];
                  int _8527 = _ptr__3662[safe_add( safe_add( _3661,_3701 ),(int)1 )];
                  for (int _3705 = _8526; _3705 < _8527; ++_3705)
                  {
                    {
                      long long _3706 = safe_add( _3702,safe_mul( (_ptr__3682[safe_add( _3675,_3705 )] % _3680),mdim1 ) );
                      _3703 += (_ptr__3683[safe_add( _3677,_3705 )] * ((*mval)(_3706)));
                      int _8528 = _ptr__3681[safe_add( _3674,_3705 )];
                      int _8529 = _ptr__3681[safe_add( safe_add( _3674,_3705 ),(int)1 )];
                      for (int _3707 = _8528; _3707 < _8529; ++_3707)
                      {
                        {
                          _ptr__3689[safe_add( safe_add( _3693,_3697 ),_3704 )] = _ptr__3682[safe_add( _3676,_3707 )];
                          _ptr__3690[safe_add( safe_add( _3695,_3697 ),_3704 )] = (_ptr__3683[safe_add( _3678,_3707 )] * ((*mval)(_3706)));
                          ++ _3704;
                        }
                      }
                    }
                  }
                  _3697 += _3704;
                  _ptr__3688[safe_add( safe_add( _3692,_3698 ),(int)1 )] = _3697;
                  _ptr__3690[safe_add( _3696,_3698 )] = _3703;
                  ++ _3698;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _8530 = (int)0;
          int _8531 = _3679;
          for (int _3708 = _8530; _3708 < _8531; ++_3708)
          {
            {
              int _8532 = (int)0;
              int _8533 = mdim1;
              for (int _3709 = _8532; _3709 < _8533; ++_3709)
              {
                {
                  double _3710 = 0.0;
                  int _3711 = (int)0;
                  int _8534 = (int)0;
                  int _8535 = _3680;
                  for (int _3712 = _8534; _3712 < _8535; ++_3712)
                  {
                    {
                      int _3713 = safe_add( safe_mul( _3708,_3680 ),_3712 );
                      int _3714 = safe_add( _3709,safe_mul( _3712,mdim1 ) );
                      _3710 += (_ptr__3683[safe_add( _3677,_3713 )] * ((*mval)(_3714)));
                      int _8536 = _ptr__3681[safe_add( _3674,_3713 )];
                      int _8537 = _ptr__3681[safe_add( safe_add( _3674,_3713 ),(int)1 )];
                      for (int _3715 = _8536; _3715 < _8537; ++_3715)
                      {
                        {
                          _ptr__3689[safe_add( safe_add( _3693,_3697 ),_3711 )] = _ptr__3682[safe_add( _3676,_3715 )];
                          _ptr__3690[safe_add( safe_add( _3695,_3697 ),_3711 )] = (_ptr__3683[safe_add( _3678,_3715 )] * ((*mval)(_3714)));
                          ++ _3711;
                        }
                      }
                    }
                  }
                  _3697 += _3711;
                  _ptr__3688[safe_add( safe_add( _3692,_3698 ),(int)1 )] = _3697;
                  _ptr__3690[safe_add( _3696,_3698 )] = _3710;
                  ++ _3698;
                }
              }
            }
          }
        }
      }
      _3566->clear();
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulRight::computeshape(int _3716,std::shared_ptr< monty::ndarray< int,1 > > _3717){
  _checked_ptr_1<int> _ptr__3717(_3717 ? _3717->raw() : nullptr, _3717 ? _3717->size(0) : 0);
  if (((int)((_3717)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_3716)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__3717[(int)0]),(int)(_3716)});
    }
  }
}
int mosek::fusion::p_ExprMulRight::validate(int _3718,int _3719,std::shared_ptr< monty::ndarray< int,1 > > _3720,std::shared_ptr< monty::ndarray< int,1 > > _3721,std::shared_ptr< monty::ndarray< double,1 > > _3722,monty::rc_ptr< ::mosek::fusion::Expression > _3723){
  _checked_ptr_1<int> _ptr__3720(_3720 ? _3720->raw() : nullptr, _3720 ? _3720->size(0) : 0);
  _checked_ptr_1<int> _ptr__3721(_3721 ? _3721->raw() : nullptr, _3721 ? _3721->size(0) : 0);
  _checked_ptr_1<double> _ptr__3722(_3722 ? _3722->raw() : nullptr, _3722 ? _3722->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3724 = _3723->getShape();
  _checked_ptr_1<int> _ptr__3724(_3724 ? _3724->raw() : nullptr,_3724 ? _3724->size(0) : 0);
  if (((int)((_3724)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3725 = _ptr__3724[(int)0];
  int _3726 = _ptr__3724[(int)1];
  if (((_3718 < (int)0) || ((_3719 < (int)0) || ((_3725 < (int)0) || (_3726 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_3718 != _3726))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3720)->size(0)) != (int)((_3721)->size(0))) || ((int)((_3720)->size(0)) != (int)((_3722)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3727 = (int)((_3720)->size(0));
  {
    bool _3728 = false;
    int _8538 = (int)0;
    int _8539 = _3727;
    for (int _3729 = _8538; _3729 < _8539; ++_3729)
    {
      {
        _3728 = (_3728 || ((_ptr__3720[_3729] < (int)0) || ((_ptr__3720[_3729] >= _3718) || ((_ptr__3721[_3729] < (int)0) || (_ptr__3721[_3729] >= _3719)))));
      }
    }
    if (_3728)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _3730 = false;
    int _8540 = (int)0;
    int _8541 = (_3727 - (int)1);
    for (int _3731 = _8540; _3731 < _8541; ++_3731)
    {
      {
        _3730 = (_3730 || ((_ptr__3720[_3731] > _ptr__3720[safe_add( _3731,(int)1 )]) || ((_ptr__3720[_3731] == _ptr__3720[safe_add( _3731,(int)1 )]) && (_ptr__3721[_3731] >= _ptr__3721[safe_add( _3731,(int)1 )]))));
      }
    }
    if (_3730)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulLeft::p_ExprMulLeft  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _3732,    int _3733,    std::shared_ptr< monty::ndarray< int,1 > > _3734,    std::shared_ptr< monty::ndarray< int,1 > > _3735,    std::shared_ptr< monty::ndarray< double,1 > > _3736,    monty::rc_ptr< ::mosek::fusion::Expression > _3737,    int _3738){ return new mosek::fusion::ExprMulLeft(_3732,_3733,_3734,_3735,_3736,_3737,_3738); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _3732,    int _3733,    std::shared_ptr< monty::ndarray< int,1 > > _3734,    std::shared_ptr< monty::ndarray< int,1 > > _3735,    std::shared_ptr< monty::ndarray< double,1 > > _3736,    monty::rc_ptr< ::mosek::fusion::Expression > _3737,    int _3738) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_3732,_3733,_3734,_3735,_3736,_3737,_3738); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _3732,    int _3733,    std::shared_ptr< monty::ndarray< int,1 > > _3734,    std::shared_ptr< monty::ndarray< int,1 > > _3735,    std::shared_ptr< monty::ndarray< double,1 > > _3736,    monty::rc_ptr< ::mosek::fusion::Expression > _3737,    int _3738){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3734(_3734 ? _3734->raw() : nullptr, _3734 ? _3734->size(0) : 0);
    _checked_ptr_1<int> _ptr__3735(_3735 ? _3735->raw() : nullptr, _3735 ? _3735->size(0) : 0);
    _checked_ptr_1<double> _ptr__3736(_3736 ? _3736->raw() : nullptr, _3736 ? _3736->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_3732,_3733,_3737->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _3732;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _3733;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _3734;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _3735;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _3736;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _3737;
  }
}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _3739,    int _3740,    std::shared_ptr< monty::ndarray< int,1 > > _3741,    std::shared_ptr< monty::ndarray< int,1 > > _3742,    std::shared_ptr< monty::ndarray< double,1 > > _3743,    monty::rc_ptr< ::mosek::fusion::Expression > _3744){ return new mosek::fusion::ExprMulLeft(_3739,_3740,_3741,_3742,_3743,_3744); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _3739,    int _3740,    std::shared_ptr< monty::ndarray< int,1 > > _3741,    std::shared_ptr< monty::ndarray< int,1 > > _3742,    std::shared_ptr< monty::ndarray< double,1 > > _3743,    monty::rc_ptr< ::mosek::fusion::Expression > _3744) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_3739,_3740,_3741,_3742,_3743,_3744); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _3739,    int _3740,    std::shared_ptr< monty::ndarray< int,1 > > _3741,    std::shared_ptr< monty::ndarray< int,1 > > _3742,    std::shared_ptr< monty::ndarray< double,1 > > _3743,    monty::rc_ptr< ::mosek::fusion::Expression > _3744){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3741(_3741 ? _3741->raw() : nullptr, _3741 ? _3741->size(0) : 0);
    _checked_ptr_1<int> _ptr__3742(_3742 ? _3742->raw() : nullptr, _3742 ? _3742->size(0) : 0);
    _checked_ptr_1<double> _ptr__3743(_3743 ? _3743->raw() : nullptr, _3743 ? _3743->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_3739,_3740,_3741,_3742,_3743,_3744,::mosek::fusion::p_ExprMulLeft::validate(_3739,_3740,_3741,_3742,_3743,_3744));
  }
}void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3745,monty::rc_ptr< ::mosek::fusion::WorkStack > _3746,monty::rc_ptr< ::mosek::fusion::WorkStack > _3747) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_3745,_3746,_3747); }void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3745,monty::rc_ptr< ::mosek::fusion::WorkStack > _3746,monty::rc_ptr< ::mosek::fusion::WorkStack > _3747){
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_3746,_3745,_3747);
  _3746->pop_expr();
  int _3748 = mosek::fusion::p_WorkStack::_get_impl(_3746)->nd;
  int _3749 = mosek::fusion::p_WorkStack::_get_impl(_3746)->nnz;
  int _3750 = mosek::fusion::p_WorkStack::_get_impl(_3746)->nelem;
  bool _3751 = mosek::fusion::p_WorkStack::_get_impl(_3746)->hassp;
  int _3752 = mosek::fusion::p_WorkStack::_get_impl(_3746)->shape_base;
  int _3753 = mosek::fusion::p_WorkStack::_get_impl(_3746)->ptr_base;
  int _3754 = mosek::fusion::p_WorkStack::_get_impl(_3746)->sp_base;
  int _3755 = mosek::fusion::p_WorkStack::_get_impl(_3746)->nidxs_base;
  int _3756 = mosek::fusion::p_WorkStack::_get_impl(_3746)->bfix_base;
  int _3757 = mosek::fusion::p_WorkStack::_get_impl(_3746)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _3758 = mosek::fusion::p_WorkStack::_get_impl(_3746)->i32;
  _checked_ptr_1<int> _ptr__3758(_3758 ? _3758->raw() : nullptr,_3758 ? _3758->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3759 = mosek::fusion::p_WorkStack::_get_impl(_3746)->i64;
  _checked_ptr_1<long long> _ptr__3759(_3759 ? _3759->raw() : nullptr,_3759 ? _3759->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3760 = mosek::fusion::p_WorkStack::_get_impl(_3746)->f64;
  _checked_ptr_1<double> _ptr__3760(_3760 ? _3760->raw() : nullptr,_3760 ? _3760->size(0) : 0);
  if ((_3748 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3761 = (int)9999;
  int _3762 = (int)9999;
  int _3763 = (int)9999;
  int _3764 = _ptr__3758[_3752];
  int _3765 = _ptr__3758[safe_add( _3752,(int)1 )];
  int _3766 = (int)((msubi)->size(0));
  bool _3767 = (_3766 < safe_mul( mdim0,mdim1 ));
  bool _3768 = false;
  int _3769 = (int)0;
  int _3770 = (int)0;
  if (_3751)
  {
    {
      _3761 = _3747->alloci32(_3750);
      _3762 = _3747->alloci32(_3750);
      _3763 = _3747->alloci32(safe_add( _3765,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3771 = mosek::fusion::p_WorkStack::_get_impl(_3747)->i32;
      _checked_ptr_1<int> _ptr__3771(_3771 ? _3771->raw() : nullptr,_3771 ? _3771->size(0) : 0);
      int _8542 = (int)0;
      int _8543 = safe_add( _3765,(int)1 );
      for (int _3772 = _8542; _3772 < _8543; ++_3772)
      {
        {
          _ptr__3771[safe_add( _3763,_3772 )] = (int)0;
        }
      }
      int _8544 = (int)0;
      int _8545 = _3750;
      for (int _3773 = _8544; _3773 < _8545; ++_3773)
      {
        {
          ++ _ptr__3771[safe_add( safe_add( _3763,(_ptr__3759[safe_add( _3754,_3773 )] % _3765) ),(int)1 )];
        }
      }
      int _8546 = (int)0;
      int _8547 = _3765;
      for (int _3774 = _8546; _3774 < _8547; ++_3774)
      {
        {
          _ptr__3771[safe_add( safe_add( _3763,_3774 ),(int)1 )] += _ptr__3771[safe_add( _3763,_3774 )];
        }
      }
      int _8548 = (int)0;
      int _8549 = _3750;
      for (int _3775 = _8548; _3775 < _8549; ++_3775)
      {
        {
          long long _3776 = (_ptr__3759[safe_add( _3754,_3775 )] % _3765);
          _ptr__3771[safe_add( _3761,_ptr__3771[safe_add( _3763,_3776 )] )] = _3775;
          ++ _ptr__3771[safe_add( _3763,_3776 )];
        }
      }
      int _8550 = (int)0;
      int _8551 = _3765;
      for (int _3777 = _8550; _3777 < _8551; ++_3777)
      {
        {
          _ptr__3771[(safe_add( _3763,_3765 ) - _3777)] = _ptr__3771[((safe_add( _3763,_3765 ) - _3777) - (int)1)];
        }
      }
      _ptr__3771[_3763] = (int)0;
      if (_3767)
      {
        {
          int _3778 = (int)0;
          while ( (_3778 < _3766) )
          {
            {
              int _3779 = ((*msubi)(_3778));
              int _3780 = safe_add( _3778,(int)1 );
              while ( ((_3780 < _3766) && (((*msubi)(_3780)) == ((*msubi)(_3778)))) )
              {
                {
                  ++ _3780;
                }
              }
              int _8552 = (int)0;
              int _8553 = _3765;
              for (int _3781 = _8552; _3781 < _8553; ++_3781)
              {
                {
                  bool _3782 = false;
                  int _3783 = _3780;
                  int _3784 = _3778;
                  int _3785 = _ptr__3771[safe_add( safe_add( _3763,_3781 ),(int)1 )];
                  int _3786 = _ptr__3771[safe_add( _3763,_3781 )];
                  while ( ((_3784 < _3783) && (_3786 < _3785)) )
                  {
                    {
                      int _3787 = _ptr__3771[safe_add( _3761,_3786 )];
                      if ((((*msubj)(_3784)) < (_ptr__3759[safe_add( _3754,_3787 )] / _3765)))
                      {
                        {
                          ++ _3784;
                        }
                      }
                      else if((((*msubj)(_3784)) > (_ptr__3759[safe_add( _3754,_3787 )] / _3765)))
                      {
                        {
                          ++ _3786;
                        }
                      }
                      else
                      {
                        {
                          _3782 = true;
                          _3770 += (_ptr__3758[safe_add( safe_add( _3753,_3787 ),(int)1 )] - _ptr__3758[safe_add( _3753,_3787 )]);
                          ++ _3786;
                          ++ _3784;
                        }
                      }
                    }
                  }
                  if (_3782)
                  {
                    {
                      ++ _3769;
                    }
                  }
                  {}
                }
              }
              _3778 = _3780;
            }
          }
        }
      }
      else
      {
        {
          _3769 = safe_mul( mdim0,_3765 );
          _3770 = safe_mul( _3749,mdim0 );
        }
      }
    }
  }
  else
  {
    {
      if (_3767)
      {
        {
          int _3788 = (int)0;
          while ( (_3788 < _3766) )
          {
            {
              int _3789 = safe_add( _3788,(int)1 );
              while ( ((_3789 < _3766) && (((*msubi)(_3788)) == ((*msubi)(_3789)))) )
              {
                {
                  ++ _3789;
                }
              }
              int _3790 = ((*msubi)(_3788));
              int _8554 = (int)0;
              int _8555 = _3765;
              for (int _3791 = _8554; _3791 < _8555; ++_3791)
              {
                {
                  bool _3792 = false;
                  int _8556 = _3788;
                  int _8557 = _3789;
                  for (int _3793 = _8556; _3793 < _8557; ++_3793)
                  {
                    {
                      int _3794 = safe_add( safe_mul( ((*msubj)(_3793)),_3765 ),_3791 );
                      _3770 += (_ptr__3758[safe_add( safe_add( _3753,_3794 ),(int)1 )] - _ptr__3758[safe_add( _3753,_3794 )]);
                      _3792 = true;
                    }
                  }
                  if (_3792)
                  {
                    {
                      ++ _3769;
                    }
                  }
                  {}
                }
              }
              _3788 = _3789;
            }
          }
        }
      }
      else
      {
        {
          _3770 = safe_mul( _3749,mdim0 );
          _3769 = safe_mul( mdim0,_3765 );
        }
      }
    }
  }
  _3768 = (_3769 < safe_mul( mdim0,_3765 ));
  int _3795 = (int)2;
  _3745->alloc_expr(_3795,_3769,_3770,_3768);
  int _3796 = mosek::fusion::p_WorkStack::_get_impl(_3745)->ptr_base;
  int _3797 = mosek::fusion::p_WorkStack::_get_impl(_3745)->nidxs_base;
  int _8558;
  bool _8559 = _3768;
  if (_8559)
  {
    _8558 = mosek::fusion::p_WorkStack::_get_impl(_3745)->sp_base;
  }
  else
  {
    _8558 = _3745->alloci64(_3769);
  }
  int _3798 = _8558;
  int _3799 = mosek::fusion::p_WorkStack::_get_impl(_3745)->cof_base;
  int _3800 = mosek::fusion::p_WorkStack::_get_impl(_3745)->bfix_base;
  int _3801 = mosek::fusion::p_WorkStack::_get_impl(_3745)->shape_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3802 = mosek::fusion::p_WorkStack::_get_impl(_3745)->i64;
  _checked_ptr_1<long long> _ptr__3802(_3802 ? _3802->raw() : nullptr,_3802 ? _3802->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3803 = mosek::fusion::p_WorkStack::_get_impl(_3745)->f64;
  _checked_ptr_1<double> _ptr__3803(_3803 ? _3803->raw() : nullptr,_3803 ? _3803->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3804 = mosek::fusion::p_WorkStack::_get_impl(_3745)->i32;
  _checked_ptr_1<int> _ptr__3804(_3804 ? _3804->raw() : nullptr,_3804 ? _3804->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3805 = mosek::fusion::p_WorkStack::_get_impl(_3747)->i32;
  _checked_ptr_1<int> _ptr__3805(_3805 ? _3805->raw() : nullptr,_3805 ? _3805->size(0) : 0);
  _ptr__3804[_3801] = mdim0;
  _ptr__3804[safe_add( _3801,(int)1 )] = _3765;
  if (_3751)
  {
    {
      _ptr__3804[_3796] = (int)0;
      if (_3767)
      {
        {
          int _3806 = (int)0;
          int _3807 = (int)0;
          int _3808 = (int)0;
          while ( (_3808 < _3766) )
          {
            {
              int _3809 = ((*msubi)(_3808));
              int _3810 = safe_add( _3808,(int)1 );
              while ( ((_3810 < _3766) && (((*msubi)(_3810)) == ((*msubi)(_3808)))) )
              {
                {
                  ++ _3810;
                }
              }
              int _8560 = (int)0;
              int _8561 = _3765;
              for (int _3811 = _8560; _3811 < _8561; ++_3811)
              {
                {
                  bool _3812 = false;
                  double _3813 = 0.0;
                  int _3814 = _3810;
                  int _3815 = _3808;
                  int _3816 = _ptr__3805[safe_add( safe_add( _3763,_3811 ),(int)1 )];
                  int _3817 = _ptr__3805[safe_add( _3763,_3811 )];
                  while ( ((_3815 < _3814) && (_3817 < _3816)) )
                  {
                    {
                      int _3818 = _ptr__3805[safe_add( _3761,_3817 )];
                      if ((((*msubj)(_3815)) < (_ptr__3759[safe_add( _3754,_3818 )] / _3765)))
                      {
                        {
                          ++ _3815;
                        }
                      }
                      else if((((*msubj)(_3815)) > (_ptr__3759[safe_add( _3754,_3818 )] / _3765)))
                      {
                        {
                          ++ _3817;
                        }
                      }
                      else
                      {
                        {
                          _3812 = true;
                          _3813 += (_ptr__3760[safe_add( _3756,_3818 )] * ((*mval)(_3815)));
                          int _3819 = (_ptr__3758[safe_add( safe_add( _3753,_3818 ),(int)1 )] - _ptr__3758[safe_add( _3753,_3818 )]);
                          int _8562 = (int)0;
                          int _8563 = _3819;
                          for (int _3820 = _8562; _3820 < _8563; ++_3820)
                          {
                            {
                              _ptr__3802[safe_add( safe_add( _3797,_3807 ),_3820 )] = _ptr__3759[safe_add( safe_add( _3755,_ptr__3758[safe_add( _3753,_3818 )] ),_3820 )];
                            }
                          }
                          int _8564 = (int)0;
                          int _8565 = _3819;
                          for (int _3821 = _8564; _3821 < _8565; ++_3821)
                          {
                            {
                              _ptr__3803[safe_add( safe_add( _3799,_3807 ),_3821 )] = (_ptr__3760[safe_add( safe_add( _3757,_ptr__3758[safe_add( _3753,_3818 )] ),_3821 )] * ((*mval)(_3815)));
                            }
                          }
                          ++ _3815;
                          ++ _3817;
                          _3807 += _3819;
                        }
                      }
                    }
                  }
                  if (_3812)
                  {
                    {
                      _ptr__3804[safe_add( safe_add( _3796,_3806 ),(int)1 )] = _3807;
                      _ptr__3802[safe_add( _3798,_3806 )] = safe_add( safe_mul( _3809,_3765 ),_3811 );
                      _ptr__3803[safe_add( _3800,_3806 )] = _3813;
                      ++ _3806;
                    }
                  }
                  {}
                }
              }
              _3808 = _3810;
            }
          }
        }
      }
      else
      {
        {
          int _3822 = (int)0;
          int _3823 = (int)0;
          int _8566 = (int)0;
          int _8567 = mdim0;
          for (int _3824 = _8566; _3824 < _8567; ++_3824)
          {
            {
              int _8568 = (int)0;
              int _8569 = _3765;
              for (int _3825 = _8568; _3825 < _8569; ++_3825)
              {
                {
                  double _3826 = 0.0;
                  int _8570 = _ptr__3805[safe_add( _3763,_3825 )];
                  int _8571 = _ptr__3805[safe_add( safe_add( _3763,_3825 ),(int)1 )];
                  for (int _3827 = _8570; _3827 < _8571; ++_3827)
                  {
                    {
                      int _3828 = _ptr__3805[safe_add( _3761,_3827 )];
                      long long _3829 = safe_add( safe_mul( _3824,mdim1 ),(_ptr__3759[safe_add( _3754,_3828 )] / _3765) );
                      _3826 += (_ptr__3760[safe_add( _3756,_3828 )] * ((*mval)(_3829)));
                      int _3830 = (_ptr__3758[safe_add( safe_add( _3753,_3828 ),(int)1 )] - _ptr__3758[safe_add( _3753,_3828 )]);
                      int _8572 = (int)0;
                      int _8573 = _3830;
                      for (int _3831 = _8572; _3831 < _8573; ++_3831)
                      {
                        {
                          _ptr__3802[safe_add( safe_add( _3797,_3823 ),_3831 )] = _ptr__3759[safe_add( safe_add( _3755,_ptr__3758[safe_add( _3753,_3828 )] ),_3831 )];
                          _ptr__3803[safe_add( safe_add( _3799,_3823 ),_3831 )] = (_ptr__3760[safe_add( safe_add( _3757,_ptr__3758[safe_add( _3753,_3828 )] ),_3831 )] * ((*mval)(_3829)));
                        }
                      }
                      _3823 += _3830;
                    }
                  }
                  _ptr__3804[safe_add( safe_add( _3796,_3822 ),(int)1 )] = _3823;
                  _ptr__3803[safe_add( _3800,_3822 )] = _3826;
                  ++ _3822;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _ptr__3804[_3796] = (int)0;
      int _3832 = (int)0;
      int _3833 = (int)0;
      int _3834 = (int)0;
      while ( (_3832 < _3766) )
      {
        {
          int _3835 = safe_add( _3832,(int)1 );
          while ( ((_3835 < _3766) && (((*msubi)(_3832)) == ((*msubi)(_3835)))) )
          {
            {
              ++ _3835;
            }
          }
          int _3836 = ((*msubi)(_3832));
          int _8574 = (int)0;
          int _8575 = _3765;
          for (int _3837 = _8574; _3837 < _8575; ++_3837)
          {
            {
              double _3838 = 0.0;
              bool _3839 = false;
              int _8576 = _3832;
              int _8577 = _3835;
              for (int _3840 = _8576; _3840 < _8577; ++_3840)
              {
                {
                  int _3841 = safe_add( safe_mul( ((*msubj)(_3840)),_3765 ),_3837 );
                  int _3842 = (_ptr__3758[safe_add( safe_add( _3753,_3841 ),(int)1 )] - _ptr__3758[safe_add( _3753,_3841 )]);
                  int _8578 = (int)0;
                  int _8579 = _3842;
                  for (int _3843 = _8578; _3843 < _8579; ++_3843)
                  {
                    {
                      _ptr__3802[safe_add( safe_add( _3797,_3834 ),_3843 )] = _ptr__3759[safe_add( safe_add( _3755,_ptr__3758[safe_add( _3753,_3841 )] ),_3843 )];
                    }
                  }
                  int _8580 = (int)0;
                  int _8581 = _3842;
                  for (int _3844 = _8580; _3844 < _8581; ++_3844)
                  {
                    {
                      _ptr__3803[safe_add( safe_add( _3799,_3834 ),_3844 )] = (_ptr__3760[safe_add( safe_add( _3757,_ptr__3758[safe_add( _3753,_3841 )] ),_3844 )] * ((*mval)(_3840)));
                    }
                  }
                  _3838 += (_ptr__3760[safe_add( _3756,_3841 )] * ((*mval)(_3840)));
                  _3839 = true;
                  _3834 += _3842;
                }
              }
              if (_3839)
              {
                {
                  _ptr__3802[safe_add( _3798,_3833 )] = safe_add( safe_mul( _3836,_3765 ),_3837 );
                  _ptr__3803[safe_add( _3800,_3833 )] = _3838;
                  _ptr__3804[safe_add( safe_add( _3796,_3833 ),(int)1 )] = _3834;
                  ++ _3833;
                }
              }
              {}
            }
          }
          _3832 = _3835;
        }
      }
    }
  }
  _3745->peek_expr();
  if ((!_3768))
  {
    {
      _3745->popi64(_3769);
    }
  }
  {}
  _3747->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int _3845,int _3846,std::shared_ptr< monty::ndarray< int,1 > > _3847){
  _checked_ptr_1<int> _ptr__3847(_3847 ? _3847->raw() : nullptr, _3847 ? _3847->size(0) : 0);
  if (((int)((_3847)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_3846 != _ptr__3847[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3845),(int)(_ptr__3847[(int)1])});
}
int mosek::fusion::p_ExprMulLeft::validate(int _3848,int _3849,std::shared_ptr< monty::ndarray< int,1 > > _3850,std::shared_ptr< monty::ndarray< int,1 > > _3851,std::shared_ptr< monty::ndarray< double,1 > > _3852,monty::rc_ptr< ::mosek::fusion::Expression > _3853){
  _checked_ptr_1<int> _ptr__3850(_3850 ? _3850->raw() : nullptr, _3850 ? _3850->size(0) : 0);
  _checked_ptr_1<int> _ptr__3851(_3851 ? _3851->raw() : nullptr, _3851 ? _3851->size(0) : 0);
  _checked_ptr_1<double> _ptr__3852(_3852 ? _3852->raw() : nullptr, _3852 ? _3852->size(0) : 0);
  if ((_3853->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _3854 = _3853->getDim((int)0);
  int _3855 = _3853->getDim((int)0);
  if (((_3848 < (int)0) || (_3849 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_3849 != _3854))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_3850)->size(0)) != (int)((_3851)->size(0))) || ((int)((_3850)->size(0)) != (int)((_3852)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _3856 = (int)((_3850)->size(0));
  bool _3857 = false;
  bool _3858 = false;
  {
    int _8582 = (int)0;
    int _8583 = _3856;
    for (int _3859 = _8582; _3859 < _8583; ++_3859)
    {
      {
        _3857 = (_3857 || ((_ptr__3850[_3859] < (int)0) || ((_ptr__3850[_3859] >= _3848) || ((_ptr__3851[_3859] < (int)0) || (_ptr__3851[_3859] >= _3849)))));
      }
    }
    if ((!_3857))
    {
      {
        int _8584 = (int)0;
        int _8585 = (_3856 - (int)1);
        for (int _3860 = _8584; _3860 < _8585; ++_3860)
        {
          {
            _3858 = (_3858 || ((_ptr__3850[_3860] > _ptr__3850[safe_add( _3860,(int)1 )]) || ((_ptr__3850[_3860] == _ptr__3850[safe_add( _3860,(int)1 )]) && (_ptr__3851[_3860] >= _ptr__3851[safe_add( _3860,(int)1 )]))));
          }
        }
      }
    }
    {}
    if (((!_3857) && (!_3858)))
    {
      {
        int _8586 = (int)0;
        int _8587 = _3856;
        for (int _3861 = _8586; _3861 < _8587; ++_3861)
        {
          {
            _3857 = (_3857 || ((_ptr__3850[_3861] < (int)0) || ((_ptr__3850[_3861] >= _3848) || ((_ptr__3851[_3861] < (int)0) || (_ptr__3851[_3861] >= _3849)))));
          }
        }
      }
    }
    {}
  }
  if (_3857)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_3858)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVar::p_ExprMulVar  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _3862,    int _3863,    int _3864,    std::shared_ptr< monty::ndarray< int,1 > > _3865,    std::shared_ptr< monty::ndarray< int,1 > > _3866,    std::shared_ptr< monty::ndarray< double,1 > > _3867,    monty::rc_ptr< ::mosek::fusion::Variable > _3868){ return new mosek::fusion::ExprMulVar(_3862,_3863,_3864,_3865,_3866,_3867,_3868); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _3862,    int _3863,    int _3864,    std::shared_ptr< monty::ndarray< int,1 > > _3865,    std::shared_ptr< monty::ndarray< int,1 > > _3866,    std::shared_ptr< monty::ndarray< double,1 > > _3867,    monty::rc_ptr< ::mosek::fusion::Variable > _3868) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_3862,_3863,_3864,_3865,_3866,_3867,_3868); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _3862,    int _3863,    int _3864,    std::shared_ptr< monty::ndarray< int,1 > > _3865,    std::shared_ptr< monty::ndarray< int,1 > > _3866,    std::shared_ptr< monty::ndarray< double,1 > > _3867,    monty::rc_ptr< ::mosek::fusion::Variable > _3868){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3865(_3865 ? _3865->raw() : nullptr, _3865 ? _3865->size(0) : 0);
    _checked_ptr_1<int> _ptr__3866(_3866 ? _3866->raw() : nullptr, _3866 ? _3866->size(0) : 0);
    _checked_ptr_1<double> _ptr__3867(_3867 ? _3867->raw() : nullptr, _3867 ? _3867->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_3862,_3863,_3864,_3865,_3866,_3867,_3868,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _3869 = _3868->getShape();
    _checked_ptr_1<int> _ptr__3869(_3869 ? _3869->raw() : nullptr,_3869 ? _3869->size(0) : 0);
    int _3870 = (int)((_3869)->size(0));
    if ((_3870 != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_3862 && (_ptr__3869[(int)0] != _3864)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_3862) && (_ptr__3869[(int)1] != _3863)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_3865)->size(0)) != (int)((_3866)->size(0))) || ((int)((_3865)->size(0)) != (int)((_3867)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_3863,_3864,_3865,_3866,_3867);
  }
}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _3871,    int _3872,    int _3873,    std::shared_ptr< monty::ndarray< int,1 > > _3874,    std::shared_ptr< monty::ndarray< int,1 > > _3875,    std::shared_ptr< monty::ndarray< double,1 > > _3876,    monty::rc_ptr< ::mosek::fusion::Variable > _3877,    int _3878){ return new mosek::fusion::ExprMulVar(_3871,_3872,_3873,_3874,_3875,_3876,_3877,_3878); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _3871,    int _3872,    int _3873,    std::shared_ptr< monty::ndarray< int,1 > > _3874,    std::shared_ptr< monty::ndarray< int,1 > > _3875,    std::shared_ptr< monty::ndarray< double,1 > > _3876,    monty::rc_ptr< ::mosek::fusion::Variable > _3877,    int _3878) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_3871,_3872,_3873,_3874,_3875,_3876,_3877,_3878); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _3871,    int _3872,    int _3873,    std::shared_ptr< monty::ndarray< int,1 > > _3874,    std::shared_ptr< monty::ndarray< int,1 > > _3875,    std::shared_ptr< monty::ndarray< double,1 > > _3876,    monty::rc_ptr< ::mosek::fusion::Variable > _3877,    int _3878){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__3874(_3874 ? _3874->raw() : nullptr, _3874 ? _3874->size(0) : 0);
    _checked_ptr_1<int> _ptr__3875(_3875 ? _3875->raw() : nullptr, _3875 ? _3875->size(0) : 0);
    _checked_ptr_1<double> _ptr__3876(_3876 ? _3876->raw() : nullptr, _3876 ? _3876->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_3872,_3873,_3877->getShape(),_3871));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _3871;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _3877;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _3872;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _3873;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_3874);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_3875);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_3876);
  }
}void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3879,monty::rc_ptr< ::mosek::fusion::WorkStack > _3880,monty::rc_ptr< ::mosek::fusion::WorkStack > _3881) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_3879,_3880,_3881); }void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3879,monty::rc_ptr< ::mosek::fusion::WorkStack > _3880,monty::rc_ptr< ::mosek::fusion::WorkStack > _3881){
  if (left)
  {
    {
      _pubthis->eval_left(_3879,_3880,_3881);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_3879,_3880,_3881);
    }
  }
}
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _3882,monty::rc_ptr< ::mosek::fusion::WorkStack > _3883,monty::rc_ptr< ::mosek::fusion::WorkStack > _3884) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_3882,_3883,_3884); }void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _3882,monty::rc_ptr< ::mosek::fusion::WorkStack > _3883,monty::rc_ptr< ::mosek::fusion::WorkStack > _3884){
  int _3885 = mosek::fusion::p_WorkStack::_get_impl(_3883)->pi32;
  int _3886 = mosek::fusion::p_WorkStack::_get_impl(_3883)->pi64;
  int _3887 = x->numInst();
  int _3888 = _3883->alloci64(_3887);
  int _3889 = _3883->alloci64(_3887);
  int _3890 = _3883->alloci32(_3887);
  int _3891 = _3883->alloci32(_3887);
  std::shared_ptr< monty::ndarray< int,1 > > _3892 = x->getShape();
  _checked_ptr_1<int> _ptr__3892(_3892 ? _3892->raw() : nullptr,_3892 ? _3892->size(0) : 0);
  int _3893 = (int)((_3892)->size(0));
  long long _3894 = safe_mul( _ptr__3892[(int)0],_ptr__3892[(int)1] );
  int _3895 = _ptr__3892[(int)1];
  int _3896 = _ptr__3892[(int)0];
  int _3897 = _3883->alloci32(safe_add( _3896,(int)1 ));
  int _3898 = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _3899 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__3899(_3899 ? _3899->raw() : nullptr,_3899 ? _3899->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3900 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__3900(_3900 ? _3900->raw() : nullptr,_3900 ? _3900->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3901 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__3901(_3901 ? _3901->raw() : nullptr,_3901 ? _3901->size(0) : 0);
  int _3902 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _3903 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _3904 = ((_3898 / _3902) == _3903);
  int _3905 = _3883->alloci32(_3898);
  int _3906 = _3883->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _3907 = mosek::fusion::p_WorkStack::_get_impl(_3883)->i32;
  _checked_ptr_1<int> _ptr__3907(_3907 ? _3907->raw() : nullptr,_3907 ? _3907->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3908 = mosek::fusion::p_WorkStack::_get_impl(_3883)->i64;
  _checked_ptr_1<long long> _ptr__3908(_3908 ? _3908->raw() : nullptr,_3908 ? _3908->size(0) : 0);
  int _3909 = (int)0;
  int _3910 = (int)0;
  x->inst(_3889,_3908,_3888,_3908);
  if (_3904)
  {
    {
      int _3911 = (int)0;
      if ((_3887 > (int)0))
      {
        {
          _3911 = (int)1;
          if ((_3896 > (int)1))
          {
            {
              if ((_3895 == (int)1))
              {
                {
                  int _8588 = (int)1;
                  int _8589 = _3887;
                  for (int _3912 = _8588; _3912 < _8589; ++_3912)
                  {
                    {
                      if ((_ptr__3908[safe_add( _3889,_3912 )] > _ptr__3908[(safe_add( _3889,_3912 ) - (int)1)]))
                      {
                        {
                          ++ _3911;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int _8590 = (int)1;
                  int _8591 = _3887;
                  for (int _3913 = _8590; _3913 < _8591; ++_3913)
                  {
                    {
                      if (((_ptr__3908[safe_add( _3889,_3913 )] / _3895) > (_ptr__3908[(safe_add( _3889,_3913 ) - (int)1)] / _3895)))
                      {
                        {
                          ++ _3911;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _3910 = safe_mul( _3911,_3903 );
      _3909 = safe_mul( _3887,_3903 );
      bool _3914 = (_3911 < _3896);
      int _3915 = _3882->alloci32(safe_add( _3910,(int)1 ));
      int _8592;
      bool _8593 = _3914;
      if (_8593)
      {
        _8592 = (int)1;
      }
      else
      {
        _8592 = (int)0;
      }
      _3882->pushi32(_8592);
      _3882->pushi32(_3909);
      _3882->pushi32(_3910);
      _3882->pushi32(_3896);
      _3882->pushi32(_3903);
      _3882->pushi32((int)2);
      int _3916 = _3882->alloci64(_3909);
      int _3917 = _3882->alloci64(_3910);
      int _3918 = _3882->allocf64(_3909);
      int _3919 = _3882->allocf64(_3910);
      std::shared_ptr< monty::ndarray< int,1 > > _3920 = mosek::fusion::p_WorkStack::_get_impl(_3882)->i32;
      _checked_ptr_1<int> _ptr__3920(_3920 ? _3920->raw() : nullptr,_3920 ? _3920->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3921 = mosek::fusion::p_WorkStack::_get_impl(_3882)->i64;
      _checked_ptr_1<long long> _ptr__3921(_3921 ? _3921->raw() : nullptr,_3921 ? _3921->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3922 = mosek::fusion::p_WorkStack::_get_impl(_3882)->f64;
      _checked_ptr_1<double> _ptr__3922(_3922 ? _3922->raw() : nullptr,_3922 ? _3922->size(0) : 0);
      {
        int _3923 = (int)0;
        int _3924 = (int)0;
        int _3925 = (int)0;
        _ptr__3920[_3915] = (int)0;
        while ( (_3923 < _3887) )
        {
          {
            int _3926 = _3923;
            ++ _3923;
            while ( ((_3923 < _3887) && ((_ptr__3908[safe_add( _3889,_3923 )] / _3895) == (_ptr__3908[safe_add( _3889,_3926 )] / _3895))) )
            {
              {
                ++ _3923;
              }
            }
            long long _3927 = (_ptr__3908[safe_add( _3889,_3926 )] / _3895);
            int _8594 = (int)0;
            int _8595 = _3903;
            for (int _3928 = _8594; _3928 < _8595; ++_3928)
            {
              {
                int _8596 = _3926;
                int _8597 = _3923;
                for (int _3929 = _8596; _3929 < _8597; ++_3929)
                {
                  {
                    long long _3930 = (_ptr__3908[safe_add( _3889,_3929 )] % _3895);
                    _ptr__3921[safe_add( _3916,_3925 )] = _ptr__3908[safe_add( _3888,_3929 )];
                    _ptr__3922[safe_add( _3918,_3925 )] = _ptr__3901[safe_add( safe_mul( _3930,_3903 ),_3928 )];
                    ++ _3925;
                  }
                }
                _ptr__3920[safe_add( safe_add( _3915,_3924 ),(int)1 )] = _3925;
                _ptr__3922[safe_add( _3919,_3924 )] = 0.0;
                _ptr__3921[safe_add( _3917,_3924 )] = safe_add( safe_mul( _3927,_3903 ),_3928 );
                ++ _3924;
              }
            }
          }
        }
      }
      if ((!_3914))
      {
        {
          _3882->popi64(_3910);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_3903 == (int)1))
        {
          {
            int _8598 = (int)0;
            int _8599 = _3898;
            for (int _3931 = _8598; _3931 < _8599; ++_3931)
            {
              {
                _ptr__3907[safe_add( _3905,_3931 )] = _3931;
              }
            }
            _ptr__3907[_3906] = (int)0;
            _ptr__3907[safe_add( _3906,(int)1 )] = _3898;
          }
        }
        else
        {
          {
            _ptr__3907[_3906] = (int)0;
            int _8600 = (int)0;
            int _8601 = safe_add( _3903,(int)1 );
            for (int _3932 = _8600; _3932 < _8601; ++_3932)
            {
              {
                _ptr__3907[safe_add( _3906,_3932 )] = (int)0;
              }
            }
            int _8602 = (int)0;
            int _8603 = _3898;
            for (int _3933 = _8602; _3933 < _8603; ++_3933)
            {
              {
                ++ _ptr__3907[safe_add( safe_add( _3906,_ptr__3900[_3933] ),(int)1 )];
              }
            }
            int _8604 = (int)0;
            int _8605 = mdimj;
            for (int _3934 = _8604; _3934 < _8605; ++_3934)
            {
              {
                _ptr__3907[safe_add( safe_add( _3906,_3934 ),(int)1 )] += _ptr__3907[safe_add( _3906,_3934 )];
              }
            }
            int _8606 = (int)0;
            int _8607 = _3898;
            for (int _3935 = _8606; _3935 < _8607; ++_3935)
            {
              {
                _ptr__3907[safe_add( _3905,_ptr__3907[safe_add( _3906,_ptr__3900[_3935] )] )] = _3935;
                ++ _ptr__3907[safe_add( _3906,_ptr__3900[_3935] )];
              }
            }
            int _8608 = (int)0;
            int _8609 = _3903;
            for (int _3936 = _8608; _3936 < _8609; ++_3936)
            {
              {
                _ptr__3907[(safe_add( _3906,_3903 ) - _3936)] = _ptr__3907[((safe_add( _3906,_3903 ) - _3936) - (int)1)];
              }
            }
            _ptr__3907[_3906] = (int)0;
          }
        }
      }
      if (((_3887 / _3896) == _3895))
      {
        {
          int _3937 = (int)0;
          {
            int _3938 = (int)0;
            while ( (_3938 < _3898) )
            {
              {
                ++ _3938;
                while ( ((_3938 < _3898) && (_ptr__3900[_ptr__3907[(safe_add( _3905,_3938 ) - (int)1)]] == _ptr__3900[_ptr__3907[safe_add( _3905,_3938 )]])) )
                {
                  {
                    ++ _3938;
                  }
                }
                ++ _3937;
              }
            }
          }
          _3910 = safe_mul( _3937,_3896 );
          _3909 = safe_mul( _3898,_3896 );
          bool _3939 = (_3937 < _3903);
          int _3940 = _3882->alloci32(safe_add( _3910,(int)1 ));
          int _8610;
          bool _8611 = _3939;
          if (_8611)
          {
            _8610 = (int)1;
          }
          else
          {
            _8610 = (int)0;
          }
          _3882->pushi32(_8610);
          _3882->pushi32(_3909);
          _3882->pushi32(_3910);
          _3882->pushi32(_3896);
          _3882->pushi32(_3903);
          _3882->pushi32((int)2);
          int _3941 = _3882->alloci64(_3909);
          int _3942 = _3882->alloci64(_3910);
          int _3943 = _3882->allocf64(_3909);
          int _3944 = _3882->allocf64(_3910);
          std::shared_ptr< monty::ndarray< int,1 > > _3945 = mosek::fusion::p_WorkStack::_get_impl(_3882)->i32;
          _checked_ptr_1<int> _ptr__3945(_3945 ? _3945->raw() : nullptr,_3945 ? _3945->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3946 = mosek::fusion::p_WorkStack::_get_impl(_3882)->i64;
          _checked_ptr_1<long long> _ptr__3946(_3946 ? _3946->raw() : nullptr,_3946 ? _3946->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3947 = mosek::fusion::p_WorkStack::_get_impl(_3882)->f64;
          _checked_ptr_1<double> _ptr__3947(_3947 ? _3947->raw() : nullptr,_3947 ? _3947->size(0) : 0);
          _ptr__3945[_3940] = (int)0;
          int _3948 = (int)0;
          int _3949 = (int)0;
          int _8612 = (int)0;
          int _8613 = _3896;
          for (int _3950 = _8612; _3950 < _8613; ++_3950)
          {
            {
              int _3951 = (int)0;
              while ( (_3951 < _3898) )
              {
                {
                  int _3952 = _3951;
                  ++ _3951;
                  while ( ((_3951 < _3898) && (_ptr__3900[_ptr__3907[safe_add( _3905,_3952 )]] == _ptr__3900[_ptr__3907[safe_add( _3905,_3951 )]])) )
                  {
                    {
                      ++ _3951;
                    }
                  }
                  int _3953 = _ptr__3900[_ptr__3907[safe_add( _3905,_3952 )]];
                  int _8614 = _3952;
                  int _8615 = _3951;
                  for (int _3954 = _8614; _3954 < _8615; ++_3954)
                  {
                    {
                      int _3955 = _ptr__3899[_ptr__3907[safe_add( _3905,_3954 )]];
                      _ptr__3946[safe_add( _3941,_3949 )] = _ptr__3908[safe_add( safe_add( _3888,safe_mul( _3950,_3895 ) ),_3955 )];
                      _ptr__3947[safe_add( _3943,_3949 )] = _ptr__3901[_ptr__3907[safe_add( _3905,_3954 )]];
                      ++ _3949;
                    }
                  }
                  _ptr__3947[safe_add( _3944,_3948 )] = 0.0;
                  _ptr__3946[safe_add( _3942,_3948 )] = safe_add( safe_mul( _3950,_3903 ),_3953 );
                  _ptr__3945[safe_add( safe_add( _3940,_3948 ),(int)1 )] = _3949;
                  ++ _3948;
                }
              }
            }
          }
          if ((!_3939))
          {
            {
              _3882->popi64(_3910);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _8616 = (int)0;
          int _8617 = safe_add( _3896,(int)1 );
          for (int _3956 = _8616; _3956 < _8617; ++_3956)
          {
            {
              _ptr__3907[safe_add( _3897,_3956 )] = (int)0;
            }
          }
          if ((_3893 == (int)1))
          {
            {
              int _8618 = (int)0;
              int _8619 = _3887;
              for (int _3957 = _8618; _3957 < _8619; ++_3957)
              {
                {
                  _ptr__3907[safe_add( _3890,_3957 )] = (int)0;
                }
              }
              int _8620 = (int)0;
              int _8621 = _3887;
              for (int _3958 = _8620; _3958 < _8621; ++_3958)
              {
                {
                  _ptr__3907[safe_add( _3891,_3958 )] = (int)_ptr__3908[safe_add( _3889,_3958 )];
                }
              }
              _ptr__3907[_3897] = (int)0;
              _ptr__3907[safe_add( _3897,(int)1 )] = _3887;
            }
          }
          else
          {
            {
              int _8622 = (int)0;
              int _8623 = _3887;
              for (int _3959 = _8622; _3959 < _8623; ++_3959)
              {
                {
                  _ptr__3907[safe_add( _3890,_3959 )] = (int)(_ptr__3908[safe_add( _3889,_3959 )] / _ptr__3892[(int)1]);
                }
              }
              int _8624 = (int)0;
              int _8625 = _3887;
              for (int _3960 = _8624; _3960 < _8625; ++_3960)
              {
                {
                  _ptr__3907[safe_add( _3891,_3960 )] = (int)(_ptr__3908[safe_add( _3889,_3960 )] % _ptr__3892[(int)1]);
                }
              }
              _ptr__3907[_3897] = (int)0;
              int _8626 = (int)0;
              int _8627 = _3887;
              for (int _3961 = _8626; _3961 < _8627; ++_3961)
              {
                {
                  ++ _ptr__3907[safe_add( safe_add( _3897,_ptr__3907[safe_add( _3890,_3961 )] ),(int)1 )];
                }
              }
              int _8628 = (int)0;
              int _8629 = _3896;
              for (int _3962 = _8628; _3962 < _8629; ++_3962)
              {
                {
                  _ptr__3907[safe_add( safe_add( _3897,_3962 ),(int)1 )] += _ptr__3907[safe_add( _3897,_3962 )];
                }
              }
            }
          }
          int _8630 = (int)0;
          int _8631 = _3896;
          for (int _3963 = _8630; _3963 < _8631; ++_3963)
          {
            {
              int _8632 = (int)0;
              int _8633 = mdimj;
              for (int _3964 = _8632; _3964 < _8633; ++_3964)
              {
                {
                  int _3965 = (int)0;
                  int _3966 = _ptr__3907[safe_add( safe_add( _3897,_3963 ),(int)1 )];
                  int _3967 = _ptr__3907[safe_add( safe_add( _3906,_3964 ),(int)1 )];
                  int _3968 = _ptr__3907[safe_add( _3897,_3963 )];
                  int _3969 = _ptr__3907[safe_add( _3906,_3964 )];
                  while ( ((_3969 < _3967) && (_3968 < _3966)) )
                  {
                    {
                      if ((_ptr__3899[_ptr__3907[safe_add( _3905,_3969 )]] < _ptr__3907[safe_add( _3891,_3968 )]))
                      {
                        {
                          ++ _3969;
                        }
                      }
                      else if((_ptr__3899[_ptr__3907[safe_add( _3905,_3969 )]] > _ptr__3907[safe_add( _3891,_3968 )]))
                      {
                        {
                          ++ _3968;
                        }
                      }
                      else
                      {
                        {
                          ++ _3965;
                          ++ _3969;
                          ++ _3968;
                        }
                      }
                    }
                  }
                  if ((_3965 > (int)0))
                  {
                    {
                      _3909 += _3965;
                      ++ _3910;
                    }
                  }
                  {}
                }
              }
            }
          }
          int _3970 = _3882->alloci32(safe_add( _3910,(int)1 ));
          bool _8634;
          bool _8635 = (_3910 < safe_mul( _3895,mdimi ));
          if (_8635)
          {
            _8634 = true;
          }
          else
          {
            _8634 = false;
          }
          bool _3971 = _8634;
          int _8636;
          bool _8637 = _3971;
          if (_8637)
          {
            _8636 = (int)1;
          }
          else
          {
            _8636 = (int)0;
          }
          _3882->pushi32(_8636);
          _3882->pushi32(_3909);
          _3882->pushi32(_3910);
          _3882->pushi32(_3896);
          _3882->pushi32(mdimj);
          _3882->pushi32((int)2);
          int _3972 = _3882->alloci64(_3909);
          int _3973 = _3882->alloci64(_3910);
          int _3974 = _3882->allocf64(_3909);
          int _3975 = _3882->allocf64(_3910);
          std::shared_ptr< monty::ndarray< int,1 > > _3976 = mosek::fusion::p_WorkStack::_get_impl(_3882)->i32;
          _checked_ptr_1<int> _ptr__3976(_3976 ? _3976->raw() : nullptr,_3976 ? _3976->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _3977 = mosek::fusion::p_WorkStack::_get_impl(_3882)->i64;
          _checked_ptr_1<long long> _ptr__3977(_3977 ? _3977->raw() : nullptr,_3977 ? _3977->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3978 = mosek::fusion::p_WorkStack::_get_impl(_3882)->f64;
          _checked_ptr_1<double> _ptr__3978(_3978 ? _3978->raw() : nullptr,_3978 ? _3978->size(0) : 0);
          {
            int _3979 = (int)0;
            int _3980 = (int)0;
            int _3981 = (int)0;
            _ptr__3976[_3970] = (int)0;
            int _8638 = (int)0;
            int _8639 = _3910;
            for (int _3982 = _8638; _3982 < _8639; ++_3982)
            {
              {
                _ptr__3978[safe_add( _3975,_3982 )] = 0.0;
              }
            }
            int _8640 = (int)0;
            int _8641 = _3896;
            for (int _3983 = _8640; _3983 < _8641; ++_3983)
            {
              {
                int _8642 = (int)0;
                int _8643 = mdimj;
                for (int _3984 = _8642; _3984 < _8643; ++_3984)
                {
                  {
                    int _3985 = (int)0;
                    int _3986 = _ptr__3907[safe_add( safe_add( _3897,_3983 ),(int)1 )];
                    int _3987 = _ptr__3907[safe_add( safe_add( _3906,_3984 ),(int)1 )];
                    int _3988 = _ptr__3907[safe_add( _3897,_3983 )];
                    int _3989 = _ptr__3907[safe_add( _3906,_3984 )];
                    while ( ((_3989 < _3987) && (_3988 < _3986)) )
                    {
                      {
                        if ((_ptr__3899[_ptr__3907[safe_add( _3905,_3989 )]] < _ptr__3907[safe_add( _3891,_3988 )]))
                        {
                          {
                            ++ _3989;
                          }
                        }
                        else if((_ptr__3899[_ptr__3907[safe_add( _3905,_3989 )]] > _ptr__3907[safe_add( _3891,_3988 )]))
                        {
                          {
                            ++ _3988;
                          }
                        }
                        else
                        {
                          {
                            _ptr__3977[safe_add( _3972,_3981 )] = _ptr__3908[safe_add( _3888,_3988 )];
                            _ptr__3978[safe_add( _3974,_3981 )] = _ptr__3901[_ptr__3907[safe_add( _3905,_3989 )]];
                            ++ _3985;
                            ++ _3981;
                            ++ _3989;
                            ++ _3988;
                          }
                        }
                      }
                    }
                    if ((_3985 > (int)0))
                    {
                      {
                        _ptr__3976[safe_add( safe_add( _3970,_3980 ),(int)1 )] = _3981;
                        _ptr__3977[safe_add( _3973,_3980 )] = _3979;
                        ++ _3980;
                      }
                    }
                    {}
                    ++ _3979;
                  }
                }
              }
            }
          }
          if ((!_3971))
          {
            {
              _3882->popi64(_3910);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_3883)->pi32 = _3885;
  mosek::fusion::p_WorkStack::_get_impl(_3883)->pi64 = _3886;
}
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _3990,monty::rc_ptr< ::mosek::fusion::WorkStack > _3991,monty::rc_ptr< ::mosek::fusion::WorkStack > _3992) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_3990,_3991,_3992); }void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _3990,monty::rc_ptr< ::mosek::fusion::WorkStack > _3991,monty::rc_ptr< ::mosek::fusion::WorkStack > _3992){
  int _3993 = x->numInst();
  std::shared_ptr< monty::ndarray< int,1 > > _3994 = x->getShape();
  _checked_ptr_1<int> _ptr__3994(_3994 ? _3994->raw() : nullptr,_3994 ? _3994->size(0) : 0);
  int _3995 = (int)((_3994)->size(0));
  int _3996 = _3992->alloci64(_3993);
  int _3997 = _3992->alloci64(_3993);
  int _3998 = _3992->alloci32(_3993);
  int _3999 = _3992->alloci32(_3993);
  int _4000 = _3992->alloci32(_3993);
  int _4001 = _3992->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _4002 = x->getShape();
  _checked_ptr_1<int> _ptr__4002(_4002 ? _4002->raw() : nullptr,_4002 ? _4002->size(0) : 0);
  int _4003 = (int)((_4002)->size(0));
  int _8644;
  bool _8645 = (_4003 == (int)1);
  if (_8645)
  {
    _8644 = (int)1;
  }
  else
  {
    _8644 = _ptr__4002[(int)1];
  }
  int _4004 = _8644;
  int _4005 = _ptr__4002[(int)0];
  int _4006 = _3992->alloci32(safe_add( _4004,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _4007 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__4007(_4007 ? _4007->raw() : nullptr,_4007 ? _4007->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4008 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__4008(_4008 ? _4008->raw() : nullptr,_4008 ? _4008->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4009 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__4009(_4009 ? _4009->raw() : nullptr,_4009 ? _4009->size(0) : 0);
  int _4010 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _4011 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int _4012 = (int)0;
  int _4013 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4014 = mosek::fusion::p_WorkStack::_get_impl(_3992)->i32;
  _checked_ptr_1<int> _ptr__4014(_4014 ? _4014->raw() : nullptr,_4014 ? _4014->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4015 = mosek::fusion::p_WorkStack::_get_impl(_3992)->i64;
  _checked_ptr_1<long long> _ptr__4015(_4015 ? _4015->raw() : nullptr,_4015 ? _4015->size(0) : 0);
  x->inst(_3997,_4015,_3996,_4015);
  {
    int _8646 = (int)0;
    int _8647 = safe_add( _4010,(int)1 );
    for (int _4016 = _8646; _4016 < _8647; ++_4016)
    {
      {
        _ptr__4014[safe_add( _4001,_4016 )] = (int)0;
      }
    }
    int _8648 = (int)0;
    int _8649 = (int)((_4007)->size(0));
    for (int _4017 = _8648; _4017 < _8649; ++_4017)
    {
      {
        ++ _ptr__4014[safe_add( safe_add( _4001,_ptr__4007[_4017] ),(int)1 )];
      }
    }
    int _8650 = (int)0;
    int _8651 = _4010;
    for (int _4018 = _8650; _4018 < _8651; ++_4018)
    {
      {
        _ptr__4014[safe_add( safe_add( _4001,_4018 ),(int)1 )] += _ptr__4014[safe_add( _4001,_4018 )];
      }
    }
    if ((_4003 == (int)1))
    {
      {
        int _8652 = (int)0;
        int _8653 = _3993;
        for (int _4019 = _8652; _4019 < _8653; ++_4019)
        {
          {
            _ptr__4014[safe_add( _3998,_4019 )] = (int)_ptr__4015[safe_add( _3997,_4019 )];
          }
        }
        int _8654 = (int)0;
        int _8655 = _3993;
        for (int _4020 = _8654; _4020 < _8655; ++_4020)
        {
          {
            _ptr__4014[safe_add( _3999,_4020 )] = (int)0;
          }
        }
      }
    }
    else
    {
      {
        int _8656 = (int)0;
        int _8657 = _3993;
        for (int _4021 = _8656; _4021 < _8657; ++_4021)
        {
          {
            _ptr__4014[safe_add( _3998,_4021 )] = (int)(_ptr__4015[safe_add( _3997,_4021 )] / _4004);
          }
        }
        int _8658 = (int)0;
        int _8659 = _3993;
        for (int _4022 = _8658; _4022 < _8659; ++_4022)
        {
          {
            _ptr__4014[safe_add( _3999,_4022 )] = (int)(_ptr__4015[safe_add( _3997,_4022 )] % _4004);
          }
        }
      }
    }
    if ((_4003 > (int)1))
    {
      {
        int _8660 = (int)0;
        int _8661 = safe_add( _4004,(int)1 );
        for (int _4023 = _8660; _4023 < _8661; ++_4023)
        {
          {
            _ptr__4014[safe_add( _4006,_4023 )] = (int)0;
          }
        }
        int _8662 = (int)0;
        int _8663 = _3993;
        for (int _4024 = _8662; _4024 < _8663; ++_4024)
        {
          {
            ++ _ptr__4014[safe_add( safe_add( _4006,_ptr__4014[safe_add( _3999,_4024 )] ),(int)1 )];
          }
        }
        int _8664 = (int)0;
        int _8665 = _4004;
        for (int _4025 = _8664; _4025 < _8665; ++_4025)
        {
          {
            _ptr__4014[safe_add( safe_add( _4006,_4025 ),(int)1 )] += _ptr__4014[safe_add( _4006,_4025 )];
          }
        }
        int _8666 = (int)0;
        int _8667 = _3993;
        for (int _4026 = _8666; _4026 < _8667; ++_4026)
        {
          {
            _ptr__4014[safe_add( _4000,_ptr__4014[safe_add( _4006,_ptr__4014[safe_add( _3999,_4026 )] )] )] = _4026;
            ++ _ptr__4014[safe_add( _4006,_ptr__4014[safe_add( _3999,_4026 )] )];
          }
        }
        int _8668 = (int)0;
        int _8669 = _4004;
        for (int _4027 = _8668; _4027 < _8669; ++_4027)
        {
          {
            _ptr__4014[(safe_add( _4006,_4004 ) - _4027)] = _ptr__4014[((safe_add( _4006,_4004 ) - _4027) - (int)1)];
          }
        }
        _ptr__4014[_4006] = (int)0;
      }
    }
    else
    {
      {
        _ptr__4014[_4006] = (int)0;
        _ptr__4014[safe_add( _4006,(int)1 )] = _3993;
        int _8670 = (int)0;
        int _8671 = _3993;
        for (int _4028 = _8670; _4028 < _8671; ++_4028)
        {
          {
            _ptr__4014[safe_add( _4000,_4028 )] = _4028;
          }
        }
      }
    }
    int _8672 = (int)0;
    int _8673 = _4010;
    for (int _4029 = _8672; _4029 < _8673; ++_4029)
    {
      {
        int _8674 = (int)0;
        int _8675 = _4004;
        for (int _4030 = _8674; _4030 < _8675; ++_4030)
        {
          {
            int _4031 = (int)0;
            int _4032 = _ptr__4014[safe_add( safe_add( _4006,_4030 ),(int)1 )];
            int _4033 = _ptr__4014[safe_add( safe_add( _4001,_4029 ),(int)1 )];
            int _4034 = _ptr__4014[safe_add( _4006,_4030 )];
            int _4035 = _ptr__4014[safe_add( _4001,_4029 )];
            while ( ((_4035 < _4033) && (_4034 < _4032)) )
            {
              {
                if ((_ptr__4008[_4035] < _ptr__4014[safe_add( _3998,_ptr__4014[safe_add( _4000,_4034 )] )]))
                {
                  {
                    ++ _4035;
                  }
                }
                else if((_ptr__4008[_4035] > _ptr__4014[safe_add( _3998,_ptr__4014[safe_add( _4000,_4034 )] )]))
                {
                  {
                    ++ _4034;
                  }
                }
                else
                {
                  {
                    ++ _4031;
                    ++ _4035;
                    ++ _4034;
                  }
                }
              }
            }
            if ((_4031 > (int)0))
            {
              {
                _4012 += _4031;
                ++ _4013;
              }
            }
            {}
          }
        }
      }
    }
  }
  bool _8676;
  bool _8677 = (_4013 < safe_mul( _4004,_4010 ));
  if (_8677)
  {
    _8676 = true;
  }
  else
  {
    _8676 = false;
  }
  bool _4036 = _8676;
  int _4037 = _4003;
  _3990->alloc_expr(_4037,_4013,_4012,_4036);
  int _4038 = mosek::fusion::p_WorkStack::_get_impl(_3990)->ptr_base;
  int _4039 = mosek::fusion::p_WorkStack::_get_impl(_3990)->shape_base;
  int _4040 = mosek::fusion::p_WorkStack::_get_impl(_3990)->nidxs_base;
  int _8678;
  bool _8679 = _4036;
  if (_8679)
  {
    _8678 = mosek::fusion::p_WorkStack::_get_impl(_3990)->sp_base;
  }
  else
  {
    _8678 = _3990->alloci64(_4013);
  }
  int _4041 = _8678;
  int _4042 = mosek::fusion::p_WorkStack::_get_impl(_3990)->cof_base;
  int _4043 = mosek::fusion::p_WorkStack::_get_impl(_3990)->bfix_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4044 = mosek::fusion::p_WorkStack::_get_impl(_3990)->i32;
  _checked_ptr_1<int> _ptr__4044(_4044 ? _4044->raw() : nullptr,_4044 ? _4044->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4045 = mosek::fusion::p_WorkStack::_get_impl(_3990)->i64;
  _checked_ptr_1<long long> _ptr__4045(_4045 ? _4045->raw() : nullptr,_4045 ? _4045->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4046 = mosek::fusion::p_WorkStack::_get_impl(_3990)->f64;
  _checked_ptr_1<double> _ptr__4046(_4046 ? _4046->raw() : nullptr,_4046 ? _4046->size(0) : 0);
  _ptr__4044[_4039] = _4010;
  if ((_4003 > (int)1))
  {
    {
      _ptr__4044[safe_add( _4039,(int)1 )] = _4004;
    }
  }
  {}
  {
    int _4047 = (int)0;
    int _4048 = (int)0;
    int _4049 = (int)0;
    _ptr__4044[_4038] = (int)0;
    int _8680 = (int)0;
    int _8681 = _4013;
    for (int _4050 = _8680; _4050 < _8681; ++_4050)
    {
      {
        _ptr__4046[safe_add( _4043,_4050 )] = 0.0;
      }
    }
    int _8682 = (int)0;
    int _8683 = _4010;
    for (int _4051 = _8682; _4051 < _8683; ++_4051)
    {
      {
        int _8684 = (int)0;
        int _8685 = _4004;
        for (int _4052 = _8684; _4052 < _8685; ++_4052)
        {
          {
            int _4053 = (int)0;
            int _4054 = _ptr__4014[safe_add( safe_add( _4006,_4052 ),(int)1 )];
            int _4055 = _ptr__4014[safe_add( safe_add( _4001,_4051 ),(int)1 )];
            int _4056 = _ptr__4014[safe_add( _4006,_4052 )];
            int _4057 = _ptr__4014[safe_add( _4001,_4051 )];
            while ( ((_4057 < _4055) && (_4056 < _4054)) )
            {
              {
                if ((_ptr__4008[_4057] < _ptr__4014[safe_add( _3998,_ptr__4014[safe_add( _4000,_4056 )] )]))
                {
                  {
                    ++ _4057;
                  }
                }
                else if((_ptr__4008[_4057] > _ptr__4014[safe_add( _3998,_ptr__4014[safe_add( _4000,_4056 )] )]))
                {
                  {
                    ++ _4056;
                  }
                }
                else
                {
                  {
                    _ptr__4045[safe_add( _4040,_4049 )] = _ptr__4015[safe_add( _3996,_ptr__4014[safe_add( _4000,_4056 )] )];
                    _ptr__4046[safe_add( _4042,_4049 )] = _ptr__4009[_4057];
                    ++ _4053;
                    ++ _4049;
                    ++ _4057;
                    ++ _4056;
                  }
                }
              }
            }
            if ((_4053 > (int)0))
            {
              {
                _ptr__4044[safe_add( safe_add( _4038,_4048 ),(int)1 )] = _4049;
                _ptr__4045[safe_add( _4041,_4048 )] = _4047;
                ++ _4048;
              }
            }
            {}
            ++ _4047;
          }
        }
      }
    }
  }
  if ((!_4036))
  {
    {
      _3990->popi64(_4013);
    }
  }
  {}
  _3992->clear();
}
void mosek::fusion::p_ExprMulVar::validate(int _4058,int _4059,std::shared_ptr< monty::ndarray< int,1 > > _4060,std::shared_ptr< monty::ndarray< int,1 > > _4061,std::shared_ptr< monty::ndarray< double,1 > > _4062){
  _checked_ptr_1<int> _ptr__4060(_4060 ? _4060->raw() : nullptr, _4060 ? _4060->size(0) : 0);
  _checked_ptr_1<int> _ptr__4061(_4061 ? _4061->raw() : nullptr, _4061 ? _4061->size(0) : 0);
  _checked_ptr_1<double> _ptr__4062(_4062 ? _4062->raw() : nullptr, _4062 ? _4062->size(0) : 0);
  bool _4063 = true;
  {
    int _8686 = (int)0;
    int _8687 = (int)((_4060)->size(0));
    for (int _4064 = _8686; _4064 < _8687; ++_4064)
    {
      {
        if (((_ptr__4060[_4064] < (int)0) || ((_ptr__4060[_4064] >= _4058) || ((_ptr__4061[_4064] < (int)0) || (_ptr__4061[_4064] >= _4059)))))
        {
          {
            _4063 = false;
          }
        }
        {}
      }
    }
    int _8688 = (int)1;
    int _8689 = (int)((_4060)->size(0));
    for (int _4065 = _8688; _4065 < _8689; ++_4065)
    {
      {
        if (((_ptr__4060[(_4065 - (int)1)] > _ptr__4060[_4065]) || ((_ptr__4060[(_4065 - (int)1)] == _ptr__4060[_4065]) && (_ptr__4061[(_4065 - (int)1)] >= _ptr__4061[_4065]))))
        {
          {
            _4063 = false;
          }
        }
        {}
      }
    }
  }
  if ((!_4063))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulVar::resshape(int _4066,int _4067,std::shared_ptr< monty::ndarray< int,1 > > _4068,bool _4069){
  _checked_ptr_1<int> _ptr__4068(_4068 ? _4068->raw() : nullptr, _4068 ? _4068->size(0) : 0);
  if (_4069)
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4066),(int)(_ptr__4068[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__4068[(int)0]),(int)(_4067)});
    }
  }
}
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVar::toString(){
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
void mosek::fusion::p_ExprMulVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _4070,    int _4071,    std::shared_ptr< monty::ndarray< int,1 > > _4072,    std::shared_ptr< monty::ndarray< int,1 > > _4073,    std::shared_ptr< monty::ndarray< double,1 > > _4074,    monty::rc_ptr< ::mosek::fusion::Variable > _4075){ return new mosek::fusion::ExprMulScalarVar(_4070,_4071,_4072,_4073,_4074,_4075); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _4070,    int _4071,    std::shared_ptr< monty::ndarray< int,1 > > _4072,    std::shared_ptr< monty::ndarray< int,1 > > _4073,    std::shared_ptr< monty::ndarray< double,1 > > _4074,    monty::rc_ptr< ::mosek::fusion::Variable > _4075) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_4070,_4071,_4072,_4073,_4074,_4075); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _4070,    int _4071,    std::shared_ptr< monty::ndarray< int,1 > > _4072,    std::shared_ptr< monty::ndarray< int,1 > > _4073,    std::shared_ptr< monty::ndarray< double,1 > > _4074,    monty::rc_ptr< ::mosek::fusion::Variable > _4075){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4072(_4072 ? _4072->raw() : nullptr, _4072 ? _4072->size(0) : 0);
    _checked_ptr_1<int> _ptr__4073(_4073 ? _4073->raw() : nullptr, _4073 ? _4073->size(0) : 0);
    _checked_ptr_1<double> _ptr__4074(_4074 ? _4074->raw() : nullptr, _4074 ? _4074->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_4070,_4071,::mosek::fusion::Utils::Tools::arraycopy(_4072),::mosek::fusion::Utils::Tools::arraycopy(_4073),::mosek::fusion::Utils::Tools::arraycopy(_4074),_4075,(int)1);
    if ((_4075->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_4070 < (int)0) || ((_4071 < (int)0) || (((int)((_4072)->size(0)) != (int)((_4073)->size(0))) || ((int)((_4072)->size(0)) != (int)((_4074)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    int _8690 = (int)0;
    int _8691 = (int)((_4072)->size(0));
    for (int _4076 = _8690; _4076 < _8691; ++_4076)
    {
      {
        if (((_ptr__4072[_4076] < (int)0) || ((_ptr__4072[_4076] >= _4070) || ((_ptr__4073[_4076] < (int)0) || (_ptr__4073[_4076] >= _4071)))))
        {
          {
            throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
          }
        }
        {}
      }
    }
    int _8692 = (int)1;
    int _8693 = (int)((_4072)->size(0));
    for (int _4077 = _8692; _4077 < _8693; ++_4077)
    {
      {
        if (((_ptr__4072[_4077] < _ptr__4072[(_4077 - (int)1)]) || ((_ptr__4072[_4077] == _ptr__4072[(_4077 - (int)1)]) && (_ptr__4073[_4077] <= _ptr__4073[(_4077 - (int)1)]))))
        {
          {
            throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _4078,    int _4079,    std::shared_ptr< monty::ndarray< int,1 > > _4080,    std::shared_ptr< monty::ndarray< int,1 > > _4081,    std::shared_ptr< monty::ndarray< double,1 > > _4082,    monty::rc_ptr< ::mosek::fusion::Variable > _4083,    int _4084){ return new mosek::fusion::ExprMulScalarVar(_4078,_4079,_4080,_4081,_4082,_4083,_4084); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _4078,    int _4079,    std::shared_ptr< monty::ndarray< int,1 > > _4080,    std::shared_ptr< monty::ndarray< int,1 > > _4081,    std::shared_ptr< monty::ndarray< double,1 > > _4082,    monty::rc_ptr< ::mosek::fusion::Variable > _4083,    int _4084) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_4078,_4079,_4080,_4081,_4082,_4083,_4084); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _4078,    int _4079,    std::shared_ptr< monty::ndarray< int,1 > > _4080,    std::shared_ptr< monty::ndarray< int,1 > > _4081,    std::shared_ptr< monty::ndarray< double,1 > > _4082,    monty::rc_ptr< ::mosek::fusion::Variable > _4083,    int _4084){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4080(_4080 ? _4080->raw() : nullptr, _4080 ? _4080->size(0) : 0);
    _checked_ptr_1<int> _ptr__4081(_4081 ? _4081->raw() : nullptr, _4081 ? _4081->size(0) : 0);
    _checked_ptr_1<double> _ptr__4082(_4082 ? _4082->raw() : nullptr, _4082 ? _4082->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4078),(int)(_4079)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _4078;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _4079;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _4080;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _4081;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _4082;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _4083;
  }
}void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4085,monty::rc_ptr< ::mosek::fusion::WorkStack > _4086,monty::rc_ptr< ::mosek::fusion::WorkStack > _4087) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_4085,_4086,_4087); }void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4085,monty::rc_ptr< ::mosek::fusion::WorkStack > _4086,monty::rc_ptr< ::mosek::fusion::WorkStack > _4087){
  if ((x->numInst() == (int)0))
  {
    {
      _4085->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_4085)->i32)(mosek::fusion::p_WorkStack::_get_impl(_4085)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4085)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4085)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4088 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1)));
      _checked_ptr_1<long long> _ptr__4088(_4088 ? _4088->raw() : nullptr,_4088 ? _4088->size(0) : 0);
      x->inst((int)0,_4088);
      long long _4089 = _ptr__4088[(int)0];
      int _4090 = (int)((msubi)->size(0));
      int _4091 = _4090;
      bool _4092 = (_4090 < safe_mul( mdimi,mdimj ));
      _4085->alloc_expr((int)2,_4090,_4091,_4092);
      int _4093 = mosek::fusion::p_WorkStack::_get_impl(_4085)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4085)->i32)(mosek::fusion::p_WorkStack::_get_impl(_4085)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_4085)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4085)->shape_base,(int)1 ))) = mdimj;
      int _4094 = mosek::fusion::p_WorkStack::_get_impl(_4085)->nidxs_base;
      int _4095 = mosek::fusion::p_WorkStack::_get_impl(_4085)->sp_base;
      int _4096 = mosek::fusion::p_WorkStack::_get_impl(_4085)->cof_base;
      int _4097 = mosek::fusion::p_WorkStack::_get_impl(_4085)->bfix_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4098 = mosek::fusion::p_WorkStack::_get_impl(_4085)->i32;
      _checked_ptr_1<int> _ptr__4098(_4098 ? _4098->raw() : nullptr,_4098 ? _4098->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4099 = mosek::fusion::p_WorkStack::_get_impl(_4085)->i64;
      _checked_ptr_1<long long> _ptr__4099(_4099 ? _4099->raw() : nullptr,_4099 ? _4099->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4100 = mosek::fusion::p_WorkStack::_get_impl(_4085)->f64;
      _checked_ptr_1<double> _ptr__4100(_4100 ? _4100->raw() : nullptr,_4100 ? _4100->size(0) : 0);
      {
        int _8694 = (int)0;
        int _8695 = _4090;
        for (int _4101 = _8694; _4101 < _8695; ++_4101)
        {
          {
            _ptr__4100[safe_add( _4097,_4101 )] = (int)0;
          }
        }
        int _8696 = (int)0;
        int _8697 = _4091;
        for (int _4102 = _8696; _4102 < _8697; ++_4102)
        {
          {
            _ptr__4100[safe_add( _4096,_4102 )] = ((*mcof)(_4102));
          }
        }
        int _8698 = (int)0;
        int _8699 = _4091;
        for (int _4103 = _8698; _4103 < _8699; ++_4103)
        {
          {
            _ptr__4099[safe_add( _4094,_4103 )] = _4089;
          }
        }
        if (_4092)
        {
          {
            int _8700 = (int)0;
            int _8701 = _4090;
            for (int _4104 = _8700; _4104 < _8701; ++_4104)
            {
              {
                _ptr__4099[safe_add( _4095,_4104 )] = safe_add( safe_mul( ((*msubi)(_4104)),mdimj ),((*msubj)(_4104)) );
              }
            }
          }
        }
        {}
        int _8702 = (int)0;
        int _8703 = safe_add( _4090,(int)1 );
        for (int _4105 = _8702; _4105 < _8703; ++_4105)
        {
          {
            _ptr__4098[safe_add( _4093,_4105 )] = _4105;
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulScalarVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _4106,    double _4107){ return new mosek::fusion::ExprMulVarScalarConst(_4106,_4107); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _4106,    double _4107) :    ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this)){ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_4106,_4107); }void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _4106,    double _4107){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4106->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _4106;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _4107;
  }
}void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4108,monty::rc_ptr< ::mosek::fusion::WorkStack > _4109,monty::rc_ptr< ::mosek::fusion::WorkStack > _4110) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_4108,_4109,_4110); }void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4108,monty::rc_ptr< ::mosek::fusion::WorkStack > _4109,monty::rc_ptr< ::mosek::fusion::WorkStack > _4110){
  int _4111 = x->numInst();
  int _4112 = _4111;
  std::shared_ptr< monty::ndarray< int,1 > > _4113 = x->getShape();
  _checked_ptr_1<int> _ptr__4113(_4113 ? _4113->raw() : nullptr,_4113 ? _4113->size(0) : 0);
  int _4114 = (int)((_4113)->size(0));
  int _4115 = _4108->alloci32(safe_add( _4112,(int)1 ));
  int _4116 = _4108->alloci64(_4111);
  bool _4117 = (::mosek::fusion::p_Set::size(_4113) > _4112);
  int _8704;
  bool _8705 = _4117;
  if (_8705)
  {
    _8704 = _4108->alloci64(_4112);
  }
  else
  {
    _8704 = (int)0;
  }
  int _4118 = _8704;
  int _4119 = _4108->allocf64(_4111);
  int _4120 = _4108->allocf64(_4112);
  if (_4117)
  {
    {
      x->inst(_4118,mosek::fusion::p_WorkStack::_get_impl(_4108)->i64,_4116,mosek::fusion::p_WorkStack::_get_impl(_4108)->i64);
    }
  }
  else
  {
    {
      x->inst(_4116,mosek::fusion::p_WorkStack::_get_impl(_4108)->i64);
    }
  }
  int _8706;
  bool _8707 = _4117;
  if (_8707)
  {
    _8706 = (int)1;
  }
  else
  {
    _8706 = (int)0;
  }
  _4108->pushi32(_8706);
  _4108->pushi32(_4112);
  _4108->pushi32(_4111);
  int _8708 = (int)0;
  int _8709 = _4114;
  for (int _4121 = _8708; _4121 < _8709; ++_4121)
  {
    {
      _4108->pushi32(_ptr__4113[_4121]);
    }
  }
  _4108->pushi32(_4114);
  std::shared_ptr< monty::ndarray< int,1 > > _4122 = mosek::fusion::p_WorkStack::_get_impl(_4108)->i32;
  _checked_ptr_1<int> _ptr__4122(_4122 ? _4122->raw() : nullptr,_4122 ? _4122->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4123 = mosek::fusion::p_WorkStack::_get_impl(_4108)->i64;
  _checked_ptr_1<long long> _ptr__4123(_4123 ? _4123->raw() : nullptr,_4123 ? _4123->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4124 = mosek::fusion::p_WorkStack::_get_impl(_4108)->f64;
  _checked_ptr_1<double> _ptr__4124(_4124 ? _4124->raw() : nullptr,_4124 ? _4124->size(0) : 0);
  {
    int _8710 = (int)0;
    int _8711 = safe_add( _4112,(int)1 );
    for (int _4125 = _8710; _4125 < _8711; ++_4125)
    {
      {
        _ptr__4122[safe_add( _4115,_4125 )] = _4125;
      }
    }
    int _8712 = (int)0;
    int _8713 = _4111;
    for (int _4126 = _8712; _4126 < _8713; ++_4126)
    {
      {
        _ptr__4124[safe_add( _4119,_4126 )] = 1.0;
      }
    }
    int _8714 = (int)0;
    int _8715 = _4112;
    for (int _4127 = _8714; _4127 < _8715; ++_4127)
    {
      {
        _ptr__4124[safe_add( _4120,_4127 )] = 0.0;
      }
    }
  }
}
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVarScalarConst::toString(){
  return std::string ("ExprMulVarScalarConst()");
}
void mosek::fusion::p_ExprMulVarScalarConst::destroy(){x.reset();}void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprAdd::p_ExprAdd  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _4128,    monty::rc_ptr< ::mosek::fusion::Expression > _4129,    double _4130,    double _4131){ return new mosek::fusion::ExprAdd(_4128,_4129,_4130,_4131); }mosek::fusion::ExprAdd::ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _4128,    monty::rc_ptr< ::mosek::fusion::Expression > _4129,    double _4130,    double _4131) :    ExprAdd(new mosek::fusion::p_ExprAdd(this)){ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_4128,_4129,_4130,_4131); }void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4128,    monty::rc_ptr< ::mosek::fusion::Expression > _4129,    double _4130,    double _4131){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4128->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _4128;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _4129;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _4130;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _4131;
    if ((_4128->getND() != _4129->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int _8716 = (int)0;
    int _8717 = _4128->getND();
    for (int _4132 = _8716; _4132 < _8717; ++_4132)
    {
      {
        if ((_4128->getDim(_4132) != _4129->getDim(_4132)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4133,monty::rc_ptr< ::mosek::fusion::WorkStack > _4134,monty::rc_ptr< ::mosek::fusion::WorkStack > _4135) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_4133,_4134,_4135); }void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4133,monty::rc_ptr< ::mosek::fusion::WorkStack > _4134,monty::rc_ptr< ::mosek::fusion::WorkStack > _4135){
  e1->eval(_4134,_4133,_4135);
  e2->eval(_4134,_4133,_4135);
  _4134->pop_expr();
  int _4136 = mosek::fusion::p_WorkStack::_get_impl(_4134)->nd;
  int _4137 = mosek::fusion::p_WorkStack::_get_impl(_4134)->shape_base;
  int _4138 = mosek::fusion::p_WorkStack::_get_impl(_4134)->nelem;
  int _4139 = mosek::fusion::p_WorkStack::_get_impl(_4134)->nnz;
  bool _4140 = mosek::fusion::p_WorkStack::_get_impl(_4134)->hassp;
  int _4141 = mosek::fusion::p_WorkStack::_get_impl(_4134)->ptr_base;
  int _4142 = mosek::fusion::p_WorkStack::_get_impl(_4134)->sp_base;
  int _4143 = mosek::fusion::p_WorkStack::_get_impl(_4134)->nidxs_base;
  int _4144 = mosek::fusion::p_WorkStack::_get_impl(_4134)->bfix_base;
  int _4145 = mosek::fusion::p_WorkStack::_get_impl(_4134)->cof_base;
  _4134->pop_expr();
  int _4146 = mosek::fusion::p_WorkStack::_get_impl(_4134)->nd;
  int _4147 = mosek::fusion::p_WorkStack::_get_impl(_4134)->shape_base;
  int _4148 = mosek::fusion::p_WorkStack::_get_impl(_4134)->nelem;
  int _4149 = mosek::fusion::p_WorkStack::_get_impl(_4134)->nnz;
  bool _4150 = mosek::fusion::p_WorkStack::_get_impl(_4134)->hassp;
  int _4151 = mosek::fusion::p_WorkStack::_get_impl(_4134)->ptr_base;
  int _4152 = mosek::fusion::p_WorkStack::_get_impl(_4134)->sp_base;
  int _4153 = mosek::fusion::p_WorkStack::_get_impl(_4134)->nidxs_base;
  int _4154 = mosek::fusion::p_WorkStack::_get_impl(_4134)->bfix_base;
  int _4155 = mosek::fusion::p_WorkStack::_get_impl(_4134)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4156 = mosek::fusion::p_WorkStack::_get_impl(_4134)->i32;
  _checked_ptr_1<int> _ptr__4156(_4156 ? _4156->raw() : nullptr,_4156 ? _4156->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4157 = mosek::fusion::p_WorkStack::_get_impl(_4134)->i64;
  _checked_ptr_1<long long> _ptr__4157(_4157 ? _4157->raw() : nullptr,_4157 ? _4157->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4158 = mosek::fusion::p_WorkStack::_get_impl(_4134)->f64;
  _checked_ptr_1<double> _ptr__4158(_4158 ? _4158->raw() : nullptr,_4158 ? _4158->size(0) : 0);
  if ((_4146 != _4136))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int _8718 = (int)0;
  int _8719 = _4146;
  for (int _4159 = _8718; _4159 < _8719; ++_4159)
  {
    {
      if ((_ptr__4156[safe_add( _4147,_4159 )] != _ptr__4156[safe_add( _4137,_4159 )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_4150) && (!_4140)))
  {
    {
      int _4160 = _4148;
      int _4161 = safe_add( _4149,_4139 );
      int _4162 = _4146;
      _4133->alloc_expr(_4162,_4160,_4161,false);
      int _4163 = mosek::fusion::p_WorkStack::_get_impl(_4133)->shape_base;
      int _4164 = mosek::fusion::p_WorkStack::_get_impl(_4133)->ptr_base;
      int _4165 = mosek::fusion::p_WorkStack::_get_impl(_4133)->sp_base;
      int _4166 = mosek::fusion::p_WorkStack::_get_impl(_4133)->nidxs_base;
      int _4167 = mosek::fusion::p_WorkStack::_get_impl(_4133)->bfix_base;
      int _4168 = mosek::fusion::p_WorkStack::_get_impl(_4133)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4169 = mosek::fusion::p_WorkStack::_get_impl(_4133)->i32;
      _checked_ptr_1<int> _ptr__4169(_4169 ? _4169->raw() : nullptr,_4169 ? _4169->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4170 = mosek::fusion::p_WorkStack::_get_impl(_4133)->i64;
      _checked_ptr_1<long long> _ptr__4170(_4170 ? _4170->raw() : nullptr,_4170 ? _4170->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4171 = mosek::fusion::p_WorkStack::_get_impl(_4133)->f64;
      _checked_ptr_1<double> _ptr__4171(_4171 ? _4171->raw() : nullptr,_4171 ? _4171->size(0) : 0);
      int _8720 = (int)0;
      int _8721 = _4162;
      for (int _4172 = _8720; _4172 < _8721; ++_4172)
      {
        {
          _ptr__4169[safe_add( _4163,_4172 )] = _ptr__4156[safe_add( _4147,_4172 )];
        }
      }
      int _4173 = (int)0;
      _ptr__4169[_4164] = (int)0;
      int _8722 = (int)0;
      int _8723 = _4160;
      for (int _4174 = _8722; _4174 < _8723; ++_4174)
      {
        {
          int _8724 = _ptr__4156[safe_add( _4151,_4174 )];
          int _8725 = _ptr__4156[safe_add( safe_add( _4151,_4174 ),(int)1 )];
          for (int _4175 = _8724; _4175 < _8725; ++_4175)
          {
            {
              _ptr__4170[safe_add( _4166,_4173 )] = _ptr__4157[safe_add( _4153,_4175 )];
              _ptr__4171[safe_add( _4168,_4173 )] = (_ptr__4158[safe_add( _4155,_4175 )] * m1);
              ++ _4173;
            }
          }
          int _8726 = _ptr__4156[safe_add( _4141,_4174 )];
          int _8727 = _ptr__4156[safe_add( safe_add( _4141,_4174 ),(int)1 )];
          for (int _4176 = _8726; _4176 < _8727; ++_4176)
          {
            {
              _ptr__4170[safe_add( _4166,_4173 )] = _ptr__4157[safe_add( _4143,_4176 )];
              _ptr__4171[safe_add( _4168,_4173 )] = (_ptr__4158[safe_add( _4145,_4176 )] * m2);
              ++ _4173;
            }
          }
          _ptr__4169[safe_add( safe_add( _4164,_4174 ),(int)1 )] = _4173;
          _ptr__4171[safe_add( _4167,_4174 )] = ((_ptr__4158[safe_add( _4154,_4174 )] * m1) + (_ptr__4158[safe_add( _4144,_4174 )] * m2));
        }
      }
    }
  }
  else if(((!_4150) || (!_4140)))
  {
    {
      if ((!_4140))
      {
        {
          int _4177 = _4138;
          int _4178 = _4139;
          int _4179 = _4141;
          int _4180 = _4142;
          int _4181 = _4143;
          int _4182 = _4144;
          int _4183 = _4145;
          _4138 = _4148;
          _4139 = _4149;
          _4141 = _4151;
          _4142 = _4152;
          _4143 = _4153;
          _4144 = _4154;
          _4145 = _4155;
          _4148 = _4177;
          _4149 = _4178;
          _4151 = _4179;
          _4152 = _4180;
          _4153 = _4181;
          _4154 = _4182;
          _4155 = _4183;
        }
      }
      {}
      double _8728;
      bool _8729 = (!_4150);
      if (_8729)
      {
        _8728 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _8728 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _4184 = _8728;
      double _8730;
      bool _8731 = (!_4150);
      if (_8731)
      {
        _8730 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _8730 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _4185 = _8730;
      int _4186 = _4148;
      int _4187 = safe_add( _4149,_4139 );
      int _4188 = _4146;
      _4133->alloc_expr(_4188,_4186,_4187,false);
      int _4189 = mosek::fusion::p_WorkStack::_get_impl(_4133)->shape_base;
      int _4190 = mosek::fusion::p_WorkStack::_get_impl(_4133)->ptr_base;
      int _4191 = mosek::fusion::p_WorkStack::_get_impl(_4133)->sp_base;
      int _4192 = mosek::fusion::p_WorkStack::_get_impl(_4133)->nidxs_base;
      int _4193 = mosek::fusion::p_WorkStack::_get_impl(_4133)->bfix_base;
      int _4194 = mosek::fusion::p_WorkStack::_get_impl(_4133)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4195 = mosek::fusion::p_WorkStack::_get_impl(_4133)->i32;
      _checked_ptr_1<int> _ptr__4195(_4195 ? _4195->raw() : nullptr,_4195 ? _4195->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4196 = mosek::fusion::p_WorkStack::_get_impl(_4133)->i64;
      _checked_ptr_1<long long> _ptr__4196(_4196 ? _4196->raw() : nullptr,_4196 ? _4196->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4197 = mosek::fusion::p_WorkStack::_get_impl(_4133)->f64;
      _checked_ptr_1<double> _ptr__4197(_4197 ? _4197->raw() : nullptr,_4197 ? _4197->size(0) : 0);
      {
        int _4198 = (int)0;
        int _8732 = (int)0;
        int _8733 = _4188;
        for (int _4199 = _8732; _4199 < _8733; ++_4199)
        {
          {
            _ptr__4195[safe_add( _4189,_4199 )] = _ptr__4156[safe_add( _4147,_4199 )];
          }
        }
        int _8734 = (int)0;
        int _8735 = safe_add( _4186,(int)1 );
        for (int _4200 = _8734; _4200 < _8735; ++_4200)
        {
          {
            _ptr__4195[safe_add( _4190,_4200 )] = (int)0;
          }
        }
        int _8736 = (int)0;
        int _8737 = _4148;
        for (int _4201 = _8736; _4201 < _8737; ++_4201)
        {
          {
            _ptr__4195[safe_add( safe_add( _4190,_4201 ),(int)1 )] += (_ptr__4156[safe_add( safe_add( _4151,_4201 ),(int)1 )] - _ptr__4156[safe_add( _4151,_4201 )]);
          }
        }
        int _8738 = (int)0;
        int _8739 = _4138;
        for (int _4202 = _8738; _4202 < _8739; ++_4202)
        {
          {
            long long _4203 = _ptr__4157[safe_add( _4142,_4202 )];
            _ptr__4195[safe_add( safe_add( _4190,_4203 ),(int)1 )] += (_ptr__4156[safe_add( safe_add( _4141,_4202 ),(int)1 )] - _ptr__4156[safe_add( _4141,_4202 )]);
          }
        }
        int _8740 = (int)0;
        int _8741 = _4186;
        for (int _4204 = _8740; _4204 < _8741; ++_4204)
        {
          {
            _ptr__4195[safe_add( safe_add( _4190,_4204 ),(int)1 )] += _ptr__4195[safe_add( _4190,_4204 )];
          }
        }
        int _8742 = (int)0;
        int _8743 = _4148;
        for (int _4205 = _8742; _4205 < _8743; ++_4205)
        {
          {
            int _4206 = _ptr__4195[safe_add( _4190,_4205 )];
            int _4207 = _ptr__4156[safe_add( _4151,_4205 )];
            int _4208 = (_ptr__4156[safe_add( safe_add( _4151,_4205 ),(int)1 )] - _ptr__4156[safe_add( _4151,_4205 )]);
            int _8744 = (int)0;
            int _8745 = _4208;
            for (int _4209 = _8744; _4209 < _8745; ++_4209)
            {
              {
                _ptr__4196[safe_add( safe_add( _4192,_4206 ),_4209 )] = _ptr__4157[safe_add( safe_add( _4153,_4207 ),_4209 )];
                _ptr__4197[safe_add( safe_add( _4194,_4206 ),_4209 )] = (_ptr__4158[safe_add( safe_add( _4155,_4207 ),_4209 )] * _4184);
              }
            }
            _ptr__4195[safe_add( _4190,_4205 )] += _4208;
            _ptr__4197[safe_add( _4193,_4205 )] = (_ptr__4158[safe_add( _4154,_4205 )] * _4184);
          }
        }
        int _8746 = (int)0;
        int _8747 = _4138;
        for (int _4210 = _8746; _4210 < _8747; ++_4210)
        {
          {
            long long _4211 = _ptr__4157[safe_add( _4142,_4210 )];
            int _4212 = _ptr__4195[safe_add( _4190,_4211 )];
            int _4213 = _ptr__4156[safe_add( _4141,_4210 )];
            int _4214 = (_ptr__4156[safe_add( safe_add( _4141,_4210 ),(int)1 )] - _ptr__4156[safe_add( _4141,_4210 )]);
            int _8748 = (int)0;
            int _8749 = _4214;
            for (int _4215 = _8748; _4215 < _8749; ++_4215)
            {
              {
                _ptr__4196[safe_add( safe_add( _4192,_4212 ),_4215 )] = _ptr__4157[safe_add( safe_add( _4143,_4213 ),_4215 )];
                _ptr__4197[safe_add( safe_add( _4194,_4212 ),_4215 )] = (_ptr__4158[safe_add( safe_add( _4145,_4213 ),_4215 )] * _4185);
              }
            }
            _ptr__4195[safe_add( _4190,_4211 )] += _4214;
            _ptr__4197[safe_add( _4193,_4211 )] += (_ptr__4158[safe_add( _4144,_4210 )] * _4185);
          }
        }
        int _8750 = (int)0;
        int _8751 = _4186;
        for (int _4216 = _8750; _4216 < _8751; ++_4216)
        {
          {
            _ptr__4195[(safe_add( _4190,_4186 ) - _4216)] = _ptr__4195[((safe_add( _4190,_4186 ) - _4216) - (int)1)];
          }
        }
        _ptr__4195[_4190] = (int)0;
      }
    }
  }
  else
  {
    {
      int _4217 = safe_add( _4149,_4139 );
      int _4218 = (int)0;
      int _4219 = _4146;
      long long _4220 = (long long)1;
      int _8752 = (int)0;
      int _8753 = _4219;
      for (int _4221 = _8752; _4221 < _8753; ++_4221)
      {
        {
          _4220 *= _ptr__4156[safe_add( _4147,_4221 )];
        }
      }
      {
        int _4222 = (int)0;
        int _4223 = (int)0;
        while ( ((_4223 < _4148) && (_4222 < _4138)) )
        {
          {
            if ((_ptr__4157[safe_add( _4152,_4223 )] < _ptr__4157[safe_add( _4142,_4222 )]))
            {
              {
                ++ _4218;
                ++ _4223;
              }
            }
            else if((_ptr__4157[safe_add( _4152,_4223 )] > _ptr__4157[safe_add( _4142,_4222 )]))
            {
              {
                ++ _4218;
                ++ _4222;
              }
            }
            else
            {
              {
                ++ _4218;
                ++ _4223;
                ++ _4222;
              }
            }
          }
        }
        _4218 += (safe_add( (_4148 - _4223),_4138 ) - _4222);
      }
      bool _4224 = (_4218 < _4220);
      _4133->alloc_expr(_4219,_4218,_4217,_4224);
      int _4225 = mosek::fusion::p_WorkStack::_get_impl(_4133)->shape_base;
      int _4226 = mosek::fusion::p_WorkStack::_get_impl(_4133)->ptr_base;
      int _8754;
      bool _8755 = _4224;
      if (_8755)
      {
        _8754 = mosek::fusion::p_WorkStack::_get_impl(_4133)->sp_base;
      }
      else
      {
        _8754 = _4133->alloci64(_4218);
      }
      int _4227 = _8754;
      int _4228 = mosek::fusion::p_WorkStack::_get_impl(_4133)->nidxs_base;
      int _4229 = mosek::fusion::p_WorkStack::_get_impl(_4133)->bfix_base;
      int _4230 = mosek::fusion::p_WorkStack::_get_impl(_4133)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4231 = mosek::fusion::p_WorkStack::_get_impl(_4133)->i32;
      _checked_ptr_1<int> _ptr__4231(_4231 ? _4231->raw() : nullptr,_4231 ? _4231->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4232 = mosek::fusion::p_WorkStack::_get_impl(_4133)->i64;
      _checked_ptr_1<long long> _ptr__4232(_4232 ? _4232->raw() : nullptr,_4232 ? _4232->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4233 = mosek::fusion::p_WorkStack::_get_impl(_4133)->f64;
      _checked_ptr_1<double> _ptr__4233(_4233 ? _4233->raw() : nullptr,_4233 ? _4233->size(0) : 0);
      int _8756 = (int)0;
      int _8757 = _4219;
      for (int _4234 = _8756; _4234 < _8757; ++_4234)
      {
        {
          _ptr__4231[safe_add( _4225,_4234 )] = _ptr__4156[safe_add( _4147,_4234 )];
        }
      }
      {
        _ptr__4231[_4226] = (int)0;
        int _4235 = (int)0;
        int _4236 = (int)0;
        int _4237 = (int)0;
        int _4238 = (int)0;
        while ( ((_4238 < _4148) && (_4237 < _4138)) )
        {
          {
            if ((_ptr__4157[safe_add( _4152,_4238 )] < _ptr__4157[safe_add( _4142,_4237 )]))
            {
              {
                int _8758 = _ptr__4156[safe_add( _4151,_4238 )];
                int _8759 = _ptr__4156[safe_add( safe_add( _4151,_4238 ),(int)1 )];
                for (int _4239 = _8758; _4239 < _8759; ++_4239)
                {
                  {
                    _ptr__4232[safe_add( _4228,_4236 )] = _ptr__4157[safe_add( _4153,_4239 )];
                    _ptr__4233[safe_add( _4230,_4236 )] = (m1 * _ptr__4158[safe_add( _4155,_4239 )]);
                    ++ _4236;
                  }
                }
                _ptr__4233[safe_add( _4229,_4235 )] = (m1 * _ptr__4158[safe_add( _4154,_4238 )]);
                _ptr__4232[safe_add( _4227,_4235 )] = _ptr__4157[safe_add( _4152,_4238 )];
                _ptr__4231[safe_add( safe_add( _4226,_4235 ),(int)1 )] = _4236;
                ++ _4235;
                ++ _4238;
              }
            }
            else if((_ptr__4157[safe_add( _4142,_4237 )] < _ptr__4157[safe_add( _4152,_4238 )]))
            {
              {
                int _8760 = _ptr__4156[safe_add( _4141,_4237 )];
                int _8761 = _ptr__4156[safe_add( safe_add( _4141,_4237 ),(int)1 )];
                for (int _4240 = _8760; _4240 < _8761; ++_4240)
                {
                  {
                    _ptr__4232[safe_add( _4228,_4236 )] = _ptr__4157[safe_add( _4143,_4240 )];
                    _ptr__4233[safe_add( _4230,_4236 )] = (m2 * _ptr__4158[safe_add( _4145,_4240 )]);
                    ++ _4236;
                  }
                }
                _ptr__4233[safe_add( _4229,_4235 )] = (m1 * _ptr__4158[safe_add( _4144,_4238 )]);
                _ptr__4232[safe_add( _4227,_4235 )] = _ptr__4157[safe_add( _4142,_4237 )];
                _ptr__4231[safe_add( safe_add( _4226,_4235 ),(int)1 )] = _4236;
                ++ _4235;
                ++ _4237;
              }
            }
            else
            {
              {
                int _8762 = _ptr__4156[safe_add( _4151,_4238 )];
                int _8763 = _ptr__4156[safe_add( safe_add( _4151,_4238 ),(int)1 )];
                for (int _4241 = _8762; _4241 < _8763; ++_4241)
                {
                  {
                    _ptr__4232[safe_add( _4228,_4236 )] = _ptr__4157[safe_add( _4153,_4241 )];
                    _ptr__4233[safe_add( _4230,_4236 )] = (m1 * _ptr__4158[safe_add( _4155,_4241 )]);
                    ++ _4236;
                  }
                }
                int _8764 = _ptr__4156[safe_add( _4141,_4237 )];
                int _8765 = _ptr__4156[safe_add( safe_add( _4141,_4237 ),(int)1 )];
                for (int _4242 = _8764; _4242 < _8765; ++_4242)
                {
                  {
                    _ptr__4232[safe_add( _4228,_4236 )] = _ptr__4157[safe_add( _4143,_4242 )];
                    _ptr__4233[safe_add( _4230,_4236 )] = (m2 * _ptr__4158[safe_add( _4145,_4242 )]);
                    ++ _4236;
                  }
                }
                _ptr__4233[safe_add( _4229,_4235 )] = ((m1 * _ptr__4158[safe_add( _4154,_4238 )]) + (m2 * _ptr__4158[safe_add( _4144,_4237 )]));
                _ptr__4232[safe_add( _4227,_4235 )] = _ptr__4157[safe_add( _4152,_4238 )];
                _ptr__4231[safe_add( safe_add( _4226,_4235 ),(int)1 )] = _4236;
                ++ _4235;
                ++ _4238;
                ++ _4237;
              }
            }
          }
        }
        while ( (_4238 < _4148) )
        {
          {
            int _8766 = _ptr__4156[safe_add( _4151,_4238 )];
            int _8767 = _ptr__4156[safe_add( safe_add( _4151,_4238 ),(int)1 )];
            for (int _4243 = _8766; _4243 < _8767; ++_4243)
            {
              {
                _ptr__4232[safe_add( _4228,_4236 )] = _ptr__4157[safe_add( _4153,_4243 )];
                _ptr__4233[safe_add( _4230,_4236 )] = (m1 * _ptr__4158[safe_add( _4155,_4243 )]);
                ++ _4236;
              }
            }
            _ptr__4233[safe_add( _4229,_4235 )] = (m1 * _ptr__4158[safe_add( _4154,_4238 )]);
            _ptr__4232[safe_add( _4227,_4235 )] = _ptr__4157[safe_add( _4152,_4238 )];
            _ptr__4231[safe_add( safe_add( _4226,_4235 ),(int)1 )] = _4236;
            ++ _4235;
            ++ _4238;
          }
        }
        while ( (_4237 < _4138) )
        {
          {
            int _8768 = _ptr__4156[safe_add( _4141,_4237 )];
            int _8769 = _ptr__4156[safe_add( safe_add( _4141,_4237 ),(int)1 )];
            for (int _4244 = _8768; _4244 < _8769; ++_4244)
            {
              {
                _ptr__4232[safe_add( _4228,_4236 )] = _ptr__4157[safe_add( _4143,_4244 )];
                _ptr__4233[safe_add( _4230,_4236 )] = (m2 * _ptr__4158[safe_add( _4145,_4244 )]);
                ++ _4236;
              }
            }
            _ptr__4233[safe_add( _4229,_4235 )] = (m1 * _ptr__4158[safe_add( _4144,_4237 )]);
            _ptr__4232[safe_add( _4227,_4235 )] = _ptr__4157[safe_add( _4142,_4237 )];
            _ptr__4231[safe_add( safe_add( _4226,_4235 ),(int)1 )] = _4236;
            ++ _4235;
            ++ _4237;
          }
        }
      }
      if ((!_4224))
      {
        {
          _4133->popi64(_4218);
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprAdd::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprAdd::destroy(){e2.reset();e1.reset();}void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprWSum::p_ExprWSum  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4245,    std::shared_ptr< monty::ndarray< double,1 > > _4246){ return new mosek::fusion::ExprWSum(_4245,_4246); }mosek::fusion::ExprWSum::ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4245,    std::shared_ptr< monty::ndarray< double,1 > > _4246) :    ExprWSum(new mosek::fusion::p_ExprWSum(this)){ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_4245,_4246); }void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4245,    std::shared_ptr< monty::ndarray< double,1 > > _4246){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__4246(_4246 ? _4246->raw() : nullptr, _4246 ? _4246->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_4245)((int)0))->getShape());
    if (((int)((_4246)->size(0)) != (int)((_4245)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_4246);
    std::shared_ptr< monty::ndarray< int,1 > > _4247 = ((*_4245)((int)0))->getShape();
    _checked_ptr_1<int> _ptr__4247(_4247 ? _4247->raw() : nullptr,_4247 ? _4247->size(0) : 0);
    int _4248 = (int)((_4247)->size(0));
    int _8770 = (int)1;
    int _8771 = (int)((_4245)->size(0));
    for (int _4249 = _8770; _4249 < _8771; ++_4249)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4250 = ((*_4245)(_4249))->getShape();
        _checked_ptr_1<int> _ptr__4250(_4250 ? _4250->raw() : nullptr,_4250 ? _4250->size(0) : 0);
        if ((_4248 != (int)((_4250)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int _8772 = (int)0;
            int _8773 = _4248;
            for (int _4251 = _8772; _4251 < _8773; ++_4251)
            {
              {
                if ((_ptr__4247[_4251] != _ptr__4250[_4251]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _8774;
    for (int _4252 = (int)0, _8775 = (int)((_4245)->size(0)); _4252 < _8775 ; ++_4252)
    {
      _8774.push_back(((*_4245)(_4252)));
    }
    auto _8776 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_8774.size()),_8774.begin(),_8774.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _8776;
  }
}void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4253,monty::rc_ptr< ::mosek::fusion::WorkStack > _4254,monty::rc_ptr< ::mosek::fusion::WorkStack > _4255) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_4253,_4254,_4255); }void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4253,monty::rc_ptr< ::mosek::fusion::WorkStack > _4254,monty::rc_ptr< ::mosek::fusion::WorkStack > _4255){
  int _4256 = (int)((es)->size(0));
  int _8777 = (int)0;
  int _8778 = _4256;
  for (int _4257 = _8777; _4257 < _8778; ++_4257)
  {
    {
      ((*es)(_4257))->eval(_4254,_4253,_4255);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4258 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4256)));
  _checked_ptr_1<int> _ptr__4258(_4258 ? _4258->raw() : nullptr,_4258 ? _4258->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4259 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4256)));
  _checked_ptr_1<int> _ptr__4259(_4259 ? _4259->raw() : nullptr,_4259 ? _4259->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4260 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4256)));
  _checked_ptr_1<int> _ptr__4260(_4260 ? _4260->raw() : nullptr,_4260 ? _4260->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4261 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4256)));
  _checked_ptr_1<int> _ptr__4261(_4261 ? _4261->raw() : nullptr,_4261 ? _4261->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4262 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4256)));
  _checked_ptr_1<int> _ptr__4262(_4262 ? _4262->raw() : nullptr,_4262 ? _4262->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4263 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4256)));
  _checked_ptr_1<int> _ptr__4263(_4263 ? _4263->raw() : nullptr,_4263 ? _4263->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4264 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4256)));
  _checked_ptr_1<int> _ptr__4264(_4264 ? _4264->raw() : nullptr,_4264 ? _4264->size(0) : 0);
  int _4265 = _4254->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _4266 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4265)));
  _checked_ptr_1<int> _ptr__4266(_4266 ? _4266->raw() : nullptr,_4266 ? _4266->size(0) : 0);
  _4254->popi32(_4265,_4266,(int)0);
  {
    _ptr__4258[(_4256 - (int)1)] = _4254->popi32();
    _ptr__4259[(_4256 - (int)1)] = _4254->popi32();
    bool _4267 = (_4254->popi32() != (int)0);
    _ptr__4260[(_4256 - (int)1)] = _4254->popi32(safe_add( _ptr__4258[(_4256 - (int)1)],(int)1 ));
    int _8779;
    bool _8780 = _4267;
    if (_8780)
    {
      _8779 = _4254->popi64(_ptr__4258[(_4256 - (int)1)]);
    }
    else
    {
      _8779 = (-(int)1);
    }
    _ptr__4262[(_4256 - (int)1)] = _8779;
    _ptr__4261[(_4256 - (int)1)] = _4254->popi64(_ptr__4259[(_4256 - (int)1)]);
    _ptr__4264[(_4256 - (int)1)] = _4254->popf64(_ptr__4258[(_4256 - (int)1)]);
    _ptr__4263[(_4256 - (int)1)] = _4254->popf64(_ptr__4259[(_4256 - (int)1)]);
  }
  int _8781 = (int)1;
  int _8782 = _4256;
  for (int _4268 = _8781; _4268 < _8782; ++_4268)
  {
    {
      int _4269 = ((_4256 - _4268) - (int)1);
      _4254->popi32();
      _4254->popi32(_4265);
      _ptr__4258[_4269] = _4254->popi32();
      _ptr__4259[_4269] = _4254->popi32();
      bool _4270 = (_4254->popi32() != (int)0);
      _ptr__4260[_4269] = _4254->popi32(safe_add( _ptr__4258[_4269],(int)1 ));
      int _8783;
      bool _8784 = _4270;
      if (_8784)
      {
        _8783 = _4254->popi64(_ptr__4258[_4269]);
      }
      else
      {
        _8783 = (-(int)1);
      }
      _ptr__4262[_4269] = _8783;
      _ptr__4261[_4269] = _4254->popi64(_ptr__4259[_4269]);
      _ptr__4264[_4269] = _4254->popf64(_ptr__4258[_4269]);
      _ptr__4263[_4269] = _4254->popf64(_ptr__4259[_4269]);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4271 = mosek::fusion::p_WorkStack::_get_impl(_4254)->i32;
  _checked_ptr_1<int> _ptr__4271(_4271 ? _4271->raw() : nullptr,_4271 ? _4271->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4272 = mosek::fusion::p_WorkStack::_get_impl(_4254)->i64;
  _checked_ptr_1<long long> _ptr__4272(_4272 ? _4272->raw() : nullptr,_4272 ? _4272->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4273 = mosek::fusion::p_WorkStack::_get_impl(_4254)->f64;
  _checked_ptr_1<double> _ptr__4273(_4273 ? _4273->raw() : nullptr,_4273 ? _4273->size(0) : 0);
  bool _4274 = false;
  int _8785 = (int)0;
  int _8786 = _4256;
  for (int _4275 = _8785; _4275 < _8786; ++_4275)
  {
    {
      if ((_ptr__4262[_4275] < (int)0))
      {
        {
          _4274 = true;
        }
      }
      {}
    }
  }
  int _4276 = (int)0;
  int _4277 = (int)0;
  if (_4274)
  {
    {
      _4276 = (int)::mosek::fusion::p_Set::size(_4266);
      int _8787 = (int)0;
      int _8788 = _4256;
      for (int _4278 = _8787; _4278 < _8788; ++_4278)
      {
        {
          _4277 += _ptr__4259[_4278];
        }
      }
    }
  }
  else
  {
    {
      bool _4279 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _4280 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4256)));
      _checked_ptr_1<int> _ptr__4280(_4280 ? _4280->raw() : nullptr,_4280 ? _4280->size(0) : 0);
      int _8789 = (int)0;
      int _8790 = _4256;
      for (int _4281 = _8789; _4281 < _8790; ++_4281)
      {
        {
          _4277 += _ptr__4259[_4281];
        }
      }
      while ( (!_4279) )
      {
        {
          long long _4282 = (-(int)1);
          int _8791 = (int)0;
          int _8792 = _4256;
          for (int _4283 = _8791; _4283 < _8792; ++_4283)
          {
            {
              if (((_ptr__4280[_4283] < _ptr__4258[_4283]) && ((_4282 < (int)0) || (_ptr__4272[safe_add( _ptr__4262[_4283],_ptr__4280[_4283] )] < _4282))))
              {
                {
                  _4282 = _ptr__4272[safe_add( _ptr__4262[_4283],_ptr__4280[_4283] )];
                }
              }
              {}
            }
          }
          if ((_4282 < (int)0))
          {
            {
              _4279 = true;
            }
          }
          else
          {
            {
              int _8793 = (int)0;
              int _8794 = _4256;
              for (int _4284 = _8793; _4284 < _8794; ++_4284)
              {
                {
                  if (((_ptr__4280[_4284] < _ptr__4258[_4284]) && (_4282 == _ptr__4272[safe_add( _ptr__4262[_4284],_ptr__4280[_4284] )])))
                  {
                    {
                      ++ _ptr__4280[_4284];
                    }
                  }
                  {}
                }
              }
              ++ _4276;
            }
          }
        }
      }
    }
  }
  int _4285 = _4253->alloci32(safe_add( _4276,(int)1 ));
  int _4286 = _4253->alloci64(_4277);
  int _8795;
  bool _8796 = (!_4274);
  if (_8796)
  {
    _8795 = _4253->alloci64(_4276);
  }
  else
  {
    _8795 = (-(int)1);
  }
  int _4287 = _8795;
  int _4288 = _4253->allocf64(_4277);
  int _4289 = _4253->allocf64(_4276);
  int _8797;
  bool _8798 = _4274;
  if (_8798)
  {
    _8797 = (int)0;
  }
  else
  {
    _8797 = (int)1;
  }
  _4253->pushi32(_8797);
  _4253->pushi32(_4277);
  _4253->pushi32(_4276);
  int _8799 = (int)0;
  int _8800 = _4265;
  for (int _4290 = _8799; _4290 < _8800; ++_4290)
  {
    {
      _4253->pushi32(_ptr__4266[_4290]);
    }
  }
  _4253->pushi32(_4265);
  std::shared_ptr< monty::ndarray< int,1 > > _4291 = mosek::fusion::p_WorkStack::_get_impl(_4253)->i32;
  _checked_ptr_1<int> _ptr__4291(_4291 ? _4291->raw() : nullptr,_4291 ? _4291->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4292 = mosek::fusion::p_WorkStack::_get_impl(_4253)->i64;
  _checked_ptr_1<long long> _ptr__4292(_4292 ? _4292->raw() : nullptr,_4292 ? _4292->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4293 = mosek::fusion::p_WorkStack::_get_impl(_4253)->f64;
  _checked_ptr_1<double> _ptr__4293(_4293 ? _4293->raw() : nullptr,_4293 ? _4293->size(0) : 0);
  _ptr__4291[_4285] = (int)0;
  int _8801 = (int)0;
  int _8802 = _4276;
  for (int _4294 = _8801; _4294 < _8802; ++_4294)
  {
    {
      _ptr__4293[safe_add( _4289,_4294 )] = 0.0;
    }
  }
  int _8803 = (int)0;
  int _8804 = safe_add( _4276,(int)1 );
  for (int _4295 = _8803; _4295 < _8804; ++_4295)
  {
    {
      _ptr__4291[safe_add( _4285,_4295 )] = (int)0;
    }
  }
  if (_4274)
  {
    {
      int _8805 = (int)0;
      int _8806 = _4256;
      for (int _4296 = _8805; _4296 < _8806; ++_4296)
      {
        {
          if ((_ptr__4262[_4296] >= (int)0))
          {
            {
              int _8807 = (int)0;
              int _8808 = _ptr__4258[_4296];
              for (int _4297 = _8807; _4297 < _8808; ++_4297)
              {
                {
                  _ptr__4291[safe_add( safe_add( _4285,_ptr__4272[safe_add( _ptr__4262[_4296],_4297 )] ),(int)1 )] += (_ptr__4271[safe_add( safe_add( _ptr__4260[_4296],_4297 ),(int)1 )] - _ptr__4271[safe_add( _ptr__4260[_4296],_4297 )]);
                }
              }
            }
          }
          else
          {
            {
              int _8809 = (int)0;
              int _8810 = _ptr__4258[_4296];
              for (int _4298 = _8809; _4298 < _8810; ++_4298)
              {
                {
                  _ptr__4291[safe_add( safe_add( _4285,_4298 ),(int)1 )] += (_ptr__4271[safe_add( safe_add( _ptr__4260[_4296],_4298 ),(int)1 )] - _ptr__4271[safe_add( _ptr__4260[_4296],_4298 )]);
                }
              }
            }
          }
        }
      }
      int _8811 = (int)0;
      int _8812 = _4276;
      for (int _4299 = _8811; _4299 < _8812; ++_4299)
      {
        {
          _ptr__4291[safe_add( safe_add( _4285,_4299 ),(int)1 )] += _ptr__4291[safe_add( _4285,_4299 )];
        }
      }
      int _8813 = (int)0;
      int _8814 = _4256;
      for (int _4300 = _8813; _4300 < _8814; ++_4300)
      {
        {
          if ((_ptr__4262[_4300] >= (int)0))
          {
            {
              int _8815 = (int)0;
              int _8816 = _ptr__4258[_4300];
              for (int _4301 = _8815; _4301 < _8816; ++_4301)
              {
                {
                  int _4302 = _ptr__4271[safe_add( _ptr__4260[_4300],_4301 )];
                  int _4303 = _ptr__4271[safe_add( safe_add( _ptr__4260[_4300],_4301 ),(int)1 )];
                  long long _4304 = _ptr__4272[safe_add( _ptr__4262[_4300],_4301 )];
                  int _4305 = _ptr__4291[safe_add( _4285,_4304 )];
                  int _8817 = _4302;
                  int _8818 = _4303;
                  for (int _4306 = _8817; _4306 < _8818; ++_4306)
                  {
                    {
                      _ptr__4292[safe_add( _4286,_4305 )] = _ptr__4272[safe_add( _ptr__4261[_4300],_4306 )];
                      _ptr__4293[safe_add( _4288,_4305 )] = (((*w)(_4300)) * _ptr__4273[safe_add( _ptr__4263[_4300],_4306 )]);
                      ++ _4305;
                    }
                  }
                  _ptr__4293[safe_add( _4289,_4304 )] += (((*w)(_4300)) * _ptr__4273[safe_add( _ptr__4264[_4300],_4301 )]);
                  _ptr__4291[safe_add( _4285,_4304 )] += (_4303 - _4302);
                }
              }
            }
          }
          else
          {
            {
              int _8819 = (int)0;
              int _8820 = _ptr__4258[_4300];
              for (int _4307 = _8819; _4307 < _8820; ++_4307)
              {
                {
                  int _4308 = _ptr__4271[safe_add( _ptr__4260[_4300],_4307 )];
                  int _4309 = _ptr__4271[safe_add( safe_add( _ptr__4260[_4300],_4307 ),(int)1 )];
                  int _4310 = _4307;
                  int _4311 = _ptr__4291[safe_add( _4285,_4310 )];
                  int _8821 = _4308;
                  int _8822 = _4309;
                  for (int _4312 = _8821; _4312 < _8822; ++_4312)
                  {
                    {
                      _ptr__4292[safe_add( _4286,_4311 )] = _ptr__4272[safe_add( _ptr__4261[_4300],_4312 )];
                      _ptr__4293[safe_add( _4288,_4311 )] = (((*w)(_4300)) * _ptr__4273[safe_add( _ptr__4263[_4300],_4312 )]);
                      ++ _4311;
                    }
                  }
                  _ptr__4293[safe_add( _4289,_4310 )] += (((*w)(_4300)) * _ptr__4273[safe_add( _ptr__4264[_4300],_4307 )]);
                  _ptr__4291[safe_add( _4285,_4310 )] += (_4309 - _4308);
                }
              }
            }
          }
        }
      }
      int _8823 = (int)0;
      int _8824 = _4276;
      for (int _4313 = _8823; _4313 < _8824; ++_4313)
      {
        {
          _ptr__4291[(safe_add( _4285,_4276 ) - _4313)] = _ptr__4291[((safe_add( _4285,_4276 ) - _4313) - (int)1)];
        }
      }
      _ptr__4291[_4285] = (int)0;
    }
  }
  else
  {
    {
      bool _4314 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _4315 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4256)));
      _checked_ptr_1<int> _ptr__4315(_4315 ? _4315->raw() : nullptr,_4315 ? _4315->size(0) : 0);
      int _4316 = (int)0;
      int _4317 = (int)0;
      while ( (!_4314) )
      {
        {
          long long _4318 = (-(int)1);
          int _8825 = (int)0;
          int _8826 = _4256;
          for (int _4319 = _8825; _4319 < _8826; ++_4319)
          {
            {
              if (((_ptr__4315[_4319] < _ptr__4258[_4319]) && ((_4318 < (int)0) || (_ptr__4272[safe_add( _ptr__4262[_4319],_ptr__4315[_4319] )] < _4318))))
              {
                {
                  _4318 = _ptr__4272[safe_add( _ptr__4262[_4319],_ptr__4315[_4319] )];
                }
              }
              {}
            }
          }
          if ((_4318 < (int)0))
          {
            {
              _4314 = true;
            }
          }
          else
          {
            {
              int _8827 = (int)0;
              int _8828 = _4256;
              for (int _4320 = _8827; _4320 < _8828; ++_4320)
              {
                {
                  if (((_ptr__4315[_4320] < _ptr__4258[_4320]) && (_4318 == _ptr__4272[safe_add( _ptr__4262[_4320],_ptr__4315[_4320] )])))
                  {
                    {
                      int _8829 = _ptr__4271[safe_add( _ptr__4260[_4320],_ptr__4315[_4320] )];
                      int _8830 = _ptr__4271[safe_add( safe_add( _ptr__4260[_4320],_ptr__4315[_4320] ),(int)1 )];
                      for (int _4321 = _8829; _4321 < _8830; ++_4321)
                      {
                        {
                          _ptr__4292[safe_add( _4286,_4317 )] = _ptr__4272[safe_add( _ptr__4261[_4320],_4321 )];
                          _ptr__4293[safe_add( _4288,_4317 )] = (((*w)(_4320)) * _ptr__4273[safe_add( _ptr__4263[_4320],_4321 )]);
                          ++ _4317;
                        }
                      }
                      _ptr__4293[safe_add( _4289,_4316 )] += (((*w)(_4320)) * _ptr__4273[safe_add( _ptr__4264[_4320],_ptr__4315[_4320] )]);
                      ++ _ptr__4315[_4320];
                    }
                  }
                  {}
                }
              }
              _ptr__4291[safe_add( safe_add( _4285,_4316 ),(int)1 )] = _4317;
              _ptr__4292[safe_add( _4287,_4316 )] = _4318;
            }
          }
          ++ _4316;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprWSum::toString(){
  return std::string ("ExprWSum()");
}
void mosek::fusion::p_ExprWSum::destroy(){w.reset();es.reset();}void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSumReduce::p_ExprSumReduce  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce  (int _4322,    monty::rc_ptr< ::mosek::fusion::Expression > _4323){ return new mosek::fusion::ExprSumReduce(_4322,_4323); }mosek::fusion::ExprSumReduce::ExprSumReduce  (int _4322,    monty::rc_ptr< ::mosek::fusion::Expression > _4323) :    ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this)){ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_4322,_4323); }void mosek::fusion::p_ExprSumReduce::_initialize  (int _4322,    monty::rc_ptr< ::mosek::fusion::Expression > _4323){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_4322,_4323->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _4323;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _4322;
    std::shared_ptr< monty::ndarray< int,1 > > _4324 = _4323->getShape();
    _checked_ptr_1<int> _ptr__4324(_4324 ? _4324->raw() : nullptr,_4324 ? _4324->size(0) : 0);
    if (((int)((_4324)->size(0)) <= _4322))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4325,monty::rc_ptr< ::mosek::fusion::WorkStack > _4326,monty::rc_ptr< ::mosek::fusion::WorkStack > _4327) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_4325,_4326,_4327); }void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4325,monty::rc_ptr< ::mosek::fusion::WorkStack > _4326,monty::rc_ptr< ::mosek::fusion::WorkStack > _4327){
  expr->eval(_4326,_4325,_4327);
  _4326->pop_expr();
  int _4328 = mosek::fusion::p_WorkStack::_get_impl(_4326)->nd;
  int _4329 = mosek::fusion::p_WorkStack::_get_impl(_4326)->shape_base;
  int _4330 = mosek::fusion::p_WorkStack::_get_impl(_4326)->nelem;
  int _4331 = mosek::fusion::p_WorkStack::_get_impl(_4326)->nnz;
  bool _4332 = mosek::fusion::p_WorkStack::_get_impl(_4326)->hassp;
  int _4333 = mosek::fusion::p_WorkStack::_get_impl(_4326)->ptr_base;
  int _4334 = mosek::fusion::p_WorkStack::_get_impl(_4326)->sp_base;
  int _4335 = mosek::fusion::p_WorkStack::_get_impl(_4326)->nidxs_base;
  int _4336 = mosek::fusion::p_WorkStack::_get_impl(_4326)->bfix_base;
  int _4337 = mosek::fusion::p_WorkStack::_get_impl(_4326)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4338 = mosek::fusion::p_WorkStack::_get_impl(_4326)->i32;
  _checked_ptr_1<int> _ptr__4338(_4338 ? _4338->raw() : nullptr,_4338 ? _4338->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4339 = mosek::fusion::p_WorkStack::_get_impl(_4326)->i64;
  _checked_ptr_1<long long> _ptr__4339(_4339 ? _4339->raw() : nullptr,_4339 ? _4339->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4340 = mosek::fusion::p_WorkStack::_get_impl(_4326)->f64;
  _checked_ptr_1<double> _ptr__4340(_4340 ? _4340->raw() : nullptr,_4340 ? _4340->size(0) : 0);
  int _4341 = (int)99999;
  int _4342 = (int)99999;
  int _4343 = (int)99999;
  if (_4332)
  {
    {
      int _4344 = (int)0;
      int _8831 = (int)0;
      int _8832 = _4328;
      for (int _4345 = _8831; _4345 < _8832; ++_4345)
      {
        {
          if ((_4344 < _ptr__4338[safe_add( _4329,_4345 )]))
          {
            {
              _4344 = _ptr__4338[safe_add( _4329,_4345 )];
            }
          }
          {}
        }
      }
      _4341 = _4327->alloci32(safe_add( _4344,(int)1 ));
      _4342 = _4327->alloci32(_4330);
      _4343 = _4327->alloci32(_4330);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _4346 = mosek::fusion::p_WorkStack::_get_impl(_4327)->i32;
  _checked_ptr_1<int> _ptr__4346(_4346 ? _4346->raw() : nullptr,_4346 ? _4346->size(0) : 0);
  if (_4332)
  {
    {
      int _4347 = _4342;
      int _4348 = _4343;
      int _8833 = (int)0;
      int _8834 = _4330;
      for (int _4349 = _8833; _4349 < _8834; ++_4349)
      {
        {
          _ptr__4346[safe_add( _4347,_4349 )] = _4349;
        }
      }
      if ((dim < (_4328 - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _4350 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4328)));
          _checked_ptr_1<long long> _ptr__4350(_4350 ? _4350->raw() : nullptr,_4350 ? _4350->size(0) : 0);
          _ptr__4350[(_4328 - (int)1)] = (int)1;
          int _8835 = (int)1;
          int _8836 = _4328;
          for (int _4351 = _8835; _4351 < _8836; ++_4351)
          {
            {
              _ptr__4350[((_4328 - _4351) - (int)1)] = safe_mul( _ptr__4350[(_4328 - _4351)],_ptr__4338[(safe_add( _4329,_4328 ) - _4351)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _4352 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_4328 - (int)1))));
          _checked_ptr_1<int> _ptr__4352(_4352 ? _4352->raw() : nullptr,_4352 ? _4352->size(0) : 0);
          int _8837 = (int)0;
          int _8838 = dim;
          for (int _4353 = _8837; _4353 < _8838; ++_4353)
          {
            {
              _ptr__4352[((_4328 - _4353) - (int)2)] = _4353;
            }
          }
          int _8839 = safe_add( dim,(int)1 );
          int _8840 = _4328;
          for (int _4354 = _8839; _4354 < _8840; ++_4354)
          {
            {
              _ptr__4352[((_4328 - _4354) - (int)1)] = _4354;
            }
          }
          int _8841 = (int)0;
          int _8842 = (_4328 - (int)1);
          for (int _4355 = _8841; _4355 < _8842; ++_4355)
          {
            {
              int _4356 = _ptr__4352[_4355];
              int _4357 = _ptr__4338[safe_add( _4329,_4356 )];
              int _8843 = (int)0;
              int _8844 = safe_add( _4357,(int)1 );
              for (int _4358 = _8843; _4358 < _8844; ++_4358)
              {
                {
                  _ptr__4346[safe_add( _4341,_4358 )] = (int)0;
                }
              }
              int _8845 = (int)0;
              int _8846 = _4330;
              for (int _4359 = _8845; _4359 < _8846; ++_4359)
              {
                {
                  ++ _ptr__4346[safe_add( safe_add( _4341,(int)1 ),((_ptr__4339[safe_add( _4334,_4359 )] / _ptr__4350[_4356]) % _4357) )];
                }
              }
              int _8847 = (int)0;
              int _8848 = _4357;
              for (int _4360 = _8847; _4360 < _8848; ++_4360)
              {
                {
                  _ptr__4346[safe_add( safe_add( _4341,_4360 ),(int)1 )] += _ptr__4346[safe_add( _4341,_4360 )];
                }
              }
              int _8849 = (int)0;
              int _8850 = _4330;
              for (int _4361 = _8849; _4361 < _8850; ++_4361)
              {
                {
                  int _4362 = _ptr__4346[safe_add( _4347,_4361 )];
                  long long _4363 = ((_ptr__4339[safe_add( _4334,_4362 )] / _ptr__4350[_4356]) % _4357);
                  _ptr__4346[safe_add( _4348,_ptr__4346[safe_add( _4341,_4363 )] )] = _4362;
                  ++ _ptr__4346[safe_add( _4341,_4363 )];
                }
              }
              int _4364 = _4348;
              _4348 = _4347;
              _4347 = _4364;
            }
          }
        }
      }
      {}
      int _4365 = (int)1;
      int _8851 = (int)0;
      int _8852 = dim;
      for (int _4366 = _8851; _4366 < _8852; ++_4366)
      {
        {
          _4365 *= _ptr__4338[safe_add( _4329,_4366 )];
        }
      }
      int _4367 = _ptr__4338[safe_add( _4329,dim )];
      int _4368 = (int)1;
      int _8853 = safe_add( dim,(int)1 );
      int _8854 = _4328;
      for (int _4369 = _8853; _4369 < _8854; ++_4369)
      {
        {
          _4368 *= _ptr__4338[safe_add( _4329,_4369 )];
        }
      }
      int _4370 = safe_mul( _4368,_4367 );
      int _4371 = _4368;
      int _4372 = (int)1;
      int _4373 = (int)0;
      long long _4374 = (-(int)1);
      long long _4375 = (-(int)1);
      int _8855 = (int)0;
      int _8856 = _4330;
      for (int _4376 = _8855; _4376 < _8856; ++_4376)
      {
        {
          int _4377 = _ptr__4346[safe_add( _4347,_4376 )];
          long long _4378 = ((_ptr__4339[safe_add( _4334,_4377 )] / _4370) % _4365);
          long long _4379 = (_ptr__4339[safe_add( _4334,_4377 )] % _4368);
          if (((_4375 != _4378) || (_4374 != _4379)))
          {
            {
              _4375 = _4378;
              _4374 = _4379;
              ++ _4373;
            }
          }
          {}
        }
      }
      int _4380 = (_4328 - (int)1);
      bool _4381 = (_4373 < safe_mul( _4365,_4368 ));
      int _4382 = _4331;
      _4325->alloc_expr(_4380,_4373,_4382,_4381);
      int _4383 = mosek::fusion::p_WorkStack::_get_impl(_4325)->ptr_base;
      int _4384 = mosek::fusion::p_WorkStack::_get_impl(_4325)->nidxs_base;
      int _8857;
      bool _8858 = _4381;
      if (_8858)
      {
        _8857 = mosek::fusion::p_WorkStack::_get_impl(_4325)->sp_base;
      }
      else
      {
        _8857 = _4325->alloci64(_4373);
      }
      int _4385 = _8857;
      int _4386 = mosek::fusion::p_WorkStack::_get_impl(_4325)->cof_base;
      int _4387 = mosek::fusion::p_WorkStack::_get_impl(_4325)->bfix_base;
      int _4388 = mosek::fusion::p_WorkStack::_get_impl(_4325)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4389 = mosek::fusion::p_WorkStack::_get_impl(_4325)->i32;
      _checked_ptr_1<int> _ptr__4389(_4389 ? _4389->raw() : nullptr,_4389 ? _4389->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4390 = mosek::fusion::p_WorkStack::_get_impl(_4325)->i64;
      _checked_ptr_1<long long> _ptr__4390(_4390 ? _4390->raw() : nullptr,_4390 ? _4390->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4391 = mosek::fusion::p_WorkStack::_get_impl(_4325)->f64;
      _checked_ptr_1<double> _ptr__4391(_4391 ? _4391->raw() : nullptr,_4391 ? _4391->size(0) : 0);
      int _8859 = (int)0;
      int _8860 = dim;
      for (int _4392 = _8859; _4392 < _8860; ++_4392)
      {
        {
          _ptr__4389[safe_add( _4388,_4392 )] = _ptr__4338[safe_add( _4329,_4392 )];
        }
      }
      int _8861 = safe_add( dim,(int)1 );
      int _8862 = _4328;
      for (int _4393 = _8861; _4393 < _8862; ++_4393)
      {
        {
          _ptr__4389[(safe_add( _4388,_4393 ) - (int)1)] = _ptr__4338[safe_add( _4329,_4393 )];
        }
      }
      _ptr__4389[_4383] = (int)0;
      int _4394 = (int)0;
      int _4395 = (int)0;
      int _4396 = (int)0;
      while ( (_4396 < _4330) )
      {
        {
          int _4397 = _4396;
          long long _4398 = ((_ptr__4339[safe_add( _4334,_ptr__4346[safe_add( _4347,_4397 )] )] / _4370) % _4365);
          long long _4399 = (_ptr__4339[safe_add( _4334,_ptr__4346[safe_add( _4347,_4397 )] )] % _4368);
          ++ _4396;
          while ( ((_4396 < _4330) && ((_4398 == ((_ptr__4339[safe_add( _4334,_ptr__4346[safe_add( _4347,_4396 )] )] / _4370) % _4365)) && (_4399 == (_ptr__4339[safe_add( _4334,_ptr__4346[safe_add( _4347,_4396 )] )] % _4368)))) )
          {
            {
              ++ _4396;
            }
          }
          double _4400 = 0.0;
          int _8863 = _4397;
          int _8864 = _4396;
          for (int _4401 = _8863; _4401 < _8864; ++_4401)
          {
            {
              int _4402 = _ptr__4346[safe_add( _4347,_4401 )];
              int _8865 = _ptr__4338[safe_add( _4333,_4402 )];
              int _8866 = _ptr__4338[safe_add( safe_add( _4333,_4402 ),(int)1 )];
              for (int _4403 = _8865; _4403 < _8866; ++_4403)
              {
                {
                  _ptr__4390[safe_add( _4384,_4395 )] = _ptr__4339[safe_add( _4335,_4403 )];
                  _ptr__4391[safe_add( _4386,_4395 )] = _ptr__4340[safe_add( _4337,_4403 )];
                  ++ _4395;
                }
              }
              _4400 += _ptr__4340[safe_add( _4336,_4402 )];
            }
          }
          _ptr__4390[safe_add( _4385,_4394 )] = safe_add( safe_mul( _4398,_4368 ),_4399 );
          _ptr__4389[safe_add( safe_add( _4383,_4394 ),(int)1 )] = _4395;
          _ptr__4391[safe_add( _4387,_4394 )] = _4400;
          ++ _4394;
        }
      }
      if ((!_4381))
      {
        {
          _4325->popi64(_4373);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4404 = (int)1;
      int _8867 = (int)0;
      int _8868 = dim;
      for (int _4405 = _8867; _4405 < _8868; ++_4405)
      {
        {
          _4404 *= _ptr__4338[safe_add( _4329,_4405 )];
        }
      }
      int _4406 = _ptr__4338[safe_add( _4329,dim )];
      int _4407 = (int)1;
      int _8869 = safe_add( dim,(int)1 );
      int _8870 = _4328;
      for (int _4408 = _8869; _4408 < _8870; ++_4408)
      {
        {
          _4407 *= _ptr__4338[safe_add( _4329,_4408 )];
        }
      }
      int _4409 = safe_mul( _4407,_4406 );
      int _4410 = _4407;
      int _4411 = (int)1;
      int _4412 = safe_mul( _4404,_4407 );
      int _4413 = _4325->alloci32(safe_add( _4412,(int)1 ));
      int _4414 = _4325->alloci64(_4331);
      int _4415 = _4325->allocf64(_4331);
      int _4416 = _4325->allocf64(_4412);
      _4325->pushi32((int)0);
      _4325->pushi32(_4331);
      _4325->pushi32(_4412);
      int _4417 = _4325->alloci32((_4328 - (int)1));
      _4325->pushi32((_4328 - (int)1));
      std::shared_ptr< monty::ndarray< int,1 > > _4418 = mosek::fusion::p_WorkStack::_get_impl(_4325)->i32;
      _checked_ptr_1<int> _ptr__4418(_4418 ? _4418->raw() : nullptr,_4418 ? _4418->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4419 = mosek::fusion::p_WorkStack::_get_impl(_4325)->i64;
      _checked_ptr_1<long long> _ptr__4419(_4419 ? _4419->raw() : nullptr,_4419 ? _4419->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4420 = mosek::fusion::p_WorkStack::_get_impl(_4325)->f64;
      _checked_ptr_1<double> _ptr__4420(_4420 ? _4420->raw() : nullptr,_4420 ? _4420->size(0) : 0);
      int _8871 = (int)0;
      int _8872 = dim;
      for (int _4421 = _8871; _4421 < _8872; ++_4421)
      {
        {
          _ptr__4418[safe_add( _4417,_4421 )] = _ptr__4338[safe_add( _4329,_4421 )];
        }
      }
      int _8873 = safe_add( dim,(int)1 );
      int _8874 = _4328;
      for (int _4422 = _8873; _4422 < _8874; ++_4422)
      {
        {
          _ptr__4418[(safe_add( _4417,_4422 ) - (int)1)] = _ptr__4338[safe_add( _4329,_4422 )];
        }
      }
      int _4423 = (int)0;
      int _4424 = (int)0;
      _ptr__4418[_4413] = (int)0;
      int _8875 = (int)0;
      int _8876 = _4404;
      for (int _4425 = _8875; _4425 < _8876; ++_4425)
      {
        {
          int _8877 = (int)0;
          int _8878 = _4407;
          for (int _4426 = _8877; _4426 < _8878; ++_4426)
          {
            {
              double _4427 = 0.0;
              int _8879 = (int)0;
              int _8880 = _4406;
              for (int _4428 = _8879; _4428 < _8880; ++_4428)
              {
                {
                  int _4429 = safe_add( safe_add( safe_mul( _4425,_4409 ),safe_mul( _4428,_4410 ) ),_4426 );
                  int _8881 = _ptr__4338[safe_add( _4333,_4429 )];
                  int _8882 = _ptr__4338[safe_add( safe_add( _4333,_4429 ),(int)1 )];
                  for (int _4430 = _8881; _4430 < _8882; ++_4430)
                  {
                    {
                      _ptr__4419[safe_add( _4414,_4424 )] = _ptr__4339[safe_add( _4335,_4430 )];
                      _ptr__4420[safe_add( _4415,_4424 )] = _ptr__4340[safe_add( _4337,_4430 )];
                      ++ _4424;
                    }
                  }
                  _4427 += _ptr__4340[safe_add( _4336,_4429 )];
                }
              }
              _ptr__4418[safe_add( safe_add( _4413,_4423 ),(int)1 )] = _4424;
              _ptr__4420[safe_add( _4416,_4423 )] = _4427;
              ++ _4423;
            }
          }
        }
      }
    }
  }
  _4327->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int _4431,std::shared_ptr< monty::ndarray< int,1 > > _4432){
  _checked_ptr_1<int> _ptr__4432(_4432 ? _4432->raw() : nullptr, _4432 ? _4432->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4433 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((_4432)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__4433(_4433 ? _4433->raw() : nullptr,_4433 ? _4433->size(0) : 0);
  int _8883 = (int)0;
  int _8884 = _4431;
  for (int _4434 = _8883; _4434 < _8884; ++_4434)
  {
    {
      _ptr__4433[_4434] = _ptr__4432[_4434];
    }
  }
  int _8885 = safe_add( _4431,(int)1 );
  int _8886 = (int)((_4432)->size(0));
  for (int _4435 = _8885; _4435 < _8886; ++_4435)
  {
    {
      _ptr__4433[(_4435 - (int)1)] = _ptr__4432[_4435];
    }
  }
  return _4433;
}
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSumReduce::toString(){
  return std::string ("ExprSumReduce()");
}
void mosek::fusion::p_ExprSumReduce::destroy(){expr.reset();}void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDenseTril::p_ExprDenseTril  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _4436,    int _4437,    monty::rc_ptr< ::mosek::fusion::Expression > _4438,    int _4439){ return new mosek::fusion::ExprDenseTril(_4436,_4437,_4438,_4439); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _4436,    int _4437,    monty::rc_ptr< ::mosek::fusion::Expression > _4438,    int _4439) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_4436,_4437,_4438,_4439); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _4436,    int _4437,    monty::rc_ptr< ::mosek::fusion::Expression > _4438,    int _4439){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4438->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _4438;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _4436;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _4437;
  }
}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _4440,    int _4441,    monty::rc_ptr< ::mosek::fusion::Expression > _4442){ return new mosek::fusion::ExprDenseTril(_4440,_4441,_4442); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _4440,    int _4441,    monty::rc_ptr< ::mosek::fusion::Expression > _4442) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_4440,_4441,_4442); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _4440,    int _4441,    monty::rc_ptr< ::mosek::fusion::Expression > _4442){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprDenseTril::_initialize(_4440,_4441,_4442,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4443 = _4442->getShape();
    _checked_ptr_1<int> _ptr__4443(_4443 ? _4443->raw() : nullptr,_4443 ? _4443->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_4443)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_4443)->size(0))) || (_ptr__4443[dim0] != _ptr__4443[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4444,monty::rc_ptr< ::mosek::fusion::WorkStack > _4445,monty::rc_ptr< ::mosek::fusion::WorkStack > _4446) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_4444,_4445,_4446); }void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4444,monty::rc_ptr< ::mosek::fusion::WorkStack > _4445,monty::rc_ptr< ::mosek::fusion::WorkStack > _4446){
  expr->eval(_4445,_4444,_4446);
  std::shared_ptr< monty::ndarray< int,1 > > _4447 = mosek::fusion::p_WorkStack::_get_impl(_4445)->i32;
  _checked_ptr_1<int> _ptr__4447(_4447 ? _4447->raw() : nullptr,_4447 ? _4447->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4448 = mosek::fusion::p_WorkStack::_get_impl(_4445)->i64;
  _checked_ptr_1<long long> _ptr__4448(_4448 ? _4448->raw() : nullptr,_4448 ? _4448->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4449 = mosek::fusion::p_WorkStack::_get_impl(_4445)->f64;
  _checked_ptr_1<double> _ptr__4449(_4449 ? _4449->raw() : nullptr,_4449 ? _4449->size(0) : 0);
  int _8887;
  bool _8888 = (dim0 < dim1);
  if (_8888)
  {
    _8887 = dim0;
  }
  else
  {
    _8887 = dim1;
  }
  int _4450 = _8887;
  int _8889;
  bool _8890 = (dim0 > dim1);
  if (_8890)
  {
    _8889 = dim0;
  }
  else
  {
    _8889 = dim1;
  }
  int _4451 = _8889;
  bool _4452 = (dim0 < dim1);
  int _4453 = _4445->popi32();
  int _4454 = _4445->popi32(_4453);
  int _4455 = _4445->popi32();
  int _4456 = _4445->popi32();
  bool _4457 = (_4445->popi32() != (int)0);
  int _4458 = _4445->popi32(safe_add( _4455,(int)1 ));
  int _8891;
  bool _8892 = _4457;
  if (_8892)
  {
    _8891 = _4445->popi64(_4455);
  }
  else
  {
    _8891 = (-(int)1);
  }
  int _4459 = _8891;
  int _4460 = _4445->popi64(_4456);
  int _4461 = _4445->popf64(_4455);
  int _4462 = _4445->popf64(_4456);
  std::vector<int> _8893;
  for (int _4464 = (int)0, _8894 = (int)5; _4464 < _8894 ; ++_4464)
  {
    _8893.push_back((int)1);
  }
  auto _8895 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8893.size()),_8893.begin(),_8893.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4463 = _8895;
  _checked_ptr_1<int> _ptr__4463(_4463 ? _4463->raw() : nullptr,_4463 ? _4463->size(0) : 0);
  int _8896 = (int)0;
  int _8897 = _4450;
  for (int _4465 = _8896; _4465 < _8897; ++_4465)
  {
    {
      _ptr__4463[(int)0] *= _ptr__4447[safe_add( _4454,_4465 )];
    }
  }
  _ptr__4463[(int)1] = _ptr__4447[safe_add( _4454,_4450 )];
  int _8898 = safe_add( _4450,(int)1 );
  int _8899 = _4451;
  for (int _4466 = _8898; _4466 < _8899; ++_4466)
  {
    {
      _ptr__4463[(int)2] *= _ptr__4447[safe_add( _4454,_4466 )];
    }
  }
  _ptr__4463[(int)3] = _ptr__4447[safe_add( _4454,_4451 )];
  int _8900 = safe_add( _4451,(int)1 );
  int _8901 = _4453;
  for (int _4467 = _8900; _4467 < _8901; ++_4467)
  {
    {
      _ptr__4463[(int)4] *= _ptr__4447[safe_add( _4454,_4467 )];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4468 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__4468(_4468 ? _4468->raw() : nullptr,_4468 ? _4468->size(0) : 0);
  _ptr__4468[(int)4] = (int)1;
  int _8902 = (int)1;
  int _8903 = (int)5;
  for (int _4469 = _8902; _4469 < _8903; ++_4469)
  {
    {
      _ptr__4468[(((int)5 - _4469) - (int)1)] = safe_mul( _ptr__4468[((int)5 - _4469)],_ptr__4463[((int)5 - _4469)] );
    }
  }
  int _4470 = (int)0;
  int _4471 = (int)0;
  {
    if (_4457)
    {
      {
        if (_4452)
        {
          {
            int _8904 = (int)0;
            int _8905 = _4455;
            for (int _4472 = _8904; _4472 < _8905; ++_4472)
            {
              {
                long long _4473 = ((_ptr__4448[safe_add( _4459,_4472 )] / _ptr__4468[(int)1]) % _ptr__4463[(int)1]);
                long long _4474 = ((_ptr__4448[safe_add( _4459,_4472 )] / _ptr__4468[(int)3]) % _ptr__4463[(int)3]);
                if ((_4473 >= _4474))
                {
                  {
                    _4470 += (_ptr__4447[safe_add( safe_add( _4458,_4472 ),(int)1 )] - _ptr__4447[safe_add( _4458,_4472 )]);
                    ++ _4471;
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int _8906 = (int)0;
            int _8907 = _4455;
            for (int _4475 = _8906; _4475 < _8907; ++_4475)
            {
              {
                long long _4476 = ((_ptr__4448[safe_add( _4459,_4475 )] / _ptr__4468[(int)1]) % _ptr__4463[(int)1]);
                long long _4477 = ((_ptr__4448[safe_add( _4459,_4475 )] / _ptr__4468[(int)3]) % _ptr__4463[(int)3]);
                if ((_4476 <= _4477))
                {
                  {
                    _4470 += (_ptr__4447[safe_add( safe_add( _4458,_4475 ),(int)1 )] - _ptr__4447[safe_add( _4458,_4475 )]);
                    ++ _4471;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        _4471 = safe_mul( safe_mul( safe_mul( _ptr__4463[(int)0],_ptr__4463[(int)2] ),_ptr__4463[(int)4] ),(safe_mul( _ptr__4463[(int)1],safe_add( _ptr__4463[(int)1],(int)1 ) ) / (int)2) );
        if (_4452)
        {
          {
            int _8908 = (int)0;
            int _8909 = _ptr__4463[(int)0];
            for (int _4478 = _8908; _4478 < _8909; ++_4478)
            {
              {
                int _8910 = (int)0;
                int _8911 = _ptr__4463[(int)1];
                for (int _4479 = _8910; _4479 < _8911; ++_4479)
                {
                  {
                    int _8912 = (int)0;
                    int _8913 = _ptr__4463[(int)2];
                    for (int _4480 = _8912; _4480 < _8913; ++_4480)
                    {
                      {
                        int _8914 = (int)0;
                        int _8915 = safe_add( _4479,(int)1 );
                        for (int _4481 = _8914; _4481 < _8915; ++_4481)
                        {
                          {
                            int _8916 = (int)0;
                            int _8917 = _ptr__4463[(int)4];
                            for (int _4482 = _8916; _4482 < _8917; ++_4482)
                            {
                              {
                                int _4483 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4478,_ptr__4468[(int)0] ),safe_mul( _4479,_ptr__4468[(int)1] ) ),safe_mul( _4480,_ptr__4468[(int)2] ) ),safe_mul( _4481,_ptr__4468[(int)3] ) ),safe_mul( _4482,_ptr__4468[(int)4] ) );
                                _4470 += (_ptr__4447[safe_add( safe_add( _4458,_4483 ),(int)1 )] - _ptr__4447[safe_add( _4458,_4483 )]);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int _8918 = (int)0;
            int _8919 = _ptr__4463[(int)0];
            for (int _4484 = _8918; _4484 < _8919; ++_4484)
            {
              {
                int _8920 = (int)0;
                int _8921 = _ptr__4463[(int)1];
                for (int _4485 = _8920; _4485 < _8921; ++_4485)
                {
                  {
                    int _8922 = (int)0;
                    int _8923 = _ptr__4463[(int)2];
                    for (int _4486 = _8922; _4486 < _8923; ++_4486)
                    {
                      {
                        int _8924 = _4485;
                        int _8925 = _ptr__4463[(int)3];
                        for (int _4487 = _8924; _4487 < _8925; ++_4487)
                        {
                          {
                            int _8926 = (int)0;
                            int _8927 = _ptr__4463[(int)4];
                            for (int _4488 = _8926; _4488 < _8927; ++_4488)
                            {
                              {
                                int _4489 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4484,_ptr__4468[(int)0] ),safe_mul( _4485,_ptr__4468[(int)1] ) ),safe_mul( _4486,_ptr__4468[(int)2] ) ),safe_mul( _4487,_ptr__4468[(int)3] ) ),safe_mul( _4488,_ptr__4468[(int)4] ) );
                                _4470 += (_ptr__4447[safe_add( safe_add( _4458,_4489 ),(int)1 )] - _ptr__4447[safe_add( _4458,_4489 )]);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _4490 = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__4463[(int)0],_ptr__4463[(int)2] ),_ptr__4463[(int)4] ),_ptr__4463[(int)1] ),safe_add( _ptr__4463[(int)1],(int)1 ) ) / (int)2);
  int _4491 = _4444->alloci32(safe_add( _4490,(int)1 ));
  _4444->pushi32((int)1);
  _4444->pushi32(_4470);
  _4444->pushi32(_4490);
  int _8928 = (int)0;
  int _8929 = _4453;
  for (int _4492 = _8928; _4492 < _8929; ++_4492)
  {
    {
      _4444->pushi32(_ptr__4447[safe_add( _4454,_4492 )]);
    }
  }
  _4444->pushi32(_4453);
  int _4493 = _4444->alloci64(_4470);
  int _4494 = _4444->alloci64(_4490);
  int _4495 = _4444->allocf64(_4470);
  int _4496 = _4444->allocf64(_4490);
  std::shared_ptr< monty::ndarray< int,1 > > _4497 = mosek::fusion::p_WorkStack::_get_impl(_4444)->i32;
  _checked_ptr_1<int> _ptr__4497(_4497 ? _4497->raw() : nullptr,_4497 ? _4497->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4498 = mosek::fusion::p_WorkStack::_get_impl(_4444)->i64;
  _checked_ptr_1<long long> _ptr__4498(_4498 ? _4498->raw() : nullptr,_4498 ? _4498->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4499 = mosek::fusion::p_WorkStack::_get_impl(_4444)->f64;
  _checked_ptr_1<double> _ptr__4499(_4499 ? _4499->raw() : nullptr,_4499 ? _4499->size(0) : 0);
  _ptr__4497[_4491] = (int)0;
  if (_4452)
  {
    {
      int _4500 = (int)0;
      int _8930 = (int)0;
      int _8931 = _ptr__4463[(int)0];
      for (int _4501 = _8930; _4501 < _8931; ++_4501)
      {
        {
          int _8932 = (int)0;
          int _8933 = _ptr__4463[(int)1];
          for (int _4502 = _8932; _4502 < _8933; ++_4502)
          {
            {
              int _8934 = (int)0;
              int _8935 = _ptr__4463[(int)2];
              for (int _4503 = _8934; _4503 < _8935; ++_4503)
              {
                {
                  int _8936 = (int)0;
                  int _8937 = safe_add( _4502,(int)1 );
                  for (int _4504 = _8936; _4504 < _8937; ++_4504)
                  {
                    {
                      int _8938 = (int)0;
                      int _8939 = _ptr__4463[(int)4];
                      for (int _4505 = _8938; _4505 < _8939; ++_4505)
                      {
                        {
                          _ptr__4498[safe_add( _4494,_4500 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _4501,_ptr__4468[(int)0] ),safe_mul( _4502,_ptr__4468[(int)1] ) ),safe_mul( _4503,_ptr__4468[(int)2] ) ),safe_mul( _4504,_ptr__4468[(int)3] ) ),safe_mul( _4505,_ptr__4468[(int)4] ) );
                          ++ _4500;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _4506 = (int)0;
      int _8940 = (int)0;
      int _8941 = _ptr__4463[(int)0];
      for (int _4507 = _8940; _4507 < _8941; ++_4507)
      {
        {
          int _8942 = (int)0;
          int _8943 = _ptr__4463[(int)1];
          for (int _4508 = _8942; _4508 < _8943; ++_4508)
          {
            {
              int _8944 = (int)0;
              int _8945 = _ptr__4463[(int)2];
              for (int _4509 = _8944; _4509 < _8945; ++_4509)
              {
                {
                  int _8946 = _4508;
                  int _8947 = _ptr__4463[(int)3];
                  for (int _4510 = _8946; _4510 < _8947; ++_4510)
                  {
                    {
                      int _8948 = (int)0;
                      int _8949 = _ptr__4463[(int)4];
                      for (int _4511 = _8948; _4511 < _8949; ++_4511)
                      {
                        {
                          _ptr__4498[safe_add( _4494,_4506 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _4507,_ptr__4468[(int)0] ),safe_mul( _4508,_ptr__4468[(int)1] ) ),safe_mul( _4509,_ptr__4468[(int)2] ) ),safe_mul( _4510,_ptr__4468[(int)3] ) ),safe_mul( _4511,_ptr__4468[(int)4] ) );
                          ++ _4506;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  {
    int _4512 = (int)0;
    if (_4457)
    {
      {
        int _4513 = (int)0;
        int _4514 = (int)0;
        while ( ((_4514 < _4455) && (_4513 < _4490)) )
        {
          {
            if ((_ptr__4448[safe_add( _4459,_4514 )] < _ptr__4498[safe_add( _4494,_4513 )]))
            {
              {
                ++ _4514;
              }
            }
            else if((_ptr__4448[safe_add( _4459,_4514 )] > _ptr__4498[safe_add( _4494,_4513 )]))
            {
              {
                _ptr__4499[safe_add( _4496,_4513 )] = 0.0;
                _ptr__4497[safe_add( safe_add( _4491,_4513 ),(int)1 )] = _4512;
                ++ _4513;
              }
            }
            else
            {
              {
                int _8950 = _ptr__4447[safe_add( _4458,_4514 )];
                int _8951 = _ptr__4447[safe_add( safe_add( _4458,_4514 ),(int)1 )];
                for (int _4515 = _8950; _4515 < _8951; ++_4515)
                {
                  {
                    _ptr__4498[safe_add( _4493,_4512 )] = _ptr__4448[safe_add( _4460,_4515 )];
                    _ptr__4499[safe_add( _4495,_4512 )] = _ptr__4449[safe_add( _4462,_4515 )];
                    ++ _4512;
                  }
                }
                _ptr__4499[safe_add( _4496,_4513 )] = _ptr__4449[safe_add( _4461,_4514 )];
                _ptr__4497[safe_add( safe_add( _4491,_4513 ),(int)1 )] = _4512;
                ++ _4514;
                ++ _4513;
              }
            }
          }
        }
        while ( (_4513 < _4490) )
        {
          {
            _ptr__4497[safe_add( safe_add( _4491,_4513 ),(int)1 )] = _4512;
            _ptr__4499[safe_add( _4496,_4513 )] = 0.0;
            ++ _4513;
          }
        }
      }
    }
    else
    {
      {
        int _8952 = (int)0;
        int _8953 = _4490;
        for (int _4516 = _8952; _4516 < _8953; ++_4516)
        {
          {
            long long _4517 = _ptr__4498[safe_add( _4494,_4516 )];
            _ptr__4499[safe_add( _4496,_4516 )] = _ptr__4449[safe_add( _4461,_4517 )];
            int _8954 = _ptr__4447[safe_add( _4458,_4517 )];
            int _8955 = _ptr__4447[safe_add( safe_add( _4458,_4517 ),(int)1 )];
            for (int _4518 = _8954; _4518 < _8955; ++_4518)
            {
              {
                _ptr__4498[safe_add( _4493,_4512 )] = _ptr__4448[safe_add( _4460,_4518 )];
                _ptr__4499[safe_add( _4495,_4512 )] = _ptr__4449[safe_add( _4462,_4518 )];
                ++ _4512;
              }
            }
            _ptr__4497[safe_add( safe_add( _4491,_4516 ),(int)1 )] = _4512;
          }
        }
      }
    }
  }
}
void mosek::fusion::p_ExprDenseTril::destroy(){expr.reset();}void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDense::p_ExprDense  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _4519){ return new mosek::fusion::ExprDense(_4519); }mosek::fusion::ExprDense::ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _4519) :    ExprDense(new mosek::fusion::p_ExprDense(this)){ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_4519); }void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4519){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4519->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _4519;
  }
}void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4520,monty::rc_ptr< ::mosek::fusion::WorkStack > _4521,monty::rc_ptr< ::mosek::fusion::WorkStack > _4522) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_4520,_4521,_4522); }void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4520,monty::rc_ptr< ::mosek::fusion::WorkStack > _4521,monty::rc_ptr< ::mosek::fusion::WorkStack > _4522){
  expr->eval(_4520,_4521,_4522);
  _4520->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_4520)->hassp)
  {
    {
      int _4523 = mosek::fusion::p_WorkStack::_get_impl(_4520)->nd;
      int _4524 = mosek::fusion::p_WorkStack::_get_impl(_4520)->nnz;
      int _4525 = mosek::fusion::p_WorkStack::_get_impl(_4520)->nelem;
      int _4526 = mosek::fusion::p_WorkStack::_get_impl(_4520)->sp_base;
      std::vector<int> _8956;
      for (int _4528 = (int)0, _8957 = _4523; _4528 < _8957 ; ++_4528)
      {
        _8956.push_back(((*mosek::fusion::p_WorkStack::_get_impl(_4520)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_4520)->shape_base,_4528 ))));
      }
      auto _8958 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8956.size()),_8956.begin(),_8956.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _4527 = _8958;
      _checked_ptr_1<int> _ptr__4527(_4527 ? _4527->raw() : nullptr,_4527 ? _4527->size(0) : 0);
      int _4529 = (int)::mosek::fusion::p_Set::size(_4527);
      _4520->popi32(safe_add( (int)4,_4523 ));
      if ((_4529 == _4525))
      {
        {
          _4520->popi64(_4525);
          _4520->pushi32((int)0);
          _4520->pushi32(_4524);
          _4520->pushi32(_4525);
          int _4530 = _4520->alloci32(_4523);
          int _8959 = (int)0;
          int _8960 = _4523;
          for (int _4531 = _8959; _4531 < _8960; ++_4531)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_4520)->i32)(safe_add( _4530,_4531 ))) = _ptr__4527[_4531];
            }
          }
          _4520->pushi32(_4523);
          _4520->peek_expr();
        }
      }
      else
      {
        {
          int _4532 = _4522->alloci32(safe_add( _4529,(int)1 ));
          int _4533 = _4522->allocf64(_4529);
          std::shared_ptr< monty::ndarray< int,1 > > _4534 = mosek::fusion::p_WorkStack::_get_impl(_4522)->i32;
          _checked_ptr_1<int> _ptr__4534(_4534 ? _4534->raw() : nullptr,_4534 ? _4534->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4535 = mosek::fusion::p_WorkStack::_get_impl(_4522)->f64;
          _checked_ptr_1<double> _ptr__4535(_4535 ? _4535->raw() : nullptr,_4535 ? _4535->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_WorkStack::_get_impl(_4520)->f64,mosek::fusion::p_WorkStack::_get_impl(_4520)->bfix_base,_4535,_4533,_4525);
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_WorkStack::_get_impl(_4520)->i32,mosek::fusion::p_WorkStack::_get_impl(_4520)->ptr_base,_4534,_4532,safe_add( _4525,(int)1 ));
          _4520->popi32(safe_add( _4525,(int)1 ));
          _4520->popf64(_4525);
          int _4536 = _4520->alloci32(safe_add( _4529,(int)1 ));
          int _4537 = _4520->allocf64(_4529);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _4538 = mosek::fusion::p_WorkStack::_get_impl(_4520)->i32;
            _checked_ptr_1<int> _ptr__4538(_4538 ? _4538->raw() : nullptr,_4538 ? _4538->size(0) : 0);
            std::shared_ptr< monty::ndarray< long long,1 > > _4539 = mosek::fusion::p_WorkStack::_get_impl(_4520)->i64;
            _checked_ptr_1<long long> _ptr__4539(_4539 ? _4539->raw() : nullptr,_4539 ? _4539->size(0) : 0);
            std::shared_ptr< monty::ndarray< double,1 > > _4540 = mosek::fusion::p_WorkStack::_get_impl(_4520)->f64;
            _checked_ptr_1<double> _ptr__4540(_4540 ? _4540->raw() : nullptr,_4540 ? _4540->size(0) : 0);
            _ptr__4538[_4536] = (int)0;
            int _4541 = (int)0;
            if ((_4525 > (int)0))
            {
              {
                int _8961 = (int)0;
                int _8962 = _4529;
                for (int _4542 = _8961; _4542 < _8962; ++_4542)
                {
                  {
                    if ((_ptr__4539[safe_add( _4526,_4541 )] == _4542))
                    {
                      {
                        _ptr__4540[safe_add( _4537,_4542 )] = _ptr__4535[safe_add( _4533,_4541 )];
                        ++ _4541;
                      }
                    }
                    else
                    {
                      {
                        _ptr__4540[safe_add( _4537,_4542 )] = (int)0;
                      }
                    }
                    _ptr__4538[safe_add( safe_add( _4536,_4542 ),(int)1 )] = _ptr__4534[safe_add( _4532,_4541 )];
                  }
                }
              }
            }
            else
            {
              {
                int _8963 = (int)0;
                int _8964 = _4529;
                for (int _4543 = _8963; _4543 < _8964; ++_4543)
                {
                  {
                    _ptr__4540[safe_add( _4537,_4543 )] = (int)0;
                    _ptr__4538[safe_add( safe_add( _4536,_4543 ),(int)1 )] = (int)0;
                  }
                }
              }
            }
          }
          _4520->popi64(_4525);
          _4520->pushi32((int)0);
          _4520->pushi32(_4524);
          _4520->pushi32(_4529);
          int _8965 = (int)0;
          int _8966 = _4523;
          for (int _4544 = _8965; _4544 < _8966; ++_4544)
          {
            {
              _4520->pushi32(_ptr__4527[_4544]);
            }
          }
          _4520->pushi32(_4523);
        }
      }
      _4520->peek_expr();
    }
  }
  {}
  _4522->clear();
}
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDense::destroy(){expr.reset();}void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _4545,    int _4546,    monty::rc_ptr< ::mosek::fusion::Expression > _4547,    int _4548){ return new mosek::fusion::ExprSymmetrize(_4545,_4546,_4547,_4548); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _4545,    int _4546,    monty::rc_ptr< ::mosek::fusion::Expression > _4547,    int _4548) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_4545,_4546,_4547,_4548); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _4545,    int _4546,    monty::rc_ptr< ::mosek::fusion::Expression > _4547,    int _4548){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4547->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _4547;
    if ((_4545 < _4546))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _4545;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _4546;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _4546;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _4545;
      }
    }
  }
}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _4549,    int _4550,    monty::rc_ptr< ::mosek::fusion::Expression > _4551){ return new mosek::fusion::ExprSymmetrize(_4549,_4550,_4551); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _4549,    int _4550,    monty::rc_ptr< ::mosek::fusion::Expression > _4551) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_4549,_4550,_4551); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _4549,    int _4550,    monty::rc_ptr< ::mosek::fusion::Expression > _4551){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprSymmetrize::_initialize(_4549,_4550,_4551,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4552 = _4551->getShape();
    _checked_ptr_1<int> _ptr__4552(_4552 ? _4552->raw() : nullptr,_4552 ? _4552->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_4552)->size(0))) || (_ptr__4552[dim0] != _ptr__4552[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4553,monty::rc_ptr< ::mosek::fusion::WorkStack > _4554,monty::rc_ptr< ::mosek::fusion::WorkStack > _4555) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_4553,_4554,_4555); }void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4553,monty::rc_ptr< ::mosek::fusion::WorkStack > _4554,monty::rc_ptr< ::mosek::fusion::WorkStack > _4555){
  expr->eval(_4554,_4553,_4555);
  int _4556 = (int)0;
  int _4557 = _4554->peeki32();
  int _4558 = _4554->peeki32(safe_add( _4557,(int)3 ));
  int _4559 = _4554->peeki32(safe_add( _4557,(int)2 ));
  int _8967 = (int)0;
  int _8968 = _4557;
  for (int _4560 = _8967; _4560 < _8968; ++_4560)
  {
    {
      int _4561 = _4554->peeki32(safe_add( _4560,(int)1 ));
      if ((_4561 > _4556))
      {
        {
          _4561 = _4556;
        }
      }
      {}
    }
  }
  int _4562 = _4554->alloci32(_4559);
  int _4563 = _4554->alloci32(_4559);
  int _4564 = _4554->alloci32(safe_add( _4556,(int)1 ));
  int _4565 = _4554->alloci64(_4559);
  _4554->popi32(safe_add( safe_add( safe_mul( (int)2,_4559 ),_4556 ),(int)1 ));
  _4554->popi64(_4559);
  int _4566 = _4554->popi32();
  int _4567 = _4554->popi32(_4566);
  int _4568 = _4554->popi32();
  int _4569 = _4554->popi32();
  bool _4570 = (_4554->popi32() != (int)0);
  int _4571 = _4554->popi32(safe_add( _4568,(int)1 ));
  int _8969;
  bool _8970 = _4570;
  if (_8970)
  {
    _8969 = _4554->popi64(_4568);
  }
  else
  {
    _8969 = (-(int)1);
  }
  int _4572 = _8969;
  int _4573 = _4554->popi64(_4569);
  int _4574 = _4554->popf64(_4568);
  int _4575 = _4554->popf64(_4569);
  int _4576 = (int)0;
  int _4577 = (int)0;
  std::vector<int> _8971;
  for (int _4579 = (int)0, _8972 = (int)5; _4579 < _8972 ; ++_4579)
  {
    _8971.push_back((int)1);
  }
  auto _8973 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8971.size()),_8971.begin(),_8971.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4578 = _8973;
  _checked_ptr_1<int> _ptr__4578(_4578 ? _4578->raw() : nullptr,_4578 ? _4578->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4580 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)5)));
  _checked_ptr_1<long long> _ptr__4580(_4580 ? _4580->raw() : nullptr,_4580 ? _4580->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4581 = mosek::fusion::p_WorkStack::_get_impl(_4554)->i32;
  _checked_ptr_1<int> _ptr__4581(_4581 ? _4581->raw() : nullptr,_4581 ? _4581->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4582 = mosek::fusion::p_WorkStack::_get_impl(_4554)->i64;
  _checked_ptr_1<long long> _ptr__4582(_4582 ? _4582->raw() : nullptr,_4582 ? _4582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4583 = mosek::fusion::p_WorkStack::_get_impl(_4554)->f64;
  _checked_ptr_1<double> _ptr__4583(_4583 ? _4583->raw() : nullptr,_4583 ? _4583->size(0) : 0);
  int _8974 = (int)0;
  int _8975 = dim0;
  for (int _4584 = _8974; _4584 < _8975; ++_4584)
  {
    {
      _ptr__4578[(int)0] *= _ptr__4581[safe_add( _4567,_4584 )];
    }
  }
  _ptr__4578[(int)1] = _ptr__4581[safe_add( _4567,dim0 )];
  int _8976 = safe_add( dim0,(int)1 );
  int _8977 = dim1;
  for (int _4585 = _8976; _4585 < _8977; ++_4585)
  {
    {
      _ptr__4578[(int)2] *= _ptr__4581[safe_add( _4567,_4585 )];
    }
  }
  _ptr__4578[(int)3] = _ptr__4581[safe_add( _4567,dim1 )];
  int _8978 = safe_add( dim1,(int)1 );
  int _8979 = _4566;
  for (int _4586 = _8978; _4586 < _8979; ++_4586)
  {
    {
      _ptr__4578[(int)4] *= _ptr__4581[safe_add( _4567,_4586 )];
    }
  }
  _ptr__4580[(int)4] = (int)1;
  int _8980 = (int)1;
  int _8981 = (int)5;
  for (int _4587 = _8980; _4587 < _8981; ++_4587)
  {
    {
      _ptr__4580[(((int)5 - _4587) - (int)1)] = safe_mul( _ptr__4580[((int)5 - _4587)],_ptr__4578[((int)5 - _4587)] );
    }
  }
  if (_4570)
  {
    {
      int _4588 = _4562;
      int _8982 = (int)0;
      int _8983 = _4568;
      for (int _4589 = _8982; _4589 < _8983; ++_4589)
      {
        {
          _ptr__4581[safe_add( _4588,_4589 )] = _4589;
        }
      }
      int _4590 = _4563;
      std::shared_ptr< monty::ndarray< int,1 > > _4591 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)2),(int)((int)3),(int)((int)0)});
      _checked_ptr_1<int> _ptr__4591(_4591 ? _4591->raw() : nullptr,_4591 ? _4591->size(0) : 0);
      int _8984 = (int)0;
      int _8985 = (int)4;
      for (int _4592 = _8984; _4592 < _8985; ++_4592)
      {
        {
          long long _4593 = _ptr__4580[_ptr__4591[_4592]];
          int _4594 = _ptr__4578[_ptr__4591[_4592]];
          if ((_4594 > (int)1))
          {
            {
              int _8986 = (int)0;
              int _8987 = safe_add( _4594,(int)1 );
              for (int _4595 = _8986; _4595 < _8987; ++_4595)
              {
                {
                  _ptr__4581[safe_add( _4564,_4595 )] = (int)0;
                }
              }
              int _8988 = (int)0;
              int _8989 = _4568;
              for (int _4596 = _8988; _4596 < _8989; ++_4596)
              {
                {
                  ++ _ptr__4581[safe_add( safe_add( _4564,((_ptr__4582[safe_add( _4572,_ptr__4581[safe_add( _4588,_4596 )] )] / _4593) % _4594) ),(int)1 )];
                }
              }
              int _8990 = (int)0;
              int _8991 = _ptr__4578[(int)3];
              for (int _4597 = _8990; _4597 < _8991; ++_4597)
              {
                {
                  _ptr__4581[safe_add( safe_add( _4564,_4597 ),(int)1 )] += _ptr__4581[safe_add( _4564,_4597 )];
                }
              }
              int _8992 = (int)0;
              int _8993 = _4568;
              for (int _4598 = _8992; _4598 < _8993; ++_4598)
              {
                {
                  int _4599 = _ptr__4581[safe_add( _4588,_4598 )];
                  long long _4600 = ((_ptr__4582[safe_add( _4572,_4599 )] / _4593) % _4594);
                  _ptr__4581[safe_add( _4590,_ptr__4581[safe_add( _4564,_4600 )] )] = _4599;
                  ++ _ptr__4581[safe_add( _4564,_4600 )];
                }
              }
              int _4601 = _4588;
              _4588 = _4590;
              _4590 = _4601;
            }
          }
          {}
        }
      }
      int _8994 = (int)0;
      int _8995 = _4568;
      for (int _4602 = _8994; _4602 < _8995; ++_4602)
      {
        {
          _ptr__4582[safe_add( _4565,_4602 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__4582[safe_add( _4572,_4602 )] / _ptr__4580[(int)0]) % _ptr__4578[(int)0]),_ptr__4580[(int)0] ),safe_mul( ((_ptr__4582[safe_add( _4572,_4602 )] / _ptr__4580[(int)1]) % _ptr__4578[(int)1]),_ptr__4580[(int)3] ) ),safe_mul( ((_ptr__4582[safe_add( _4572,_4602 )] / _ptr__4580[(int)2]) % _ptr__4578[(int)2]),_ptr__4580[(int)2] ) ),safe_mul( ((_ptr__4582[safe_add( _4572,_4602 )] / _ptr__4580[(int)3]) % _ptr__4578[(int)3]),_ptr__4580[(int)1] ) ),safe_mul( ((_ptr__4582[safe_add( _4572,_4602 )] / _ptr__4580[(int)4]) % _ptr__4578[(int)4]),_ptr__4580[(int)4] ) );
        }
      }
      {
        int _4603 = (int)0;
        int _4604 = (int)0;
        while ( ((_4604 < _4568) && (_4603 < _4568)) )
        {
          {
            int _4605 = _ptr__4581[safe_add( _4588,_4603 )];
            if ((_ptr__4582[safe_add( _4572,_4604 )] < _ptr__4582[safe_add( _4565,_4605 )]))
            {
              {
                _4577 += (_ptr__4581[safe_add( safe_add( _4571,_4604 ),(int)1 )] - _ptr__4581[safe_add( _4571,_4604 )]);
                ++ _4576;
                ++ _4604;
              }
            }
            else if((_ptr__4582[safe_add( _4572,_4604 )] > _ptr__4582[safe_add( _4565,_4605 )]))
            {
              {
                _4577 += (_ptr__4581[safe_add( safe_add( _4571,_4605 ),(int)1 )] - _ptr__4581[safe_add( _4571,_4605 )]);
                ++ _4576;
                ++ _4603;
              }
            }
            else if((_ptr__4582[safe_add( _4572,_4604 )] != _ptr__4582[safe_add( _4572,_4605 )]))
            {
              {
                _4577 += (_ptr__4581[safe_add( safe_add( _4571,_4604 ),(int)1 )] - _ptr__4581[safe_add( _4571,_4604 )]);
                _4577 += (_ptr__4581[safe_add( safe_add( _4571,_4605 ),(int)1 )] - _ptr__4581[safe_add( _4571,_4605 )]);
                ++ _4576;
                ++ _4603;
                ++ _4604;
              }
            }
            else
            {
              {
                _4577 += (_ptr__4581[safe_add( safe_add( _4571,_4604 ),(int)1 )] - _ptr__4581[safe_add( _4571,_4604 )]);
                ++ _4576;
                ++ _4603;
                ++ _4604;
              }
            }
          }
        }
        while ( (_4604 < _4568) )
        {
          {
            _4577 += (_ptr__4581[safe_add( safe_add( _4571,_4604 ),(int)1 )] - _ptr__4581[safe_add( _4571,_4604 )]);
            ++ _4576;
            ++ _4604;
          }
        }
        while ( (_4603 < _4568) )
        {
          {
            int _4606 = _ptr__4581[safe_add( _4588,_4603 )];
            _4577 += (_ptr__4581[safe_add( safe_add( _4571,_4606 ),(int)1 )] - _ptr__4581[safe_add( _4571,_4606 )]);
            ++ _4576;
            ++ _4603;
          }
        }
      }
      int _4607 = _4553->alloci32(safe_add( _4576,(int)1 ));
      _4553->pushi32((int)1);
      _4553->pushi32(_4577);
      _4553->pushi32(_4576);
      int _8996 = (int)0;
      int _8997 = _4566;
      for (int _4608 = _8996; _4608 < _8997; ++_4608)
      {
        {
          _4553->pushi32(_ptr__4581[safe_add( _4567,_4608 )]);
        }
      }
      _4553->pushi32(_4566);
      int _4609 = _4553->alloci64(_4577);
      int _4610 = _4553->alloci64(_4576);
      int _4611 = _4553->allocf64(_4577);
      int _4612 = _4553->allocf64(_4576);
      std::shared_ptr< monty::ndarray< int,1 > > _4613 = mosek::fusion::p_WorkStack::_get_impl(_4553)->i32;
      _checked_ptr_1<int> _ptr__4613(_4613 ? _4613->raw() : nullptr,_4613 ? _4613->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4614 = mosek::fusion::p_WorkStack::_get_impl(_4553)->i64;
      _checked_ptr_1<long long> _ptr__4614(_4614 ? _4614->raw() : nullptr,_4614 ? _4614->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4615 = mosek::fusion::p_WorkStack::_get_impl(_4553)->f64;
      _checked_ptr_1<double> _ptr__4615(_4615 ? _4615->raw() : nullptr,_4615 ? _4615->size(0) : 0);
      _ptr__4613[_4607] = (int)0;
      {
        int _4616 = (int)0;
        int _4617 = (int)0;
        int _4618 = (int)0;
        int _4619 = (int)0;
        _ptr__4581[_4607] = (int)0;
        while ( ((_4619 < _4568) && (_4618 < _4568)) )
        {
          {
            int _4620 = _ptr__4581[safe_add( _4588,_4618 )];
            if ((_ptr__4582[safe_add( _4572,_4619 )] < _ptr__4582[safe_add( _4565,_4620 )]))
            {
              {
                int _8998 = _ptr__4581[safe_add( _4571,_4619 )];
                int _8999 = _ptr__4581[safe_add( safe_add( _4571,_4619 ),(int)1 )];
                for (int _4621 = _8998; _4621 < _8999; ++_4621)
                {
                  {
                    _ptr__4614[safe_add( _4609,_4616 )] = _ptr__4582[safe_add( _4573,_4621 )];
                    _ptr__4615[safe_add( _4611,_4616 )] = (_ptr__4583[safe_add( _4575,_4621 )] * 0.5);
                    ++ _4616;
                  }
                }
                _ptr__4615[safe_add( _4612,_4617 )] = (_ptr__4583[safe_add( _4574,_4619 )] * 0.5);
                _ptr__4614[safe_add( _4610,_4617 )] = _ptr__4582[safe_add( _4572,_4619 )];
                _ptr__4613[safe_add( safe_add( _4607,_4617 ),(int)1 )] = _4616;
                ++ _4617;
                ++ _4619;
              }
            }
            else if((_ptr__4582[safe_add( _4572,_4619 )] > _ptr__4582[safe_add( _4565,_4620 )]))
            {
              {
                int _9000 = _ptr__4581[safe_add( _4571,_4620 )];
                int _9001 = _ptr__4581[safe_add( safe_add( _4571,_4620 ),(int)1 )];
                for (int _4622 = _9000; _4622 < _9001; ++_4622)
                {
                  {
                    _ptr__4614[safe_add( _4609,_4616 )] = _ptr__4582[safe_add( _4573,_4622 )];
                    _ptr__4615[safe_add( _4611,_4616 )] = (_ptr__4583[safe_add( _4575,_4622 )] * 0.5);
                    ++ _4616;
                  }
                }
                _ptr__4615[safe_add( _4612,_4617 )] = (_ptr__4583[safe_add( _4574,_4620 )] * 0.5);
                _ptr__4614[safe_add( _4610,_4617 )] = _ptr__4582[safe_add( _4565,_4620 )];
                _ptr__4613[safe_add( safe_add( _4607,_4617 ),(int)1 )] = _4616;
                ++ _4617;
                ++ _4618;
              }
            }
            else if((_ptr__4582[safe_add( _4572,_4619 )] != _ptr__4582[safe_add( _4572,_4620 )]))
            {
              {
                int _9002 = _ptr__4581[safe_add( _4571,_4619 )];
                int _9003 = _ptr__4581[safe_add( safe_add( _4571,_4619 ),(int)1 )];
                for (int _4623 = _9002; _4623 < _9003; ++_4623)
                {
                  {
                    _ptr__4614[safe_add( _4609,_4616 )] = _ptr__4582[safe_add( _4573,_4623 )];
                    _ptr__4615[safe_add( _4611,_4616 )] = (_ptr__4583[safe_add( _4575,_4623 )] * 0.5);
                    ++ _4616;
                  }
                }
                int _9004 = _ptr__4581[safe_add( _4571,_4620 )];
                int _9005 = _ptr__4581[safe_add( safe_add( _4571,_4620 ),(int)1 )];
                for (int _4624 = _9004; _4624 < _9005; ++_4624)
                {
                  {
                    _ptr__4614[safe_add( _4609,_4616 )] = _ptr__4582[safe_add( _4573,_4624 )];
                    _ptr__4615[safe_add( _4611,_4616 )] = (_ptr__4583[safe_add( _4575,_4624 )] * 0.5);
                    ++ _4616;
                  }
                }
                _ptr__4615[safe_add( _4612,_4617 )] = (0.5 * (_ptr__4583[safe_add( _4574,_4619 )] + _ptr__4583[safe_add( _4574,_4620 )]));
                _ptr__4614[safe_add( _4610,_4617 )] = _ptr__4582[safe_add( _4572,_4619 )];
                _ptr__4613[safe_add( safe_add( _4607,_4617 ),(int)1 )] = _4616;
                ++ _4617;
                ++ _4618;
                ++ _4619;
              }
            }
            else
            {
              {
                int _9006 = _ptr__4581[safe_add( _4571,_4619 )];
                int _9007 = _ptr__4581[safe_add( safe_add( _4571,_4619 ),(int)1 )];
                for (int _4625 = _9006; _4625 < _9007; ++_4625)
                {
                  {
                    _ptr__4614[safe_add( _4609,_4616 )] = _ptr__4582[safe_add( _4573,_4625 )];
                    _ptr__4615[safe_add( _4611,_4616 )] = _ptr__4583[safe_add( _4575,_4625 )];
                    ++ _4616;
                  }
                }
                _ptr__4615[safe_add( _4612,_4617 )] = _ptr__4583[safe_add( _4574,_4619 )];
                _ptr__4614[safe_add( _4610,_4617 )] = _ptr__4582[safe_add( _4572,_4619 )];
                _ptr__4613[safe_add( safe_add( _4607,_4617 ),(int)1 )] = _4616;
                ++ _4617;
                ++ _4618;
                ++ _4619;
              }
            }
          }
        }
        while ( (_4619 < _4568) )
        {
          {
            int _9008 = _ptr__4581[safe_add( _4571,_4619 )];
            int _9009 = _ptr__4581[safe_add( safe_add( _4571,_4619 ),(int)1 )];
            for (int _4626 = _9008; _4626 < _9009; ++_4626)
            {
              {
                _ptr__4614[safe_add( _4609,_4616 )] = _ptr__4582[safe_add( _4573,_4626 )];
                _ptr__4615[safe_add( _4611,_4616 )] = (_ptr__4583[safe_add( _4575,_4626 )] * 0.5);
                ++ _4616;
              }
            }
            _ptr__4615[safe_add( _4612,_4617 )] = (_ptr__4583[safe_add( _4574,_4619 )] * 0.5);
            _ptr__4614[safe_add( _4610,_4617 )] = _ptr__4582[safe_add( _4572,_4619 )];
            _ptr__4613[safe_add( safe_add( _4607,_4617 ),(int)1 )] = _4616;
            ++ _4617;
            ++ _4619;
          }
        }
        while ( (_4618 < _4568) )
        {
          {
            int _4627 = _ptr__4581[safe_add( _4588,_4618 )];
            int _9010 = _ptr__4581[safe_add( _4571,_4627 )];
            int _9011 = _ptr__4581[safe_add( safe_add( _4571,_4627 ),(int)1 )];
            for (int _4628 = _9010; _4628 < _9011; ++_4628)
            {
              {
                _ptr__4614[safe_add( _4609,_4616 )] = _ptr__4582[safe_add( _4573,_4628 )];
                _ptr__4615[safe_add( _4611,_4616 )] = (_ptr__4583[safe_add( _4575,_4628 )] * 0.5);
                ++ _4616;
              }
            }
            _ptr__4615[safe_add( _4612,_4617 )] = (_ptr__4583[safe_add( _4574,_4627 )] * 0.5);
            _ptr__4614[safe_add( _4610,_4617 )] = _ptr__4582[safe_add( _4565,_4627 )];
            _ptr__4613[safe_add( safe_add( _4607,_4617 ),(int)1 )] = _4616;
            ++ _4617;
            ++ _4618;
          }
        }
      }
    }
  }
  else
  {
    {
      _4576 = _4568;
      _4577 = safe_mul( _4569,(int)2 );
      int _9012 = (int)0;
      int _9013 = _ptr__4578[(int)0];
      for (int _4629 = _9012; _4629 < _9013; ++_4629)
      {
        {
          int _9014 = (int)0;
          int _9015 = _ptr__4578[(int)2];
          for (int _4630 = _9014; _4630 < _9015; ++_4630)
          {
            {
              int _9016 = (int)0;
              int _9017 = _ptr__4578[(int)4];
              for (int _4631 = _9016; _4631 < _9017; ++_4631)
              {
                {
                  int _9018 = (int)0;
                  int _9019 = _ptr__4578[(int)1];
                  for (int _4632 = _9018; _4632 < _9019; ++_4632)
                  {
                    {
                      long long _4633 = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__4580[(int)0],_4629 ),safe_mul( _ptr__4580[(int)1],_4632 ) ),safe_mul( _ptr__4580[(int)2],_4630 ) ),safe_mul( _ptr__4580[(int)3],_4632 ) ),safe_mul( _ptr__4580[(int)4],_4631 ) );
                      _4577 -= (_ptr__4581[safe_add( safe_add( _4571,_4633 ),(int)1 )] - _ptr__4581[safe_add( _4571,_4633 )]);
                    }
                  }
                }
              }
            }
          }
        }
      }
      int _4634 = _4553->alloci32(safe_add( _4576,(int)1 ));
      _4553->pushi32((int)0);
      _4553->pushi32(_4577);
      _4553->pushi32(_4576);
      int _9020 = (int)0;
      int _9021 = _4566;
      for (int _4635 = _9020; _4635 < _9021; ++_4635)
      {
        {
          _4553->pushi32(_ptr__4581[safe_add( _4567,_4635 )]);
        }
      }
      _4553->pushi32(_4566);
      int _4636 = _4553->alloci64(_4577);
      int _4637 = _4553->allocf64(_4577);
      int _4638 = _4553->allocf64(_4576);
      std::shared_ptr< monty::ndarray< int,1 > > _4639 = mosek::fusion::p_WorkStack::_get_impl(_4553)->i32;
      _checked_ptr_1<int> _ptr__4639(_4639 ? _4639->raw() : nullptr,_4639 ? _4639->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4640 = mosek::fusion::p_WorkStack::_get_impl(_4553)->i64;
      _checked_ptr_1<long long> _ptr__4640(_4640 ? _4640->raw() : nullptr,_4640 ? _4640->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4641 = mosek::fusion::p_WorkStack::_get_impl(_4553)->f64;
      _checked_ptr_1<double> _ptr__4641(_4641 ? _4641->raw() : nullptr,_4641 ? _4641->size(0) : 0);
      int _4642 = (int)0;
      int _4643 = (int)0;
      _ptr__4639[_4634] = (int)0;
      int _4644 = (int)0;
      int _9022 = (int)0;
      int _9023 = _ptr__4578[(int)0];
      for (int _4645 = _9022; _4645 < _9023; ++_4645)
      {
        {
          int _9024 = (int)0;
          int _9025 = _ptr__4578[(int)1];
          for (int _4646 = _9024; _4646 < _9025; ++_4646)
          {
            {
              int _9026 = (int)0;
              int _9027 = _ptr__4578[(int)2];
              for (int _4647 = _9026; _4647 < _9027; ++_4647)
              {
                {
                  int _9028 = (int)0;
                  int _9029 = _ptr__4578[(int)3];
                  for (int _4648 = _9028; _4648 < _9029; ++_4648)
                  {
                    {
                      int _9030 = (int)0;
                      int _9031 = _ptr__4578[(int)4];
                      for (int _4649 = _9030; _4649 < _9031; ++_4649)
                      {
                        {
                          if ((_4646 == _4648))
                          {
                            {
                              int _9032 = _ptr__4581[safe_add( _4571,_4644 )];
                              int _9033 = _ptr__4581[safe_add( safe_add( _4571,_4644 ),(int)1 )];
                              for (int _4650 = _9032; _4650 < _9033; ++_4650)
                              {
                                {
                                  _ptr__4640[safe_add( _4636,_4642 )] = _ptr__4582[safe_add( _4573,_4650 )];
                                  _ptr__4641[safe_add( _4637,_4642 )] = _ptr__4583[safe_add( _4575,_4650 )];
                                  ++ _4642;
                                }
                              }
                              _ptr__4641[safe_add( _4638,_4643 )] = _ptr__4583[safe_add( _4574,_4645 )];
                              _ptr__4639[safe_add( safe_add( _4634,_4643 ),(int)1 )] = _4642;
                              ++ _4644;
                            }
                          }
                          else
                          {
                            {
                              long long _4651 = safe_add( safe_add( safe_add( safe_add( safe_mul( _4645,_ptr__4580[(int)0] ),safe_mul( _4648,_ptr__4580[(int)1] ) ),safe_mul( _4647,_ptr__4580[(int)2] ) ),safe_mul( _4646,_ptr__4580[(int)3] ) ),_4649 );
                              int _9034 = _ptr__4581[safe_add( _4571,_4644 )];
                              int _9035 = _ptr__4581[safe_add( safe_add( _4571,_4644 ),(int)1 )];
                              for (int _4652 = _9034; _4652 < _9035; ++_4652)
                              {
                                {
                                  _ptr__4640[safe_add( _4636,_4642 )] = _ptr__4582[safe_add( _4573,_4652 )];
                                  _ptr__4641[safe_add( _4637,_4642 )] = (_ptr__4583[safe_add( _4575,_4652 )] * 0.5);
                                  ++ _4642;
                                }
                              }
                              int _9036 = _ptr__4581[safe_add( _4571,_4651 )];
                              int _9037 = _ptr__4581[safe_add( safe_add( _4571,_4651 ),(int)1 )];
                              for (int _4653 = _9036; _4653 < _9037; ++_4653)
                              {
                                {
                                  _ptr__4640[safe_add( _4636,_4642 )] = _ptr__4582[safe_add( _4573,_4653 )];
                                  _ptr__4641[safe_add( _4637,_4642 )] = (_ptr__4583[safe_add( _4575,_4653 )] * 0.5);
                                  ++ _4642;
                                }
                              }
                              _ptr__4641[safe_add( _4638,_4643 )] = (0.5 * (_ptr__4583[safe_add( _4574,_4644 )] + _ptr__4583[safe_add( _4574,_4651 )]));
                              _ptr__4639[safe_add( safe_add( _4634,_4643 ),(int)1 )] = _4642;
                              ++ _4644;
                            }
                          }
                          ++ _4643;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::p_ExprSymmetrize::destroy(){expr.reset();}void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCompress::p_ExprCompress  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4654){ return new mosek::fusion::ExprCompress(_4654); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4654) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4654); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4654){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4654->getShape());
    eps = 0.0;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4654;
  }
}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4655,    double _4656){ return new mosek::fusion::ExprCompress(_4655,_4656); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4655,    double _4656) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4655,_4656); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4655,    double _4656){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4655->getShape());
    eps = _4656;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4655;
  }
}void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4657,monty::rc_ptr< ::mosek::fusion::WorkStack > _4658,monty::rc_ptr< ::mosek::fusion::WorkStack > _4659) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4657,_4658,_4659); }void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4657,monty::rc_ptr< ::mosek::fusion::WorkStack > _4658,monty::rc_ptr< ::mosek::fusion::WorkStack > _4659){
  expr->eval(_4658,_4657,_4659);
  _4658->pop_expr();
  int _4660 = mosek::fusion::p_WorkStack::_get_impl(_4658)->nd;
  int _4661 = mosek::fusion::p_WorkStack::_get_impl(_4658)->shape_base;
  int _4662 = mosek::fusion::p_WorkStack::_get_impl(_4658)->nelem;
  int _4663 = mosek::fusion::p_WorkStack::_get_impl(_4658)->nnz;
  bool _4664 = mosek::fusion::p_WorkStack::_get_impl(_4658)->hassp;
  int _4665 = mosek::fusion::p_WorkStack::_get_impl(_4658)->ptr_base;
  int _4666 = mosek::fusion::p_WorkStack::_get_impl(_4658)->sp_base;
  int _4667 = mosek::fusion::p_WorkStack::_get_impl(_4658)->nidxs_base;
  int _4668 = mosek::fusion::p_WorkStack::_get_impl(_4658)->bfix_base;
  int _4669 = mosek::fusion::p_WorkStack::_get_impl(_4658)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4670 = mosek::fusion::p_WorkStack::_get_impl(_4658)->i32;
  _checked_ptr_1<int> _ptr__4670(_4670 ? _4670->raw() : nullptr,_4670 ? _4670->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4671 = mosek::fusion::p_WorkStack::_get_impl(_4658)->i64;
  _checked_ptr_1<long long> _ptr__4671(_4671 ? _4671->raw() : nullptr,_4671 ? _4671->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4672 = mosek::fusion::p_WorkStack::_get_impl(_4658)->f64;
  _checked_ptr_1<double> _ptr__4672(_4672 ? _4672->raw() : nullptr,_4672 ? _4672->size(0) : 0);
  std::vector<int> _9038;
  for (int _4674 = (int)0, _9039 = _4660; _4674 < _9039 ; ++_4674)
  {
    _9038.push_back(_ptr__4670[safe_add( _4661,_4674 )]);
  }
  auto _9040 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9038.size()),_9038.begin(),_9038.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4673 = _9040;
  _checked_ptr_1<int> _ptr__4673(_4673 ? _4673->raw() : nullptr,_4673 ? _4673->size(0) : 0);
  bool _4675 = true;
  {
    int _9041 = (int)0;
    int _9042 = _4662;
    for (int _4676 = _9041; _4676 < _9042; ++_4676)
    {
      {
        int _9043 = safe_add( _ptr__4670[safe_add( _4665,_4676 )],(int)1 );
        int _9044 = _ptr__4670[safe_add( safe_add( _4665,_4676 ),(int)1 )];
        for (int _4677 = _9043; _4677 < _9044; ++_4677)
        {
          {
            _4675 = (_4675 && (_ptr__4671[(safe_add( _4667,_4677 ) - (int)1)] < _ptr__4671[safe_add( _4667,_4677 )]));
          }
        }
      }
    }
    if (_4675)
    {
      {
        int _9045 = (int)0;
        int _9046 = _4663;
        for (int _4678 = _9045; _4678 < _9046; ++_4678)
        {
          {
            _4675 = (_4675 && ((_ptr__4672[safe_add( _4669,_4678 )] <= (0.0 - eps)) || ((0.0 + eps) <= _ptr__4672[safe_add( _4669,_4678 )])));
          }
        }
      }
    }
    {}
  }
  if (_4675)
  {
    {
      _4657->alloc_expr(_4660,_4662,_4663,_4664);
      int _4679 = mosek::fusion::p_WorkStack::_get_impl(_4657)->ptr_base;
      int _4680 = mosek::fusion::p_WorkStack::_get_impl(_4657)->nidxs_base;
      int _4681 = mosek::fusion::p_WorkStack::_get_impl(_4657)->sp_base;
      int _4682 = mosek::fusion::p_WorkStack::_get_impl(_4657)->cof_base;
      int _4683 = mosek::fusion::p_WorkStack::_get_impl(_4657)->bfix_base;
      int _4684 = mosek::fusion::p_WorkStack::_get_impl(_4657)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4685 = mosek::fusion::p_WorkStack::_get_impl(_4657)->i32;
      _checked_ptr_1<int> _ptr__4685(_4685 ? _4685->raw() : nullptr,_4685 ? _4685->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4686 = mosek::fusion::p_WorkStack::_get_impl(_4657)->i64;
      _checked_ptr_1<long long> _ptr__4686(_4686 ? _4686->raw() : nullptr,_4686 ? _4686->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4687 = mosek::fusion::p_WorkStack::_get_impl(_4657)->f64;
      _checked_ptr_1<double> _ptr__4687(_4687 ? _4687->raw() : nullptr,_4687 ? _4687->size(0) : 0);
      {
        int _9047 = (int)0;
        int _9048 = _4660;
        for (int _4688 = _9047; _4688 < _9048; ++_4688)
        {
          {
            _ptr__4685[safe_add( _4684,_4688 )] = _ptr__4673[_4688];
          }
        }
        int _9049 = (int)0;
        int _9050 = safe_add( _4662,(int)1 );
        for (int _4689 = _9049; _4689 < _9050; ++_4689)
        {
          {
            _ptr__4685[safe_add( _4679,_4689 )] = _ptr__4670[safe_add( _4665,_4689 )];
          }
        }
        if (_4664)
        {
          {
            int _9051 = (int)0;
            int _9052 = _4662;
            for (int _4690 = _9051; _4690 < _9052; ++_4690)
            {
              {
                _ptr__4686[safe_add( _4681,_4690 )] = _ptr__4671[safe_add( _4666,_4690 )];
              }
            }
          }
        }
        {}
        int _9053 = (int)0;
        int _9054 = _4662;
        for (int _4691 = _9053; _4691 < _9054; ++_4691)
        {
          {
            _ptr__4687[safe_add( _4683,_4691 )] = _ptr__4672[safe_add( _4668,_4691 )];
          }
        }
        int _9055 = (int)0;
        int _9056 = _4663;
        for (int _4692 = _9055; _4692 < _9056; ++_4692)
        {
          {
            _ptr__4686[safe_add( _4680,_4692 )] = _ptr__4671[safe_add( _4667,_4692 )];
          }
        }
        int _9057 = (int)0;
        int _9058 = _4663;
        for (int _4693 = _9057; _4693 < _9058; ++_4693)
        {
          {
            _ptr__4687[safe_add( _4682,_4693 )] = _ptr__4672[safe_add( _4669,_4693 )];
          }
        }
      }
    }
  }
  else
  {
    {
      int _4694 = _4659->alloci32(_4663);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4658,_4659,_4694,_4662,_4663,_4665,_4667);
      std::shared_ptr< monty::ndarray< int,1 > > _4695 = mosek::fusion::p_WorkStack::_get_impl(_4659)->i32;
      _checked_ptr_1<int> _ptr__4695(_4695 ? _4695->raw() : nullptr,_4695 ? _4695->size(0) : 0);
      int _4696 = (int)0;
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4697 = mosek::fusion::p_WorkStack::_get_impl(_4657)->i32;
        _checked_ptr_1<int> _ptr__4697(_4697 ? _4697->raw() : nullptr,_4697 ? _4697->size(0) : 0);
        {
          int _9059 = (int)0;
          int _9060 = _4662;
          for (int _4698 = _9059; _4698 < _9060; ++_4698)
          {
            {
              int _4699 = _ptr__4670[safe_add( safe_add( _4665,_4698 ),(int)1 )];
              int _4700 = _ptr__4670[safe_add( _4665,_4698 )];
              if ((_4700 < _4699))
              {
                {
                  int _4701 = _4700;
                  while ( (_4701 < _4699) )
                  {
                    {
                      double _4702 = 0.0;
                      long long _4703 = _ptr__4671[safe_add( _4667,_ptr__4695[safe_add( _4694,_4701 )] )];
                      while ( ((_4701 < _4699) && (_ptr__4671[safe_add( _4667,_ptr__4695[safe_add( _4694,_4701 )] )] == _4703)) )
                      {
                        {
                          _4702 += _ptr__4672[safe_add( _4669,_ptr__4695[safe_add( _4694,_4701 )] )];
                          ++ _4701;
                        }
                      }
                      {
                      }
                      if (((_4703 != (int)0) && ((_4702 < (-eps)) || (eps < _4702))))
                      {
                        {
                          ++ _4696;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              {}
            }
          }
        }
      }
      _4657->alloc_expr(_4660,_4662,_4696,_4664);
      int _4704 = mosek::fusion::p_WorkStack::_get_impl(_4657)->nidxs_base;
      int _4705 = mosek::fusion::p_WorkStack::_get_impl(_4657)->shape_base;
      int _4706 = mosek::fusion::p_WorkStack::_get_impl(_4657)->sp_base;
      int _4707 = mosek::fusion::p_WorkStack::_get_impl(_4657)->cof_base;
      int _4708 = mosek::fusion::p_WorkStack::_get_impl(_4657)->bfix_base;
      int _4709 = mosek::fusion::p_WorkStack::_get_impl(_4657)->ptr_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4710 = mosek::fusion::p_WorkStack::_get_impl(_4657)->i32;
      _checked_ptr_1<int> _ptr__4710(_4710 ? _4710->raw() : nullptr,_4710 ? _4710->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4711 = mosek::fusion::p_WorkStack::_get_impl(_4657)->i64;
      _checked_ptr_1<long long> _ptr__4711(_4711 ? _4711->raw() : nullptr,_4711 ? _4711->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4712 = mosek::fusion::p_WorkStack::_get_impl(_4657)->f64;
      _checked_ptr_1<double> _ptr__4712(_4712 ? _4712->raw() : nullptr,_4712 ? _4712->size(0) : 0);
      {
        int _9061 = (int)0;
        int _9062 = _4660;
        for (int _4713 = _9061; _4713 < _9062; ++_4713)
        {
          {
            _ptr__4710[safe_add( _4705,_4713 )] = _ptr__4673[_4713];
          }
        }
        int _9063 = (int)0;
        int _9064 = _4662;
        for (int _4714 = _9063; _4714 < _9064; ++_4714)
        {
          {
            _ptr__4712[safe_add( _4707,_4714 )] = 0.0;
          }
        }
        int _9065 = (int)0;
        int _9066 = _4662;
        for (int _4715 = _9065; _4715 < _9066; ++_4715)
        {
          {
            _ptr__4712[safe_add( _4708,_4715 )] = _ptr__4672[safe_add( _4668,_4715 )];
          }
        }
        if (_4664)
        {
          {
            int _9067 = (int)0;
            int _9068 = _4662;
            for (int _4716 = _9067; _4716 < _9068; ++_4716)
            {
              {
                _ptr__4711[safe_add( _4706,_4716 )] = _ptr__4671[safe_add( _4706,_4716 )];
              }
            }
          }
        }
        {}
        int _4717 = (int)0;
        {
          int _4718 = (_4707 - _4704);
          _ptr__4710[_4709] = (int)0;
          int _9069 = (int)0;
          int _9070 = _4662;
          for (int _4719 = _9069; _4719 < _9070; ++_4719)
          {
            {
              int _4720 = _ptr__4670[safe_add( safe_add( _4665,_4719 ),(int)1 )];
              int _4721 = _ptr__4670[safe_add( _4665,_4719 )];
              if ((_4721 < _4720))
              {
                {
                  int _4722 = _4721;
                  while ( (_4722 < _4720) )
                  {
                    {
                      double _4723 = 0.0;
                      long long _4724 = _ptr__4671[safe_add( _4667,_ptr__4695[safe_add( _4694,_4722 )] )];
                      while ( ((_4722 < _4720) && (_ptr__4671[safe_add( _4667,_ptr__4695[safe_add( _4694,_4722 )] )] == _4724)) )
                      {
                        {
                          _4723 += _ptr__4672[safe_add( _4669,_ptr__4695[safe_add( _4694,_4722 )] )];
                          ++ _4722;
                        }
                      }
                      {
                      }
                      if (((_4724 != (int)0) && ((_4723 < (-eps)) || (eps < _4723))))
                      {
                        {
                          _ptr__4711[safe_add( _4704,_4717 )] = _4724;
                          _ptr__4712[safe_add( _4707,_4717 )] = _4723;
                          ++ _4717;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              {}
              _ptr__4710[safe_add( safe_add( _4709,_4719 ),(int)1 )] = _4717;
            }
          }
        }
      }
    }
  }
  _4659->clear();
}
void mosek::fusion::ExprCompress::arg_sort  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4725,    monty::rc_ptr< ::mosek::fusion::WorkStack > _4726,    int _4727,    int _4728,    int _4729,    int _4730,    int _4731) { mosek::fusion::p_ExprCompress::arg_sort(_4725,_4726,_4727,_4728,_4729,_4730,_4731); }void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4725,monty::rc_ptr< ::mosek::fusion::WorkStack > _4726,int _4727,int _4728,int _4729,int _4730,int _4731){
  int _4732 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4733 = mosek::fusion::p_WorkStack::_get_impl(_4725)->i32;
  _checked_ptr_1<int> _ptr__4733(_4733 ? _4733->raw() : nullptr,_4733 ? _4733->size(0) : 0);
  int _9071 = (int)0;
  int _9072 = _4728;
  for (int _4734 = _9071; _4734 < _9072; ++_4734)
  {
    {
      if (((_ptr__4733[safe_add( safe_add( _4730,_4734 ),(int)1 )] - _ptr__4733[safe_add( _4730,_4734 )]) > _4732))
      {
        {
          _4732 = (_ptr__4733[safe_add( safe_add( _4730,_4734 ),(int)1 )] - _ptr__4733[safe_add( _4730,_4734 )]);
        }
      }
      {}
    }
  }
  int _9073;
  bool _9074 = (_4732 > (int)2);
  if (_9074)
  {
    _9073 = _4726->alloci32(safe_mul( _4732,(int)2 ));
  }
  else
  {
    _9073 = (int)99999;
  }
  int _4735 = _9073;
  std::shared_ptr< monty::ndarray< int,1 > > _4736 = mosek::fusion::p_WorkStack::_get_impl(_4726)->i32;
  _checked_ptr_1<int> _ptr__4736(_4736 ? _4736->raw() : nullptr,_4736 ? _4736->size(0) : 0);
  _4733 = mosek::fusion::p_WorkStack::_get_impl(_4725)->i32;
  _ptr__4733.update(_4733 ? _4733->raw() : nullptr, _4733 ? _4733->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4737 = mosek::fusion::p_WorkStack::_get_impl(_4725)->i64;
  _checked_ptr_1<long long> _ptr__4737(_4737 ? _4737->raw() : nullptr,_4737 ? _4737->size(0) : 0);
  int _9075 = (int)0;
  int _9076 = _4728;
  for (int _4738 = _9075; _4738 < _9076; ++_4738)
  {
    {
      int _4739 = _ptr__4733[safe_add( _4730,_4738 )];
      int _4740 = _ptr__4733[safe_add( safe_add( _4730,_4738 ),(int)1 )];
      int _4741 = (_4740 - _4739);
      if ((_4741 == (int)0))
      {
        {
        }
      }
      else if((_4741 == (int)1))
      {
        {
          _ptr__4736[safe_add( _4727,_4739 )] = _4739;
        }
      }
      else if((_4741 == (int)2))
      {
        {
          if ((_ptr__4737[safe_add( _4731,_4739 )] <= _ptr__4737[safe_add( safe_add( _4731,_4739 ),(int)1 )]))
          {
            {
              _ptr__4736[safe_add( _4727,_4739 )] = _4739;
              _ptr__4736[safe_add( safe_add( _4727,_4739 ),(int)1 )] = safe_add( _4739,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4736[safe_add( _4727,_4739 )] = safe_add( _4739,(int)1 );
              _ptr__4736[safe_add( safe_add( _4727,_4739 ),(int)1 )] = _4739;
            }
          }
        }
      }
      else
      {
        {
          long long _4742 = _ptr__4737[safe_add( _4731,_4739 )];
          long long _4743 = _ptr__4737[safe_add( _4731,_4739 )];
          bool _4744 = false;
          int _9077 = safe_add( _4739,(int)1 );
          int _9078 = _4740;
          for (int _4745 = _9077; _4745 < _9078; ++_4745)
          {
            {
              _4744 = (_4744 && (_ptr__4737[(safe_add( _4731,_4745 ) - (int)1)] <= _ptr__4737[safe_add( _4731,_4745 )]));
              if ((_4742 > _ptr__4737[safe_add( _4731,_4745 )]))
              {
                {
                  _4742 = _ptr__4737[safe_add( _4731,_4745 )];
                }
              }
              {}
              if ((_4743 < _ptr__4737[safe_add( _4731,_4745 )]))
              {
                {
                  _4743 = _ptr__4737[safe_add( _4731,_4745 )];
                }
              }
              {}
            }
          }
          if (_4744)
          {
            {
              int _9079 = _4739;
              int _9080 = _4740;
              for (int _4746 = _9079; _4746 < _9080; ++_4746)
              {
                {
                  _ptr__4736[safe_add( _4727,_4746 )] = _4746;
                }
              }
            }
          }
          else if((safe_add( (_4743 - _4742),(int)1 ) <= _4741))
          {
            {
              long long _4747 = safe_add( (_4743 - _4742),(int)1 );
              int _9081 = (int)0;
              long long _9082 = safe_add( _4747,(int)1 );
              for (long long _4748 = _9081; _4748 < _9082; ++_4748)
              {
                {
                  _ptr__4736[safe_add( _4735,_4748 )] = (int)0;
                }
              }
              int _9083 = _4739;
              int _9084 = _4740;
              for (int _4749 = _9083; _4749 < _9084; ++_4749)
              {
                {
                  ++ _ptr__4736[safe_add( (safe_add( _4735,_ptr__4737[safe_add( _4731,_4749 )] ) - _4742),(int)1 )];
                }
              }
              int _9085 = (int)0;
              long long _9086 = _4747;
              for (long long _4750 = _9085; _4750 < _9086; ++_4750)
              {
                {
                  _ptr__4736[safe_add( safe_add( _4735,_4750 ),(int)1 )] += _ptr__4736[safe_add( _4735,_4750 )];
                }
              }
              int _9087 = _4739;
              int _9088 = _4740;
              for (int _4751 = _9087; _4751 < _9088; ++_4751)
              {
                {
                  _ptr__4736[safe_add( safe_add( _4727,_4739 ),_ptr__4736[(safe_add( _4735,_ptr__4737[safe_add( _4731,_4751 )] ) - _4742)] )] = _4751;
                  ++ _ptr__4736[(safe_add( _4735,_ptr__4737[safe_add( _4731,_4751 )] ) - _4742)];
                }
              }
            }
          }
          else
          {
            {
              int _4752 = (int)1;
              int _4753 = _4735;
              int _4754 = safe_add( _4735,_4741 );
              int _9089 = (int)0;
              int _9090 = _4741;
              for (int _4755 = _9089; _4755 < _9090; ++_4755)
              {
                {
                  _ptr__4736[safe_add( _4753,_4755 )] = _4755;
                }
              }
              while ( (_4752 < _4741) )
              {
                {
                  int _4756 = safe_mul( _4752,(int)2 );
                  int _4757 = (_4741 / _4756);
                  if ((safe_add( safe_mul( _4757,_4756 ),_4752 ) < _4741))
                  {
                    {
                      ++ _4757;
                    }
                  }
                  {}
                  int _4758 = (int)0;
                  int _9091 = (int)0;
                  int _9092 = _4757;
                  for (int _4759 = _9091; _4759 < _9092; ++_4759)
                  {
                    {
                      int _4760 = safe_mul( _4759,_4756 );
                      int _4761 = safe_add( _4760,_4752 );
                      int _4762 = _4761;
                      int _4763 = safe_add( _4762,_4752 );
                      if ((_4763 > _4741))
                      {
                        {
                          _4763 = _4741;
                        }
                      }
                      {}
                      while ( ((_4760 < _4761) && (_4762 < _4763)) )
                      {
                        {
                          if ((_ptr__4737[safe_add( safe_add( _4731,_ptr__4736[safe_add( _4753,_4760 )] ),_4739 )] <= _ptr__4737[safe_add( safe_add( _4731,_ptr__4736[safe_add( _4753,_4762 )] ),_4739 )]))
                          {
                            {
                              _ptr__4736[safe_add( _4754,_4758 )] = _ptr__4736[safe_add( _4753,_4760 )];
                              ++ _4758;
                              ++ _4760;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4736[safe_add( _4754,_4758 )] = _ptr__4736[safe_add( _4753,_4762 )];
                              ++ _4758;
                              ++ _4762;
                            }
                          }
                        }
                      }
                      while ( (_4760 < _4761) )
                      {
                        {
                          _ptr__4736[safe_add( _4754,_4758 )] = _ptr__4736[safe_add( _4753,_4760 )];
                          ++ _4758;
                          ++ _4760;
                        }
                      }
                      while ( (_4762 < _4763) )
                      {
                        {
                          _ptr__4736[safe_add( _4754,_4758 )] = _ptr__4736[safe_add( _4753,_4762 )];
                          ++ _4758;
                          ++ _4762;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4757,_4756 ) < _4741))
                  {
                    {
                      int _4764 = safe_mul( _4757,_4756 );
                      while ( (_4764 < _4741) )
                      {
                        {
                          _ptr__4736[safe_add( _4754,_4758 )] = _ptr__4736[safe_add( _4753,_4764 )];
                          ++ _4764;
                          ++ _4758;
                        }
                      }
                    }
                  }
                  {}
                  int _4765 = _4753;
                  _4753 = _4754;
                  _4754 = _4765;
                  _4752 *= (int)2;
                }
              }
              int _9093 = (int)0;
              int _9094 = _4741;
              for (int _4766 = _9093; _4766 < _9094; ++_4766)
              {
                {
                  _ptr__4736[safe_add( safe_add( _4727,_4739 ),_4766 )] = safe_add( _ptr__4736[safe_add( _4753,_4766 )],_4739 );
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress::merge_sort  ( int _4767,    int _4768,    int _4769,    int _4770,    int _4771,    int _4772,    std::shared_ptr< monty::ndarray< int,1 > > _4773,    std::shared_ptr< monty::ndarray< long long,1 > > _4774) { mosek::fusion::p_ExprCompress::merge_sort(_4767,_4768,_4769,_4770,_4771,_4772,_4773,_4774); }void mosek::fusion::p_ExprCompress::merge_sort(int _4767,int _4768,int _4769,int _4770,int _4771,int _4772,std::shared_ptr< monty::ndarray< int,1 > > _4773,std::shared_ptr< monty::ndarray< long long,1 > > _4774){
  _checked_ptr_1<int> _ptr__4773(_4773 ? _4773->raw() : nullptr, _4773 ? _4773->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4774(_4774 ? _4774->raw() : nullptr, _4774 ? _4774->size(0) : 0);
  int _4775 = _4767;
  int _4776 = _4768;
  int _9095 = (int)0;
  int _9096 = _4770;
  for (int _4777 = _9095; _4777 < _9096; ++_4777)
  {
    {
      _ptr__4773[safe_add( _4775,_4777 )] = _4777;
    }
  }
  int _9097 = (int)0;
  int _9098 = _4769;
  for (int _4778 = _9097; _4778 < _9098; ++_4778)
  {
    {
      _4775 = _4767;
      _4776 = _4768;
      int _4779 = _ptr__4773[safe_add( safe_add( _4771,_4778 ),(int)1 )];
      int _4780 = _ptr__4773[safe_add( _4771,_4778 )];
      if ((safe_add( _4780,(int)1 ) < _4779))
      {
        {
          int _4781 = (_4779 - _4780);
          int _4782 = (int)0;
          while ( (_4781 > (int)1) )
          {
            {
              ++ _4782;
              _4781 /= (int)2;
            }
          }
          _4781 = (_4779 - _4780);
          int _4783 = (int)1;
          int _9099 = (int)0;
          int _9100 = safe_add( _4782,(int)1 );
          for (int _4784 = _9099; _4784 < _9100; ++_4784)
          {
            {
              int _4785 = ((safe_add( _4781,_4783 ) - (int)1) / _4783);
              int _4786 = (_4785 / (int)2);
              int _4787 = _4780;
              int _9101 = (int)0;
              int _9102 = _4786;
              for (int _4788 = _9101; _4788 < _9102; ++_4788)
              {
                {
                  int _4789 = safe_mul( safe_mul( _4788,_4783 ),(int)2 );
                  int _9103;
                  bool _9104 = (safe_add( safe_add( _4780,_4789 ),safe_mul( (int)2,_4783 ) ) < _4779);
                  if (_9104)
                  {
                    _9103 = safe_add( safe_add( _4780,_4789 ),safe_mul( (int)2,_4783 ) );
                  }
                  else
                  {
                    _9103 = _4779;
                  }
                  int _4790 = _9103;
                  int _4791 = safe_add( safe_add( _4780,_4789 ),_4783 );
                  int _4792 = safe_add( safe_add( _4780,_4789 ),_4783 );
                  int _4793 = safe_add( _4780,_4789 );
                  while ( ((_4793 < _4792) && (_4791 < _4790)) )
                  {
                    {
                      if ((_ptr__4774[safe_add( _4772,_ptr__4773[safe_add( _4775,_4793 )] )] <= _ptr__4774[safe_add( _4772,_ptr__4773[safe_add( _4775,_4791 )] )]))
                      {
                        {
                          _ptr__4773[safe_add( _4776,_4787 )] = _ptr__4773[safe_add( _4775,_4793 )];
                          ++ _4787;
                          ++ _4793;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4773[safe_add( _4776,_4787 )] = _ptr__4773[safe_add( _4775,_4791 )];
                          ++ _4787;
                          ++ _4791;
                        }
                      }
                    }
                  }
                  while ( (_4793 < _4792) )
                  {
                    {
                      _ptr__4773[safe_add( _4776,_4787 )] = _ptr__4773[safe_add( _4775,_4793 )];
                      ++ _4787;
                      ++ _4793;
                    }
                  }
                  while ( (_4791 < _4790) )
                  {
                    {
                      _ptr__4773[safe_add( _4776,_4787 )] = _ptr__4773[safe_add( _4775,_4791 )];
                      ++ _4787;
                      ++ _4791;
                    }
                  }
                }
              }
              int _9105 = _4787;
              int _9106 = _4779;
              for (int _4794 = _9105; _4794 < _9106; ++_4794)
              {
                {
                  _ptr__4773[safe_add( _4776,_4794 )] = _ptr__4773[safe_add( _4775,_4794 )];
                }
              }
              int _4795 = _4775;
              _4775 = _4776;
              _4776 = _4795;
              _4783 *= (int)2;
            }
          }
        }
      }
      {}
      int _9107 = _4780;
      int _9108 = _4779;
      for (int _4796 = _9107; _4796 < _9108; ++_4796)
      {
        {
          _ptr__4773[safe_add( _4767,_4796 )] = _ptr__4773[safe_add( _4775,_4796 )];
        }
      }
    }
  }
}
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCompress::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCompress::destroy(){expr.reset();}void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCondense::p_ExprCondense  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _4797){ return new mosek::fusion::ExprCondense(_4797); }mosek::fusion::ExprCondense::ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _4797) :    ExprCondense(new mosek::fusion::p_ExprCondense(this)){ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_4797); }void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4797){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4797->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _4797;
  }
}void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4798,monty::rc_ptr< ::mosek::fusion::WorkStack > _4799,monty::rc_ptr< ::mosek::fusion::WorkStack > _4800) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_4798,_4799,_4800); }void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4798,monty::rc_ptr< ::mosek::fusion::WorkStack > _4799,monty::rc_ptr< ::mosek::fusion::WorkStack > _4800){
  expr->eval(_4798,_4799,_4800);
  int _4801 = _4798->popi32();
  long long _4802 = (int)1;
  int _9109 = (int)0;
  int _9110 = _4801;
  for (int _4803 = _9109; _4803 < _9110; ++_4803)
  {
    {
      _4802 *= _4798->popi32();
    }
  }
  int _4804 = _4798->popi32();
  int _4805 = _4798->popi32();
  bool _4806 = (_4798->popi32() != (int)0);
  if (_4806)
  {
    {
      _4798->popi64(_4804);
    }
  }
  {}
  _4798->pushi32((int)0);
  _4798->pushi32(_4805);
  _4798->pushi32(_4804);
  _4798->pushi32(_4804);
  _4798->pushi32((int)1);
}
void mosek::fusion::p_ExprCondense::destroy(){expr.reset();}void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprFromVar::p_ExprFromVar  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _4807){ return new mosek::fusion::ExprFromVar(_4807); }mosek::fusion::ExprFromVar::ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _4807) :    ExprFromVar(new mosek::fusion::p_ExprFromVar(this)){ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_4807); }void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _4807){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4807->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _4807;
  }
}void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4808,monty::rc_ptr< ::mosek::fusion::WorkStack > _4809,monty::rc_ptr< ::mosek::fusion::WorkStack > _4810) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_4808,_4809,_4810); }void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4808,monty::rc_ptr< ::mosek::fusion::WorkStack > _4809,monty::rc_ptr< ::mosek::fusion::WorkStack > _4810){
  std::shared_ptr< monty::ndarray< int,1 > > _4811 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4811(_4811 ? _4811->raw() : nullptr,_4811 ? _4811->size(0) : 0);
  long long _4812 = ::mosek::fusion::p_Set::size(_4811);
  int _4813 = x->numInst();
  int _4814 = _4813;
  bool _4815 = (_4812 > _4813);
  int _4816 = _4808->alloci32(safe_add( _4813,(int)1 ));
  int _4817 = _4808->alloci64(_4814);
  int _9111;
  bool _9112 = _4815;
  if (_9112)
  {
    _9111 = _4808->alloci64(_4813);
  }
  else
  {
    _9111 = (-(int)1);
  }
  int _4818 = _9111;
  int _4819 = _4808->allocf64(_4814);
  int _4820 = _4808->allocf64(_4813);
  int _9113;
  bool _9114 = _4815;
  if (_9114)
  {
    _9113 = (int)1;
  }
  else
  {
    _9113 = (int)0;
  }
  _4808->pushi32(_9113);
  _4808->pushi32(_4814);
  _4808->pushi32(_4813);
  int _9115 = (int)0;
  int _9116 = (int)((_4811)->size(0));
  for (int _4821 = _9115; _4821 < _9116; ++_4821)
  {
    {
      _4808->pushi32(_ptr__4811[_4821]);
    }
  }
  _4808->pushi32((int)((_4811)->size(0)));
  std::shared_ptr< monty::ndarray< int,1 > > _4822 = mosek::fusion::p_WorkStack::_get_impl(_4808)->i32;
  _checked_ptr_1<int> _ptr__4822(_4822 ? _4822->raw() : nullptr,_4822 ? _4822->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4823 = mosek::fusion::p_WorkStack::_get_impl(_4808)->i64;
  _checked_ptr_1<long long> _ptr__4823(_4823 ? _4823->raw() : nullptr,_4823 ? _4823->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4824 = mosek::fusion::p_WorkStack::_get_impl(_4808)->f64;
  _checked_ptr_1<double> _ptr__4824(_4824 ? _4824->raw() : nullptr,_4824 ? _4824->size(0) : 0);
  int _9117 = (int)0;
  int _9118 = safe_add( _4813,(int)1 );
  for (int _4825 = _9117; _4825 < _9118; ++_4825)
  {
    {
      _ptr__4822[safe_add( _4816,_4825 )] = _4825;
    }
  }
  int _9119 = (int)0;
  int _9120 = _4813;
  for (int _4826 = _9119; _4826 < _9120; ++_4826)
  {
    {
      _ptr__4824[safe_add( _4820,_4826 )] = 0.0;
    }
  }
  int _9121 = (int)0;
  int _9122 = _4814;
  for (int _4827 = _9121; _4827 < _9122; ++_4827)
  {
    {
      _ptr__4824[safe_add( _4819,_4827 )] = 1.0;
    }
  }
  if (_4815)
  {
    {
      x->inst(_4818,_4823,_4817,_4823);
    }
  }
  else
  {
    {
      x->inst(_4817,_4823);
    }
  }
}
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprFromVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprFromVar::destroy(){x.reset();}void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprReshape::p_ExprReshape  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _4828,    monty::rc_ptr< ::mosek::fusion::Expression > _4829){ return new mosek::fusion::ExprReshape(_4828,_4829); }mosek::fusion::ExprReshape::ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _4828,    monty::rc_ptr< ::mosek::fusion::Expression > _4829) :    ExprReshape(new mosek::fusion::p_ExprReshape(this)){ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_4828,_4829); }void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4828,    monty::rc_ptr< ::mosek::fusion::Expression > _4829){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4828(_4828 ? _4828->raw() : nullptr, _4828 ? _4828->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_4828));
    long long _4830 = _4829->getSize();
    if ((::mosek::fusion::p_Set::size(_4828) != _4829->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _4829;
  }
}void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4831,monty::rc_ptr< ::mosek::fusion::WorkStack > _4832,monty::rc_ptr< ::mosek::fusion::WorkStack > _4833) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_4831,_4832,_4833); }void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4831,monty::rc_ptr< ::mosek::fusion::WorkStack > _4832,monty::rc_ptr< ::mosek::fusion::WorkStack > _4833){
  std::shared_ptr< monty::ndarray< int,1 > > _4834 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4834(_4834 ? _4834->raw() : nullptr,_4834 ? _4834->size(0) : 0);
  e->eval(_4831,_4832,_4833);
  _4831->peek_expr();
  int _4835 = _4831->popi32();
  long long _4836 = (int)1;
  int _9123 = (int)0;
  int _9124 = _4835;
  for (int _4837 = _9123; _4837 < _9124; ++_4837)
  {
    {
      _4836 *= _4831->popi32();
    }
  }
  if ((_4836 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int _9125 = (int)0;
  int _9126 = (int)((_4834)->size(0));
  for (int _4838 = _9125; _4838 < _9126; ++_4838)
  {
    {
      _4831->pushi32(_ptr__4834[_4838]);
    }
  }
  _4831->pushi32((int)((_4834)->size(0)));
}
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprReshape::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4839 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _4839->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int _9127 = (int)1;
      int _9128 = _pubthis->getND();
      for (int _4840 = _9127; _4840 < _9128; ++_4840)
      {
        {
          _4839->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_4840));
        }
      }
    }
  }
  {}
  _4839->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4839->toString();
}
void mosek::fusion::p_ExprReshape::destroy(){e.reset();}void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseExpression::p_BaseExpression  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4841){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4841(_4841 ? _4841->raw() : nullptr, _4841 ? _4841->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _4841;
  }
}std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseExpression::toString(){
  return std::string ("Expression()");
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__eval() { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression::eval() { return __mosek_2fusion_2BaseExpression__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__eval() { return __mosek_2fusion_2BaseExpression__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__eval(){
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4842 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4843 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _4844 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  _pubthis->eval(_4842,_4843,_4844);
  int _4845 = _4842->popi32();
  std::shared_ptr< monty::ndarray< int,1 > > _4846 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4845)));
  _checked_ptr_1<int> _ptr__4846(_4846 ? _4846->raw() : nullptr,_4846 ? _4846->size(0) : 0);
  _4842->popi32(_4845,_4846,(int)0);
  int _4847 = _4842->popi32();
  int _4848 = _4842->popi32();
  int _4849 = (int)1;
  int _9129 = (int)0;
  int _9130 = _4845;
  for (int _4850 = _9129; _4850 < _9130; ++_4850)
  {
    {
      _4849 *= _ptr__4846[_4850];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _4851 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4848)));
  _checked_ptr_1<long long> _ptr__4851(_4851 ? _4851->raw() : nullptr,_4851 ? _4851->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4852 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _4847,(int)1 ))));
  _checked_ptr_1<int> _ptr__4852(_4852 ? _4852->raw() : nullptr,_4852 ? _4852->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4853 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4847)));
  _checked_ptr_1<double> _ptr__4853(_4853 ? _4853->raw() : nullptr,_4853 ? _4853->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4854 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4848)));
  _checked_ptr_1<double> _ptr__4854(_4854 ? _4854->raw() : nullptr,_4854 ? _4854->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4855 = nullptr;
  _checked_ptr_1<long long> _ptr__4855(_4855 ? _4855->raw() : nullptr,_4855 ? _4855->size(0) : 0);
  if ((_4849 < _4847))
  {
    {
      _4855 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4847)));
      _ptr__4855.update(_4855 ? _4855->raw() : nullptr, _4855 ? _4855->size(0) : 0);
      _4842->popi64(_4847,_4855,(int)0);
    }
  }
  {}
  _4842->popi32(_4847,_4852,(int)1);
  _4842->popi64(_4848,_4851,(int)0);
  _4842->popf64(_4847,_4853,(int)0);
  _4842->popf64(_4848,_4854,(int)0);
  std::vector<long long> _9131;
  for (int _4856 = (int)0, _9132 = safe_add( _4847,(int)1 ); _4856 < _9132 ; ++_4856)
  {
    _9131.push_back(_ptr__4852[_4856]);
  }
  auto _9133 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9131.size()),_9131.begin(),_9131.end()));
  return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_4853,_9133,_4851,_4854,_4846,_4855);
}
void mosek::fusion::BaseExpression::storeexpr  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4857,    std::shared_ptr< monty::ndarray< int,1 > > _4858,    std::shared_ptr< monty::ndarray< int,1 > > _4859,    std::shared_ptr< monty::ndarray< long long,1 > > _4860,    std::shared_ptr< monty::ndarray< long long,1 > > _4861,    std::shared_ptr< monty::ndarray< double,1 > > _4862,    std::shared_ptr< monty::ndarray< double,1 > > _4863) { mosek::fusion::p_BaseExpression::storeexpr(_4857,_4858,_4859,_4860,_4861,_4862,_4863); }void mosek::fusion::p_BaseExpression::storeexpr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4857,std::shared_ptr< monty::ndarray< int,1 > > _4858,std::shared_ptr< monty::ndarray< int,1 > > _4859,std::shared_ptr< monty::ndarray< long long,1 > > _4860,std::shared_ptr< monty::ndarray< long long,1 > > _4861,std::shared_ptr< monty::ndarray< double,1 > > _4862,std::shared_ptr< monty::ndarray< double,1 > > _4863){
  _checked_ptr_1<int> _ptr__4858(_4858 ? _4858->raw() : nullptr, _4858 ? _4858->size(0) : 0);
  _checked_ptr_1<int> _ptr__4859(_4859 ? _4859->raw() : nullptr, _4859 ? _4859->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4860(_4860 ? _4860->raw() : nullptr, _4860 ? _4860->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4861(_4861 ? _4861->raw() : nullptr, _4861 ? _4861->size(0) : 0);
  _checked_ptr_1<double> _ptr__4862(_4862 ? _4862->raw() : nullptr, _4862 ? _4862->size(0) : 0);
  _checked_ptr_1<double> _ptr__4863(_4863 ? _4863->raw() : nullptr, _4863 ? _4863->size(0) : 0);
  int _4864 = _ptr__4859[((int)((_4859)->size(0)) - (int)1)];
  int _4865 = ((int)((_4859)->size(0)) - (int)1);
  int _4866 = (int)((_4858)->size(0));
  {
    int _4867 = _4857->alloci32(safe_add( _4865,(int)1 ));
    ::mosek::fusion::Utils::Tools::arraycopy(_4859,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4857)->i32,_4867,safe_add( _4865,(int)1 ));
  }
  int _9134;
  bool _9135 = (NULL != _4860.get());
  if (_9135)
  {
    _9134 = (int)1;
  }
  else
  {
    _9134 = (int)0;
  }
  _4857->pushi32(_9134);
  _4857->pushi32(_4864);
  _4857->pushi32(_4865);
  {
    int _4868 = _4857->alloci32(_4866);
    ::mosek::fusion::Utils::Tools::arraycopy(_4858,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4857)->i32,_4868,_4866);
  }
  _4857->pushi32(_4866);
  {
    int _4869 = _4857->alloci64(_4864);
    ::mosek::fusion::Utils::Tools::arraycopy(_4861,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4857)->i64,_4869,_4864);
  }
  if ((NULL != _4860.get()))
  {
    {
      int _4870 = _4857->alloci64(_4865);
      ::mosek::fusion::Utils::Tools::arraycopy(_4860,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4857)->i64,_4870,_4865);
    }
  }
  {}
  {
    int _4871 = _4857->allocf64(_4864);
    ::mosek::fusion::Utils::Tools::arraycopy(_4862,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4857)->f64,_4871,_4864);
  }
  {
    int _4872 = _4857->allocf64(_4865);
    if ((NULL != _4863.get()))
    {
      {
        ::mosek::fusion::Utils::Tools::arraycopy(_4863,(int)0,mosek::fusion::p_WorkStack::_get_impl(_4857)->f64,_4872,_4865);
      }
    }
    else
    {
      {
        int _9136 = (int)0;
        int _9137 = _4865;
        for (int _4873 = _9136; _4873 < _9137; ++_4873)
        {
          {
            ((*mosek::fusion::p_WorkStack::_get_impl(_4857)->f64)(safe_add( _4872,_4873 ))) = (int)0;
          }
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4877) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_4877); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,2 > > _4877) { return __mosek_2fusion_2BaseExpression__pick(_4877); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4877) { return __mosek_2fusion_2BaseExpression__pick(_4877); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4877){
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4877)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4878) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_4878); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,1 > > _4878) { return __mosek_2fusion_2BaseExpression__pick(_4878); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4878) { return __mosek_2fusion_2BaseExpression__pick(_4878); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4878){
  _checked_ptr_1<int> _ptr__4878(_4878 ? _4878->raw() : nullptr, _4878 ? _4878->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _4879 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_4878)->size(0)),(int)1)));
  int _9138 = (int)0;
  int _9139 = (int)((_4878)->size(0));
  for (int _4880 = _9138; _4880 < _9139; ++_4880)
  {
    {
      ((*_4879)(_4880,(int)0)) = _ptr__4878[_4880];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4879)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _4881) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_4881); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int,1 > > _4881) { return __mosek_2fusion_2BaseExpression__index(_4881); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _4881) { return __mosek_2fusion_2BaseExpression__index(_4881); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _4881){
  _checked_ptr_1<int> _ptr__4881(_4881 ? _4881->raw() : nullptr, _4881 ? _4881->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _4882 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_4881)->size(0)))));
  int _9140 = (int)0;
  int _9141 = (int)((_4881)->size(0));
  for (int _4883 = _9140; _4883 < _9141; ++_4883)
  {
    {
      ((*_4882)((int)0,_4883)) = _ptr__4881[_4883];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4882)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int _4884) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_4884); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int _4884) { return __mosek_2fusion_2BaseExpression__index(_4884); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int _4884) { return __mosek_2fusion_2BaseExpression__index(_4884); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int _4884){
  std::shared_ptr< monty::ndarray< int,2 > > _4885 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)1)));
  ((*_4885)((int)0,(int)0)) = _4884;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4885)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4886,std::shared_ptr< monty::ndarray< int,1 > > _4887) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_4886,_4887); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int,1 > > _4886,std::shared_ptr< monty::ndarray< int,1 > > _4887) { return __mosek_2fusion_2BaseExpression__slice(_4886,_4887); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4886,std::shared_ptr< monty::ndarray< int,1 > > _4887) { return __mosek_2fusion_2BaseExpression__slice(_4886,_4887); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4886,std::shared_ptr< monty::ndarray< int,1 > > _4887){
  _checked_ptr_1<int> _ptr__4886(_4886 ? _4886->raw() : nullptr, _4886 ? _4886->size(0) : 0);
  _checked_ptr_1<int> _ptr__4887(_4887 ? _4887->raw() : nullptr, _4887 ? _4887->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_4886,_4887)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int _4888,int _4889) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_4888,_4889); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int _4888,int _4889) { return __mosek_2fusion_2BaseExpression__slice(_4888,_4889); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int _4888,int _4889) { return __mosek_2fusion_2BaseExpression__slice(_4888,_4889); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int _4888,int _4889){
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4888)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_4889)}))).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseExpression::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }int mosek::fusion::p_BaseExpression::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseExpression :: getDim(int _4890) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_4890); }int mosek::fusion::p_BaseExpression::getDim(int _4890){
  return ((*shape)(_4890));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseExpression::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::p_BaseExpression::destroy(){shape.reset();}void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }mosek::fusion::p_WorkStack::p_WorkStack  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis){}int mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int _val) { _impl->cof_base = _val; }
int mosek::fusion::WorkStack::get_bfix_base() { return _impl->bfix_base; }
void mosek::fusion::WorkStack::set_bfix_base(int _val) { _impl->bfix_base = _val; }
int mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int _val) { _impl->nidxs_base = _val; }
int mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int _val) { _impl->sp_base = _val; }
int mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int _val) { _impl->shape_base = _val; }
int mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int _val) { _impl->nelem = _val; }
int mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int _val) { _impl->nnz = _val; }
int mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int _val) { _impl->nd = _val; }
int mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int _val) { _impl->pf64 = _val; }
int mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int _val) { _impl->pi64 = _val; }
int mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->i32 = _val; }
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack  (){ return new mosek::fusion::WorkStack(); }mosek::fusion::WorkStack::WorkStack  () :    WorkStack(new mosek::fusion::p_WorkStack(this)){ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }void mosek::fusion::p_WorkStack::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    i32 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    bfix_base = (int)0;
    cof_base = (int)0;
  }
}bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }bool mosek::fusion::p_WorkStack::peek_hassp(){
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
int mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }int mosek::fusion::p_WorkStack::peek_nnz(){
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }int mosek::fusion::p_WorkStack::peek_nelem(){
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_dim(int _4891) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_4891); }int mosek::fusion::p_WorkStack::peek_dim(int _4891){
  return _pubthis->peeki32(safe_add( _4891,(int)1 ));
}
int mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }int mosek::fusion::p_WorkStack::peek_nd(){
  return _pubthis->peeki32();
}
void mosek::fusion::WorkStack :: alloc_expr(int _4892,int _4893,int _4894,bool _4895) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_4892,_4893,_4894,_4895); }void mosek::fusion::p_WorkStack::alloc_expr(int _4892,int _4893,int _4894,bool _4895){
  cof_base = _pubthis->allocf64(_4894);
  bfix_base = _pubthis->allocf64(_4893);
  nidxs_base = _pubthis->alloci64(_4894);
  int _9142;
  bool _9143 = _4895;
  if (_9143)
  {
    _9142 = _pubthis->alloci64(_4893);
  }
  else
  {
    _9142 = (-(int)9999);
  }
  sp_base = _9142;
  ptr_base = _pubthis->alloci32(safe_add( _4893,(int)1 ));
  int _9144;
  bool _9145 = _4895;
  if (_9145)
  {
    _9144 = (int)1;
  }
  else
  {
    _9144 = (int)0;
  }
  _pubthis->pushi32(_9144);
  _pubthis->pushi32(_4894);
  _pubthis->pushi32(_4893);
  shape_base = _pubthis->alloci32(_4892);
  _pubthis->pushi32(_4892);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _4892;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _4893;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _4894;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _4895;
}
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4896) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_4896); }void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _4896){
  int _4897 = pi32;
  int _4898 = pi64;
  int _4899 = pf64;
  _pubthis->pop_expr();
  int _4900 = _4896->alloci32((_4897 - pi32));
  int _4901 = _4896->alloci64((_4898 - pi64));
  int _4902 = _4896->allocf64((_4899 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_4896)->i32,_4900,(_4897 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_4896)->i64,_4901,(_4898 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_4896)->f64,_4902,(_4899 - pf64));
}
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }void mosek::fusion::p_WorkStack::peek_expr(){
  int _4903 = pi32;
  int _4904 = pi64;
  int _4905 = pf64;
  _pubthis->pop_expr();
  pi32 = _4903;
  pi64 = _4904;
  pf64 = _4905;
}
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }void mosek::fusion::p_WorkStack::pop_expr(){
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int _9146;
  bool _9147 = hassp;
  if (_9147)
  {
    _9146 = _pubthis->popi64(nelem);
  }
  else
  {
    _9146 = (-(int)9999);
  }
  sp_base = _9146;
  nidxs_base = _pubthis->popi64(nnz);
  bfix_base = _pubthis->popf64(nelem);
  cof_base = _pubthis->popf64(nnz);
}
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }void mosek::fusion::p_WorkStack::ensure_sparsity(){
  int _4906 = ((*i32)((pi32 - (int)1)));
  bool _4907 = (((*i32)(((pi32 - _4906) - (int)3))) != (int)0);
  int _4908 = ((*i32)(((pi32 - _4906) - (int)1)));
  if ((!_4907))
  {
    {
      ((*i32)(((pi32 - _4906) - (int)3))) = (int)1;
      int _4909 = _pubthis->alloci64(_4908);
      int _9148 = (int)0;
      int _9149 = _4908;
      for (int _4910 = _9148; _4910 < _9149; ++_4910)
      {
        {
          ((*i64)(_4909)) = _4910;
        }
      }
    }
  }
  {}
}
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }void mosek::fusion::p_WorkStack::clear(){
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
int mosek::fusion::WorkStack :: allocf64(int _4911) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_4911); }int mosek::fusion::p_WorkStack::allocf64(int _4911){
  _pubthis->ensuref64(_4911);
  int _4912 = pf64;
  int _9150 = pf64;
  int _9151 = safe_add( pf64,_4911 );
  for (int _4913 = _9150; _4913 < _9151; ++_4913)
  {
    {
      ((*f64)(_4913)) = (int)99997;
    }
  }
  pf64 += _4911;
  return _4912;
}
int mosek::fusion::WorkStack :: alloci64(int _4914) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_4914); }int mosek::fusion::p_WorkStack::alloci64(int _4914){
  _pubthis->ensurei64(_4914);
  int _4915 = pi64;
  int _9152 = pi64;
  int _9153 = safe_add( pi64,_4914 );
  for (int _4916 = _9152; _4916 < _9153; ++_4916)
  {
    {
      ((*i64)(_4916)) = (int)99998;
    }
  }
  pi64 += _4914;
  return _4915;
}
int mosek::fusion::WorkStack :: alloci32(int _4917) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_4917); }int mosek::fusion::p_WorkStack::alloci32(int _4917){
  if ((_4917 > (int)0))
  {
    {
      _pubthis->ensurei32(_4917);
      int _4918 = pi32;
      int _9154 = pi32;
      int _9155 = safe_add( pi32,_4917 );
      for (int _4919 = _9154; _4919 < _9155; ++_4919)
      {
        {
          ((*i32)(_4919)) = (int)99999;
        }
      }
      pi32 += _4917;
      return _4918;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
void mosek::fusion::WorkStack :: pushf64(double _4920) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_4920); }void mosek::fusion::p_WorkStack::pushf64(double _4920){
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _4920;
  ++ pf64;
}
void mosek::fusion::WorkStack :: pushi64(long long _4921) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_4921); }void mosek::fusion::p_WorkStack::pushi64(long long _4921){
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _4921;
  ++ pi64;
}
void mosek::fusion::WorkStack :: pushi32(int _4922) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_4922); }void mosek::fusion::p_WorkStack::pushi32(int _4922){
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _4922;
  ++ pi32;
}
void mosek::fusion::WorkStack :: ensuref64(int _4923) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_4923); }void mosek::fusion::p_WorkStack::ensuref64(int _4923){
  if ((safe_add( pf64,_4923 ) > (int)((f64)->size(0))))
  {
    {
      int _9156;
      bool _9157 = (_4923 < (int)((f64)->size(0)));
      if (_9157)
      {
        _9156 = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _9156 = safe_add( (int)((f64)->size(0)),_4923 );
      }
      int _4924 = _9156;
      std::shared_ptr< monty::ndarray< double,1 > > _4925 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4924)));
      _checked_ptr_1<double> _ptr__4925(_4925 ? _4925->raw() : nullptr,_4925 ? _4925->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_4925,(int)0,pf64);
      f64 = _4925;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei64(int _4926) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_4926); }void mosek::fusion::p_WorkStack::ensurei64(int _4926){
  if ((safe_add( pi64,_4926 ) > (int)((i64)->size(0))))
  {
    {
      int _9158;
      bool _9159 = (_4926 < (int)((i64)->size(0)));
      if (_9159)
      {
        _9158 = (int)((i64)->size(0));
      }
      else
      {
        _9158 = _4926;
      }
      int _4927 = safe_add( (int)((i64)->size(0)),_9158 );
      std::shared_ptr< monty::ndarray< long long,1 > > _4928 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4927)));
      _checked_ptr_1<long long> _ptr__4928(_4928 ? _4928->raw() : nullptr,_4928 ? _4928->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_4928,(int)0,pi64);
      i64 = _4928;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei32(int _4929) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_4929); }void mosek::fusion::p_WorkStack::ensurei32(int _4929){
  if ((safe_add( pi32,_4929 ) > (int)((i32)->size(0))))
  {
    {
      int _9160;
      bool _9161 = (_4929 < (int)((i32)->size(0)));
      if (_9161)
      {
        _9160 = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _9160 = safe_add( (int)((i32)->size(0)),_4929 );
      }
      int _4930 = _9160;
      std::shared_ptr< monty::ndarray< int,1 > > _4931 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4930)));
      _checked_ptr_1<int> _ptr__4931(_4931 ? _4931->raw() : nullptr,_4931 ? _4931->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_4931,(int)0,pi32);
      i32 = _4931;
    }
  }
  {}
}
int mosek::fusion::WorkStack :: popf64(int _4932) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_4932); }int mosek::fusion::p_WorkStack::popf64(int _4932){
  pf64 -= _4932;
  return pf64;
}
int mosek::fusion::WorkStack :: popi64(int _4933) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_4933); }int mosek::fusion::p_WorkStack::popi64(int _4933){
  pi64 -= _4933;
  return pi64;
}
int mosek::fusion::WorkStack :: popi32(int _4934) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_4934); }int mosek::fusion::p_WorkStack::popi32(int _4934){
  pi32 -= _4934;
  return pi32;
}
void mosek::fusion::WorkStack :: popf64(int _4935,std::shared_ptr< monty::ndarray< double,1 > > _4936,int _4937) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_4935,_4936,_4937); }void mosek::fusion::p_WorkStack::popf64(int _4935,std::shared_ptr< monty::ndarray< double,1 > > _4936,int _4937){
  _checked_ptr_1<double> _ptr__4936(_4936 ? _4936->raw() : nullptr, _4936 ? _4936->size(0) : 0);
  pf64 -= _4935;
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_4936,_4937,_4935);
}
void mosek::fusion::WorkStack :: popi64(int _4938,std::shared_ptr< monty::ndarray< long long,1 > > _4939,int _4940) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_4938,_4939,_4940); }void mosek::fusion::p_WorkStack::popi64(int _4938,std::shared_ptr< monty::ndarray< long long,1 > > _4939,int _4940){
  _checked_ptr_1<long long> _ptr__4939(_4939 ? _4939->raw() : nullptr, _4939 ? _4939->size(0) : 0);
  pi64 -= _4938;
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_4939,_4940,_4938);
}
void mosek::fusion::WorkStack :: popi32(int _4941,std::shared_ptr< monty::ndarray< int,1 > > _4942,int _4943) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_4941,_4942,_4943); }void mosek::fusion::p_WorkStack::popi32(int _4941,std::shared_ptr< monty::ndarray< int,1 > > _4942,int _4943){
  _checked_ptr_1<int> _ptr__4942(_4942 ? _4942->raw() : nullptr, _4942 ? _4942->size(0) : 0);
  pi32 -= _4941;
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_4942,_4943,_4941);
}
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }double mosek::fusion::p_WorkStack::popf64(){
  -- pf64;
  return ((*f64)(pf64));
}
long long mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }long long mosek::fusion::p_WorkStack::popi64(){
  -- pi64;
  return ((*i64)(pi64));
}
int mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }int mosek::fusion::p_WorkStack::popi32(){
  -- pi32;
  return ((*i32)(pi32));
}
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }double mosek::fusion::p_WorkStack::peekf64(){
  return ((*f64)((pf64 - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }long long mosek::fusion::p_WorkStack::peeki64(){
  return ((*i64)((pi64 - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }int mosek::fusion::p_WorkStack::peeki32(){
  return ((*i32)((pi32 - (int)1)));
}
double mosek::fusion::WorkStack :: peekf64(int _4944) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_4944); }double mosek::fusion::p_WorkStack::peekf64(int _4944){
  return ((*f64)(((pf64 - _4944) - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64(int _4945) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_4945); }long long mosek::fusion::p_WorkStack::peeki64(int _4945){
  return ((*i64)(((pi64 - _4945) - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32(int _4946) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_4946); }int mosek::fusion::p_WorkStack::peeki32(int _4946){
  return ((*i32)(((pi32 - _4946) - (int)1)));
}
void mosek::fusion::p_WorkStack::destroy(){f64.reset();i64.reset();i32.reset();}void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _4947,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4948,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4949,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4950){ return new mosek::fusion::SymmetricExpr(_4947,_4948,_4949,_4950); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _4947,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4948,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4949,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4950) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_4947,_4948,_4949,_4950); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _4947,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4948,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4949,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4950){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->n = _4947;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->Ms = _4948;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->xs = _4949;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->b = _4950;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4951,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4952){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4951)->n != _4952->getdim()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9162;
  bool _9163 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4951)->b.get());
  if (_9163)
  {
    _9162 = mosek::fusion::p_SymmetricExpr::_get_impl(_4951)->b->__mosek_2fusion_2SymmetricMatrix__add(_4952);
  }
  else
  {
    _9162 = _4952;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4951)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_4951)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_4951)->xs,_9162);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4953,double _4954){
  std::vector<monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >> _9164;
  for (int _4955 = (int)0, _9165 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4953)->Ms)->size(0)); _4955 < _9165 ; ++_4955)
  {
    _9164.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_4953)->Ms)(_4955))->__mosek_2fusion_2SymmetricMatrix__mul(_4954));
  }
  auto _9166 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_9164.size()),_9164.begin(),_9164.end()));
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9167;
  bool _9168 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4953)->b.get());
  if (_9168)
  {
    _9167 = mosek::fusion::p_SymmetricExpr::_get_impl(_4953)->b->__mosek_2fusion_2SymmetricMatrix__mul(_4954);
  }
  else
  {
    _9167 = nullptr;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4953)->n,_9166,mosek::fusion::p_SymmetricExpr::_get_impl(_4953)->xs,_9167);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4956,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4957){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4958 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->Ms)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->Ms)->size(0)) ))));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4959 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->xs)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->xs)->size(0)) ))));
  int _4960 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->Ms)->size(0));
  int _9169 = (int)0;
  int _9170 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->Ms)->size(0));
  for (int _4961 = _9169; _4961 < _9170; ++_4961)
  {
    {
      ((*_4958)(_4961)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->Ms)(_4961));
    }
  }
  int _9171 = (int)0;
  int _9172 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->Ms)->size(0));
  for (int _4962 = _9171; _4962 < _9172; ++_4962)
  {
    {
      ((*_4958)(safe_add( _4962,_4960 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->Ms)(_4962));
    }
  }
  int _4963 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->xs)->size(0));
  int _9173 = (int)0;
  int _9174 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->xs)->size(0));
  for (int _4964 = _9173; _4964 < _9174; ++_4964)
  {
    {
      ((*_4959)(_4964)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->xs)(_4964));
    }
  }
  int _9175 = (int)0;
  int _9176 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->xs)->size(0));
  for (int _4965 = _9175; _4965 < _9176; ++_4965)
  {
    {
      ((*_4959)(safe_add( _4965,_4963 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->xs)(_4965));
    }
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9177;
  bool _9178 = ((NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->b.get()) && (NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->b.get()));
  if (_9178)
  {
    _9177 = nullptr;
  }
  else
  {
    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9179;
    bool _9180 = ((NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->b.get()) && (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->b.get()));
    if (_9180)
    {
      _9179 = mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->b->__mosek_2fusion_2SymmetricMatrix__add(mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->b);
    }
    else
    {
      monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _9181;
      bool _9182 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->b.get());
      if (_9182)
      {
        _9181 = mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->b;
      }
      else
      {
        _9181 = mosek::fusion::p_SymmetricExpr::_get_impl(_4957)->b;
      }
      _9179 = _9181;
    }
    _9177 = _9179;
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4966 = _9177;
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4956)->n,_4958,_4959,_4966);
}
std::string mosek::fusion::SymmetricExpr :: toString() { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4967 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _4967->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SymmetricExpr( ("))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _4967->toString();
}
void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4968,    std::shared_ptr< monty::ndarray< long long,1 > > _4969,    std::shared_ptr< monty::ndarray< double,1 > > _4970,    std::shared_ptr< monty::ndarray< double,1 > > _4971,    std::shared_ptr< monty::ndarray< int,1 > > _4972,    std::shared_ptr< monty::ndarray< long long,1 > > _4973){ return new mosek::fusion::Expr(_4968,_4969,_4970,_4971,_4972,_4973); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4968,    std::shared_ptr< monty::ndarray< long long,1 > > _4969,    std::shared_ptr< monty::ndarray< double,1 > > _4970,    std::shared_ptr< monty::ndarray< double,1 > > _4971,    std::shared_ptr< monty::ndarray< int,1 > > _4972,    std::shared_ptr< monty::ndarray< long long,1 > > _4973) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4968,_4969,_4970,_4971,_4972,_4973); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _4968,    std::shared_ptr< monty::ndarray< long long,1 > > _4969,    std::shared_ptr< monty::ndarray< double,1 > > _4970,    std::shared_ptr< monty::ndarray< double,1 > > _4971,    std::shared_ptr< monty::ndarray< int,1 > > _4972,    std::shared_ptr< monty::ndarray< long long,1 > > _4973){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__4968(_4968 ? _4968->raw() : nullptr, _4968 ? _4968->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4969(_4969 ? _4969->raw() : nullptr, _4969 ? _4969->size(0) : 0);
    _checked_ptr_1<double> _ptr__4970(_4970 ? _4970->raw() : nullptr, _4970 ? _4970->size(0) : 0);
    _checked_ptr_1<double> _ptr__4971(_4971 ? _4971->raw() : nullptr, _4971 ? _4971->size(0) : 0);
    _checked_ptr_1<int> _ptr__4972(_4972 ? _4972->raw() : nullptr, _4972 ? _4972->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4973(_4973 ? _4973->raw() : nullptr, _4973 ? _4973->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _9183;
    bool _9184 = (NULL != _4972.get());
    if (_9184)
    {
      _9183 = ::mosek::fusion::Utils::Tools::arraycopy(_4972);
    }
    else
    {
      _9183 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((int)((_4968)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< long long,1 > > _9185;
    bool _9186 = (NULL != _4973.get());
    if (_9186)
    {
      _9185 = ::mosek::fusion::Utils::Tools::arraycopy(_4973);
    }
    else
    {
      _9185 = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_4968),::mosek::fusion::Utils::Tools::arraycopy(_4969),::mosek::fusion::Utils::Tools::arraycopy(_4970),::mosek::fusion::Utils::Tools::arraycopy(_4971),_9183,_9185,(int)1);
    int _4974 = ((int)((_4968)->size(0)) - (int)1);
    if ((_4974 < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    long long _4975 = _ptr__4968[_4974];
    if (((_4975 < (int)0) || ((_4975 != (int)((_4970)->size(0))) || (_4975 != (int)((_4969)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _4976 = true;
    bool _4977 = true;
    bool _4978 = true;
    std::shared_ptr< monty::ndarray< int,1 > > _4979 = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int> _ptr__4979(_4979 ? _4979->raw() : nullptr,_4979 ? _4979->size(0) : 0);
    long long _4980 = ::mosek::fusion::p_Set::size(_4979);
    {
      int _9187 = (int)0;
      int _9188 = (int)((_4979)->size(0));
      for (int _4981 = _9187; _4981 < _9188; ++_4981)
      {
        {
          _4977 = (_4977 && (_ptr__4979[_4981] >= (int)0));
        }
      }
      int _9189 = (int)0;
      int _9190 = _4974;
      for (int _4982 = _9189; _4982 < _9190; ++_4982)
      {
        {
          _4976 = (_4976 && (_ptr__4968[_4982] <= _ptr__4968[safe_add( _4982,(int)1 )]));
        }
      }
      if (((NULL != _4973.get()) && ((int)((_4973)->size(0)) > (int)0)))
      {
        {
          _4978 = ((_ptr__4973[(int)0] >= (int)0) && (_ptr__4973[(_4974 - (int)1)] < _4980));
          int _9191 = (int)0;
          int _9192 = (_4974 - (int)1);
          for (int _4983 = _9191; _4983 < _9192; ++_4983)
          {
            {
              _4978 = (_4978 && (_ptr__4973[_4983] < _ptr__4973[safe_add( _4983,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_4977))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_4976))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_4978))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4984,    std::shared_ptr< monty::ndarray< long long,1 > > _4985,    std::shared_ptr< monty::ndarray< double,1 > > _4986,    std::shared_ptr< monty::ndarray< double,1 > > _4987,    std::shared_ptr< monty::ndarray< int,1 > > _4988,    std::shared_ptr< monty::ndarray< long long,1 > > _4989,    int _4990){ return new mosek::fusion::Expr(_4984,_4985,_4986,_4987,_4988,_4989,_4990); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4984,    std::shared_ptr< monty::ndarray< long long,1 > > _4985,    std::shared_ptr< monty::ndarray< double,1 > > _4986,    std::shared_ptr< monty::ndarray< double,1 > > _4987,    std::shared_ptr< monty::ndarray< int,1 > > _4988,    std::shared_ptr< monty::ndarray< long long,1 > > _4989,    int _4990) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4984,_4985,_4986,_4987,_4988,_4989,_4990); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _4984,    std::shared_ptr< monty::ndarray< long long,1 > > _4985,    std::shared_ptr< monty::ndarray< double,1 > > _4986,    std::shared_ptr< monty::ndarray< double,1 > > _4987,    std::shared_ptr< monty::ndarray< int,1 > > _4988,    std::shared_ptr< monty::ndarray< long long,1 > > _4989,    int _4990){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__4984(_4984 ? _4984->raw() : nullptr, _4984 ? _4984->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4985(_4985 ? _4985->raw() : nullptr, _4985 ? _4985->size(0) : 0);
    _checked_ptr_1<double> _ptr__4986(_4986 ? _4986->raw() : nullptr, _4986 ? _4986->size(0) : 0);
    _checked_ptr_1<double> _ptr__4987(_4987 ? _4987->raw() : nullptr, _4987 ? _4987->size(0) : 0);
    _checked_ptr_1<int> _ptr__4988(_4988 ? _4988->raw() : nullptr, _4988 ? _4988->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4989(_4989 ? _4989->raw() : nullptr, _4989 ? _4989->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4988);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _4988;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _4984;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _4985;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _4986;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _4987;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _4989;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _4991){ return new mosek::fusion::Expr(_4991); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _4991) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4991); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4991){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4991->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _9193 = _4991;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_9193.get()))
    {
      ::mosek::fusion::Expr::t _4992 (dynamic_cast<::mosek::fusion::Expr*>(_9193.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_4992)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_4992)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_4992)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_4992)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_4992)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_4992)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _4993 = _9193;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _4994 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _4995 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _4996 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _4993->eval(_4996,_4995,_4994);
        int _4997 = _4996->popi32();
        int _4998 = _4996->popi32(_4997);
        int _4999 = _4996->popi32();
        int _5000 = _4996->popi32();
        bool _5001 = (_4996->popi32() != (int)0);
        int _5002 = _4996->popi32(safe_add( _4999,(int)1 ));
        int _9194;
        bool _9195 = _5001;
        if (_9195)
        {
          _9194 = _4996->popi64(_4999);
        }
        else
        {
          _9194 = (int)0;
        }
        int _5003 = _9194;
        int _5004 = _4996->popi64(_5000);
        int _5005 = _4996->popf64(_4999);
        int _5006 = _4996->popf64(_5000);
        std::shared_ptr< monty::ndarray< int,1 > > _5007 = mosek::fusion::p_WorkStack::_get_impl(_4996)->i32;
        _checked_ptr_1<int> _ptr__5007(_5007 ? _5007->raw() : nullptr,_5007 ? _5007->size(0) : 0);
        std::shared_ptr< monty::ndarray< long long,1 > > _5008 = mosek::fusion::p_WorkStack::_get_impl(_4996)->i64;
        _checked_ptr_1<long long> _ptr__5008(_5008 ? _5008->raw() : nullptr,_5008 ? _5008->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _5009 = mosek::fusion::p_WorkStack::_get_impl(_4996)->f64;
        _checked_ptr_1<double> _ptr__5009(_5009 ? _5009->raw() : nullptr,_5009 ? _5009->size(0) : 0);
        std::vector<int> _9196;
        for (int _5010 = (int)0, _9197 = _4997; _5010 < _9197 ; ++_5010)
        {
          _9196.push_back(_ptr__5007[safe_add( _4998,_5010 )]);
        }
        auto _9198 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9196.size()),_9196.begin(),_9196.end()));
        shape = _9198;
        std::vector<long long> _9199;
        for (int _5011 = (int)0, _9200 = safe_add( _4999,(int)1 ); _5011 < _9200 ; ++_5011)
        {
          _9199.push_back(_ptr__5007[safe_add( _5002,_5011 )]);
        }
        auto _9201 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9199.size()),_9199.begin(),_9199.end()));
        ptrb = _9201;
        std::vector<long long> _9202;
        for (int _5012 = (int)0, _9203 = _5000; _5012 < _9203 ; ++_5012)
        {
          _9202.push_back(_ptr__5008[safe_add( _5004,_5012 )]);
        }
        auto _9204 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9202.size()),_9202.begin(),_9202.end()));
        subj = _9204;
        std::vector<double> _9205;
        for (int _5013 = (int)0, _9206 = _5000; _5013 < _9206 ; ++_5013)
        {
          _9205.push_back(_ptr__5009[safe_add( _5006,_5013 )]);
        }
        auto _9207 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9205.size()),_9205.begin(),_9205.end()));
        cof_v = _9207;
        std::vector<double> _9208;
        for (int _5014 = (int)0, _9209 = _5000; _5014 < _9209 ; ++_5014)
        {
          _9208.push_back(_ptr__5009[safe_add( _5005,_5014 )]);
        }
        auto _9210 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9208.size()),_9208.begin(),_9208.end()));
        bfix = _9210;
        std::shared_ptr< monty::ndarray< long long,1 > > _9211;
        bool _9212 = _5001;
        if (_9212)
        {
          std::vector<long long> _9213;
          for (int _5015 = (int)0, _9214 = _5000; _5015 < _9214 ; ++_5015)
          {
            _9213.push_back(_ptr__5008[safe_add( _5003,_5015 )]);
          }
          auto _9215 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9213.size()),_9213.begin(),_9213.end()));
          _9211 = _9215;
        }
        else
        {
          _9211 = nullptr;
        }
        inst = _9211;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}long long mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int,1 > > _5016){
  _checked_ptr_1<int> _ptr__5016(_5016 ? _5016->raw() : nullptr, _5016 ? _5016->size(0) : 0);
  int _5017 = (int)1;
  int _9216 = (int)0;
  int _9217 = (int)((_5016)->size(0));
  for (int _5018 = _9216; _5018 < _9217; ++_5018)
  {
    {
      _5017 *= _ptr__5016[_5018];
    }
  }
  return _5017;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _5019){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _9218;
  for (int _5020 = (int)0, _9219 = (int)((_5019)->size(0)); _5020 < _9219 ; ++_5020)
  {
    for (int _5021 = (int)0, _9220 = (int)((((*_5019)(_5020)))->size(0)); _5021 < _9220 ; ++_5021)
    {
      _9218.push_back(((*((*_5019)(_5020)))(_5021)));
    }
  }
  auto _9221 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_9218.size()),_9218.begin(),_9218.end()));
  return _9221;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5022,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5023){
  if ((NULL == _5022.get()))
  {
    {
      return _5023;
    }
  }
  else if((NULL == _5023.get()))
  {
    {
      return _5022;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5024 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_5022)->size(0)),(int)((_5023)->size(0)) ))));
      int _9222 = (int)0;
      int _9223 = (int)((_5022)->size(0));
      for (int _5025 = _9222; _5025 < _9223; ++_5025)
      {
        {
          ((*_5024)(_5025)) = ((*_5022)(_5025));
        }
      }
      int _9224 = (int)0;
      int _9225 = (int)((_5023)->size(0));
      for (int _5026 = _9224; _5026 < _9225; ++_5026)
      {
        {
          ((*_5024)(safe_add( _5026,(int)((_5022)->size(0)) ))) = ((*_5023)(_5026));
        }
      }
      return _5024;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense  ( monty::rc_ptr< ::mosek::fusion::Expression > _5027) { return mosek::fusion::p_Expr::condense(_5027); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _5027){
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_5027)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _5028) { return mosek::fusion::p_Expr::flatten(_5028); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _5028){
  if ((NULL == _5028.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5028,(int)_5028->getSize());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5029,    int _5030,    int _5031) { return mosek::fusion::p_Expr::reshape(_5029,_5030,_5031); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5029,int _5030,int _5031){
  if ((NULL == _5029.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5029,::mosek::fusion::p_Set::make(_5030,_5031));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5032,    int _5033) { return mosek::fusion::p_Expr::reshape(_5032,_5033); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5032,int _5033){
  if ((NULL == _5032.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_5032,::mosek::fusion::p_Set::make(_5033));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _5034,    std::shared_ptr< monty::ndarray< int,1 > > _5035) { return mosek::fusion::p_Expr::reshape(_5034,_5035); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _5034,std::shared_ptr< monty::ndarray< int,1 > > _5035){
  _checked_ptr_1<int> _ptr__5035(_5035 ? _5035->raw() : nullptr, _5035 ? _5035->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5035,_5034)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: size() { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size(){
  return ((long long)((ptrb)->size(0)) - (int)1);
}
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr :: __mosek_2fusion_2Expr__eval() { return mosek::fusion::p_Expr::_get_impl(this)->__mosek_2fusion_2Expr__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::eval() { return __mosek_2fusion_2Expr__eval(); }
monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::__mosek_2fusion_2BaseExpression__eval() { return __mosek_2fusion_2Expr__eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_Expr::__mosek_2fusion_2Expr__eval(){
  std::shared_ptr< monty::ndarray< double,1 > > _9226;
  bool _9227 = (NULL == bfix.get());
  if (_9227)
  {
    _9226 = nullptr;
  }
  else
  {
    _9226 = ::mosek::fusion::Utils::Tools::arraycopy(bfix);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5036 = _9226;
  _checked_ptr_1<double> _ptr__5036(_5036 ? _5036->raw() : nullptr,_5036 ? _5036->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _9228;
  bool _9229 = (NULL == inst.get());
  if (_9229)
  {
    _9228 = nullptr;
  }
  else
  {
    _9228 = ::mosek::fusion::Utils::Tools::arraycopy(inst);
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5037 = _9228;
  _checked_ptr_1<long long> _ptr__5037(_5037 ? _5037->raw() : nullptr,_5037 ? _5037->size(0) : 0);
  return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_5036,::mosek::fusion::Utils::Tools::arraycopy(ptrb),::mosek::fusion::Utils::Tools::arraycopy(subj),::mosek::fusion::Utils::Tools::arraycopy(cof_v),shape,inst);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( std::shared_ptr< monty::ndarray< int,1 > > _5038) { return mosek::fusion::p_Expr::zeros(_5038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int,1 > > _5038){
  _checked_ptr_1<int> _ptr__5038(_5038 ? _5038->raw() : nullptr, _5038 ? _5038->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5038,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _5039) { return mosek::fusion::p_Expr::zeros(_5039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int _5039){
  return ::mosek::fusion::p_Expr::constTerm(_5039,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( ) { return mosek::fusion::p_Expr::ones(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(){
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _5040,    std::shared_ptr< monty::ndarray< int,2 > > _5041) { return mosek::fusion::p_Expr::ones(_5040,_5041); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _5040,std::shared_ptr< monty::ndarray< int,2 > > _5041){
  _checked_ptr_1<int> _ptr__5040(_5040 ? _5040->raw() : nullptr, _5040 ? _5040->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5040,_5041,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _5042) { return mosek::fusion::p_Expr::ones(_5042); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _5042){
  _checked_ptr_1<int> _ptr__5042(_5042 ? _5042->raw() : nullptr, _5042 ? _5042->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_5042,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _5043) { return mosek::fusion::p_Expr::ones(_5043); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int _5043){
  return ::mosek::fusion::p_Expr::constTerm(_5043,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5044) { return mosek::fusion::p_Expr::constTerm(_5044); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5044){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_5044)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_5044)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5044)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5045) { return mosek::fusion::p_Expr::constTerm(_5045); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _5045){
  int _5046 = _5045->numRows();
  int _5047 = _5045->numColumns();
  std::shared_ptr< monty::ndarray< int,1 > > _5048 = ::mosek::fusion::p_Set::make(_5046,_5047);
  _checked_ptr_1<int> _ptr__5048(_5048 ? _5048->raw() : nullptr,_5048 ? _5048->size(0) : 0);
  if (_5045->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5049 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5045->numNonzeros())));
      _checked_ptr_1<double> _ptr__5049(_5049 ? _5049->raw() : nullptr,_5049 ? _5049->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5050 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5045->numNonzeros())));
      _checked_ptr_1<int> _ptr__5050(_5050 ? _5050->raw() : nullptr,_5050 ? _5050->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5051 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5045->numNonzeros())));
      _checked_ptr_1<int> _ptr__5051(_5051 ? _5051->raw() : nullptr,_5051 ? _5051->size(0) : 0);
      _5045->getDataAsTriplets(_5051,_5050,_5049);
      std::vector<long long> _9230;
      for (int _5053 = (int)0, _9231 = (int)((_5050)->size(0)); _5053 < _9231 ; ++_5053)
      {
        _9230.push_back(safe_add( safe_mul( _ptr__5051[_5053],_5047 ),_ptr__5050[_5053] ));
      }
      auto _9232 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9230.size()),_9230.begin(),_9230.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _5052 = _9232;
      _checked_ptr_1<long long> _ptr__5052(_5052 ? _5052->raw() : nullptr,_5052 ? _5052->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5048,_5052,_5049)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5048,nullptr,_5045->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _5054) { return mosek::fusion::p_Expr::constTerm(_5054); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _5054){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,_5054)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5055,    std::shared_ptr< monty::ndarray< int,2 > > _5056,    double _5057) { return mosek::fusion::p_Expr::constTerm(_5055,_5056,_5057); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5055,std::shared_ptr< monty::ndarray< int,2 > > _5056,double _5057){
  _checked_ptr_1<int> _ptr__5055(_5055 ? _5055->raw() : nullptr, _5055 ? _5055->size(0) : 0);
  int _5058 = (int)((_5056)->size(0));
  int _5059 = (int)((_5055)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5060 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5058)));
  _checked_ptr_1<long long> _ptr__5060(_5060 ? _5060->raw() : nullptr,_5060 ? _5060->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5061 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5059)));
  _checked_ptr_1<long long> _ptr__5061(_5061 ? _5061->raw() : nullptr,_5061 ? _5061->size(0) : 0);
  _ptr__5061[(_5059 - (int)1)] = (int)1;
  int _9233 = (int)1;
  int _9234 = _5059;
  for (int _5062 = _9233; _5062 < _9234; ++_5062)
  {
    {
      _ptr__5061[((_5059 - _5062) - (int)1)] = safe_mul( _ptr__5061[(_5059 - _5062)],_ptr__5055[(_5059 - _5062)] );
    }
  }
  int _9235 = (int)0;
  int _9236 = _5058;
  for (int _5063 = _9235; _5063 < _9236; ++_5063)
  {
    {
      int _9237 = (int)0;
      int _9238 = _5059;
      for (int _5064 = _9237; _5064 < _9238; ++_5064)
      {
        {
          _ptr__5060[_5063] += safe_mul( _ptr__5061[_5064],((*_5056)(_5063,_5064)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5055,_5060,_5057)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5065,    std::shared_ptr< monty::ndarray< int,2 > > _5066,    std::shared_ptr< monty::ndarray< double,1 > > _5067) { return mosek::fusion::p_Expr::constTerm(_5065,_5066,_5067); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5065,std::shared_ptr< monty::ndarray< int,2 > > _5066,std::shared_ptr< monty::ndarray< double,1 > > _5067){
  _checked_ptr_1<int> _ptr__5065(_5065 ? _5065->raw() : nullptr, _5065 ? _5065->size(0) : 0);
  _checked_ptr_1<double> _ptr__5067(_5067 ? _5067->raw() : nullptr, _5067 ? _5067->size(0) : 0);
  int _5068 = (int)((_5066)->size(0));
  int _5069 = (int)((_5065)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5070 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5068)));
  _checked_ptr_1<long long> _ptr__5070(_5070 ? _5070->raw() : nullptr,_5070 ? _5070->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5071 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5069)));
  _checked_ptr_1<long long> _ptr__5071(_5071 ? _5071->raw() : nullptr,_5071 ? _5071->size(0) : 0);
  _ptr__5071[(_5069 - (int)1)] = (int)1;
  int _9239 = (int)1;
  int _9240 = _5069;
  for (int _5072 = _9239; _5072 < _9240; ++_5072)
  {
    {
      _ptr__5071[((_5069 - _5072) - (int)1)] = safe_mul( _ptr__5071[(_5069 - _5072)],_ptr__5065[(_5069 - _5072)] );
    }
  }
  int _9241 = (int)0;
  int _9242 = _5068;
  for (int _5073 = _9241; _5073 < _9242; ++_5073)
  {
    {
      int _9243 = (int)0;
      int _9244 = _5069;
      for (int _5074 = _9243; _5074 < _9244; ++_5074)
      {
        {
          _ptr__5070[_5073] += safe_mul( _ptr__5071[_5074],((*_5066)(_5073,_5074)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5065,_5070,_5067)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _5075,    double _5076) { return mosek::fusion::p_Expr::constTerm(_5075,_5076); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _5075,double _5076){
  _checked_ptr_1<int> _ptr__5075(_5075 ? _5075->raw() : nullptr, _5075 ? _5075->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_5075,nullptr,_5076)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _5077,    double _5078) { return mosek::fusion::p_Expr::constTerm(_5077,_5078); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int _5077,double _5078){
  std::vector<double> _9245;
  for (int _5079 = (int)0, _9246 = _5077; _5079 < _9246 ; ++_5079)
  {
    _9245.push_back(_5078);
  }
  auto _9247 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9245.size()),_9245.begin(),_9245.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5077)}),nullptr,_9247)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _5080) { return mosek::fusion::p_Expr::constTerm(_5080); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _5080){
  std::vector<double> _9248;
  for (int _5081 = (int)0, _9249 = (int)((_5080)->size(0)); _5081 < _9249 ; ++_5081)
  {
    for (int _5082 = (int)0, _9250 = (int)((_5080)->size(1)); _5082 < _9250 ; ++_5082)
    {
      _9248.push_back(((*_5080)(_5081,_5082)));
    }
  }
  auto _9251 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9248.size()),_9248.begin(),_9248.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5080)->size(0))),(int)((int)((_5080)->size(1)))}),nullptr,_9251)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _5083) { return mosek::fusion::p_Expr::constTerm(_5083); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _5083){
  _checked_ptr_1<double> _ptr__5083(_5083 ? _5083->raw() : nullptr, _5083 ? _5083->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5083)->size(0)))}),nullptr,_5083)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: numNonzeros() { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros(){
  return (long long)((cof_v)->size(0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _5084,    int _5085) { return mosek::fusion::p_Expr::sum(_5084,_5085); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _5084,int _5085){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_5085,_5084)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _5086) { return mosek::fusion::p_Expr::sum(_5086); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _5086){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_5086))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _5087) { return mosek::fusion::p_Expr::neg(_5087); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _5087){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_5087)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _5088,monty::rc_ptr< ::mosek::fusion::Matrix > _5089,monty::rc_ptr< ::mosek::fusion::Expression > _5090){
  long long _5091 = _5089->numNonzeros();
  int _5092 = _5089->numRows();
  int _5093 = _5089->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5094 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5091)));
  _checked_ptr_1<double> _ptr__5094(_5094 ? _5094->raw() : nullptr,_5094 ? _5094->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5095 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5091)));
  _checked_ptr_1<int> _ptr__5095(_5095 ? _5095->raw() : nullptr,_5095 ? _5095->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5096 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5091)));
  _checked_ptr_1<int> _ptr__5096(_5096 ? _5096->raw() : nullptr,_5096 ? _5096->size(0) : 0);
  _5089->getDataAsTriplets(_5096,_5095,_5094);
  if (_5088)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_5092,_5093,_5096,_5095,_5094,_5090)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_5092,_5093,_5096,_5095,_5094,_5090)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _5097,    monty::rc_ptr< ::mosek::fusion::Matrix > _5098) { return mosek::fusion::p_Expr::mulDiag(_5097,_5098); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _5097,monty::rc_ptr< ::mosek::fusion::Matrix > _5098){
  return ::mosek::fusion::p_Expr::mulDiag(false,_5098,_5097->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5099,    monty::rc_ptr< ::mosek::fusion::Variable > _5100) { return mosek::fusion::p_Expr::mulDiag(_5099,_5100); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _5099,monty::rc_ptr< ::mosek::fusion::Variable > _5100){
  return ::mosek::fusion::p_Expr::mulDiag(true,_5099,_5100->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _5101,    monty::rc_ptr< ::mosek::fusion::Matrix > _5102) { return mosek::fusion::p_Expr::mulDiag(_5101,_5102); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _5101,monty::rc_ptr< ::mosek::fusion::Matrix > _5102){
  return ::mosek::fusion::p_Expr::mulDiag(false,_5102,_5101);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5103,    monty::rc_ptr< ::mosek::fusion::Expression > _5104) { return mosek::fusion::p_Expr::mulDiag(_5103,_5104); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _5103,monty::rc_ptr< ::mosek::fusion::Expression > _5104){
  return ::mosek::fusion::p_Expr::mulDiag(true,_5103,_5104);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _5105,    std::shared_ptr< monty::ndarray< double,2 > > _5106) { return mosek::fusion::p_Expr::mulDiag(_5105,_5106); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _5105,std::shared_ptr< monty::ndarray< double,2 > > _5106){
  std::vector<int> _9252;
  for (int _5107 = (int)0, _9253 = (int)((_5106)->size(0)); _5107 < _9253 ; ++_5107)
  {
    for (int _5108 = (int)0, _9254 = (int)((_5106)->size(1)); _5108 < _9254 ; ++_5108)
    {
      _9252.push_back(_5107);
    }
  }
  auto _9255 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9252.size()),_9252.begin(),_9252.end()));
  std::vector<int> _9256;
  for (int _5109 = (int)0, _9257 = (int)((_5106)->size(0)); _5109 < _9257 ; ++_5109)
  {
    for (int _5110 = (int)0, _9258 = (int)((_5106)->size(1)); _5110 < _9258 ; ++_5110)
    {
      _9256.push_back(_5110);
    }
  }
  auto _9259 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9256.size()),_9256.begin(),_9256.end()));
  std::vector<double> _9260;
  for (int _5111 = (int)0, _9261 = (int)((_5106)->size(0)); _5111 < _9261 ; ++_5111)
  {
    for (int _5112 = (int)0, _9262 = (int)((_5106)->size(1)); _5112 < _9262 ; ++_5112)
    {
      _9260.push_back(((*_5106)(_5111,_5112)));
    }
  }
  auto _9263 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9260.size()),_9260.begin(),_9260.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_5106)->size(0)),(int)((_5106)->size(1)),_9255,_9259,_9263,_5105->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _5113,    std::shared_ptr< monty::ndarray< double,2 > > _5114) { return mosek::fusion::p_Expr::mulDiag(_5113,_5114); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _5113,std::shared_ptr< monty::ndarray< double,2 > > _5114){
  std::vector<int> _9264;
  for (int _5115 = (int)0, _9265 = (int)((_5114)->size(0)); _5115 < _9265 ; ++_5115)
  {
    for (int _5116 = (int)0, _9266 = (int)((_5114)->size(1)); _5116 < _9266 ; ++_5116)
    {
      _9264.push_back(_5115);
    }
  }
  auto _9267 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9264.size()),_9264.begin(),_9264.end()));
  std::vector<int> _9268;
  for (int _5117 = (int)0, _9269 = (int)((_5114)->size(0)); _5117 < _9269 ; ++_5117)
  {
    for (int _5118 = (int)0, _9270 = (int)((_5114)->size(1)); _5118 < _9270 ; ++_5118)
    {
      _9268.push_back(_5118);
    }
  }
  auto _9271 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9268.size()),_9268.begin(),_9268.end()));
  std::vector<double> _9272;
  for (int _5119 = (int)0, _9273 = (int)((_5114)->size(0)); _5119 < _9273 ; ++_5119)
  {
    for (int _5120 = (int)0, _9274 = (int)((_5114)->size(1)); _5120 < _9274 ; ++_5120)
    {
      _9272.push_back(((*_5114)(_5119,_5120)));
    }
  }
  auto _9275 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9272.size()),_9272.begin(),_9272.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_5114)->size(0)),(int)((_5114)->size(1)),_9267,_9271,_9275,_5113)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _5121,    monty::rc_ptr< ::mosek::fusion::Variable > _5122) { return mosek::fusion::p_Expr::mulDiag(_5121,_5122); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _5121,monty::rc_ptr< ::mosek::fusion::Variable > _5122){
  std::vector<int> _9276;
  for (int _5123 = (int)0, _9277 = (int)((_5121)->size(0)); _5123 < _9277 ; ++_5123)
  {
    for (int _5124 = (int)0, _9278 = (int)((_5121)->size(1)); _5124 < _9278 ; ++_5124)
    {
      _9276.push_back(_5123);
    }
  }
  auto _9279 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9276.size()),_9276.begin(),_9276.end()));
  std::vector<int> _9280;
  for (int _5125 = (int)0, _9281 = (int)((_5121)->size(0)); _5125 < _9281 ; ++_5125)
  {
    for (int _5126 = (int)0, _9282 = (int)((_5121)->size(1)); _5126 < _9282 ; ++_5126)
    {
      _9280.push_back(_5126);
    }
  }
  auto _9283 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9280.size()),_9280.begin(),_9280.end()));
  std::vector<double> _9284;
  for (int _5127 = (int)0, _9285 = (int)((_5121)->size(0)); _5127 < _9285 ; ++_5127)
  {
    for (int _5128 = (int)0, _9286 = (int)((_5121)->size(1)); _5128 < _9286 ; ++_5128)
    {
      _9284.push_back(((*_5121)(_5127,_5128)));
    }
  }
  auto _9287 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9284.size()),_9284.begin(),_9284.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_5121)->size(0)),(int)((_5121)->size(1)),_9279,_9283,_9287,_5122->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _5129,    monty::rc_ptr< ::mosek::fusion::Expression > _5130) { return mosek::fusion::p_Expr::mulDiag(_5129,_5130); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _5129,monty::rc_ptr< ::mosek::fusion::Expression > _5130){
  std::vector<int> _9288;
  for (int _5131 = (int)0, _9289 = (int)((_5129)->size(0)); _5131 < _9289 ; ++_5131)
  {
    for (int _5132 = (int)0, _9290 = (int)((_5129)->size(1)); _5132 < _9290 ; ++_5132)
    {
      _9288.push_back(_5131);
    }
  }
  auto _9291 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9288.size()),_9288.begin(),_9288.end()));
  std::vector<int> _9292;
  for (int _5133 = (int)0, _9293 = (int)((_5129)->size(0)); _5133 < _9293 ; ++_5133)
  {
    for (int _5134 = (int)0, _9294 = (int)((_5129)->size(1)); _5134 < _9294 ; ++_5134)
    {
      _9292.push_back(_5134);
    }
  }
  auto _9295 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9292.size()),_9292.begin(),_9292.end()));
  std::vector<double> _9296;
  for (int _5135 = (int)0, _9297 = (int)((_5129)->size(0)); _5135 < _9297 ; ++_5135)
  {
    for (int _5136 = (int)0, _9298 = (int)((_5129)->size(1)); _5136 < _9298 ; ++_5136)
    {
      _9296.push_back(((*_5129)(_5135,_5136)));
    }
  }
  auto _9299 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9296.size()),_9296.begin(),_9296.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_5129)->size(0)),(int)((_5129)->size(1)),_9291,_9295,_9299,_5130)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _5137,monty::rc_ptr< ::mosek::fusion::Expression > _5138){
  std::shared_ptr< monty::ndarray< int,1 > > _5139 = _5138->getShape();
  _checked_ptr_1<int> _ptr__5139(_5139 ? _5139->raw() : nullptr,_5139 ? _5139->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _5140 = _5138;
  if (((int)((_5139)->size(0)) == (int)1))
  {
    {
      _5139 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5139[(int)0]),(int)((int)1)});
      _ptr__5139.update(_5139 ? _5139->raw() : nullptr, _5139 ? _5139->size(0) : 0);
      _5140 = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5139,_5138)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_5139)->size(0)) != (int)2) || ((_5137->numRows() != _ptr__5139[(int)0]) || (_5137->numColumns() != _ptr__5139[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int _5141 = _5137->numColumns();
  long long _5142 = _5137->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _5143 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5142)));
  _checked_ptr_1<int> _ptr__5143(_5143 ? _5143->raw() : nullptr,_5143 ? _5143->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5144 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5142)));
  _checked_ptr_1<int> _ptr__5144(_5144 ? _5144->raw() : nullptr,_5144 ? _5144->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5145 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5142)));
  _checked_ptr_1<double> _ptr__5145(_5145 ? _5145->raw() : nullptr,_5145 ? _5145->size(0) : 0);
  _5137->getDataAsTriplets(_5143,_5144,_5145);
  std::vector<long long> _9300;
  for (long long _5146 = (int)0, _9301 = _5142; _5146 < _9301 ; ++_5146)
  {
    _9300.push_back(safe_add( safe_mul( _ptr__5143[_5146],_5141 ),_ptr__5144[_5146] ));
  }
  auto _9302 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9300.size()),_9300.begin(),_9300.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_5145,_9302,_5140,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _5147,monty::rc_ptr< ::mosek::fusion::Expression > _5148){
  _checked_ptr_1<double> _ptr__5147(_5147 ? _5147->raw() : nullptr, _5147 ? _5147->size(0) : 0);
  if (((NULL == _5147.get()) || (NULL == _5148.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_5148->getND() == (int)0) && ((int)((_5147)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__5147[(int)0],_5148)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_5148->getND() != (int)1) || (_5148->getDim((int)0) != (int)((_5147)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<long long> _9303;
      for (int _5149 = (int)0, _9304 = (int)((_5147)->size(0)); _5149 < _9304 ; ++_5149)
      {
        _9303.push_back(_5149);
      }
      auto _9305 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9303.size()),_9303.begin(),_9303.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_5147,_9305,_5148)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5150,monty::rc_ptr< ::mosek::fusion::Expression > _5151){
  if (((NULL == _5150.get()) || (NULL == _5151.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _5152 = _5151->getShape();
  _checked_ptr_1<int> _ptr__5152(_5152 ? _5152->raw() : nullptr,_5152 ? _5152->size(0) : 0);
  if (((int)((_5152)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5150)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int _9306 = (int)0;
  int _9307 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5150)->dims)->size(0));
  for (int _5153 = _9306; _5153 < _9307; ++_5153)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5150)->dims)(_5153)) != _ptr__5152[_5153]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_5150)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_5150)->inst,_5151)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5154,    double _5155) { return mosek::fusion::p_Expr::mul(_5154,_5155); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5154,double _5155){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_5155,_5154)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _5156,    monty::rc_ptr< ::mosek::fusion::Expression > _5157) { return mosek::fusion::p_Expr::mul(_5156,_5157); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _5156,monty::rc_ptr< ::mosek::fusion::Expression > _5157){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_5156,_5157)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5158,    std::shared_ptr< monty::ndarray< double,1 > > _5159) { return mosek::fusion::p_Expr::mul(_5158,_5159); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5158,std::shared_ptr< monty::ndarray< double,1 > > _5159){
  _checked_ptr_1<double> _ptr__5159(_5159 ? _5159->raw() : nullptr, _5159 ? _5159->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_5159,_5158);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _5160,    monty::rc_ptr< ::mosek::fusion::Expression > _5161) { return mosek::fusion::p_Expr::mul(_5160,_5161); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _5160,monty::rc_ptr< ::mosek::fusion::Expression > _5161){
  _checked_ptr_1<double> _ptr__5160(_5160 ? _5160->raw() : nullptr, _5160 ? _5160->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_5160,_5161);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5162,    std::shared_ptr< monty::ndarray< double,2 > > _5163) { return mosek::fusion::p_Expr::mul(_5162,_5163); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5162,std::shared_ptr< monty::ndarray< double,2 > > _5163){
  return ::mosek::fusion::p_Expr::mul(false,_5163,_5162);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _5164,    monty::rc_ptr< ::mosek::fusion::Expression > _5165) { return mosek::fusion::p_Expr::mul(_5164,_5165); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _5164,monty::rc_ptr< ::mosek::fusion::Expression > _5165){
  return ::mosek::fusion::p_Expr::mul(true,_5164,_5165);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _5166,    monty::rc_ptr< ::mosek::fusion::Matrix > _5167) { return mosek::fusion::p_Expr::mul(_5166,_5167); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _5166,monty::rc_ptr< ::mosek::fusion::Matrix > _5167){
  return ::mosek::fusion::p_Expr::mul(false,_5167,_5166);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5168,    monty::rc_ptr< ::mosek::fusion::Expression > _5169) { return mosek::fusion::p_Expr::mul(_5168,_5169); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _5168,monty::rc_ptr< ::mosek::fusion::Expression > _5169){
  return ::mosek::fusion::p_Expr::mul(true,_5168,_5169);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5170,std::shared_ptr< monty::ndarray< double,1 > > _5171,monty::rc_ptr< ::mosek::fusion::Expression > _5172){
  _checked_ptr_1<double> _ptr__5171(_5171 ? _5171->raw() : nullptr, _5171 ? _5171->size(0) : 0);
  int _5173 = (int)((_5171)->size(0));
  int _5174 = _5173;
  std::shared_ptr< monty::ndarray< double,1 > > _5175 = ::mosek::fusion::Utils::Tools::arraycopy(_5171);
  _checked_ptr_1<double> _ptr__5175(_5175 ? _5175->raw() : nullptr,_5175 ? _5175->size(0) : 0);
  int _5176 = _5172->getND();
  if ((_5176 == (int)0))
  {
    {
      std::vector<int> _9308;
      for (int _5177 = (int)0, _9309 = _5173; _5177 < _9309 ; ++_5177)
      {
        _9308.push_back(_5177);
      }
      auto _9310 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9308.size()),_9308.begin(),_9308.end()));
      std::vector<int> _9311;
      for (int _5178 = (int)0, _9312 = _5173; _5178 < _9312 ; ++_5178)
      {
        _9311.push_back((int)0);
      }
      auto _9313 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9311.size()),_9311.begin(),_9311.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5173)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5173,(int)1,_9310,_9313,_5175,_5172,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5176 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_5170 && (_5172->getDim((int)0) == (int)((_5171)->size(0)))))
  {
    {
      std::vector<int> _9314;
      for (int _5179 = (int)0, _9315 = _5173; _5179 < _9315 ; ++_5179)
      {
        _9314.push_back((int)0);
      }
      auto _9316 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9314.size()),_9314.begin(),_9314.end()));
      std::vector<int> _9317;
      for (int _5180 = (int)0, _9318 = _5173; _5180 < _9318 ; ++_5180)
      {
        _9317.push_back(_5180);
      }
      auto _9319 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9317.size()),_9317.begin(),_9317.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5172->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_5173,_9316,_9319,_5175,_5172)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5170 && (_5172->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int> _9320;
      for (int _5181 = (int)0, _9321 = _5173; _5181 < _9321 ; ++_5181)
      {
        _9320.push_back(_5181);
      }
      auto _9322 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9320.size()),_9320.begin(),_9320.end()));
      std::vector<int> _9323;
      for (int _5182 = (int)0, _9324 = _5173; _5182 < _9324 ; ++_5182)
      {
        _9323.push_back((int)0);
      }
      auto _9325 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9323.size()),_9323.begin(),_9323.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5173,(int)1,_9322,_9325,_5175,_5172,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_5170) && (_5172->getDim((int)1) == _5173)))
  {
    {
      std::vector<int> _9326;
      for (int _5183 = (int)0, _9327 = _5173; _5183 < _9327 ; ++_5183)
      {
        _9326.push_back(_5183);
      }
      auto _9328 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9326.size()),_9326.begin(),_9326.end()));
      std::vector<int> _9329;
      for (int _5184 = (int)0, _9330 = _5173; _5184 < _9330 ; ++_5184)
      {
        _9329.push_back((int)0);
      }
      auto _9331 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9329.size()),_9329.begin(),_9329.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5172->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5173,(int)1,_9328,_9331,_5175,_5172)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_5170) && (_5172->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int> _9332;
      for (int _5185 = (int)0, _9333 = _5173; _5185 < _9333 ; ++_5185)
      {
        _9332.push_back((int)0);
      }
      auto _9334 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9332.size()),_9332.begin(),_9332.end()));
      std::vector<int> _9335;
      for (int _5186 = (int)0, _9336 = _5173; _5186 < _9336 ; ++_5186)
      {
        _9335.push_back(_5186);
      }
      auto _9337 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9335.size()),_9335.begin(),_9335.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_5173,_9334,_9337,_5175,_5172,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5187,std::shared_ptr< monty::ndarray< double,2 > > _5188,monty::rc_ptr< ::mosek::fusion::Expression > _5189){
  int _5190 = (int)((_5188)->size(0));
  int _5191 = (int)((_5188)->size(1));
  int _5192 = safe_mul( _5190,_5191 );
  std::vector<int> _9338;
  for (int _5194 = (int)0, _9339 = _5190; _5194 < _9339 ; ++_5194)
  {
    for (int _5195 = (int)0, _9340 = _5191; _5195 < _9340 ; ++_5195)
    {
      _9338.push_back(_5194);
    }
  }
  auto _9341 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9338.size()),_9338.begin(),_9338.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5193 = _9341;
  _checked_ptr_1<int> _ptr__5193(_5193 ? _5193->raw() : nullptr,_5193 ? _5193->size(0) : 0);
  std::vector<int> _9342;
  for (int _5197 = (int)0, _9343 = _5190; _5197 < _9343 ; ++_5197)
  {
    for (int _5198 = (int)0, _9344 = _5191; _5198 < _9344 ; ++_5198)
    {
      _9342.push_back(_5198);
    }
  }
  auto _9345 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9342.size()),_9342.begin(),_9342.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5196 = _9345;
  _checked_ptr_1<int> _ptr__5196(_5196 ? _5196->raw() : nullptr,_5196 ? _5196->size(0) : 0);
  std::vector<double> _9346;
  for (int _5200 = (int)0, _9347 = _5190; _5200 < _9347 ; ++_5200)
  {
    for (int _5201 = (int)0, _9348 = _5191; _5201 < _9348 ; ++_5201)
    {
      _9346.push_back(((*_5188)(_5200,_5201)));
    }
  }
  auto _9349 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9346.size()),_9346.begin(),_9346.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5199 = _9349;
  _checked_ptr_1<double> _ptr__5199(_5199 ? _5199->raw() : nullptr,_5199 ? _5199->size(0) : 0);
  long long _5202 = _5189->getSize();
  std::shared_ptr< monty::ndarray< int,1 > > _5203 = _5189->getShape();
  _checked_ptr_1<int> _ptr__5203(_5203 ? _5203->raw() : nullptr,_5203 ? _5203->size(0) : 0);
  if (((int)((_5203)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5190,_5191,_5193,_5196,_5199,_5189,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_5187)
  {
    {
      if (((int)((_5203)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5188)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5190,_5191,_5193,_5196,_5199,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5203[(int)0]),(int)((int)1)}),_5189)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_5203)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5190,_5191,_5193,_5196,_5199,_5189)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_5203)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_5188)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5190,_5191,_5193,_5196,_5199,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5203[(int)0])}),_5189)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_5203)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5190,_5191,_5193,_5196,_5199,_5189)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5204,monty::rc_ptr< ::mosek::fusion::Matrix > _5205,monty::rc_ptr< ::mosek::fusion::Expression > _5206){
  long long _5207 = _5205->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _5208 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5207)));
  _checked_ptr_1<int> _ptr__5208(_5208 ? _5208->raw() : nullptr,_5208 ? _5208->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5209 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5207)));
  _checked_ptr_1<int> _ptr__5209(_5209 ? _5209->raw() : nullptr,_5209 ? _5209->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5210 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5207)));
  _checked_ptr_1<double> _ptr__5210(_5210 ? _5210->raw() : nullptr,_5210 ? _5210->size(0) : 0);
  int _5211 = _5205->numRows();
  int _5212 = _5205->numColumns();
  _5205->getDataAsTriplets(_5208,_5209,_5210);
  int _5213 = _5206->getND();
  if ((_5213 == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_5211,_5212,_5208,_5209,_5210,_5206)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5213 == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5214 = _5206->getShape();
      _checked_ptr_1<int> _ptr__5214(_5214 ? _5214->raw() : nullptr,_5214 ? _5214->size(0) : 0);
      if (_5204)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5211)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5211,_5212,_5208,_5209,_5210,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5214[(int)0]),(int)((int)1)}),_5206)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5212)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5211,_5212,_5208,_5209,_5210,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5214[(int)0])}),_5206)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_5213 == (int)2))
  {
    {
      if (_5204)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_5211,_5212,_5208,_5209,_5210,_5206)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_5211,_5212,_5208,_5209,_5210,_5206)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5215,    monty::rc_ptr< ::mosek::fusion::Matrix > _5216) { return mosek::fusion::p_Expr::mul(_5215,_5216); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _5215,monty::rc_ptr< ::mosek::fusion::Matrix > _5216){
  int _5217 = _5216->numRows();
  int _5218 = _5216->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5219 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5216->numNonzeros())));
  _checked_ptr_1<double> _ptr__5219(_5219 ? _5219->raw() : nullptr,_5219 ? _5219->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5220 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5216->numNonzeros())));
  _checked_ptr_1<int> _ptr__5220(_5220 ? _5220->raw() : nullptr,_5220 ? _5220->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5221 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5216->numNonzeros())));
  _checked_ptr_1<int> _ptr__5221(_5221 ? _5221->raw() : nullptr,_5221 ? _5221->size(0) : 0);
  _5216->getDataAsTriplets(_5221,_5220,_5219);
  return ::mosek::fusion::p_Expr::mul(false,_5217,_5218,_5221,_5220,_5219,_5215);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5222,    monty::rc_ptr< ::mosek::fusion::Variable > _5223) { return mosek::fusion::p_Expr::mul(_5222,_5223); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _5222,monty::rc_ptr< ::mosek::fusion::Variable > _5223){
  int _5224 = _5222->numRows();
  int _5225 = _5222->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _5226 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5222->numNonzeros())));
  _checked_ptr_1<double> _ptr__5226(_5226 ? _5226->raw() : nullptr,_5226 ? _5226->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5227 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5222->numNonzeros())));
  _checked_ptr_1<int> _ptr__5227(_5227 ? _5227->raw() : nullptr,_5227 ? _5227->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5228 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5222->numNonzeros())));
  _checked_ptr_1<int> _ptr__5228(_5228 ? _5228->raw() : nullptr,_5228 ? _5228->size(0) : 0);
  _5222->getDataAsTriplets(_5228,_5227,_5226);
  return ::mosek::fusion::p_Expr::mul(true,_5224,_5225,_5228,_5227,_5226,_5223);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _5229,int _5230,int _5231,std::shared_ptr< monty::ndarray< int,1 > > _5232,std::shared_ptr< monty::ndarray< int,1 > > _5233,std::shared_ptr< monty::ndarray< double,1 > > _5234,monty::rc_ptr< ::mosek::fusion::Variable > _5235){
  _checked_ptr_1<int> _ptr__5232(_5232 ? _5232->raw() : nullptr, _5232 ? _5232->size(0) : 0);
  _checked_ptr_1<int> _ptr__5233(_5233 ? _5233->raw() : nullptr, _5233 ? _5233->size(0) : 0);
  _checked_ptr_1<double> _ptr__5234(_5234 ? _5234->raw() : nullptr, _5234 ? _5234->size(0) : 0);
  if ((_5235->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_5230,_5231,_5232,_5233,_5234,_5235)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5235->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5236 = _5235->getShape();
      _checked_ptr_1<int> _ptr__5236(_5236 ? _5236->raw() : nullptr,_5236 ? _5236->size(0) : 0);
      int _9350;
      bool _9351 = _5229;
      if (_9351)
      {
        _9350 = _5230;
      }
      else
      {
        _9350 = _5231;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _9352;
      bool _9353 = _5229;
      if (_9353)
      {
        _9352 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5236[(int)0]),(int)((int)1)});
      }
      else
      {
        _9352 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__5236[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_9350)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_5229,_5230,_5231,_5232,_5233,_5234,::mosek::fusion::p_Var::reshape(_5235,_9352))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_5229,_5230,_5231,_5232,_5233,_5234,_5235)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5237,    monty::rc_ptr< ::mosek::fusion::Matrix > _5238) { return mosek::fusion::p_Expr::dot(_5237,_5238); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5237,monty::rc_ptr< ::mosek::fusion::Matrix > _5238){
  long long _5239 = _5238->numNonzeros();
  if ((!_5238->isSparse()))
  {
    {
      std::vector<long long> _9354;
      for (long long _5240 = (int)0, _9355 = _5239; _5240 < _9355 ; ++_5240)
      {
        _9354.push_back(_5240);
      }
      auto _9356 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9354.size()),_9354.begin(),_9354.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5237,_9356,_5238->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5239)));
      _checked_ptr_1<int> _ptr__5241(_5241 ? _5241->raw() : nullptr,_5241 ? _5241->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5242 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5239)));
      _checked_ptr_1<int> _ptr__5242(_5242 ? _5242->raw() : nullptr,_5242 ? _5242->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5243 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5239)));
      _checked_ptr_1<double> _ptr__5243(_5243 ? _5243->raw() : nullptr,_5243 ? _5243->size(0) : 0);
      int _5244 = _5238->numColumns();
      _5238->getDataAsTriplets(_5241,_5242,_5243);
      std::vector<long long> _9357;
      for (int _5245 = (int)0, _9358 = (int)((_5241)->size(0)); _5245 < _9358 ; ++_5245)
      {
        _9357.push_back(safe_add( safe_mul( _ptr__5241[_5245],_5244 ),_ptr__5242[_5245] ));
      }
      auto _9359 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9357.size()),_9357.begin(),_9357.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5237,_9359,_5243)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5246,    std::shared_ptr< monty::ndarray< double,2 > > _5247) { return mosek::fusion::p_Expr::dot(_5246,_5247); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5246,std::shared_ptr< monty::ndarray< double,2 > > _5247){
  std::vector<long long> _9360;
  for (int _5248 = (int)0, _9361 = safe_mul( (int)((_5247)->size(0)),(int)((_5247)->size(1)) ); _5248 < _9361 ; ++_5248)
  {
    _9360.push_back(_5248);
  }
  auto _9362 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9360.size()),_9360.begin(),_9360.end()));
  std::vector<double> _9363;
  for (int _5249 = (int)0, _9364 = (int)((_5247)->size(0)); _5249 < _9364 ; ++_5249)
  {
    for (int _5250 = (int)0, _9365 = (int)((_5247)->size(1)); _5250 < _9365 ; ++_5250)
    {
      _9363.push_back(((*_5247)(_5249,_5250)));
    }
  }
  auto _9366 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9363.size()),_9363.begin(),_9363.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5246,_9362,_9366)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5251,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5252) { return mosek::fusion::p_Expr::dot(_5251,_5252); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5251,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5252){
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5251,mosek::fusion::p_NDSparseArray::_get_impl(_5252)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5252)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _5253,    std::shared_ptr< monty::ndarray< double,1 > > _5254) { return mosek::fusion::p_Expr::dot(_5253,_5254); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _5253,std::shared_ptr< monty::ndarray< double,1 > > _5254){
  _checked_ptr_1<double> _ptr__5254(_5254 ? _5254->raw() : nullptr, _5254 ? _5254->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5255 = _5253->getShape();
  _checked_ptr_1<int> _ptr__5255(_5255 ? _5255->raw() : nullptr,_5255 ? _5255->size(0) : 0);
  if (((_5253->getSize() == (int)((_5254)->size(0))) && ((int)((_5255)->size(0)) > (int)1)))
  {
    {
      int _5256 = (int)0;
      int _9367 = (int)0;
      int _9368 = (int)((_5255)->size(0));
      for (int _5257 = _9367; _5257 < _9368; ++_5257)
      {
        {
          if ((_ptr__5255[_5257] > (int)1))
          {
            {
              ++ _5256;
            }
          }
          {}
        }
      }
      if ((_5256 > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5258 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)_5253->getSize())});
          _checked_ptr_1<int> _ptr__5258(_5258 ? _5258->raw() : nullptr,_5258 ? _5258->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5258,_5253)).as<::mosek::fusion::Expression>(),_5254)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_5253,_5254)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5259,    monty::rc_ptr< ::mosek::fusion::Expression > _5260) { return mosek::fusion::p_Expr::dot(_5259,_5260); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _5259,monty::rc_ptr< ::mosek::fusion::Expression > _5260){
  return ::mosek::fusion::p_Expr::dot(_5260,_5259);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5261,    monty::rc_ptr< ::mosek::fusion::Expression > _5262) { return mosek::fusion::p_Expr::dot(_5261,_5262); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5261,monty::rc_ptr< ::mosek::fusion::Expression > _5262){
  return ::mosek::fusion::p_Expr::dot(_5262,_5261);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _5263,    monty::rc_ptr< ::mosek::fusion::Expression > _5264) { return mosek::fusion::p_Expr::dot(_5263,_5264); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _5263,monty::rc_ptr< ::mosek::fusion::Expression > _5264){
  return ::mosek::fusion::p_Expr::dot(_5264,_5263);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _5265,    monty::rc_ptr< ::mosek::fusion::Expression > _5266) { return mosek::fusion::p_Expr::dot(_5265,_5266); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _5265,monty::rc_ptr< ::mosek::fusion::Expression > _5266){
  _checked_ptr_1<double> _ptr__5265(_5265 ? _5265->raw() : nullptr, _5265 ? _5265->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_5266,_5265);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5267,    monty::rc_ptr< ::mosek::fusion::Expression > _5268) { return mosek::fusion::p_Expr::outer(_5267,_5268); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _5267,monty::rc_ptr< ::mosek::fusion::Expression > _5268){
  _checked_ptr_1<double> _ptr__5267(_5267 ? _5267->raw() : nullptr, _5267 ? _5267->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5269 = _5268->getShape();
  _checked_ptr_1<int> _ptr__5269(_5269 ? _5269->raw() : nullptr,_5269 ? _5269->size(0) : 0);
  if (((int)((_5269)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));
    }
  }
  {}
  if ((_ptr__5269[(int)0] != (int)((_5267)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Argument lengths do not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::FlatExpr > _5270 = _5268->__mosek_2fusion_2Expression__eval();
  std::vector<int> _9369;
  for (int _5271 = (int)0, _9370 = (int)((_5267)->size(0)); _5271 < _9370 ; ++_5271)
  {
    _9369.push_back(_5271);
  }
  auto _9371 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9369.size()),_9369.begin(),_9369.end()));
  return ::mosek::fusion::p_Expr::outer_(((*mosek::fusion::p_FlatExpr::_get_impl(_5270)->shape)((int)0)),mosek::fusion::p_FlatExpr::_get_impl(_5270)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5270)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5270)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5270)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5270)->inst,_5267,_9371,(int)((_5267)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _5272,    std::shared_ptr< monty::ndarray< double,1 > > _5273) { return mosek::fusion::p_Expr::outer(_5272,_5273); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _5272,std::shared_ptr< monty::ndarray< double,1 > > _5273){
  _checked_ptr_1<double> _ptr__5273(_5273 ? _5273->raw() : nullptr, _5273 ? _5273->size(0) : 0);
  if (((_5272->getND() != (int)1) || (_5272->getND() != (int)1)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::FlatExpr > _5274 = _5272->__mosek_2fusion_2Expression__eval();
  std::vector<int> _9372;
  for (int _5275 = (int)0, _9373 = (int)((_5273)->size(0)); _5275 < _9373 ; ++_5275)
  {
    _9372.push_back(_5275);
  }
  auto _9374 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9372.size()),_9372.begin(),_9372.end()));
  return ::mosek::fusion::p_Expr::outer_(((*mosek::fusion::p_FlatExpr::_get_impl(_5274)->shape)((int)0)),mosek::fusion::p_FlatExpr::_get_impl(_5274)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5274)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5274)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5274)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5274)->inst,_5273,_9374,(int)((_5273)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5276,    monty::rc_ptr< ::mosek::fusion::Variable > _5277) { return mosek::fusion::p_Expr::outer(_5276,_5277); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _5276,monty::rc_ptr< ::mosek::fusion::Variable > _5277){
  std::shared_ptr< monty::ndarray< int,1 > > _5278 = _5277->getShape();
  _checked_ptr_1<int> _ptr__5278(_5278 ? _5278->raw() : nullptr,_5278 ? _5278->size(0) : 0);
  if ((!(((int)((_5278)->size(0)) == (int)1) || (((int)((_5278)->size(0)) == (int)2) && (_ptr__5278[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_5276)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _9375 = _5276;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9375.get()))
  {
    ::mosek::fusion::DenseMatrix::t _5279 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9375.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_5277,_ptr__5278[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_5279)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5279)->data)->size(0)),true);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _5280 = _9375;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5281 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5280->numNonzeros())));
      _checked_ptr_1<double> _ptr__5281(_5281 ? _5281->raw() : nullptr,_5281 ? _5281->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5282 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5280->numNonzeros())));
      _checked_ptr_1<int> _ptr__5282(_5282 ? _5282->raw() : nullptr,_5282 ? _5282->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5283 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5280->numNonzeros())));
      _checked_ptr_1<int> _ptr__5283(_5283 ? _5283->raw() : nullptr,_5283 ? _5283->size(0) : 0);
      _5280->getDataAsTriplets(_5283,_5282,_5281);
      return ::mosek::fusion::p_Expr::outer_(_5277,_ptr__5278[(int)0],_5281,_5283,mosek::fusion::p_Matrix::_get_impl(_5280)->dimi,true);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5284,    monty::rc_ptr< ::mosek::fusion::Matrix > _5285) { return mosek::fusion::p_Expr::outer(_5284,_5285); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _5284,monty::rc_ptr< ::mosek::fusion::Matrix > _5285){
  std::shared_ptr< monty::ndarray< int,1 > > _5286 = _5284->getShape();
  _checked_ptr_1<int> _ptr__5286(_5286 ? _5286->raw() : nullptr,_5286 ? _5286->size(0) : 0);
  if ((!((_5284->getND() == (int)1) || ((_5284->getND() == (int)2) && (_ptr__5286[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_5285)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _9376 = _5285;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9376.get()))
  {
    ::mosek::fusion::DenseMatrix::t _5287 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9376.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_5284,_ptr__5286[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_5287)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_5287)->data)->size(0)),false);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _5288 = _9376;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _5289 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5288->numNonzeros())));
      _checked_ptr_1<double> _ptr__5289(_5289 ? _5289->raw() : nullptr,_5289 ? _5289->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5290 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5288->numNonzeros())));
      _checked_ptr_1<int> _ptr__5290(_5290 ? _5290->raw() : nullptr,_5290 ? _5290->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5291 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5285->numNonzeros())));
      _checked_ptr_1<int> _ptr__5291(_5291 ? _5291->raw() : nullptr,_5291 ? _5291->size(0) : 0);
      _5288->getDataAsTriplets(_5291,_5290,_5289);
      return ::mosek::fusion::p_Expr::outer_(_5284,((*_5284->getShape())((int)0)),_5289,_5291,mosek::fusion::p_Matrix::_get_impl(_5288)->dimi,false);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5292,    monty::rc_ptr< ::mosek::fusion::Variable > _5293) { return mosek::fusion::p_Expr::outer(_5292,_5293); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _5292,monty::rc_ptr< ::mosek::fusion::Variable > _5293){
  _checked_ptr_1<double> _ptr__5292(_5292 ? _5292->raw() : nullptr, _5292 ? _5292->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5294 = _5293->getShape();
  _checked_ptr_1<int> _ptr__5294(_5294 ? _5294->raw() : nullptr,_5294 ? _5294->size(0) : 0);
  if ((!((_5293->getND() == (int)1) || ((_5293->getND() == (int)2) && (_ptr__5294[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_5293,_ptr__5294[(int)0],_5292,nullptr,(int)((_5292)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5295,    std::shared_ptr< monty::ndarray< double,1 > > _5296) { return mosek::fusion::p_Expr::outer(_5295,_5296); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _5295,std::shared_ptr< monty::ndarray< double,1 > > _5296){
  _checked_ptr_1<double> _ptr__5296(_5296 ? _5296->raw() : nullptr, _5296 ? _5296->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5297 = _5295->getShape();
  _checked_ptr_1<int> _ptr__5297(_5297 ? _5297->raw() : nullptr,_5297 ? _5297->size(0) : 0);
  if ((!((_5295->getND() == (int)1) || ((_5295->getND() == (int)2) && (_ptr__5297[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_5295,_ptr__5297[(int)0],_5296,nullptr,(int)((_5296)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int _5298,std::shared_ptr< monty::ndarray< long long,1 > > _5299,std::shared_ptr< monty::ndarray< long long,1 > > _5300,std::shared_ptr< monty::ndarray< double,1 > > _5301,std::shared_ptr< monty::ndarray< double,1 > > _5302,std::shared_ptr< monty::ndarray< long long,1 > > _5303,std::shared_ptr< monty::ndarray< double,1 > > _5304,std::shared_ptr< monty::ndarray< int,1 > > _5305,int _5306,bool _5307){
  _checked_ptr_1<long long> _ptr__5299(_5299 ? _5299->raw() : nullptr, _5299 ? _5299->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5300(_5300 ? _5300->raw() : nullptr, _5300 ? _5300->size(0) : 0);
  _checked_ptr_1<double> _ptr__5301(_5301 ? _5301->raw() : nullptr, _5301 ? _5301->size(0) : 0);
  _checked_ptr_1<double> _ptr__5302(_5302 ? _5302->raw() : nullptr, _5302 ? _5302->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5303(_5303 ? _5303->raw() : nullptr, _5303 ? _5303->size(0) : 0);
  _checked_ptr_1<double> _ptr__5304(_5304 ? _5304->raw() : nullptr, _5304 ? _5304->size(0) : 0);
  _checked_ptr_1<int> _ptr__5305(_5305 ? _5305->raw() : nullptr, _5305 ? _5305->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9377;
  bool _9378 = (!_5307);
  if (_9378)
  {
    _9377 = ::mosek::fusion::p_Set::make(_5298,_5306);
  }
  else
  {
    _9377 = ::mosek::fusion::p_Set::make(_5306,_5298);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5308 = _9377;
  _checked_ptr_1<int> _ptr__5308(_5308 ? _5308->raw() : nullptr,_5308 ? _5308->size(0) : 0);
  int _5309 = safe_mul( (int)((_5304)->size(0)),(int)((_5303)->size(0)) );
  int _5310 = safe_mul( (int)((_5304)->size(0)),(int)((_5300)->size(0)) );
  std::shared_ptr< monty::ndarray< long long,1 > > _5311 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5309)));
  _checked_ptr_1<long long> _ptr__5311(_5311 ? _5311->raw() : nullptr,_5311 ? _5311->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _9379;
  bool _9380 = (NULL != _5302.get());
  if (_9380)
  {
    _9379 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5309)));
  }
  else
  {
    _9379 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5312 = _9379;
  _checked_ptr_1<double> _ptr__5312(_5312 ? _5312->raw() : nullptr,_5312 ? _5312->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5313 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5310)));
  _checked_ptr_1<double> _ptr__5313(_5313 ? _5313->raw() : nullptr,_5313 ? _5313->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5314 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5310)));
  _checked_ptr_1<long long> _ptr__5314(_5314 ? _5314->raw() : nullptr,_5314 ? _5314->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5315 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _5309,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5315(_5315 ? _5315->raw() : nullptr,_5315 ? _5315->size(0) : 0);
  int _5316 = (int)_ptr__5315[((int)((_5315)->size(0)) - (int)1)];
  if ((!_5307))
  {
    {
      long long _5317 = (long long)0;
      long long _5318 = (long long)0;
      int _9381 = (int)0;
      int _9382 = (int)((_5303)->size(0));
      for (int _5319 = _9381; _5319 < _9382; ++_5319)
      {
        {
          long long _5320 = (_ptr__5299[safe_add( _5319,(int)1 )] - _ptr__5299[_5319]);
          int _9383 = (int)0;
          int _9384 = (int)((_5304)->size(0));
          for (int _5321 = _9383; _5321 < _9384; ++_5321)
          {
            {
              _ptr__5303[_5317] = safe_add( safe_mul( _ptr__5303[_5319],_5306 ),_ptr__5305[_5321] );
              _ptr__5315[safe_add( _5317,(int)1 )] = safe_add( _ptr__5315[_5317],_5320 );
              ++ _5317;
              long long _9385 = _ptr__5299[_5319];
              long long _9386 = _ptr__5299[safe_add( _5319,(int)1 )];
              for (long long _5322 = _9385; _5322 < _9386; ++_5322)
              {
                {
                  _ptr__5314[_5318] = _ptr__5300[_5322];
                  _ptr__5313[_5318] = (_ptr__5301[_5322] * _ptr__5304[_5321]);
                  ++ _5318;
                }
              }
            }
          }
        }
      }
      if ((NULL != _5312.get()))
      {
        {
          int _5323 = (int)0;
          int _9387 = (int)0;
          int _9388 = (int)((_5303)->size(0));
          for (int _5324 = _9387; _5324 < _9388; ++_5324)
          {
            {
              int _9389 = (int)0;
              int _9390 = (int)((_5304)->size(0));
              for (int _5325 = _9389; _5325 < _9390; ++_5325)
              {
                {
                  _ptr__5312[_5323] = (_ptr__5304[_5325] * _ptr__5302[_5324]);
                  ++ _5323;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      long long _5326 = (long long)0;
      long long _5327 = (long long)0;
      int _9391 = (int)0;
      int _9392 = (int)((_5304)->size(0));
      for (int _5328 = _9391; _5328 < _9392; ++_5328)
      {
        {
          double _5329 = _ptr__5304[_5328];
          ::mosek::fusion::Utils::Tools::arraycopy(_5300,(long long)((int)0),_5314,_5327,(long long)(_5316));
          int _9393 = (int)0;
          int _9394 = _5316;
          for (int _5330 = _9393; _5330 < _9394; ++_5330)
          {
            {
              _ptr__5313[safe_add( _5327,_5330 )] = (_ptr__5301[_5330] * _ptr__5304[_5328]);
            }
          }
          int _9395 = (int)0;
          int _9396 = (int)((_5303)->size(0));
          for (int _5331 = _9395; _5331 < _9396; ++_5331)
          {
            {
              long long _5332 = (_ptr__5299[safe_add( _5331,(int)1 )] - _ptr__5299[_5331]);
              _ptr__5303[_5326] = safe_add( safe_mul( _ptr__5303[_5331],_5306 ),_ptr__5305[_5328] );
              _ptr__5315[safe_add( _5326,(int)1 )] = safe_add( _ptr__5315[_5326],_5332 );
              ++ _5326;
            }
          }
          _5327 += _5316;
        }
      }
      if ((NULL != _5312.get()))
      {
        {
          int _5333 = (int)0;
          int _9397 = (int)0;
          int _9398 = (int)((_5304)->size(0));
          for (int _5334 = _9397; _5334 < _9398; ++_5334)
          {
            {
              double _5335 = _ptr__5304[_5334];
              int _9399 = (int)0;
              int _9400 = (int)((_5303)->size(0));
              for (int _5336 = _9399; _5336 < _9400; ++_5336)
              {
                {
                  _ptr__5312[_5333] = (_ptr__5302[_5336] * _5335);
                  ++ _5333;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_5315,_5314,_5313,_5312,_5308,_5311)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _5337,int _5338,std::shared_ptr< monty::ndarray< double,1 > > _5339,std::shared_ptr< monty::ndarray< int,1 > > _5340,int _5341,bool _5342){
  _checked_ptr_1<double> _ptr__5339(_5339 ? _5339->raw() : nullptr, _5339 ? _5339->size(0) : 0);
  _checked_ptr_1<int> _ptr__5340(_5340 ? _5340->raw() : nullptr, _5340 ? _5340->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9401;
  bool _9402 = (!_5342);
  if (_9402)
  {
    _9401 = ::mosek::fusion::p_Set::make(_5338,_5341);
  }
  else
  {
    _9401 = ::mosek::fusion::p_Set::make(_5341,_5338);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5343 = _9401;
  _checked_ptr_1<int> _ptr__5343(_5343 ? _5343->raw() : nullptr,_5343 ? _5343->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _9403;
  bool _9404 = (_5341 == (int)((_5339)->size(0)));
  if (_9404)
  {
    _9403 = nullptr;
  }
  else
  {
    _9403 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_5339)->size(0)),_5338 ))));
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5344 = _9403;
  _checked_ptr_1<long long> _ptr__5344(_5344 ? _5344->raw() : nullptr,_5344 ? _5344->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5345 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_5339)->size(0)),_5338 ))));
  _checked_ptr_1<double> _ptr__5345(_5345 ? _5345->raw() : nullptr,_5345 ? _5345->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5346 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_5339)->size(0)),_5338 ))));
  _checked_ptr_1<double> _ptr__5346(_5346 ? _5346->raw() : nullptr,_5346 ? _5346->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5347 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_5339)->size(0)),_5338 ))));
  _checked_ptr_1<long long> _ptr__5347(_5347 ? _5347->raw() : nullptr,_5347 ? _5347->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5348 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( safe_mul( (int)((_5339)->size(0)),_5338 ),(int)1 ))));
  _checked_ptr_1<long long> _ptr__5348(_5348 ? _5348->raw() : nullptr,_5348 ? _5348->size(0) : 0);
  if ((_5341 == (int)((_5339)->size(0))))
  {
    {
      long long _5349 = (long long)0;
      if ((!_5342))
      {
        {
          int _9405 = (int)0;
          int _9406 = _5338;
          for (int _5350 = _9405; _5350 < _9406; ++_5350)
          {
            {
              int _9407 = (int)0;
              int _9408 = _5341;
              for (int _5351 = _9407; _5351 < _9408; ++_5351)
              {
                {
                  _ptr__5348[safe_add( _5349,(int)1 )] = safe_add( _5349,(int)1 );
                  _ptr__5347[_5349] = (long long)_5350;
                  _ptr__5346[_5349] = _ptr__5339[_5351];
                  ++ _5349;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _9409 = (int)0;
          int _9410 = _5341;
          for (int _5352 = _9409; _5352 < _9410; ++_5352)
          {
            {
              int _9411 = (int)0;
              int _9412 = _5338;
              for (int _5353 = _9411; _5353 < _9412; ++_5353)
              {
                {
                  _ptr__5348[safe_add( _5349,(int)1 )] = safe_add( _5349,(int)1 );
                  _ptr__5347[_5349] = (long long)_5353;
                  _ptr__5346[_5349] = _ptr__5339[_5352];
                  ++ _5349;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      long long _5354 = (long long)0;
      if ((!_5342))
      {
        {
          int _9413 = (int)0;
          int _9414 = _5338;
          for (int _5355 = _9413; _5355 < _9414; ++_5355)
          {
            {
              int _9415 = (int)0;
              int _9416 = (int)((_5339)->size(0));
              for (int _5356 = _9415; _5356 < _9416; ++_5356)
              {
                {
                  _ptr__5348[safe_add( _5354,(int)1 )] = safe_add( _5354,(int)1 );
                  _ptr__5347[_5354] = (long long)_5355;
                  _ptr__5346[_5354] = _ptr__5339[_5356];
                  _ptr__5344[_5354] = safe_add( safe_mul( _5355,_5341 ),_ptr__5340[_5356] );
                  ++ _5354;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _9417 = (int)0;
          int _9418 = (int)((_5339)->size(0));
          for (int _5357 = _9417; _5357 < _9418; ++_5357)
          {
            {
              int _9419 = (int)0;
              int _9420 = _5338;
              for (int _5358 = _9419; _5358 < _9420; ++_5358)
              {
                {
                  _ptr__5348[safe_add( _5354,(int)1 )] = safe_add( _5354,(int)1 );
                  _ptr__5347[_5354] = (long long)_5358;
                  _ptr__5346[_5354] = _ptr__5339[_5357];
                  _ptr__5344[_5354] = safe_add( safe_mul( _ptr__5340[_5357],_5338 ),_5358 );
                  ++ _5354;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_5348,_5347,_5346,_5345,_5343,_5344)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5359) { return mosek::fusion::p_Expr::stack(_5359); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5359){
  if ((NULL == _5359.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9421 = (int)0;
  int _9422 = (int)((_5359)->size(0));
  for (int _5360 = _9421; _5360 < _9422; ++_5360)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5361 = ((*_5359)(_5360));
      if ((NULL == _5361.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int _9423 = (int)0;
      int _9424 = (int)((_5361)->size(0));
      for (int _5362 = _9423; _5362 < _9424; ++_5362)
      {
        {
          if ((NULL == ((*_5361)(_5362)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _9425;
  for (int _5364 = (int)0, _9426 = (int)((_5359)->size(0)); _5364 < _9426 ; ++_5364)
  {
    _9425.push_back(::mosek::fusion::p_Expr::stack_(((*_5359)(_5364)),(int)1));
  }
  auto _9427 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9425.size()),_9425.begin(),_9425.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5363 = _9427;
  return ::mosek::fusion::p_Expr::stack_(_5363,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5365,    double _5366,    double _5367) { return mosek::fusion::p_Expr::vstack(_5365,_5366,_5367); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5365,double _5366,double _5367){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5365).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5366).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5367).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5368,    double _5369,    monty::rc_ptr< ::mosek::fusion::Expression > _5370) { return mosek::fusion::p_Expr::vstack(_5368,_5369,_5370); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5368,double _5369,monty::rc_ptr< ::mosek::fusion::Expression > _5370){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5368).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5369).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5370.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5371,    monty::rc_ptr< ::mosek::fusion::Expression > _5372,    double _5373) { return mosek::fusion::p_Expr::vstack(_5371,_5372,_5373); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5371,monty::rc_ptr< ::mosek::fusion::Expression > _5372,double _5373){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5371).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5372.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5373).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5374,    monty::rc_ptr< ::mosek::fusion::Expression > _5375,    monty::rc_ptr< ::mosek::fusion::Expression > _5376) { return mosek::fusion::p_Expr::vstack(_5374,_5375,_5376); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5374,monty::rc_ptr< ::mosek::fusion::Expression > _5375,monty::rc_ptr< ::mosek::fusion::Expression > _5376){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5374).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5375.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5376.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5377,    double _5378,    double _5379) { return mosek::fusion::p_Expr::vstack(_5377,_5378,_5379); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5377,double _5378,double _5379){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5377.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5378).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5379).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5380,    double _5381,    monty::rc_ptr< ::mosek::fusion::Expression > _5382) { return mosek::fusion::p_Expr::vstack(_5380,_5381,_5382); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5380,double _5381,monty::rc_ptr< ::mosek::fusion::Expression > _5382){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5380.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5381).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5382.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5383,    monty::rc_ptr< ::mosek::fusion::Expression > _5384,    double _5385) { return mosek::fusion::p_Expr::vstack(_5383,_5384,_5385); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5383,monty::rc_ptr< ::mosek::fusion::Expression > _5384,double _5385){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5383.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5384.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5385).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5386,    monty::rc_ptr< ::mosek::fusion::Expression > _5387,    monty::rc_ptr< ::mosek::fusion::Expression > _5388) { return mosek::fusion::p_Expr::vstack(_5386,_5387,_5388); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5386,monty::rc_ptr< ::mosek::fusion::Expression > _5387,monty::rc_ptr< ::mosek::fusion::Expression > _5388){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5386.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5387.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5388.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5389,    monty::rc_ptr< ::mosek::fusion::Expression > _5390) { return mosek::fusion::p_Expr::vstack(_5389,_5390); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _5389,monty::rc_ptr< ::mosek::fusion::Expression > _5390){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5389).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5390.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5391,    double _5392) { return mosek::fusion::p_Expr::vstack(_5391,_5392); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5391,double _5392){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5391.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5392).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5393,    monty::rc_ptr< ::mosek::fusion::Expression > _5394) { return mosek::fusion::p_Expr::vstack(_5393,_5394); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _5393,monty::rc_ptr< ::mosek::fusion::Expression > _5394){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5393.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5394.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5395) { return mosek::fusion::p_Expr::vstack(_5395); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5395){
  if ((NULL == _5395.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9428 = (int)0;
  int _9429 = (int)((_5395)->size(0));
  for (int _5396 = _9428; _5396 < _9429; ++_5396)
  {
    {
      if ((NULL == ((*_5395)(_5396)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_5395,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5397,    monty::rc_ptr< ::mosek::fusion::Expression > _5398,    monty::rc_ptr< ::mosek::fusion::Expression > _5399) { return mosek::fusion::p_Expr::hstack(_5397,_5398,_5399); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5397,monty::rc_ptr< ::mosek::fusion::Expression > _5398,monty::rc_ptr< ::mosek::fusion::Expression > _5399){
  if (((NULL == _5397.get()) || ((NULL == _5398.get()) || (NULL == _5399.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5397.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5398.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5399.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5400,    monty::rc_ptr< ::mosek::fusion::Expression > _5401,    double _5402) { return mosek::fusion::p_Expr::hstack(_5400,_5401,_5402); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5400,monty::rc_ptr< ::mosek::fusion::Expression > _5401,double _5402){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5400.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5401.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5402).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5403,    double _5404,    monty::rc_ptr< ::mosek::fusion::Expression > _5405) { return mosek::fusion::p_Expr::hstack(_5403,_5404,_5405); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5403,double _5404,monty::rc_ptr< ::mosek::fusion::Expression > _5405){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5403.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5404).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5405.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5406,    double _5407,    double _5408) { return mosek::fusion::p_Expr::hstack(_5406,_5407,_5408); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5406,double _5407,double _5408){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5406.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5407).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5408).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5409,    monty::rc_ptr< ::mosek::fusion::Expression > _5410,    monty::rc_ptr< ::mosek::fusion::Expression > _5411) { return mosek::fusion::p_Expr::hstack(_5409,_5410,_5411); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5409,monty::rc_ptr< ::mosek::fusion::Expression > _5410,monty::rc_ptr< ::mosek::fusion::Expression > _5411){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5409).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5410.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5411.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5412,    monty::rc_ptr< ::mosek::fusion::Expression > _5413,    double _5414) { return mosek::fusion::p_Expr::hstack(_5412,_5413,_5414); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5412,monty::rc_ptr< ::mosek::fusion::Expression > _5413,double _5414){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5412).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5413.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5414).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5415,    double _5416,    monty::rc_ptr< ::mosek::fusion::Expression > _5417) { return mosek::fusion::p_Expr::hstack(_5415,_5416,_5417); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5415,double _5416,monty::rc_ptr< ::mosek::fusion::Expression > _5417){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5415).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5416).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5417.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5418,    monty::rc_ptr< ::mosek::fusion::Expression > _5419) { return mosek::fusion::p_Expr::hstack(_5418,_5419); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _5418,monty::rc_ptr< ::mosek::fusion::Expression > _5419){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5418).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5419.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5420,    double _5421) { return mosek::fusion::p_Expr::hstack(_5420,_5421); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5420,double _5421){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5420.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5421).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5422,    monty::rc_ptr< ::mosek::fusion::Expression > _5423) { return mosek::fusion::p_Expr::hstack(_5422,_5423); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _5422,monty::rc_ptr< ::mosek::fusion::Expression > _5423){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5422.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5423.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5424) { return mosek::fusion::p_Expr::hstack(_5424); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5424){
  if ((NULL == _5424.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _9430 = (int)0;
  int _9431 = (int)((_5424)->size(0));
  for (int _5425 = _9430; _5425 < _9431; ++_5425)
  {
    {
      if ((NULL == ((*_5424)(_5425)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_5424,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5426,    monty::rc_ptr< ::mosek::fusion::Expression > _5427,    monty::rc_ptr< ::mosek::fusion::Expression > _5428,    monty::rc_ptr< ::mosek::fusion::Expression > _5429) { return mosek::fusion::p_Expr::stack(_5426,_5427,_5428,_5429); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5426,monty::rc_ptr< ::mosek::fusion::Expression > _5427,monty::rc_ptr< ::mosek::fusion::Expression > _5428,monty::rc_ptr< ::mosek::fusion::Expression > _5429){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5427.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5428.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5429.get())}),_5426);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5430,    monty::rc_ptr< ::mosek::fusion::Expression > _5431,    monty::rc_ptr< ::mosek::fusion::Expression > _5432,    double _5433) { return mosek::fusion::p_Expr::stack(_5430,_5431,_5432,_5433); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5430,monty::rc_ptr< ::mosek::fusion::Expression > _5431,monty::rc_ptr< ::mosek::fusion::Expression > _5432,double _5433){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5431.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5432.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5433).get())}),_5430);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5434,    monty::rc_ptr< ::mosek::fusion::Expression > _5435,    double _5436,    monty::rc_ptr< ::mosek::fusion::Expression > _5437) { return mosek::fusion::p_Expr::stack(_5434,_5435,_5436,_5437); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5434,monty::rc_ptr< ::mosek::fusion::Expression > _5435,double _5436,monty::rc_ptr< ::mosek::fusion::Expression > _5437){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5435.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5436).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5437.get())}),_5434);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5438,    monty::rc_ptr< ::mosek::fusion::Expression > _5439,    double _5440,    double _5441) { return mosek::fusion::p_Expr::stack(_5438,_5439,_5440,_5441); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5438,monty::rc_ptr< ::mosek::fusion::Expression > _5439,double _5440,double _5441){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5439.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5440).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5441).get())}),_5438);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5442,    double _5443,    monty::rc_ptr< ::mosek::fusion::Expression > _5444,    monty::rc_ptr< ::mosek::fusion::Expression > _5445) { return mosek::fusion::p_Expr::stack(_5442,_5443,_5444,_5445); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5442,double _5443,monty::rc_ptr< ::mosek::fusion::Expression > _5444,monty::rc_ptr< ::mosek::fusion::Expression > _5445){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5443).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5444.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5445.get())}),_5442);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5446,    double _5447,    monty::rc_ptr< ::mosek::fusion::Expression > _5448,    double _5449) { return mosek::fusion::p_Expr::stack(_5446,_5447,_5448,_5449); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5446,double _5447,monty::rc_ptr< ::mosek::fusion::Expression > _5448,double _5449){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5447).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5448.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5449).get())}),_5446);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5450,    double _5451,    double _5452,    monty::rc_ptr< ::mosek::fusion::Expression > _5453) { return mosek::fusion::p_Expr::stack(_5450,_5451,_5452,_5453); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5450,double _5451,double _5452,monty::rc_ptr< ::mosek::fusion::Expression > _5453){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5451).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5452).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5453.get())}),_5450);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5454,    double _5455,    monty::rc_ptr< ::mosek::fusion::Expression > _5456) { return mosek::fusion::p_Expr::stack(_5454,_5455,_5456); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5454,double _5455,monty::rc_ptr< ::mosek::fusion::Expression > _5456){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5455).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5456.get())}),_5454);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5457,    monty::rc_ptr< ::mosek::fusion::Expression > _5458,    double _5459) { return mosek::fusion::p_Expr::stack(_5457,_5458,_5459); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5457,monty::rc_ptr< ::mosek::fusion::Expression > _5458,double _5459){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5458.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_5459).get())}),_5457);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5460,    monty::rc_ptr< ::mosek::fusion::Expression > _5461,    monty::rc_ptr< ::mosek::fusion::Expression > _5462) { return mosek::fusion::p_Expr::stack(_5460,_5461,_5462); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5460,monty::rc_ptr< ::mosek::fusion::Expression > _5461,monty::rc_ptr< ::mosek::fusion::Expression > _5462){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_5461.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_5462.get())}),_5460);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5463,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5464) { return mosek::fusion::p_Expr::stack(_5463,_5464); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _5463,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5464){
  return ::mosek::fusion::p_Expr::stack_(_5464,_5463);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5465,int _5466){
  if (((int)((_5465)->size(0)) == (int)1))
  {
    {
      return ((*_5465)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_5465,_5466),_5466)).as<::mosek::fusion::Expression>();
    }
  }
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5467,int _5468){
  int _5469 = (int)((_5467)->size(0));
  std::vector<int> _9432;
  for (int _5471 = (int)0, _9433 = _5469; _5471 < _9433 ; ++_5471)
  {
    _9432.push_back(((*_5467)(_5471))->getND());
  }
  auto _9434 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9432.size()),_9432.begin(),_9432.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5470 = _9434;
  _checked_ptr_1<int> _ptr__5470(_5470 ? _5470->raw() : nullptr,_5470 ? _5470->size(0) : 0);
  int _5472 = _ptr__5470[(int)0];
  int _5473 = _ptr__5470[(int)0];
  int _9435 = (int)1;
  int _9436 = _5469;
  for (int _5474 = _9435; _5474 < _9436; ++_5474)
  {
    {
      if ((_ptr__5470[_5474] < _5473))
      {
        {
          _5473 = _ptr__5470[_5474];
        }
      }
      {}
      if ((_ptr__5470[_5474] > _5472))
      {
        {
          _5472 = _ptr__5470[_5474];
        }
      }
      {}
    }
  }
  if ((_5472 < _5468))
  {
    {
      _5472 = _5468;
    }
  }
  {}
  if ((_5473 < _5472))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5475 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_5469)));
      std::shared_ptr< monty::ndarray< int,1 > > _5476 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5472)));
      _checked_ptr_1<int> _ptr__5476(_5476 ? _5476->raw() : nullptr,_5476 ? _5476->size(0) : 0);
      int _9437 = (int)0;
      int _9438 = _5469;
      for (int _5477 = _9437; _5477 < _9438; ++_5477)
      {
        {
          if ((((*_5467)(_5477))->getND() == _5472))
          {
            {
              ((*_5475)(_5477)) = ((*_5467)(_5477));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int,1 > > _5478 = ((*_5467)(_5477))->getShape();
              _checked_ptr_1<int> _ptr__5478(_5478 ? _5478->raw() : nullptr,_5478 ? _5478->size(0) : 0);
              int _9439 = (int)0;
              int _9440 = (int)((_5478)->size(0));
              for (int _5479 = _9439; _5479 < _9440; ++_5479)
              {
                {
                  _ptr__5476[_5479] = _ptr__5478[_5479];
                }
              }
              int _9441 = (int)((_5478)->size(0));
              int _9442 = _5472;
              for (int _5480 = _9441; _5480 < _9442; ++_5480)
              {
                {
                  _ptr__5476[_5480] = (int)1;
                }
              }
              ((*_5475)(_5477)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5476,((*_5467)(_5477)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _5475;
    }
  }
  else
  {
    {
      return _5467;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _5481,    int _5482,    int _5483) { return mosek::fusion::p_Expr::repeat(_5481,_5482,_5483); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _5481,int _5482,int _5483){
  if ((_5482 <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _9443;
  for (int _5484 = (int)0, _9444 = _5482; _5484 < _9444 ; ++_5484)
  {
    _9443.push_back(_5481);
  }
  auto _9445 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9443.size()),_9443.begin(),_9443.end()));
  return ::mosek::fusion::p_Expr::stack_(_9445,_5483);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5485) { return mosek::fusion::p_Expr::add(_5485); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5485){
  std::vector<double> _9446;
  for (int _5486 = (int)0, _9447 = (int)((_5485)->size(0)); _5486 < _9447 ; ++_5486)
  {
    _9446.push_back(1.0);
  }
  auto _9448 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9446.size()),_9446.begin(),_9446.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_5485,_9448)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5487) { return mosek::fusion::p_Expr::add(_5487); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5487){
  if ((NULL == _5487.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_5487)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)((int)0)}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_5487)->size(0)) > (int)0) && (NULL == ((*_5487)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int _5488 = ((*_5487)((int)0))->getND();
  int _9449 = (int)1;
  int _9450 = (int)((_5487)->size(0));
  for (int _5489 = _9449; _5489 < _9450; ++_5489)
  {
    {
      if ((_5488 < ((*_5487)(_5489))->getND()))
      {
        {
          _5488 = ((*_5487)(_5489))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,2 > > _5490 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_5487)->size(0)),_5488)));
  int _9451 = (int)0;
  int _9452 = (int)((_5487)->size(0));
  for (int _5491 = _9451; _5491 < _9452; ++_5491)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5492 = ((*_5487)(_5491))->getShape();
      _checked_ptr_1<int> _ptr__5492(_5492 ? _5492->raw() : nullptr,_5492 ? _5492->size(0) : 0);
      int _9453 = (int)0;
      int _9454 = (int)((_5492)->size(0));
      for (int _5493 = _9453; _5493 < _9454; ++_5493)
      {
        {
          ((*_5490)(_5491,_5493)) = _ptr__5492[_5493];
        }
      }
      int _9455 = (int)((_5492)->size(0));
      int _9456 = _5488;
      for (int _5494 = _9455; _5494 < _9456; ++_5494)
      {
        {
          ((*_5490)(_5491,_5494)) = (int)1;
        }
      }
    }
  }
  int _9457 = (int)1;
  int _9458 = (int)((_5487)->size(0));
  for (int _5495 = _9457; _5495 < _9458; ++_5495)
  {
    {
      int _9459 = (int)0;
      int _9460 = _5488;
      for (int _5496 = _9459; _5496 < _9460; ++_5496)
      {
        {
          if ((((*_5490)((int)0,_5496)) != ((*_5490)(_5495,_5496))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _9461;
  for (int _5498 = (int)0, _9462 = _5488; _5498 < _9462 ; ++_5498)
  {
    _9461.push_back(((*_5490)((int)0,_5498)));
  }
  auto _9463 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9461.size()),_9461.begin(),_9461.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5497 = _9463;
  _checked_ptr_1<int> _ptr__5497(_5497 ? _5497->raw() : nullptr,_5497 ? _5497->size(0) : 0);
  int _5499 = (int)1;
  int _9464 = (int)0;
  int _9465 = _5488;
  for (int _5500 = _9464; _5500 < _9465; ++_5500)
  {
    {
      _5499 *= _ptr__5497[_5500];
    }
  }
  int _5501 = (int)0;
  int _5502 = (int)0;
  int _9466 = (int)0;
  int _9467 = (int)((_5487)->size(0));
  for (int _5503 = _9466; _5503 < _9467; ++_5503)
  {
    {
      int _5504 = ((*_5487)(_5503))->numInst();
      _5501 += _5504;
      int _9468;
      bool _9469 = (_5502 > _5504);
      if (_9469)
      {
        _9468 = _5502;
      }
      else
      {
        _9468 = _5504;
      }
      _5502 = _9468;
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5505 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _5499,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5505(_5505 ? _5505->raw() : nullptr,_5505 ? _5505->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5506 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5501)));
  _checked_ptr_1<long long> _ptr__5506(_5506 ? _5506->raw() : nullptr,_5506 ? _5506->size(0) : 0);
  std::vector<double> _9470;
  for (int _5508 = (int)0, _9471 = _5501; _5508 < _9471 ; ++_5508)
  {
    _9470.push_back(1.0);
  }
  auto _9472 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9470.size()),_9470.begin(),_9470.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5507 = _9472;
  _checked_ptr_1<double> _ptr__5507(_5507 ? _5507->raw() : nullptr,_5507 ? _5507->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< long long,1 > > _5509 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5502)));
    _checked_ptr_1<long long> _ptr__5509(_5509 ? _5509->raw() : nullptr,_5509 ? _5509->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _5510 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5502)));
    _checked_ptr_1<long long> _ptr__5510(_5510 ? _5510->raw() : nullptr,_5510 ? _5510->size(0) : 0);
    int _9473 = (int)0;
    int _9474 = (int)((_5487)->size(0));
    for (int _5511 = _9473; _5511 < _9474; ++_5511)
    {
      {
        int _5512 = ((*_5487)(_5511))->inst((int)0,_5509,(int)0,_5510);
        int _9475 = (int)0;
        int _9476 = _5512;
        for (int _5513 = _9475; _5513 < _9476; ++_5513)
        {
          {
            _ptr__5505[safe_add( _ptr__5509[_5513],(int)1 )] += (int)1;
          }
        }
      }
    }
    int _9477 = (int)0;
    int _9478 = _5499;
    for (int _5514 = _9477; _5514 < _9478; ++_5514)
    {
      {
        _ptr__5505[safe_add( _5514,(int)1 )] += _ptr__5505[_5514];
      }
    }
    int _9479 = (int)0;
    int _9480 = (int)((_5487)->size(0));
    for (int _5515 = _9479; _5515 < _9480; ++_5515)
    {
      {
        int _5516 = ((*_5487)(_5515))->inst((int)0,_5509,(int)0,_5510);
        int _9481 = (int)0;
        int _9482 = _5516;
        for (int _5517 = _9481; _5517 < _9482; ++_5517)
        {
          {
            _ptr__5506[_ptr__5505[_ptr__5509[_5517]]] = _ptr__5510[_5517];
            ++ _ptr__5505[_ptr__5509[_5517]];
          }
        }
      }
    }
    int _9483 = (int)0;
    int _9484 = _5499;
    for (int _5518 = _9483; _5518 < _9484; ++_5518)
    {
      {
        _ptr__5505[(_5499 - _5518)] = _ptr__5505[((_5499 - _5518) - (int)1)];
      }
    }
    _ptr__5505[(int)0] = (int)0;
  }
  std::vector<double> _9485;
  for (int _5519 = (int)0, _9486 = _5499; _5519 < _9486 ; ++_5519)
  {
    _9485.push_back(0.0);
  }
  auto _9487 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9485.size()),_9485.begin(),_9485.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_5505,_5506,_5507,_9487,_5497,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _5520,double _5521,monty::rc_ptr< ::mosek::fusion::Expression > _5522,double _5523){
  int _5524 = _5520->getND();
  int _5525 = _5522->getND();
  if ((_5524 == _5525))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_5520,_5522,_5521,_5523)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _9488;
      bool _9489 = (_5524 > _5525);
      if (_9489)
      {
        _9488 = _5524;
      }
      else
      {
        _9488 = _5525;
      }
      int _5526 = _9488;
      std::shared_ptr< monty::ndarray< int,1 > > _5527 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5526)));
      _checked_ptr_1<int> _ptr__5527(_5527 ? _5527->raw() : nullptr,_5527 ? _5527->size(0) : 0);
      if ((_5524 < _5525))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5528 = _5520->getShape();
          _checked_ptr_1<int> _ptr__5528(_5528 ? _5528->raw() : nullptr,_5528 ? _5528->size(0) : 0);
          int _9490 = (int)0;
          int _9491 = _5524;
          for (int _5529 = _9490; _5529 < _9491; ++_5529)
          {
            {
              _ptr__5527[_5529] = _ptr__5528[_5529];
            }
          }
          int _9492 = _5524;
          int _9493 = _5526;
          for (int _5530 = _9492; _5530 < _9493; ++_5530)
          {
            {
              _ptr__5527[_5530] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5527,_5520)).as<::mosek::fusion::Expression>(),_5522,_5521,_5523)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5531 = _5522->getShape();
          _checked_ptr_1<int> _ptr__5531(_5531 ? _5531->raw() : nullptr,_5531 ? _5531->size(0) : 0);
          int _9494 = (int)0;
          int _9495 = _5525;
          for (int _5532 = _9494; _5532 < _9495; ++_5532)
          {
            {
              _ptr__5527[_5532] = _ptr__5531[_5532];
            }
          }
          int _9496 = _5525;
          int _9497 = _5526;
          for (int _5533 = _9496; _5533 < _9497; ++_5533)
          {
            {
              _ptr__5527[_5533] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_5520,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_5527,_5522)).as<::mosek::fusion::Expression>(),_5521,_5523)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( monty::rc_ptr< ::mosek::fusion::Expression > _5534) { return mosek::fusion::p_Expr::transpose(_5534); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _5534){
  if ((_5534->getND() == (int)0))
  {
    {
      return _5534;
    }
  }
  else if((_5534->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_5534->getDim((int)0))}),_5534)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_5534->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_5534)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5535,    monty::rc_ptr< ::mosek::fusion::Expression > _5536) { return mosek::fusion::p_Expr::mulElm(_5535,_5536); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _5535,monty::rc_ptr< ::mosek::fusion::Expression > _5536){
  return ::mosek::fusion::p_Expr::mulElm_(_5535,_5536);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5537,    monty::rc_ptr< ::mosek::fusion::Expression > _5538) { return mosek::fusion::p_Expr::mulElm(_5537,_5538); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5537,monty::rc_ptr< ::mosek::fusion::Expression > _5538){
  return ::mosek::fusion::p_Expr::mulElm_(_5537,_5538);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _5539,    monty::rc_ptr< ::mosek::fusion::Expression > _5540) { return mosek::fusion::p_Expr::mulElm(_5539,_5540); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _5539,monty::rc_ptr< ::mosek::fusion::Expression > _5540){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_5539),_5540);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _5541,    monty::rc_ptr< ::mosek::fusion::Expression > _5542) { return mosek::fusion::p_Expr::mulElm(_5541,_5542); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _5541,monty::rc_ptr< ::mosek::fusion::Expression > _5542){
  _checked_ptr_1<double> _ptr__5541(_5541 ? _5541->raw() : nullptr, _5541 ? _5541->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_5541,_5542);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5543,    monty::rc_ptr< ::mosek::fusion::Matrix > _5544) { return mosek::fusion::p_Expr::mulElm(_5543,_5544); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5543,monty::rc_ptr< ::mosek::fusion::Matrix > _5544){
  return ::mosek::fusion::p_Expr::mulElm_(_5544,_5543);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5545,    std::shared_ptr< monty::ndarray< double,2 > > _5546) { return mosek::fusion::p_Expr::mulElm(_5545,_5546); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5545,std::shared_ptr< monty::ndarray< double,2 > > _5546){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_5546),_5545);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5547,    std::shared_ptr< monty::ndarray< double,1 > > _5548) { return mosek::fusion::p_Expr::mulElm(_5547,_5548); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5547,std::shared_ptr< monty::ndarray< double,1 > > _5548){
  _checked_ptr_1<double> _ptr__5548(_5548 ? _5548->raw() : nullptr, _5548 ? _5548->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_5548,_5547);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _5549,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5550) { return mosek::fusion::p_Expr::mulElm(_5549,_5550); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _5549,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5550){
  return ::mosek::fusion::p_Expr::mulElm_(_5550,_5549);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5551,    monty::rc_ptr< ::mosek::fusion::Expression > _5552) { return mosek::fusion::p_Expr::sub(_5551,_5552); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5551,monty::rc_ptr< ::mosek::fusion::Expression > _5552){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5551),1.0,_5552,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5553,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5554) { return mosek::fusion::p_Expr::sub(_5553,_5554); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5553,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5554){
  return ::mosek::fusion::p_Expr::add_(_5553,1.0,::mosek::fusion::p_Expr::constTerm(_5554),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5555,    monty::rc_ptr< ::mosek::fusion::Expression > _5556) { return mosek::fusion::p_Expr::sub(_5555,_5556); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _5555,monty::rc_ptr< ::mosek::fusion::Expression > _5556){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5555),1.0,_5556,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5557,    monty::rc_ptr< ::mosek::fusion::Matrix > _5558) { return mosek::fusion::p_Expr::sub(_5557,_5558); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5557,monty::rc_ptr< ::mosek::fusion::Matrix > _5558){
  return ::mosek::fusion::p_Expr::add_(_5557,1.0,::mosek::fusion::p_Expr::constTerm(_5558),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _5559,    monty::rc_ptr< ::mosek::fusion::Expression > _5560) { return mosek::fusion::p_Expr::sub(_5559,_5560); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _5559,monty::rc_ptr< ::mosek::fusion::Expression > _5560){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5560->getShape(),_5559),1.0,_5560,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5561,    double _5562) { return mosek::fusion::p_Expr::sub(_5561,_5562); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5561,double _5562){
  return ::mosek::fusion::p_Expr::add_(_5561,1.0,::mosek::fusion::p_Expr::constTerm(_5561->getShape(),_5562),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _5563,    monty::rc_ptr< ::mosek::fusion::Expression > _5564) { return mosek::fusion::p_Expr::sub(_5563,_5564); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _5563,monty::rc_ptr< ::mosek::fusion::Expression > _5564){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5563),1.0,_5564,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _5565,    monty::rc_ptr< ::mosek::fusion::Expression > _5566) { return mosek::fusion::p_Expr::sub(_5565,_5566); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _5565,monty::rc_ptr< ::mosek::fusion::Expression > _5566){
  _checked_ptr_1<double> _ptr__5565(_5565 ? _5565->raw() : nullptr, _5565 ? _5565->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_5565),1.0,_5566,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5567,    std::shared_ptr< monty::ndarray< double,2 > > _5568) { return mosek::fusion::p_Expr::sub(_5567,_5568); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5567,std::shared_ptr< monty::ndarray< double,2 > > _5568){
  return ::mosek::fusion::p_Expr::add_(_5567,1.0,::mosek::fusion::p_Expr::constTerm(_5568),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5569,    std::shared_ptr< monty::ndarray< double,1 > > _5570) { return mosek::fusion::p_Expr::sub(_5569,_5570); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5569,std::shared_ptr< monty::ndarray< double,1 > > _5570){
  _checked_ptr_1<double> _ptr__5570(_5570 ? _5570->raw() : nullptr, _5570 ? _5570->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5569,1.0,::mosek::fusion::p_Expr::constTerm(_5570),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _5571,    monty::rc_ptr< ::mosek::fusion::Expression > _5572) { return mosek::fusion::p_Expr::sub(_5571,_5572); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _5571,monty::rc_ptr< ::mosek::fusion::Expression > _5572){
  return ::mosek::fusion::p_Expr::add_(_5571,1.0,_5572,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5573,    monty::rc_ptr< ::mosek::fusion::Expression > _5574) { return mosek::fusion::p_Expr::add(_5573,_5574); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5573,monty::rc_ptr< ::mosek::fusion::Expression > _5574){
  return ::mosek::fusion::p_Expr::add_(_5574,1.0,::mosek::fusion::p_Expr::constTerm(_5573),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5575,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5576) { return mosek::fusion::p_Expr::add(_5575,_5576); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5575,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5576){
  return ::mosek::fusion::p_Expr::add_(_5575,1.0,::mosek::fusion::p_Expr::constTerm(_5576),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5577,    monty::rc_ptr< ::mosek::fusion::Expression > _5578) { return mosek::fusion::p_Expr::add(_5577,_5578); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _5577,monty::rc_ptr< ::mosek::fusion::Expression > _5578){
  return ::mosek::fusion::p_Expr::add_(_5578,1.0,::mosek::fusion::p_Expr::constTerm(_5577),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5579,    monty::rc_ptr< ::mosek::fusion::Matrix > _5580) { return mosek::fusion::p_Expr::add(_5579,_5580); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5579,monty::rc_ptr< ::mosek::fusion::Matrix > _5580){
  return ::mosek::fusion::p_Expr::add_(_5579,1.0,::mosek::fusion::p_Expr::constTerm(_5580),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _5581,    monty::rc_ptr< ::mosek::fusion::Expression > _5582) { return mosek::fusion::p_Expr::add(_5581,_5582); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _5581,monty::rc_ptr< ::mosek::fusion::Expression > _5582){
  return ::mosek::fusion::p_Expr::add_(_5582,1.0,::mosek::fusion::p_Expr::constTerm(_5582->getShape(),_5581),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5583,    double _5584) { return mosek::fusion::p_Expr::add(_5583,_5584); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5583,double _5584){
  return ::mosek::fusion::p_Expr::add_(_5583,1.0,::mosek::fusion::p_Expr::constTerm(_5583->getShape(),_5584),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _5585,    monty::rc_ptr< ::mosek::fusion::Expression > _5586) { return mosek::fusion::p_Expr::add(_5585,_5586); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _5585,monty::rc_ptr< ::mosek::fusion::Expression > _5586){
  return ::mosek::fusion::p_Expr::add_(_5586,1.0,::mosek::fusion::p_Expr::constTerm(_5585),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _5587,    monty::rc_ptr< ::mosek::fusion::Expression > _5588) { return mosek::fusion::p_Expr::add(_5587,_5588); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _5587,monty::rc_ptr< ::mosek::fusion::Expression > _5588){
  _checked_ptr_1<double> _ptr__5587(_5587 ? _5587->raw() : nullptr, _5587 ? _5587->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5588,1.0,::mosek::fusion::p_Expr::constTerm(_5587),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5589,    std::shared_ptr< monty::ndarray< double,2 > > _5590) { return mosek::fusion::p_Expr::add(_5589,_5590); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5589,std::shared_ptr< monty::ndarray< double,2 > > _5590){
  return ::mosek::fusion::p_Expr::add_(_5589,1.0,::mosek::fusion::p_Expr::constTerm(_5590),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5591,    std::shared_ptr< monty::ndarray< double,1 > > _5592) { return mosek::fusion::p_Expr::add(_5591,_5592); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5591,std::shared_ptr< monty::ndarray< double,1 > > _5592){
  _checked_ptr_1<double> _ptr__5592(_5592 ? _5592->raw() : nullptr, _5592 ? _5592->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_5591,1.0,::mosek::fusion::p_Expr::constTerm(_5592),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _5593,    monty::rc_ptr< ::mosek::fusion::Expression > _5594) { return mosek::fusion::p_Expr::add(_5593,_5594); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _5593,monty::rc_ptr< ::mosek::fusion::Expression > _5594){
  return ::mosek::fusion::p_Expr::add_(_5593,1.0,_5594,1.0);
}
int mosek::fusion::Expr :: getND() { return mosek::fusion::p_Expr::_get_impl(this)->getND(); }int mosek::fusion::p_Expr::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Expr :: getShape() { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Expr::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5595,monty::rc_ptr< ::mosek::fusion::WorkStack > _5596,monty::rc_ptr< ::mosek::fusion::WorkStack > _5597) { mosek::fusion::p_Expr::_get_impl(this)->eval(_5595,_5596,_5597); }void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5595,monty::rc_ptr< ::mosek::fusion::WorkStack > _5596,monty::rc_ptr< ::mosek::fusion::WorkStack > _5597){
  std::vector<int> _9498;
  for (int _5598 = (int)0, _9499 = (int)((ptrb)->size(0)); _5598 < _9499 ; ++_5598)
  {
    _9498.push_back((int)((*ptrb)(_5598)));
  }
  auto _9500 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9498.size()),_9498.begin(),_9498.end()));
  ::mosek::fusion::p_BaseExpression::storeexpr(_5595,shape,_9500,inst,subj,cof_v,bfix);
}
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< long long,1 > > _5599,std::shared_ptr< monty::ndarray< long long,1 > > _5600,std::shared_ptr< monty::ndarray< double,1 > > _5601,std::shared_ptr< monty::ndarray< double,1 > > _5602,std::shared_ptr< monty::ndarray< int,1 > > _5603,std::shared_ptr< monty::ndarray< long long,1 > > _5604){
  _checked_ptr_1<long long> _ptr__5599(_5599 ? _5599->raw() : nullptr, _5599 ? _5599->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5600(_5600 ? _5600->raw() : nullptr, _5600 ? _5600->size(0) : 0);
  _checked_ptr_1<double> _ptr__5601(_5601 ? _5601->raw() : nullptr, _5601 ? _5601->size(0) : 0);
  _checked_ptr_1<double> _ptr__5602(_5602 ? _5602->raw() : nullptr, _5602 ? _5602->size(0) : 0);
  _checked_ptr_1<int> _ptr__5603(_5603 ? _5603->raw() : nullptr, _5603 ? _5603->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5604(_5604 ? _5604->raw() : nullptr, _5604 ? _5604->size(0) : 0);
  if ((NULL == _5603.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int _5605 = ((int)((_5599)->size(0)) - (int)1);
  long long _5606 = _ptr__5599[((int)((_5599)->size(0)) - (int)1)];
  int _5607 = (int)((_5603)->size(0));
  long long _5608 = (long long)1;
  int _9501 = (int)0;
  int _9502 = _5607;
  for (int _5609 = _9501; _5609 < _9502; ++_5609)
  {
    {
      _5608 *= _ptr__5603[_5609];
    }
  }
  if (((int)((_5599)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_5606 != (int)((_5600)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_5606 != (int)((_5601)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _5602.get()) || (_5605 != (int)((_5602)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _5604.get()) && ((int)((_5604)->size(0)) < _5608)))
  {
    {
      if (((int)((_5604)->size(0)) != ((int)((_5599)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_5604)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5604[(int)0] < (int)0) || (_ptr__5604[(int)0] >= _5608)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _5610 = true;
          long long _5611 = _5608;
          int _9503 = (int)1;
          int _9504 = (int)((_5604)->size(0));
          for (int _5612 = _9503; _5612 < _9504; ++_5612)
          {
            {
              _5610 = (_5610 && ((_ptr__5604[_5612] >= (int)0) && ((_ptr__5604[_5612] < _5611) && (_ptr__5604[_5612] > _ptr__5604[(_5612 - (int)1)]))));
            }
          }
          if ((!_5610))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_5608 != ((long long)((_5599)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _5613 = false;
  bool _5614 = false;
  if ((_ptr__5599[(int)0] != (long long)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _5615 = true;
  int _9505 = (int)0;
  int _9506 = _5605;
  for (int _5616 = _9505; _5616 < _9506; ++_5616)
  {
    {
      _5615 = (_5615 && (_ptr__5599[_5616] <= _ptr__5599[safe_add( _5616,(int)1 )]));
    }
  }
  if ((!_5615))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5617){
  monty::rc_ptr< ::mosek::fusion::Model > _9507;
  bool _9508 = ((NULL == _5617.get()) || ((int)((_5617)->size(0)) == (int)0));
  if (_9508)
  {
    _9507 = nullptr;
  }
  else
  {
    _9507 = ((*_5617)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _9507;
}
void mosek::fusion::p_Expr::destroy(){inst.reset();cof_v.reset();subj.reset();ptrb.reset();bfix.reset();shape.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,2 > > _5618) { return __mosek_2fusion_2Expression__pick(_5618); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,1 > > _5619) { return __mosek_2fusion_2Expression__pick(_5619); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int,1 > > _5620) { return __mosek_2fusion_2Expression__index(_5620); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int _5621) { return __mosek_2fusion_2Expression__index(_5621); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int,1 > > _5622,std::shared_ptr< monty::ndarray< int,1 > > _5623) { return __mosek_2fusion_2Expression__slice(_5622,_5623); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int _5624,int _5625) { return __mosek_2fusion_2Expression__slice(_5624,_5625); }
monty::rc_ptr< mosek::fusion::FlatExpr > mosek::fusion::Expression::eval() { return __mosek_2fusion_2Expression__eval(); }
mosek::fusion::FlatExpr::FlatExpr(mosek::fusion::p_FlatExpr *_impl) : _impl(_impl) { /*std::cout << "FlatExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::FlatExpr::~FlatExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_FlatExpr::p_FlatExpr  (::mosek::fusion::FlatExpr * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_inst() { return _impl->inst; }
void mosek::fusion::FlatExpr::set_inst(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->inst = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::FlatExpr::get_shape() { return _impl->shape; }
void mosek::fusion::FlatExpr::set_shape(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->shape = _val; }
long long mosek::fusion::FlatExpr::get_nnz() { return _impl->nnz; }
void mosek::fusion::FlatExpr::set_nnz(long long _val) { _impl->nnz = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::FlatExpr::get_cof() { return _impl->cof; }
void mosek::fusion::FlatExpr::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_subj() { return _impl->subj; }
void mosek::fusion::FlatExpr::set_subj(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::FlatExpr::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::FlatExpr::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::FlatExpr::get_bfix() { return _impl->bfix; }
void mosek::fusion::FlatExpr::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5630){ return new mosek::fusion::FlatExpr(_5630); }mosek::fusion::FlatExpr::FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5630) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_5630); }void mosek::fusion::p_FlatExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _5630){monty::rc_reserve __reserve_this(_pubthis);   {
    bfix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5630)->bfix);
    ptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5630)->ptrb);
    subj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5630)->subj);
    cof = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5630)->cof);
    nnz = mosek::fusion::p_FlatExpr::_get_impl(_5630)->nnz;
    shape = mosek::fusion::p_FlatExpr::_get_impl(_5630)->shape;
    inst = mosek::fusion::p_FlatExpr::_get_impl(_5630)->inst;
  }
}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _5631,    std::shared_ptr< monty::ndarray< long long,1 > > _5632,    std::shared_ptr< monty::ndarray< long long,1 > > _5633,    std::shared_ptr< monty::ndarray< double,1 > > _5634,    std::shared_ptr< monty::ndarray< int,1 > > _5635,    std::shared_ptr< monty::ndarray< long long,1 > > _5636){ return new mosek::fusion::FlatExpr(_5631,_5632,_5633,_5634,_5635,_5636); }mosek::fusion::FlatExpr::FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _5631,    std::shared_ptr< monty::ndarray< long long,1 > > _5632,    std::shared_ptr< monty::ndarray< long long,1 > > _5633,    std::shared_ptr< monty::ndarray< double,1 > > _5634,    std::shared_ptr< monty::ndarray< int,1 > > _5635,    std::shared_ptr< monty::ndarray< long long,1 > > _5636) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_5631,_5632,_5633,_5634,_5635,_5636); }void mosek::fusion::p_FlatExpr::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5631,    std::shared_ptr< monty::ndarray< long long,1 > > _5632,    std::shared_ptr< monty::ndarray< long long,1 > > _5633,    std::shared_ptr< monty::ndarray< double,1 > > _5634,    std::shared_ptr< monty::ndarray< int,1 > > _5635,    std::shared_ptr< monty::ndarray< long long,1 > > _5636){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5631(_5631 ? _5631->raw() : nullptr, _5631 ? _5631->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5632(_5632 ? _5632->raw() : nullptr, _5632 ? _5632->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5633(_5633 ? _5633->raw() : nullptr, _5633 ? _5633->size(0) : 0);
    _checked_ptr_1<double> _ptr__5634(_5634 ? _5634->raw() : nullptr, _5634 ? _5634->size(0) : 0);
    _checked_ptr_1<int> _ptr__5635(_5635 ? _5635->raw() : nullptr, _5635 ? _5635->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5636(_5636 ? _5636->raw() : nullptr, _5636 ? _5636->size(0) : 0);
    if (((NULL != _5631.get()) && ((int)((_5631)->size(0)) != ((int)((_5632)->size(0)) - (int)1))))
    {
      {
        throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of bfix and ptrb"));
      }
    }
    {}
    if (((NULL == _5634.get()) || ((NULL == _5633.get()) || ((int)((_5633)->size(0)) != (int)((_5634)->size(0))))))
    {
      {
        throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of subj and cof"));
      }
    }
    {}
    if ((NULL != _5635.get()))
    {
      {
        if ((NULL != _5636.get()))
        {
          {
            if (((int)((_5636)->size(0)) != ((int)((_5632)->size(0)) - (int)1)))
            {
              {
                throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of inst and ptrb"));
              }
            }
            {}
          }
        }
        else if((::mosek::fusion::p_Set::size(_5635) != ((long long)((_5632)->size(0)) - (int)1)))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching shape and ptrb"));
          }
        }
        {}
      }
    }
    {}
    bfix = _5631;
    ptrb = _5632;
    subj = _5633;
    cof = _5634;
    nnz = ((*ptrb)(((int)((ptrb)->size(0)) - (int)1)));
    shape = _5635;
    inst = _5636;
  }
}std::string mosek::fusion::FlatExpr :: toString() { return mosek::fusion::p_FlatExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_FlatExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5637 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5637->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("FlatExpr:"))->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("+-----------------"))->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| ptrb["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((ptrb)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(ptrb)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| subj["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((subj)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(subj)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| cof ["))->__mosek_2fusion_2Utils_2StringBuffer__a((int)((cof)->size(0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(cof)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| bfix["));
  if ((NULL != bfix.get()))
  {
    {
      _5637->__mosek_2fusion_2Utils_2StringBuffer__a((int)((bfix)->size(0)));
    }
  }
  {}
  _5637->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(bfix)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("| inst["));
  if ((NULL != inst.get()))
  {
    {
      _5637->__mosek_2fusion_2Utils_2StringBuffer__a((int)((inst)->size(0)));
    }
  }
  {}
  _5637->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] = "))->__mosek_2fusion_2Utils_2StringBuffer__a(inst)->__mosek_2fusion_2Utils_2StringBuffer__lf()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("+-----------------"));
  return _5637->toString();
}
int mosek::fusion::FlatExpr :: size() { return mosek::fusion::p_FlatExpr::_get_impl(this)->size(); }int mosek::fusion::p_FlatExpr::size(){
  return ((int)((ptrb)->size(0)) - (int)1);
}
void mosek::fusion::p_FlatExpr::destroy(){inst.reset();shape.reset();cof.reset();subj.reset();ptrb.reset();bfix.reset();}void mosek::fusion::FlatExpr::destroy() { mosek::fusion::p_FlatExpr::_get_impl(this)->destroy(); }mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _5638,    int _5639,    std::shared_ptr< monty::ndarray< int,1 > > _5640,    std::shared_ptr< monty::ndarray< int,1 > > _5641,    std::shared_ptr< monty::ndarray< double,1 > > _5642,    std::shared_ptr< monty::ndarray< int,1 > > _5643,    std::shared_ptr< monty::ndarray< int,1 > > _5644,    std::shared_ptr< monty::ndarray< double,1 > > _5645,    double _5646){ return new mosek::fusion::SymmetricMatrix(_5638,_5639,_5640,_5641,_5642,_5643,_5644,_5645,_5646); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _5638,    int _5639,    std::shared_ptr< monty::ndarray< int,1 > > _5640,    std::shared_ptr< monty::ndarray< int,1 > > _5641,    std::shared_ptr< monty::ndarray< double,1 > > _5642,    std::shared_ptr< monty::ndarray< int,1 > > _5643,    std::shared_ptr< monty::ndarray< int,1 > > _5644,    std::shared_ptr< monty::ndarray< double,1 > > _5645,    double _5646) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_5638,_5639,_5640,_5641,_5642,_5643,_5644,_5645,_5646); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _5638,    int _5639,    std::shared_ptr< monty::ndarray< int,1 > > _5640,    std::shared_ptr< monty::ndarray< int,1 > > _5641,    std::shared_ptr< monty::ndarray< double,1 > > _5642,    std::shared_ptr< monty::ndarray< int,1 > > _5643,    std::shared_ptr< monty::ndarray< int,1 > > _5644,    std::shared_ptr< monty::ndarray< double,1 > > _5645,    double _5646){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5640(_5640 ? _5640->raw() : nullptr, _5640 ? _5640->size(0) : 0);
    _checked_ptr_1<int> _ptr__5641(_5641 ? _5641->raw() : nullptr, _5641 ? _5641->size(0) : 0);
    _checked_ptr_1<double> _ptr__5642(_5642 ? _5642->raw() : nullptr, _5642 ? _5642->size(0) : 0);
    _checked_ptr_1<int> _ptr__5643(_5643 ? _5643->raw() : nullptr, _5643 ? _5643->size(0) : 0);
    _checked_ptr_1<int> _ptr__5644(_5644 ? _5644->raw() : nullptr, _5644 ? _5644->size(0) : 0);
    _checked_ptr_1<double> _ptr__5645(_5645 ? _5645->raw() : nullptr, _5645 ? _5645->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _5638;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _5639;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _5640;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _5641;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _5642;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _5643;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _5644;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _5645;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _5646;
    nnz = (-(int)1);
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _5647,    std::shared_ptr< monty::ndarray< int,1 > > _5648,    std::shared_ptr< monty::ndarray< double,1 > > _5649) { return mosek::fusion::p_SymmetricMatrix::rankOne(_5647,_5648,_5649); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int _5647,std::shared_ptr< monty::ndarray< int,1 > > _5648,std::shared_ptr< monty::ndarray< double,1 > > _5649){
  _checked_ptr_1<int> _ptr__5648(_5648 ? _5648->raw() : nullptr, _5648 ? _5648->size(0) : 0);
  _checked_ptr_1<double> _ptr__5649(_5649 ? _5649->raw() : nullptr, _5649 ? _5649->size(0) : 0);
  if (((int)((_5648)->size(0)) != (int)((_5649)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int _9509 = (int)0;
  int _9510 = (int)((_5648)->size(0));
  for (int _5650 = _9509; _5650 < _9510; ++_5650)
  {
    {
      if (((_ptr__5648[_5650] < (int)0) || (_ptr__5648[_5650] >= _5647)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int> _9511;
  for (int _5652 = (int)0, _9512 = (int)((_5648)->size(0)); _5652 < _9512 ; ++_5652)
  {
    _9511.push_back(_ptr__5648[_5652]);
  }
  auto _9513 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9511.size()),_9511.begin(),_9511.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5651 = _9513;
  _checked_ptr_1<int> _ptr__5651(_5651 ? _5651->raw() : nullptr,_5651 ? _5651->size(0) : 0);
  std::vector<int> _9514;
  for (int _5654 = (int)0, _9515 = (int)((_5648)->size(0)); _5654 < _9515 ; ++_5654)
  {
    _9514.push_back((int)1);
  }
  auto _9516 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9514.size()),_9514.begin(),_9514.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5653 = _9516;
  _checked_ptr_1<int> _ptr__5653(_5653 ? _5653->raw() : nullptr,_5653 ? _5653->size(0) : 0);
  std::vector<double> _9517;
  for (int _5656 = (int)0, _9518 = (int)((_5649)->size(0)); _5656 < _9518 ; ++_5656)
  {
    _9517.push_back(_ptr__5649[_5656]);
  }
  auto _9519 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9517.size()),_9517.begin(),_9517.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5655 = _9519;
  _checked_ptr_1<double> _ptr__5655(_5655 ? _5655->raw() : nullptr,_5655 ? _5655->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5647,(int)1,_5651,_5653,_5655,_5651,_5653,_5655,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _5657) { return mosek::fusion::p_SymmetricMatrix::rankOne(_5657); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _5657){
  _checked_ptr_1<double> _ptr__5657(_5657 ? _5657->raw() : nullptr, _5657 ? _5657->size(0) : 0);
  int _5658 = (int)((_5657)->size(0));
  std::vector<int> _9520;
  for (int _5660 = (int)0, _9521 = _5658; _5660 < _9521 ; ++_5660)
  {
    _9520.push_back(_5660);
  }
  auto _9522 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9520.size()),_9520.begin(),_9520.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5659 = _9522;
  _checked_ptr_1<int> _ptr__5659(_5659 ? _5659->raw() : nullptr,_5659 ? _5659->size(0) : 0);
  std::vector<int> _9523;
  for (int _5662 = (int)0, _9524 = _5658; _5662 < _9524 ; ++_5662)
  {
    _9523.push_back((int)1);
  }
  auto _9525 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9523.size()),_9523.begin(),_9523.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5661 = _9525;
  _checked_ptr_1<int> _ptr__5661(_5661 ? _5661->raw() : nullptr,_5661 ? _5661->size(0) : 0);
  std::vector<double> _9526;
  for (int _5664 = (int)0, _9527 = _5658; _5664 < _9527 ; ++_5664)
  {
    _9526.push_back(_ptr__5657[_5664]);
  }
  auto _9528 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9526.size()),_9526.begin(),_9526.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5663 = _9528;
  _checked_ptr_1<double> _ptr__5663(_5663 ? _5663->raw() : nullptr,_5663 ? _5663->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5658,(int)1,_5659,_5661,_5663,_5659,_5661,_5663,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5665) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_5665); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _5665){
  _checked_ptr_1<double> _ptr__5665(_5665 ? _5665->raw() : nullptr, _5665 ? _5665->size(0) : 0);
  int _5666 = (int)((_5665)->size(0));
  std::vector<int> _9529;
  for (int _5668 = (int)0, _9530 = _5666; _5668 < _9530 ; ++_5668)
  {
    _9529.push_back(_5668);
  }
  auto _9531 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9529.size()),_9529.begin(),_9529.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5667 = _9531;
  _checked_ptr_1<int> _ptr__5667(_5667 ? _5667->raw() : nullptr,_5667 ? _5667->size(0) : 0);
  std::vector<int> _9532;
  for (int _5669 = (int)0, _9533 = _5666; _5669 < _9533 ; ++_5669)
  {
    _9532.push_back((_5666 - _5669));
  }
  auto _9534 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9532.size()),_9532.begin(),_9532.end()));
  std::vector<double> _9535;
  for (int _5670 = (int)0, _9536 = _5666; _5670 < _9536 ; ++_5670)
  {
    _9535.push_back(_ptr__5665[_5670]);
  }
  auto _9537 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9535.size()),_9535.begin(),_9535.end()));
  std::vector<double> _9538;
  for (int _5671 = (int)0, _9539 = _5666; _5671 < _9539 ; ++_5671)
  {
    _9538.push_back(1.0);
  }
  auto _9540 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9538.size()),_9538.begin(),_9538.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5666,_5666,_5667,_9534,_9537,_5667,_5667,_9540,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5672) { return mosek::fusion::p_SymmetricMatrix::diag(_5672); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5672){
  _checked_ptr_1<double> _ptr__5672(_5672 ? _5672->raw() : nullptr, _5672 ? _5672->size(0) : 0);
  int _5673 = (int)((_5672)->size(0));
  std::vector<int> _9541;
  for (int _5675 = (int)0, _9542 = _5673; _5675 < _9542 ; ++_5675)
  {
    _9541.push_back(_5675);
  }
  auto _9543 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9541.size()),_9541.begin(),_9541.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5674 = _9543;
  _checked_ptr_1<int> _ptr__5674(_5674 ? _5674->raw() : nullptr,_5674 ? _5674->size(0) : 0);
  std::vector<double> _9544;
  for (int _5676 = (int)0, _9545 = _5673; _5676 < _9545 ; ++_5676)
  {
    _9544.push_back(_ptr__5672[_5676]);
  }
  auto _9546 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9544.size()),_9544.begin(),_9544.end()));
  std::vector<double> _9547;
  for (int _5677 = (int)0, _9548 = _5673; _5677 < _9548 ; ++_5677)
  {
    _9547.push_back(1.0);
  }
  auto _9549 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9547.size()),_9547.begin(),_9547.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_5673,_5673,_5674,_5674,_9546,_5674,_5674,_9549,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5678) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_5678); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5678) { return __mosek_2fusion_2SymmetricMatrix__add(_5678); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5678){
  int _5679 = _pubthis->getdim();
  if ((_5678->getdim() != _5679))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int _5680 = (int)((usubi)->size(0));
  int _5681 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->usubi)->size(0));
  int _5682 = safe_add( _5680,_5681 );
  int _5683 = (int)((vsubi)->size(0));
  int _5684 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->vsubi)->size(0));
  int _5685 = safe_add( _5683,_5684 );
  std::shared_ptr< monty::ndarray< double,1 > > _5686 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5685)));
  _checked_ptr_1<double> _ptr__5686(_5686 ? _5686->raw() : nullptr,_5686 ? _5686->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5687 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5685)));
  _checked_ptr_1<int> _ptr__5687(_5687 ? _5687->raw() : nullptr,_5687 ? _5687->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5688 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5685)));
  _checked_ptr_1<int> _ptr__5688(_5688 ? _5688->raw() : nullptr,_5688 ? _5688->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5689 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5682)));
  _checked_ptr_1<double> _ptr__5689(_5689 ? _5689->raw() : nullptr,_5689 ? _5689->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5690 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5682)));
  _checked_ptr_1<int> _ptr__5690(_5690 ? _5690->raw() : nullptr,_5690 ? _5690->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5691 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5682)));
  _checked_ptr_1<int> _ptr__5691(_5691 ? _5691->raw() : nullptr,_5691 ? _5691->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_5691,(int)0,_5680);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->usubi,(int)0,_5691,_5680,_5681);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_5690,(int)0,_5680);
  int _9550 = (int)0;
  int _9551 = _5681;
  for (int _5692 = _9550; _5692 < _9551; ++_5692)
  {
    {
      _ptr__5690[safe_add( _5692,_5680 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->usubj)(_5692)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_5689,(int)0,_5680);
    }
  }
  else
  {
    {
      int _9552 = (int)0;
      int _9553 = _5680;
      for (int _5693 = _9552; _5693 < _9553; ++_5693)
      {
        {
          _ptr__5689[_5693] = (scale * ((*uval)(_5693)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->uval,(int)0,_5689,_5680,_5681);
    }
  }
  else
  {
    {
      int _9554 = (int)0;
      int _9555 = _5681;
      for (int _5694 = _9554; _5694 < _9555; ++_5694)
      {
        {
          _ptr__5689[safe_add( _5694,_5680 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->uval)(_5694)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_5691,(int)0,_5680);
  int _9556 = (int)0;
  int _9557 = _5684;
  for (int _5695 = _9556; _5695 < _9557; ++_5695)
  {
    {
      _ptr__5688[safe_add( _5695,_5683 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->vsubi)(_5695)),mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_5687,(int)0,_5683);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->vsubj,_5683,_5687,_5683,_5684);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_5686,(int)0,_5683);
    }
  }
  else
  {
    {
      int _9558 = (int)0;
      int _9559 = _5683;
      for (int _5696 = _9558; _5696 < _9559; ++_5696)
      {
        {
          _ptr__5686[_5696] = (scale * ((*vval)(_5696)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->vval,(int)0,_5686,_5683,_5684);
    }
  }
  else
  {
    {
      int _9560 = (int)0;
      int _9561 = _5684;
      for (int _5697 = _9560; _5697 < _9561; ++_5697)
      {
        {
          _ptr__5686[safe_add( _5697,_5683 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->vval)(_5697)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_5678)->d1 ),_5691,_5690,_5689,_5688,_5687,_5686,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5698) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_5698); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5698) { return __mosek_2fusion_2SymmetricMatrix__sub(_5698); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _5698){
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_5698->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _5699) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_5699); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _5699) { return __mosek_2fusion_2SymmetricMatrix__mul(_5699); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _5699){
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _5699));
}
int mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim(){
  return d0;
}
void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5700,    std::shared_ptr< monty::ndarray< int,2 > > _5701,    std::shared_ptr< monty::ndarray< double,1 > > _5702){ return new mosek::fusion::NDSparseArray(_5700,_5701,_5702); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5700,    std::shared_ptr< monty::ndarray< int,2 > > _5701,    std::shared_ptr< monty::ndarray< double,1 > > _5702) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5700,_5701,_5702); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _5700,    std::shared_ptr< monty::ndarray< int,2 > > _5701,    std::shared_ptr< monty::ndarray< double,1 > > _5702){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5700(_5700 ? _5700->raw() : nullptr, _5700 ? _5700->size(0) : 0);
    _checked_ptr_1<double> _ptr__5702(_5702 ? _5702->raw() : nullptr, _5702 ? _5702->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _5703 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5701)->size(0)))));
    _checked_ptr_1<long long> _ptr__5703(_5703 ? _5703->raw() : nullptr,_5703 ? _5703->size(0) : 0);
    size = (long long)1;
    int _9562 = (int)0;
    int _9563 = (int)((_5700)->size(0));
    for (int _5704 = _9562; _5704 < _9563; ++_5704)
    {
      {
        size = safe_mul( size,_ptr__5700[_5704] );
      }
    }
    int _5705 = (int)((_5700)->size(0));
    if (((int)((_5701)->size(0)) != (int)((_5702)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_5701)->size(1)) != _5705))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    int _9564 = (int)0;
    int _9565 = (int)((_5701)->size(0));
    for (int _5706 = _9564; _5706 < _9565; ++_5706)
    {
      {
        int _9566 = (int)0;
        int _9567 = (int)((_5701)->size(1));
        for (int _5707 = _9566; _5707 < _9567; ++_5707)
        {
          {
            if (((((*_5701)(_5706,_5707)) < (int)0) || (((*_5701)(_5706,_5707)) >= _ptr__5700[_5707])))
            {
              {
                throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
              }
            }
            {}
          }
        }
      }
    }
    int _9568 = (int)0;
    int _9569 = (int)((_5701)->size(0));
    for (int _5708 = _9568; _5708 < _9569; ++_5708)
    {
      {
        long long _5709 = (long long)0;
        int _9570 = (int)0;
        int _9571 = (int)((_5701)->size(1));
        for (int _5710 = _9570; _5710 < _9571; ++_5710)
        {
          {
            _5709 = safe_add( safe_mul( _5709,_ptr__5700[_5710] ),((*_5701)(_5708,_5710)) );
          }
        }
        _ptr__5703[_5708] = _5709;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_5700);
    bool _5711 = true;
    int _9572 = (int)1;
    int _9573 = (int)((_5703)->size(0));
    for (int _5712 = _9572; _5712 < _9573; ++_5712)
    {
      {
        _5711 = (_5711 && (_ptr__5703[_5712] >= _ptr__5703[(_5712 - (int)1)]));
      }
    }
    if (_5711)
    {
      {
        int _5713 = (int)1;
        int _9574 = (int)1;
        int _9575 = (int)((_5703)->size(0));
        for (int _5714 = _9574; _5714 < _9575; ++_5714)
        {
          {
            if ((_ptr__5703[(_5714 - (int)1)] < _ptr__5703[_5714]))
            {
              {
                ++ _5713;
              }
            }
            {}
          }
        }
        if ((_5713 == (int)((_5703)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_5703);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_5702);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5713)));
            ((*inst)((int)0)) = _ptr__5703[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5713)));
            ((*cof)((int)0)) = _ptr__5702[(int)0];
            int _5715 = (int)0;
            int _9576 = (int)1;
            int _9577 = (int)((_5703)->size(0));
            for (int _5716 = _9576; _5716 < _9577; ++_5716)
            {
              {
                if ((_ptr__5703[_5716] > _ptr__5703[(_5716 - (int)1)]))
                {
                  {
                    ++ _5715;
                    ((*inst)(_5715)) = _ptr__5703[_5716];
                    ((*cof)(_5715)) = _ptr__5702[_5716];
                  }
                }
                else
                {
                  {
                    ((*cof)(_5715)) = (((*cof)(_5715)) + _ptr__5702[_5716]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _5717 = ::mosek::fusion::Utils::Tools::range((long long)((_5703)->size(0)));
        _checked_ptr_1<long long> _ptr__5717(_5717 ? _5717->raw() : nullptr,_5717 ? _5717->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_5717,_5703,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_5703)->size(0)));
        int _5718 = (int)1;
        int _9578 = (int)1;
        int _9579 = (int)((_5703)->size(0));
        for (int _5719 = _9578; _5719 < _9579; ++_5719)
        {
          {
            if ((_ptr__5703[_ptr__5717[(_5719 - (int)1)]] < _ptr__5703[_ptr__5717[_5719]]))
            {
              {
                ++ _5718;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5718)));
        ((*inst)((int)0)) = _ptr__5703[_ptr__5717[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5718)));
        ((*cof)((int)0)) = _ptr__5702[_ptr__5717[(int)0]];
        int _5720 = (int)0;
        int _9580 = (int)1;
        int _9581 = (int)((_5703)->size(0));
        for (int _5721 = _9580; _5721 < _9581; ++_5721)
        {
          {
            if ((_ptr__5703[_ptr__5717[_5721]] > _ptr__5703[_ptr__5717[(_5721 - (int)1)]]))
            {
              {
                ++ _5720;
                ((*inst)(_5720)) = _ptr__5703[_ptr__5717[_5721]];
                ((*cof)(_5720)) = _ptr__5702[_ptr__5717[_5721]];
              }
            }
            else
            {
              {
                ((*cof)(_5720)) = (((*cof)(_5720)) + _ptr__5702[_ptr__5717[_5721]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5722,    std::shared_ptr< monty::ndarray< long long,1 > > _5723,    std::shared_ptr< monty::ndarray< double,1 > > _5724){ return new mosek::fusion::NDSparseArray(_5722,_5723,_5724); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _5722,    std::shared_ptr< monty::ndarray< long long,1 > > _5723,    std::shared_ptr< monty::ndarray< double,1 > > _5724) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5722,_5723,_5724); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _5722,    std::shared_ptr< monty::ndarray< long long,1 > > _5723,    std::shared_ptr< monty::ndarray< double,1 > > _5724){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5722(_5722 ? _5722->raw() : nullptr, _5722 ? _5722->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5723(_5723 ? _5723->raw() : nullptr, _5723 ? _5723->size(0) : 0);
    _checked_ptr_1<double> _ptr__5724(_5724 ? _5724->raw() : nullptr, _5724 ? _5724->size(0) : 0);
    size = (long long)1;
    int _9582 = (int)0;
    int _9583 = (int)((_5722)->size(0));
    for (int _5725 = _9582; _5725 < _9583; ++_5725)
    {
      {
        size = safe_mul( size,_ptr__5722[_5725] );
      }
    }
    if (((int)((_5723)->size(0)) != (int)((_5724)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    int _9584 = (int)0;
    int _9585 = (int)((_5723)->size(0));
    for (int _5726 = _9584; _5726 < _9585; ++_5726)
    {
      {
        if (((_ptr__5723[_5726] < (int)0) || (_ptr__5723[_5726] >= size)))
        {
          {
            throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
          }
        }
        {}
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_5722);
    bool _5727 = true;
    int _9586 = (int)1;
    int _9587 = (int)((_5723)->size(0));
    for (int _5728 = _9586; _5728 < _9587; ++_5728)
    {
      {
        _5727 = (_5727 && (_ptr__5723[_5728] >= _ptr__5723[(_5728 - (int)1)]));
      }
    }
    if (_5727)
    {
      {
        int _5729 = (int)1;
        int _9588 = (int)1;
        int _9589 = (int)((_5723)->size(0));
        for (int _5730 = _9588; _5730 < _9589; ++_5730)
        {
          {
            if ((_ptr__5723[(_5730 - (int)1)] < _ptr__5723[_5730]))
            {
              {
                ++ _5729;
              }
            }
            {}
          }
        }
        if ((_5729 == (int)((_5723)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_5723);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_5724);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5729)));
            ((*inst)((int)0)) = _ptr__5723[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5729)));
            ((*cof)((int)0)) = _ptr__5724[(int)0];
            int _5731 = (int)0;
            int _9590 = (int)1;
            int _9591 = (int)((_5723)->size(0));
            for (int _5732 = _9590; _5732 < _9591; ++_5732)
            {
              {
                if ((_ptr__5723[_5732] > _ptr__5723[(_5732 - (int)1)]))
                {
                  {
                    ++ _5731;
                    ((*inst)(_5731)) = _ptr__5723[_5732];
                    ((*cof)(_5731)) = _ptr__5724[_5732];
                  }
                }
                else
                {
                  {
                    ((*cof)(_5731)) = (((*cof)(_5731)) + _ptr__5724[_5732]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _5733 = ::mosek::fusion::Utils::Tools::range((long long)((_5723)->size(0)));
        _checked_ptr_1<long long> _ptr__5733(_5733 ? _5733->raw() : nullptr,_5733 ? _5733->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_5733,_5723,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_5723)->size(0)));
        int _5734 = (int)1;
        int _9592 = (int)1;
        int _9593 = (int)((_5723)->size(0));
        for (int _5735 = _9592; _5735 < _9593; ++_5735)
        {
          {
            if ((_ptr__5723[_ptr__5733[(_5735 - (int)1)]] < _ptr__5723[_ptr__5733[_5735]]))
            {
              {
                ++ _5734;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5734)));
        ((*inst)((int)0)) = _ptr__5723[_ptr__5733[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5734)));
        ((*cof)((int)0)) = _ptr__5724[_ptr__5733[(int)0]];
        int _5736 = (int)0;
        int _9594 = (int)1;
        int _9595 = (int)((_5723)->size(0));
        for (int _5737 = _9594; _5737 < _9595; ++_5737)
        {
          {
            if ((_ptr__5723[_ptr__5733[_5737]] > ((*inst)(_ptr__5733[(_5737 - (int)1)]))))
            {
              {
                ++ _5736;
                ((*inst)(_5736)) = _ptr__5723[_ptr__5733[_5737]];
                ((*cof)(_5736)) = _ptr__5724[_ptr__5733[_5737]];
              }
            }
            else
            {
              {
                ((*cof)(_5736)) = (((*cof)(_5736)) + _ptr__5724[_ptr__5733[_5737]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _5738){ return new mosek::fusion::NDSparseArray(_5738); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _5738) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_5738); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _5738){monty::rc_reserve __reserve_this(_pubthis);   {
    long long _5739 = _5738->numNonzeros();
    int _5740 = _5738->numColumns();
    int _5741 = _5738->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _5742 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5739)));
    _checked_ptr_1<double> _ptr__5742(_5742 ? _5742->raw() : nullptr,_5742 ? _5742->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _5743 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5739)));
    _checked_ptr_1<int> _ptr__5743(_5743 ? _5743->raw() : nullptr,_5743 ? _5743->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _5744 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5739)));
    _checked_ptr_1<int> _ptr__5744(_5744 ? _5744->raw() : nullptr,_5744 ? _5744->size(0) : 0);
    _5738->getDataAsTriplets(_5744,_5743,_5742);
    size = safe_mul( (long long)_5738->numRows(),(long long)_5738->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5741),(int)(_5740)});
    std::vector<long long> _9596;
    for (long long _5745 = (long long)0, _9597 = _5739; _5745 < _9597 ; ++_5745)
    {
      _9596.push_back(safe_add( safe_mul( (long long)_ptr__5744[_5745],_5740 ),(long long)_ptr__5743[_5745] ));
    }
    auto _9598 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9596.size()),_9596.begin(),_9596.end()));
    inst = _9598;
    cof = _5742;
  }
}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5746) { return mosek::fusion::p_NDSparseArray::make(_5746); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _5746){
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5746);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _5747,    std::shared_ptr< monty::ndarray< long long,1 > > _5748,    std::shared_ptr< monty::ndarray< double,1 > > _5749) { return mosek::fusion::p_NDSparseArray::make(_5747,_5748,_5749); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _5747,std::shared_ptr< monty::ndarray< long long,1 > > _5748,std::shared_ptr< monty::ndarray< double,1 > > _5749){
  _checked_ptr_1<int> _ptr__5747(_5747 ? _5747->raw() : nullptr, _5747 ? _5747->size(0) : 0);
  _checked_ptr_1<long long> _ptr__5748(_5748 ? _5748->raw() : nullptr, _5748 ? _5748->size(0) : 0);
  _checked_ptr_1<double> _ptr__5749(_5749 ? _5749->raw() : nullptr, _5749 ? _5749->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5747,_5748,_5749);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _5750,    std::shared_ptr< monty::ndarray< int,2 > > _5751,    std::shared_ptr< monty::ndarray< double,1 > > _5752) { return mosek::fusion::p_NDSparseArray::make(_5750,_5751,_5752); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _5750,std::shared_ptr< monty::ndarray< int,2 > > _5751,std::shared_ptr< monty::ndarray< double,1 > > _5752){
  _checked_ptr_1<int> _ptr__5750(_5750 ? _5750->raw() : nullptr, _5750 ? _5750->size(0) : 0);
  _checked_ptr_1<double> _ptr__5752(_5752 ? _5752->raw() : nullptr, _5752 ? _5752->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_5750,_5751,_5752);
}
void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _5753,    int _5754,    std::shared_ptr< monty::ndarray< double,1 > > _5755){ return new mosek::fusion::DenseMatrix(_5753,_5754,_5755); }mosek::fusion::DenseMatrix::DenseMatrix  (int _5753,    int _5754,    std::shared_ptr< monty::ndarray< double,1 > > _5755) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5753,_5754,_5755); }void mosek::fusion::p_DenseMatrix::_initialize  (int _5753,    int _5754,    std::shared_ptr< monty::ndarray< double,1 > > _5755){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5755(_5755 ? _5755->raw() : nullptr, _5755 ? _5755->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5753,_5754);
    nnz = (long long)safe_mul( _5753,_5754 );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _5753,_5754 ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_5755,(int)0,data,(int)0,safe_mul( _5753,_5754 ));
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _5756){ return new mosek::fusion::DenseMatrix(_5756); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _5756) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5756); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _5756){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_5756)->dimi,mosek::fusion::p_Matrix::_get_impl(_5756)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _9599 = _5756;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9599.get()))
    {
      ::mosek::fusion::DenseMatrix::t _5757 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9599.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_5757)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_9599.get()))
    {
      ::mosek::fusion::SparseMatrix::t _5758 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_9599.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_5758)->dimi,mosek::fusion::p_Matrix::_get_impl(_5758)->dimj ));
        long long _9600 = (long long)0;
        long long _9601 = mosek::fusion::p_SparseMatrix::_get_impl(_5758)->nnz;
        for (long long _5760 = _9600; _5760 < _9601; ++_5760)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_5758)->subi)(_5760)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_5758)->subj)(_5760)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_5758)->val)(_5760));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _5759 = _9599;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _5761){ return new mosek::fusion::DenseMatrix(_5761); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _5761) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5761); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _5761){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize((int)((_5761)->size(0)),(int)((_5761)->size(1)));
    std::vector<double> _9602;
    for (int _5762 = (int)0, _9603 = dimi; _5762 < _9603 ; ++_5762)
    {
      for (int _5763 = (int)0, _9604 = dimj; _5763 < _9604 ; ++_5763)
      {
        _9602.push_back(((*_5761)(_5762,_5763)));
      }
    }
    auto _9605 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9602.size()),_9602.begin(),_9602.end()));
    data = _9605;
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _5764,    int _5765,    double _5766){ return new mosek::fusion::DenseMatrix(_5764,_5765,_5766); }mosek::fusion::DenseMatrix::DenseMatrix  (int _5764,    int _5765,    double _5766) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_5764,_5765,_5766); }void mosek::fusion::p_DenseMatrix::_initialize  (int _5764,    int _5765,    double _5766){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(_5764,_5765);
    std::vector<double> _9606;
    for (int _5767 = (int)0, _9607 = _5764; _5767 < _9607 ; ++_5767)
    {
      for (int _5768 = (int)0, _9608 = _5765; _5768 < _9608 ; ++_5768)
      {
        _9606.push_back(_5766);
      }
    }
    auto _9609 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9606.size()),_9606.begin(),_9606.end()));
    data = _9609;
    nnz = (long long)safe_mul( _5764,_5765 );
  }
}std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5769 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5769->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _5769->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _5769->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _5769->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _5769->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int _5770 = (int)0;
  {
    int _5771 = (int)0;
    for(;(_5771 < dimi);++ _5771)
    {
      {
        if ((_5771 > (int)0))
        {
          {
            _5769->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _5769->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _5769->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_5770)));
        ++ _5770;
        {
          int _5772 = (int)1;
          for(;(_5772 < dimj);++ _5772)
          {
            {
              _5769->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _5769->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_5770)));
              ++ _5770;
            }
          }
        }
        _5769->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _5769->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _5769->toString();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose(){
  std::shared_ptr< monty::ndarray< double,1 > > _5773 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__5773(_5773 ? _5773->raw() : nullptr,_5773 ? _5773->size(0) : 0);
  int _5774 = (int)0;
  int _5775 = dimi;
  int _9610 = (int)0;
  int _9611 = dimi;
  for (int _5776 = _9610; _5776 < _9611; ++_5776)
  {
    {
      int _5777 = _5776;
      int _9612 = (int)0;
      int _9613 = dimj;
      for (int _5778 = _9612; _5778 < _9613; ++_5778)
      {
        {
          _ptr__5773[_5777] = ((*data)(_5774));
          _5777 = safe_add( _5777,_5775 );
          ++ _5774;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_5773)).as<::mosek::fusion::Matrix>();
}
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse(){
  return false;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray(){
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5779,std::shared_ptr< monty::ndarray< int,1 > > _5780,std::shared_ptr< monty::ndarray< double,1 > > _5781) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_5779,_5780,_5781); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5779,std::shared_ptr< monty::ndarray< int,1 > > _5780,std::shared_ptr< monty::ndarray< double,1 > > _5781){
  _checked_ptr_1<int> _ptr__5779(_5779 ? _5779->raw() : nullptr, _5779 ? _5779->size(0) : 0);
  _checked_ptr_1<int> _ptr__5780(_5780 ? _5780->raw() : nullptr, _5780 ? _5780->size(0) : 0);
  _checked_ptr_1<double> _ptr__5781(_5781 ? _5781->raw() : nullptr, _5781 ? _5781->size(0) : 0);
  if ((((int)((_5779)->size(0)) < nnz) || (((int)((_5780)->size(0)) < nnz) || ((int)((_5781)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_5781,(int)0,(int)((data)->size(0)));
  int _5782 = (int)0;
  int _9614 = (int)0;
  int _9615 = dimi;
  for (int _5783 = _9614; _5783 < _9615; ++_5783)
  {
    {
      int _9616 = (int)0;
      int _9617 = dimj;
      for (int _5784 = _9616; _5784 < _9617; ++_5784)
      {
        {
          _ptr__5779[_5782] = _5783;
          _ptr__5780[_5782] = _5784;
          ++ _5782;
        }
      }
    }
  }
}
double mosek::fusion::DenseMatrix :: get(int _5785,int _5786) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_5785,_5786); }double mosek::fusion::p_DenseMatrix::get(int _5785,int _5786){
  return ((*data)(safe_add( safe_mul( _5785,dimj ),_5786 )));
}
long long mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros(){
  return (long long)safe_mul( dimi,dimj );
}
void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _5787,    int _5788,    std::shared_ptr< monty::ndarray< int,1 > > _5789,    std::shared_ptr< monty::ndarray< int,1 > > _5790,    std::shared_ptr< monty::ndarray< double,1 > > _5791,    long long _5792){ return new mosek::fusion::SparseMatrix(_5787,_5788,_5789,_5790,_5791,_5792); }mosek::fusion::SparseMatrix::SparseMatrix  (int _5787,    int _5788,    std::shared_ptr< monty::ndarray< int,1 > > _5789,    std::shared_ptr< monty::ndarray< int,1 > > _5790,    std::shared_ptr< monty::ndarray< double,1 > > _5791,    long long _5792) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_5787,_5788,_5789,_5790,_5791,_5792); }void mosek::fusion::p_SparseMatrix::_initialize  (int _5787,    int _5788,    std::shared_ptr< monty::ndarray< int,1 > > _5789,    std::shared_ptr< monty::ndarray< int,1 > > _5790,    std::shared_ptr< monty::ndarray< double,1 > > _5791,    long long _5792){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5789(_5789 ? _5789->raw() : nullptr, _5789 ? _5789->size(0) : 0);
    _checked_ptr_1<int> _ptr__5790(_5790 ? _5790->raw() : nullptr, _5790 ? _5790->size(0) : 0);
    _checked_ptr_1<double> _ptr__5791(_5791 ? _5791->raw() : nullptr, _5791 ? _5791->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5787,_5788);
    if ((_5792 > (int)0))
    {
      {
        if ((((int)((_5789)->size(0)) < _5792) || (((int)((_5790)->size(0)) < _5792) || ((int)((_5791)->size(0)) < _5792))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        long long _9618 = (long long)0;
        long long _9619 = _5792;
        for (long long _5793 = _9618; _5793 < _9619; ++_5793)
        {
          {
            if (((_ptr__5789[_5793] < (int)0) || ((_ptr__5789[_5793] >= dimi) || ((_ptr__5790[_5793] < (int)0) || (_ptr__5790[_5793] >= dimj)))))
            {
              {
                throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
              }
            }
            {}
          }
        }
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5794 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5795 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _5796 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_5789,_5790,_5791,_5794,_5795,_5796,_5792,dimi,dimj);
        subi = ((*_5794)((int)0));
        subj = ((*_5795)((int)0));
        val = ((*_5796)((int)0));
        nnz = (long long)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (long long)0;
      }
    }
  }
}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _5797,    int _5798,    std::shared_ptr< monty::ndarray< int,1 > > _5799,    std::shared_ptr< monty::ndarray< int,1 > > _5800,    std::shared_ptr< monty::ndarray< double,1 > > _5801){ return new mosek::fusion::SparseMatrix(_5797,_5798,_5799,_5800,_5801); }mosek::fusion::SparseMatrix::SparseMatrix  (int _5797,    int _5798,    std::shared_ptr< monty::ndarray< int,1 > > _5799,    std::shared_ptr< monty::ndarray< int,1 > > _5800,    std::shared_ptr< monty::ndarray< double,1 > > _5801) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_5797,_5798,_5799,_5800,_5801); }void mosek::fusion::p_SparseMatrix::_initialize  (int _5797,    int _5798,    std::shared_ptr< monty::ndarray< int,1 > > _5799,    std::shared_ptr< monty::ndarray< int,1 > > _5800,    std::shared_ptr< monty::ndarray< double,1 > > _5801){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5799(_5799 ? _5799->raw() : nullptr, _5799 ? _5799->size(0) : 0);
    _checked_ptr_1<int> _ptr__5800(_5800 ? _5800->raw() : nullptr, _5800 ? _5800->size(0) : 0);
    _checked_ptr_1<double> _ptr__5801(_5801 ? _5801->raw() : nullptr, _5801 ? _5801->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_5797,_5798);
    int _5802 = (int)0;
    int _9620 = (int)0;
    int _9621 = (int)((_5801)->size(0));
    for (int _5803 = _9620; _5803 < _9621; ++_5803)
    {
      {
        if (((_ptr__5801[_5803] > (int)0) || (_ptr__5801[_5803] < (int)0)))
        {
          {
            ++ _5802;
          }
        }
        {}
      }
    }
    if (((_5802 > (int)0) && (_5802 < (int)((_5799)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5802)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5802)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5802)));
        nnz = _5802;
        int _5804 = (int)0;
        int _9622 = (int)0;
        int _9623 = (int)((_5801)->size(0));
        for (int _5805 = _9622; _5805 < _9623; ++_5805)
        {
          {
            if (((_ptr__5801[_5805] < (int)0) || (_ptr__5801[_5805] > (int)0)))
            {
              {
                ((*val)(_5804)) = _ptr__5801[_5805];
                ((*subj)(_5804)) = _ptr__5800[_5805];
                ((*subi)(_5804)) = _ptr__5799[_5805];
                ++ _5804;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _5799;
        subj = _5800;
        val = _5801;
        if ((NULL == _5799.get()))
        {
          {
            nnz = (long long)0;
          }
        }
        else
        {
          {
            nnz = (long long)((subi)->size(0));
          }
        }
      }
    }
  }
}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb(){
  std::shared_ptr< monty::ndarray< long long,1 > > _5806 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<long long> _ptr__5806(_5806 ? _5806->raw() : nullptr,_5806 ? _5806->size(0) : 0);
  long long _5807 = (long long)0;
  int _9624 = (int)0;
  int _9625 = dimi;
  for (int _5808 = _9624; _5808 < _9625; ++_5808)
  {
    {
      _ptr__5806[_5808] = _5807;
      {
        for(;((_5807 < nnz) && (((*subi)(_5807)) == _5808));++ _5807)
        {
          {
          }
        }
      }
    }
  }
  _ptr__5806[dimi] = _5807;
  return _5806;
}
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5809 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _5809->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _5809->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int _9626 = (int)1;
      int _9627 = (int)((subi)->size(0));
      for (int _5810 = _9626; _5810 < _9627; ++_5810)
      {
        {
          _5809->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_5810)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_5810)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_5810)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _5809->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _5809->toString();
}
long long mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros(){
  return nnz;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose(){
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse(){
  return true;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray(){
  std::shared_ptr< monty::ndarray< double,1 > > _5811 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__5811(_5811 ? _5811->raw() : nullptr,_5811 ? _5811->size(0) : 0);
  int _9628 = (int)0;
  int _9629 = (int)((subi)->size(0));
  for (int _5812 = _9628; _5812 < _9629; ++_5812)
  {
    {
      _ptr__5811[safe_add( safe_mul( ((*subi)(_5812)),dimj ),((*subj)(_5812)) )] = ((*val)(_5812));
    }
  }
  return _5811;
}
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5813,std::shared_ptr< monty::ndarray< int,1 > > _5814,std::shared_ptr< monty::ndarray< double,1 > > _5815) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_5813,_5814,_5815); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _5813,std::shared_ptr< monty::ndarray< int,1 > > _5814,std::shared_ptr< monty::ndarray< double,1 > > _5815){
  _checked_ptr_1<int> _ptr__5813(_5813 ? _5813->raw() : nullptr, _5813 ? _5813->size(0) : 0);
  _checked_ptr_1<int> _ptr__5814(_5814 ? _5814->raw() : nullptr, _5814 ? _5814->size(0) : 0);
  _checked_ptr_1<double> _ptr__5815(_5815 ? _5815->raw() : nullptr, _5815 ? _5815->size(0) : 0);
  if ((((long long)((_5813)->size(0)) < nnz) || (((long long)((_5814)->size(0)) < nnz) || ((long long)((_5815)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_5813,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_5814,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_5815,(long long)0,nnz);
    }
  }
  {}
}
double mosek::fusion::SparseMatrix :: get(int _5816,int _5817) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_5816,_5817); }double mosek::fusion::p_SparseMatrix::get(int _5816,int _5817){
  if (((_5816 < (int)0) || ((_5816 >= dimi) || ((_5817 < (int)0) || (_5817 >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int _5818 = (int)((subi)->size(0));
  int _5819 = (int)0;
  while ( ((_5818 - _5819) > (int)1) )
  {
    {
      int _5820 = (safe_add( _5819,_5818 ) / (int)2);
      if (((((*subi)(_5820)) < _5816) || ((((*subi)(_5820)) == _5816) && (((*subj)(_5820)) < _5817))))
      {
        {
          _5819 = _5820;
        }
      }
      else if(((((*subi)(_5820)) > _5816) || ((((*subi)(_5820)) == _5816) && (((*subj)(_5820)) > _5817))))
      {
        {
          _5818 = _5820;
        }
      }
      else
      {
        {
          return ((*val)(_5820));
        }
      }
    }
  }
  if (((((*subi)(_5819)) == _5816) && (((*subj)(_5819)) == _5817)))
  {
    {
      return ((*val)(_5819));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _5821,    int _5822){monty::rc_reserve __reserve_this(_pubthis);   {
    if (((_5821 < (int)0) || (_5822 < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _5821;
    dimj = _5822;
  }
}std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString(){
  return std::string ("");
}
void mosek::fusion::p_Matrix::switchDims(){
  int _5823 = dimi;
  dimi = dimj;
  dimj = _5823;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5824,    monty::rc_ptr< ::mosek::fusion::Matrix > _5825) { return mosek::fusion::p_Matrix::diag(_5824,_5825); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5824,monty::rc_ptr< ::mosek::fusion::Matrix > _5825){
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _9630;
  for (int _5826 = (int)0, _9631 = _5824; _5826 < _9631 ; ++_5826)
  {
    _9630.push_back(_5825);
  }
  auto _9632 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_9630.size()),_9630.begin(),_9630.end()));
  return ::mosek::fusion::p_Matrix::diag(_9632);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5827) { return mosek::fusion::p_Matrix::diag(_5827); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5827){
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _5828 = _5827;
  long long _5829 = (long long)0;
  int _5830 = (int)0;
  int _5831 = (int)0;
  int _9633 = (int)0;
  int _9634 = (int)((_5827)->size(0));
  for (int _5832 = _9633; _5832 < _9634; ++_5832)
  {
    {
      _5831 = safe_add( _5831,mosek::fusion::p_Matrix::_get_impl(((*_5827)(_5832)))->dimi );
      _5830 = safe_add( _5830,mosek::fusion::p_Matrix::_get_impl(((*_5827)(_5832)))->dimj );
      _5829 = safe_add( _5829,((*_5827)(_5832))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5833 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5829)));
  _checked_ptr_1<int> _ptr__5833(_5833 ? _5833->raw() : nullptr,_5833 ? _5833->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5834 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5829)));
  _checked_ptr_1<int> _ptr__5834(_5834 ? _5834->raw() : nullptr,_5834 ? _5834->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5835 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5829)));
  _checked_ptr_1<double> _ptr__5835(_5835 ? _5835->raw() : nullptr,_5835 ? _5835->size(0) : 0);
  {
    int _5836 = (int)0;
    int _5837 = (int)0;
    long long _5838 = (long long)0;
    int _9635 = (int)0;
    int _9636 = (int)((_5827)->size(0));
    for (int _5839 = _9635; _5839 < _9636; ++_5839)
    {
      {
        long long _5840 = ((*_5827)(_5839))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _5841 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5840)));
        _checked_ptr_1<double> _ptr__5841(_5841 ? _5841->raw() : nullptr,_5841 ? _5841->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _5842 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5840)));
        _checked_ptr_1<int> _ptr__5842(_5842 ? _5842->raw() : nullptr,_5842 ? _5842->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _5843 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5840)));
        _checked_ptr_1<int> _ptr__5843(_5843 ? _5843->raw() : nullptr,_5843 ? _5843->size(0) : 0);
        ((*_5827)(_5839))->getDataAsTriplets(_5843,_5842,_5841);
        ::mosek::fusion::Utils::Tools::arraycopy(_5841,(long long)0,_5835,_5838,_5840);
        long long _9637 = (long long)0;
        long long _9638 = _5840;
        for (long long _5844 = _9637; _5844 < _9638; ++_5844)
        {
          {
            _ptr__5833[safe_add( _5838,_5844 )] = safe_add( _ptr__5843[_5844],_5837 );
            _ptr__5834[safe_add( _5838,_5844 )] = safe_add( _ptr__5843[_5844],_5836 );
          }
        }
        _5838 = safe_add( _5838,_5840 );
        _5837 = safe_add( _5837,mosek::fusion::p_Matrix::_get_impl(((*_5827)(_5839)))->dimi );
        _5836 = safe_add( _5836,mosek::fusion::p_Matrix::_get_impl(((*_5827)(_5839)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5831,_5830,_5833,_5834,_5835)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _5845,    double _5846,    int _5847) { return mosek::fusion::p_Matrix::antidiag(_5845,_5846,_5847); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _5845,double _5846,int _5847){
  if (((_5847 < _5845) && (_5847 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5846,(_5845 - _5847)),_5847);
    }
  }
  else if(((_5847 > (-_5845)) && (_5847 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5846,safe_add( _5845,_5847 )),_5847);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _5848,    double _5849) { return mosek::fusion::p_Matrix::antidiag(_5848,_5849); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _5848,double _5849){
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_5849,_5848),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5850,    double _5851,    int _5852) { return mosek::fusion::p_Matrix::diag(_5850,_5851,_5852); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5850,double _5851,int _5852){
  if (((_5852 < _5850) && (_5852 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5851,(_5850 - _5852)),_5852);
    }
  }
  else if(((_5852 > (-_5850)) && (_5852 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5851,safe_add( _5850,_5852 )),_5852);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _5853,    double _5854) { return mosek::fusion::p_Matrix::diag(_5853,_5854); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _5853,double _5854){
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_5854,_5853),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5855,    int _5856) { return mosek::fusion::p_Matrix::antidiag(_5855,_5856); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _5855,int _5856){
  _checked_ptr_1<double> _ptr__5855(_5855 ? _5855->raw() : nullptr, _5855 ? _5855->size(0) : 0);
  int _9639;
  bool _9640 = (_5856 > (int)0);
  if (_9640)
  {
    _9639 = _5856;
  }
  else
  {
    _9639 = (-_5856);
  }
  int _5857 = _9639;
  int _5858 = safe_add( (int)((_5855)->size(0)),_5857 );
  int _5859 = (int)((_5855)->size(0));
  if ((_5856 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5860 = ::mosek::fusion::Utils::Tools::range(_5856,safe_add( _5859,_5856 ));
      _checked_ptr_1<int> _ptr__5860(_5860 ? _5860->raw() : nullptr,_5860 ? _5860->size(0) : 0);
      std::vector<int> _9641;
      for (int _5862 = (int)1, _9642 = safe_add( _5859,(int)1 ); _5862 < _9642 ; ++_5862)
      {
        _9641.push_back((safe_add( _5859,_5856 ) - _5862));
      }
      auto _9643 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9641.size()),_9641.begin(),_9641.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _5861 = _9643;
      _checked_ptr_1<int> _ptr__5861(_5861 ? _5861->raw() : nullptr,_5861 ? _5861->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5858,_5858,_5860,_5861,_5855)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5863 = ::mosek::fusion::Utils::Tools::range((int)0,_5859);
      _checked_ptr_1<int> _ptr__5863(_5863 ? _5863->raw() : nullptr,_5863 ? _5863->size(0) : 0);
      std::vector<int> _9644;
      for (int _5865 = (int)1, _9645 = safe_add( _5859,(int)1 ); _5865 < _9645 ; ++_5865)
      {
        _9644.push_back((_5859 - _5865));
      }
      auto _9646 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9644.size()),_9644.begin(),_9644.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _5864 = _9646;
      _checked_ptr_1<int> _ptr__5864(_5864 ? _5864->raw() : nullptr,_5864 ? _5864->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5858,_5858,_5863,_5864,_5855)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _5866) { return mosek::fusion::p_Matrix::antidiag(_5866); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _5866){
  _checked_ptr_1<double> _ptr__5866(_5866 ? _5866->raw() : nullptr, _5866 ? _5866->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_5866,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5867,    int _5868) { return mosek::fusion::p_Matrix::diag(_5867,_5868); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5867,int _5868){
  _checked_ptr_1<double> _ptr__5867(_5867 ? _5867->raw() : nullptr, _5867 ? _5867->size(0) : 0);
  int _9647;
  bool _9648 = (_5868 > (int)0);
  if (_9648)
  {
    _9647 = _5868;
  }
  else
  {
    _9647 = (-_5868);
  }
  int _5869 = _9647;
  int _5870 = safe_add( (int)((_5867)->size(0)),_5869 );
  int _5871 = (int)((_5867)->size(0));
  if ((_5868 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5872 = ::mosek::fusion::Utils::Tools::range((int)0,_5871);
      _checked_ptr_1<int> _ptr__5872(_5872 ? _5872->raw() : nullptr,_5872 ? _5872->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5873 = ::mosek::fusion::Utils::Tools::range(_5869,safe_add( _5871,_5869 ));
      _checked_ptr_1<int> _ptr__5873(_5873 ? _5873->raw() : nullptr,_5873 ? _5873->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5870,_5870,_5872,_5873,_5867)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _5874 = ::mosek::fusion::Utils::Tools::range(_5869,safe_add( _5871,_5869 ));
      _checked_ptr_1<int> _ptr__5874(_5874 ? _5874->raw() : nullptr,_5874 ? _5874->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5875 = ::mosek::fusion::Utils::Tools::range((int)0,_5871);
      _checked_ptr_1<int> _ptr__5875(_5875 ? _5875->raw() : nullptr,_5875 ? _5875->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5870,_5870,_5874,_5875,_5867)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _5876) { return mosek::fusion::p_Matrix::diag(_5876); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _5876){
  _checked_ptr_1<double> _ptr__5876(_5876 ? _5876->raw() : nullptr, _5876 ? _5876->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_5876,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _5877,    int _5878) { return mosek::fusion::p_Matrix::ones(_5877,_5878); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int _5877,int _5878){
  return ::mosek::fusion::p_Matrix::dense(_5877,_5878,1.0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _5879) { return mosek::fusion::p_Matrix::eye(_5879); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int _5879){
  std::vector<double> _9649;
  for (int _5880 = (int)0, _9650 = _5879; _5880 < _9650 ; ++_5880)
  {
    _9649.push_back(1.0);
  }
  auto _9651 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9649.size()),_9649.begin(),_9649.end()));
  return ::mosek::fusion::p_Matrix::diag(_9651);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5881) { return mosek::fusion::p_Matrix::dense(_5881); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _5881){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5881)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _5882,    int _5883,    double _5884) { return mosek::fusion::p_Matrix::dense(_5882,_5883,_5884); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _5882,int _5883,double _5884){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5882,_5883,_5884)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _5885,    int _5886,    std::shared_ptr< monty::ndarray< double,1 > > _5887) { return mosek::fusion::p_Matrix::dense(_5885,_5886,_5887); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _5885,int _5886,std::shared_ptr< monty::ndarray< double,1 > > _5887){
  _checked_ptr_1<double> _ptr__5887(_5887 ? _5887->raw() : nullptr, _5887 ? _5887->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5885,_5886,_5887)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _5888) { return mosek::fusion::p_Matrix::dense(_5888); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _5888){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5888)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5889) { return mosek::fusion::p_Matrix::sparse(_5889); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _5889){
  std::shared_ptr< monty::ndarray< int,1 > > _5890 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5889->numNonzeros())));
  _checked_ptr_1<int> _ptr__5890(_5890 ? _5890->raw() : nullptr,_5890 ? _5890->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5891 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5889->numNonzeros())));
  _checked_ptr_1<int> _ptr__5891(_5891 ? _5891->raw() : nullptr,_5891 ? _5891->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5892 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5889->numNonzeros())));
  _checked_ptr_1<double> _ptr__5892(_5892 ? _5892->raw() : nullptr,_5892 ? _5892->size(0) : 0);
  _5889->getDataAsTriplets(_5890,_5891,_5892);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5889->numRows(),_5889->numColumns(),_5890,_5891,_5892)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _5893) { return mosek::fusion::p_Matrix::sparse(_5893); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _5893){
  int _5894 = (int)((_5893)->size(0));
  int _5895 = (int)((((*_5893)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _5896 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5894)));
  _checked_ptr_1<int> _ptr__5896(_5896 ? _5896->raw() : nullptr,_5896 ? _5896->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5897 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5895)));
  _checked_ptr_1<int> _ptr__5897(_5897 ? _5897->raw() : nullptr,_5897 ? _5897->size(0) : 0);
  long long _5898 = (long long)0;
  int _5899 = (int)0;
  {
    int _5900 = (int)0;
    for(;(_5900 < _5894);++ _5900)
    {
      {
        {
          int _5901 = (int)0;
          for(;(_5901 < _5895);++ _5901)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _5902 = ((*((*_5893)(_5900)))(_5901));
              if ((NULL != _5902.get()))
              {
                {
                  if ((_ptr__5897[_5901] == (int)0))
                  {
                    {
                      _ptr__5897[_5901] = mosek::fusion::p_Matrix::_get_impl(_5902)->dimj;
                    }
                  }
                  else if((_ptr__5897[_5901] != mosek::fusion::p_Matrix::_get_impl(_5902)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__5896[_5900] == (int)0))
                  {
                    {
                      _ptr__5896[_5900] = mosek::fusion::p_Matrix::_get_impl(_5902)->dimi;
                    }
                  }
                  else if((_ptr__5896[_5900] != mosek::fusion::p_Matrix::_get_impl(_5902)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _5898 = safe_add( _5898,_5902->numNonzeros() );
                }
              }
              {}
              ++ _5899;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5903 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5898)));
  _checked_ptr_1<double> _ptr__5903(_5903 ? _5903->raw() : nullptr,_5903 ? _5903->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5904 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5898)));
  _checked_ptr_1<int> _ptr__5904(_5904 ? _5904->raw() : nullptr,_5904 ? _5904->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5905 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5898)));
  _checked_ptr_1<int> _ptr__5905(_5905 ? _5905->raw() : nullptr,_5905 ? _5905->size(0) : 0);
  int _5906 = (int)0;
  int _5907 = (int)0;
  {
    int _5908 = (int)0;
    for(;(_5908 < _5894);++ _5908)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _5909 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5895)));
        _checked_ptr_1<int> _ptr__5909(_5909 ? _5909->raw() : nullptr,_5909 ? _5909->size(0) : 0);
        {
          int _5910 = (int)0;
          for(;(_5910 < _ptr__5896[_5908]);++ _5910)
          {
            {
              int _5911 = (int)0;
              {
                int _5912 = (int)0;
                for(;(_5912 < _5895);++ _5912)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _5913 = ((*((*_5893)(_5908)))(_5912));
                    if ((NULL != _5913.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _9652 = _5913;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_9652.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _5914 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_9652.get()));
                          {
                            int _5917 = _ptr__5909[_5912];
                            {
                              int _5918 = (int)0;
                              for(;(_5918 < mosek::fusion::p_Matrix::_get_impl(_5914)->dimj);++ _5918)
                              {
                                {
                                  _ptr__5903[_5906] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_5914)->data)(_5917));
                                  _ptr__5904[_5906] = safe_add( _5907,_5910 );
                                  _ptr__5905[_5906] = safe_add( _5911,_5918 );
                                  ++ _5917;
                                  ++ _5906;
                                }
                              }
                            }
                            _ptr__5909[_5912] = _5917;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_9652.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _5915 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_9652.get()));
                          {
                            int _5919;
                            {
                              _5919 = _ptr__5909[_5912];
                              for(;((_5919 < mosek::fusion::p_SparseMatrix::_get_impl(_5915)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_5915)->subi)(_5919)) == _5910));++ _5919)
                              {
                                {
                                  _ptr__5903[_5906] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_5915)->val)(_5919));
                                  _ptr__5905[_5906] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_5915)->subj)(_5919)),_5911 );
                                  _ptr__5904[_5906] = safe_add( _5907,_5910 );
                                  ++ _5906;
                                }
                              }
                            }
                            _ptr__5909[_5912] = _5919;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _5916 = _9652;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _5911 = safe_add( _5911,_ptr__5897[_5912] );
                  }
                }
              }
            }
          }
        }
        _5907 = safe_add( _5907,_ptr__5896[_5908] );
      }
    }
  }
  int _5920 = (int)0;
  int _5921 = (int)0;
  {
    int _5922 = (int)0;
    for(;(_5922 < _5894);++ _5922)
    {
      {
        _5920 = safe_add( _5920,_ptr__5896[_5922] );
      }
    }
  }
  {
    int _5923 = (int)0;
    for(;(_5923 < _5895);++ _5923)
    {
      {
        _5921 = safe_add( _5921,_ptr__5897[_5923] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5920,_5921,_5904,_5905,_5903)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _5924) { return mosek::fusion::p_Matrix::sparse(_5924); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _5924){
  int _5925 = (int)((_5924)->size(0));
  int _5926 = (int)((_5924)->size(1));
  long long _5927 = (long long)safe_mul( _5925,_5926 );
  std::vector<int> _9653;
  for (int _5929 = (int)0, _9654 = _5925; _5929 < _9654 ; ++_5929)
  {
    for (int _5930 = (int)0, _9655 = _5926; _5930 < _9655 ; ++_5930)
    {
      _9653.push_back(_5929);
    }
  }
  auto _9656 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9653.size()),_9653.begin(),_9653.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5928 = _9656;
  _checked_ptr_1<int> _ptr__5928(_5928 ? _5928->raw() : nullptr,_5928 ? _5928->size(0) : 0);
  std::vector<int> _9657;
  for (int _5932 = (int)0, _9658 = _5925; _5932 < _9658 ; ++_5932)
  {
    for (int _5933 = (int)0, _9659 = _5926; _5933 < _9659 ; ++_5933)
    {
      _9657.push_back(_5933);
    }
  }
  auto _9660 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9657.size()),_9657.begin(),_9657.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _5931 = _9660;
  _checked_ptr_1<int> _ptr__5931(_5931 ? _5931->raw() : nullptr,_5931 ? _5931->size(0) : 0);
  std::vector<double> _9661;
  for (int _5935 = (int)0, _9662 = _5925; _5935 < _9662 ; ++_5935)
  {
    for (int _5936 = (int)0, _9663 = _5926; _5936 < _9663 ; ++_5936)
    {
      _9661.push_back(((*_5924)(_5935,_5936)));
    }
  }
  auto _9664 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9661.size()),_9661.begin(),_9661.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _5934 = _9664;
  _checked_ptr_1<double> _ptr__5934(_5934 ? _5934->raw() : nullptr,_5934 ? _5934->size(0) : 0);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5925,_5926,_5928,_5931,_5934)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _5937,    int _5938) { return mosek::fusion::p_Matrix::sparse(_5937,_5938); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _5937,int _5938){
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5937,_5938,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _5939,    int _5940,    std::shared_ptr< monty::ndarray< int,1 > > _5941,    std::shared_ptr< monty::ndarray< int,1 > > _5942,    double _5943) { return mosek::fusion::p_Matrix::sparse(_5939,_5940,_5941,_5942,_5943); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _5939,int _5940,std::shared_ptr< monty::ndarray< int,1 > > _5941,std::shared_ptr< monty::ndarray< int,1 > > _5942,double _5943){
  _checked_ptr_1<int> _ptr__5941(_5941 ? _5941->raw() : nullptr, _5941 ? _5941->size(0) : 0);
  _checked_ptr_1<int> _ptr__5942(_5942 ? _5942->raw() : nullptr, _5942 ? _5942->size(0) : 0);
  int _5944 = (int)0;
  if ((NULL != _5941.get()))
  {
    {
      _5944 = (int)((_5941)->size(0));
    }
  }
  else if((NULL != _5942.get()))
  {
    {
      _5944 = (int)((_5942)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_5939,_5940,_5941,_5942,::mosek::fusion::Utils::Tools::makevector(_5943,_5944));
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _5945,    std::shared_ptr< monty::ndarray< int,1 > > _5946,    double _5947) { return mosek::fusion::p_Matrix::sparse(_5945,_5946,_5947); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _5945,std::shared_ptr< monty::ndarray< int,1 > > _5946,double _5947){
  _checked_ptr_1<int> _ptr__5945(_5945 ? _5945->raw() : nullptr, _5945 ? _5945->size(0) : 0);
  _checked_ptr_1<int> _ptr__5946(_5946 ? _5946->raw() : nullptr, _5946 ? _5946->size(0) : 0);
  int _5948 = (int)0;
  int _5949 = (int)0;
  int _5950 = (int)((_5945)->size(0));
  if ((_5950 > (int)((_5946)->size(0))))
  {
    {
      _5950 = (int)((_5946)->size(0));
    }
  }
  {}
  int _9665 = (int)0;
  int _9666 = _5950;
  for (int _5951 = _9665; _5951 < _9666; ++_5951)
  {
    {
      if ((_5949 < _ptr__5945[_5951]))
      {
        {
          _5949 = _ptr__5945[_5951];
        }
      }
      {}
      if ((_5948 < _ptr__5946[_5951]))
      {
        {
          _5948 = _ptr__5946[_5951];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _5949,(int)1 ),safe_add( _5948,(int)1 ),_5945,_5946,_5947);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _5952,    std::shared_ptr< monty::ndarray< int,1 > > _5953,    std::shared_ptr< monty::ndarray< double,1 > > _5954) { return mosek::fusion::p_Matrix::sparse(_5952,_5953,_5954); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _5952,std::shared_ptr< monty::ndarray< int,1 > > _5953,std::shared_ptr< monty::ndarray< double,1 > > _5954){
  _checked_ptr_1<int> _ptr__5952(_5952 ? _5952->raw() : nullptr, _5952 ? _5952->size(0) : 0);
  _checked_ptr_1<int> _ptr__5953(_5953 ? _5953->raw() : nullptr, _5953 ? _5953->size(0) : 0);
  _checked_ptr_1<double> _ptr__5954(_5954 ? _5954->raw() : nullptr, _5954 ? _5954->size(0) : 0);
  int _5955 = (int)0;
  int _5956 = (int)0;
  int _5957 = (int)((_5952)->size(0));
  if ((_5957 > (int)((_5953)->size(0))))
  {
    {
      _5957 = (int)((_5953)->size(0));
    }
  }
  {}
  if ((_5957 > (int)((_5954)->size(0))))
  {
    {
      _5957 = (int)((_5954)->size(0));
    }
  }
  {}
  int _9667 = (int)0;
  int _9668 = _5957;
  for (int _5958 = _9667; _5958 < _9668; ++_5958)
  {
    {
      if ((_5956 < _ptr__5952[_5958]))
      {
        {
          _5956 = _ptr__5952[_5958];
        }
      }
      {}
      if ((_5955 < _ptr__5953[_5958]))
      {
        {
          _5955 = _ptr__5953[_5958];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _5956,(int)1 ),safe_add( _5955,(int)1 ),_5952,_5953,_5954);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _5959,    int _5960,    std::shared_ptr< monty::ndarray< int,1 > > _5961,    std::shared_ptr< monty::ndarray< int,1 > > _5962,    std::shared_ptr< monty::ndarray< double,1 > > _5963) { return mosek::fusion::p_Matrix::sparse(_5959,_5960,_5961,_5962,_5963); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _5959,int _5960,std::shared_ptr< monty::ndarray< int,1 > > _5961,std::shared_ptr< monty::ndarray< int,1 > > _5962,std::shared_ptr< monty::ndarray< double,1 > > _5963){
  _checked_ptr_1<int> _ptr__5961(_5961 ? _5961->raw() : nullptr, _5961 ? _5961->size(0) : 0);
  _checked_ptr_1<int> _ptr__5962(_5962 ? _5962->raw() : nullptr, _5962 ? _5962->size(0) : 0);
  _checked_ptr_1<double> _ptr__5963(_5963 ? _5963->raw() : nullptr, _5963 ? _5963->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _9669;
  bool _9670 = (NULL != _5963.get());
  if (_9670)
  {
    _9669 = _5963;
  }
  else
  {
    _9669 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _5964 = _9669;
  _checked_ptr_1<double> _ptr__5964(_5964 ? _5964->raw() : nullptr,_5964 ? _5964->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9671;
  bool _9672 = (NULL != _5962.get());
  if (_9672)
  {
    _9671 = _5962;
  }
  else
  {
    _9671 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5965 = _9671;
  _checked_ptr_1<int> _ptr__5965(_5965 ? _5965->raw() : nullptr,_5965 ? _5965->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _9673;
  bool _9674 = (NULL != _5961.get());
  if (_9674)
  {
    _9673 = _5961;
  }
  else
  {
    _9673 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _5966 = _9673;
  _checked_ptr_1<int> _ptr__5966(_5966 ? _5966->raw() : nullptr,_5966 ? _5966->size(0) : 0);
  long long _5967 = (long long)((_5966)->size(0));
  if ((((long long)((_5965)->size(0)) != _5967) || ((long long)((_5964)->size(0)) != _5967)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_5959,_5960,_5966,_5965,_5964,_5967)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
int mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns(){
  return dimj;
}
int mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows(){
  return dimi;
}
void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _5973) : RuntimeException(_5973)  {
  }
mosek::fusion::FatalError::FatalError  ( const std::string &  _5974) : RuntimeException(_5974)  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _5975) : RuntimeException(_5975.toString())  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _5976) : RuntimeException(_5976)  {
  }
mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _5977) : mosek::fusion::FusionRuntimeException(_5977)  {
  }
mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))  {
  }
mosek::fusion::SolutionError::SolutionError  ( const std::string &  _5978) : mosek::fusion::FusionException(_5978)  {
  }
mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))  {
  }
mosek::fusion::SliceError::SliceError  ( const std::string &  _5979) : mosek::fusion::FusionRuntimeException(_5979)  {
  }
mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _5980) : mosek::fusion::FusionRuntimeException(_5980)  {
  }
mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _5981) : mosek::fusion::FusionRuntimeException(_5981)  {
  }
mosek::fusion::NameError::NameError  ( const std::string &  _5982) : mosek::fusion::FusionRuntimeException(_5982)  {
  }
mosek::fusion::ModelError::ModelError  ( const std::string &  _5983) : mosek::fusion::FusionRuntimeException(_5983)  {
  }
mosek::fusion::MatrixError::MatrixError  ( const std::string &  _5984) : mosek::fusion::FusionRuntimeException(_5984)  {
  }
mosek::fusion::DimensionError::DimensionError  ( const std::string &  _5985) : mosek::fusion::FusionRuntimeException(_5985)  {
  }
mosek::fusion::LengthError::LengthError  ( const std::string &  _5986) : mosek::fusion::FusionRuntimeException(_5986)  {
  }
mosek::fusion::RangeError::RangeError  ( const std::string &  _5987) : mosek::fusion::FusionRuntimeException(_5987)  {
  }
mosek::fusion::IndexError::IndexError  ( const std::string &  _5988) : mosek::fusion::FusionRuntimeException(_5988)  {
  }
mosek::fusion::DomainError::DomainError  ( const std::string &  _5989) : mosek::fusion::FusionRuntimeException(_5989)  {
  }
mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _5990) : mosek::fusion::FusionRuntimeException(_5990)  {
  }
mosek::fusion::ParameterError::ParameterError  ( const std::string &  _5991) : mosek::fusion::FusionRuntimeException(_5991)  {
  }
mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _5992) : mosek::fusion::FusionRuntimeException(_5992)  {
  }
mosek::fusion::IOError::IOError  ( const std::string &  _5993) : mosek::fusion::FusionRuntimeException(_5993)  {
  }
mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _5994) : RuntimeException(_5994)  {
    msg = _5994;
  }
std::string mosek::fusion::FusionRuntimeException::toString(){
  return msg;
}
mosek::fusion::FusionException::FusionException  ( const std::string &  _5995) : Exception(_5995)  {
    msg = _5995;
  }
std::string mosek::fusion::FusionException::toString(){
  return msg;
}
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedBlocks::p_LinkedBlocks  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (){ return new mosek::fusion::LinkedBlocks(); }mosek::fusion::LinkedBlocks::LinkedBlocks  () :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedBlocks::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (int _5996){ return new mosek::fusion::LinkedBlocks(_5996); }mosek::fusion::LinkedBlocks::LinkedBlocks  (int _5996) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_5996); }void mosek::fusion::p_LinkedBlocks::_initialize  (int _5996){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_5996);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _5997){ return new mosek::fusion::LinkedBlocks(_5997); }mosek::fusion::LinkedBlocks::LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _5997) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_5997); }void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _5997){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_5997)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_5997)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_5997)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_5997)->bfirst);
  }
}void mosek::fusion::LinkedBlocks :: free(int _5998) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_5998); }void mosek::fusion::p_LinkedBlocks::free(int _5998){
  int _5999 = ((*bfirst)(_5998));
  ints->free(_5998,((*bsize)(_5998)));
  ((*bsize)(_5998)) = (-(int)1);
  ((*bfirst)(_5998)) = (-(int)1);
  blocks->free(_5999,(int)1);
}
int mosek::fusion::LinkedBlocks :: alloc(int _6000) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_6000); }int mosek::fusion::p_LinkedBlocks::alloc(int _6000){
  int _9675;
  bool _9676 = (_6000 > (int)0);
  if (_9676)
  {
    _9675 = ints->alloc(_6000);
  }
  else
  {
    _9675 = (-(int)1);
  }
  int _6001 = _9675;
  int _6002 = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _6003 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__6003(_6003 ? _6003->raw() : nullptr,_6003 ? _6003->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6004 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__6004(_6004 ? _6004->raw() : nullptr,_6004 ? _6004->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_6003,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_6004,(int)0,(int)((bfirst)->size(0)));
      bsize = _6003;
      bfirst = _6004;
    }
  }
  {}
  ((*bfirst)(_6002)) = _6001;
  ((*bsize)(_6002)) = _6000;
  return _6002;
}
int mosek::fusion::LinkedBlocks :: maxidx(int _6005) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_6005); }int mosek::fusion::p_LinkedBlocks::maxidx(int _6005){
  return ints->maxidx(((*bfirst)(_6005)),((*bsize)(_6005)));
}
void mosek::fusion::LinkedBlocks :: get(int _6006,std::shared_ptr< monty::ndarray< int,1 > > _6007,int _6008) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_6006,_6007,_6008); }void mosek::fusion::p_LinkedBlocks::get(int _6006,std::shared_ptr< monty::ndarray< int,1 > > _6007,int _6008){
  _checked_ptr_1<int> _ptr__6007(_6007 ? _6007->raw() : nullptr, _6007 ? _6007->size(0) : 0);
  ints->get(((*bfirst)(_6006)),((*bsize)(_6006)),_6007,_6008);
}
int mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }int mosek::fusion::p_LinkedBlocks::numblocks(){
  return (int)((bsize)->size(0));
}
int mosek::fusion::LinkedBlocks :: blocksize(int _6009) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_6009); }int mosek::fusion::p_LinkedBlocks::blocksize(int _6009){
  return ((*bsize)(_6009));
}
int mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedBlocks::capacity(){
  return ints->capacity();
}
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedBlocks::validate(){
  return (ints->validate() && blocks->validate());
}
void mosek::fusion::p_LinkedBlocks::destroy(){bfirst.reset();bsize.reset();blocks.reset();ints.reset();}void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedInts::p_LinkedInts  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (int _6010){ return new mosek::fusion::LinkedInts(_6010); }mosek::fusion::LinkedInts::LinkedInts  (int _6010) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_6010); }void mosek::fusion::p_LinkedInts::_initialize  (int _6010){monty::rc_reserve __reserve_this(_pubthis);   {
    int _9677;
    bool _9678 = (_6010 > (int)0);
    if (_9678)
    {
      _9677 = _6010;
    }
    else
    {
      _9677 = (int)128;
    }
    int _6011 = _9677;
    next = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6011)));
    prev = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6011)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_6011 - (int)1);
    int _9679 = (int)1;
    int _9680 = _6011;
    for (int _6012 = _9679; _6012 < _9680; ++_6012)
    {
      {
        ((*prev)(_6012)) = (_6012 - (int)1);
        ((*next)((_6012 - (int)1))) = _6012;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_6011 - (int)1))) = (-(int)1);
    nfree = _6011;
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (){ return new mosek::fusion::LinkedInts(); }mosek::fusion::LinkedInts::LinkedInts  () :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedInts::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6013){ return new mosek::fusion::LinkedInts(_6013); }mosek::fusion::LinkedInts::LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6013) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_6013); }void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _6013){monty::rc_reserve __reserve_this(_pubthis);   {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_6013)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_6013)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_6013)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_6013)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_6013)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_6013)->nfree;
  }
}void mosek::fusion::LinkedInts :: free(int _6014,int _6015) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_6014,_6015); }void mosek::fusion::p_LinkedInts::free(int _6014,int _6015){
  int _6016 = _6014;
  int _6017 = _6016;
  int _9681 = (int)0;
  int _9682 = (_6015 - (int)1);
  for (int _6018 = _9681; _6018 < _9682; ++_6018)
  {
    {
      _6017 = ((*next)(_6017));
    }
  }
  int _6019 = ((*prev)(_6016));
  int _6020 = ((*next)(_6017));
  if ((_6019 >= (int)0))
  {
    {
      ((*next)(_6019)) = _6020;
    }
  }
  {}
  if ((_6020 >= (int)0))
  {
    {
      ((*prev)(_6020)) = _6019;
    }
  }
  {}
  ((*prev)(_6016)) = (-(int)1);
  ((*next)(_6017)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _6017;
    }
  }
  {}
  first_free = _6016;
  nfree += _6015;
}
int mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }int mosek::fusion::p_LinkedInts::alloc(){
  return allocblock((int)1);
}
int mosek::fusion::LinkedInts :: alloc(int _6021) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_6021); }int mosek::fusion::p_LinkedInts::alloc(int _6021){
  return allocblock(_6021);
}
void mosek::fusion::LinkedInts :: alloc(int _6022,std::shared_ptr< monty::ndarray< int,1 > > _6023,int _6024) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_6022,_6023,_6024); }void mosek::fusion::p_LinkedInts::alloc(int _6022,std::shared_ptr< monty::ndarray< int,1 > > _6023,int _6024){
  _checked_ptr_1<int> _ptr__6023(_6023 ? _6023->raw() : nullptr, _6023 ? _6023->size(0) : 0);
  int _6025 = allocblock(_6022);
  int _9683 = (int)0;
  int _9684 = _6022;
  for (int _6026 = _9683; _6026 < _9684; ++_6026)
  {
    {
      _ptr__6023[safe_add( _6026,_6024 )] = _6025;
      _6025 = ((*next)(_6025));
    }
  }
}
void mosek::fusion::LinkedInts :: get(int _6027,int _6028,std::shared_ptr< monty::ndarray< int,1 > > _6029,int _6030) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_6027,_6028,_6029,_6030); }void mosek::fusion::p_LinkedInts::get(int _6027,int _6028,std::shared_ptr< monty::ndarray< int,1 > > _6029,int _6030){
  _checked_ptr_1<int> _ptr__6029(_6029 ? _6029->raw() : nullptr, _6029 ? _6029->size(0) : 0);
  int _6031 = _6027;
  int _9685 = (int)0;
  int _9686 = _6028;
  for (int _6032 = _9685; _6032 < _9686; ++_6032)
  {
    {
      _ptr__6029[safe_add( _6032,_6030 )] = _6031;
      _6031 = ((*next)(_6031));
    }
  }
}
int mosek::fusion::LinkedInts :: maxidx(int _6033,int _6034) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_6033,_6034); }int mosek::fusion::p_LinkedInts::maxidx(int _6033,int _6034){
  int _6035 = _6033;
  int _6036 = _6033;
  int _9687 = (int)1;
  int _9688 = _6034;
  for (int _6037 = _9687; _6037 < _9688; ++_6037)
  {
    {
      _6036 = ((*next)(_6036));
      if ((_6035 < _6036))
      {
        {
          _6035 = _6036;
        }
      }
      {}
    }
  }
  return _6035;
}
int mosek::fusion::p_LinkedInts::allocblock(int _6038){
  int _6039 = (int)((next)->size(0));
  if ((nfree < _6038))
  {
    {
      int _6040 = (_6038 - nfree);
      if ((_6040 < _6039))
      {
        {
          _6040 = _6039;
        }
      }
      {}
      recap(safe_add( _6040,_6039 ));
    }
  }
  {}
  int _6041 = first_free;
  int _6042 = _6041;
  int _9689 = (int)0;
  int _9690 = (_6038 - (int)1);
  for (int _6043 = _9689; _6043 < _9690; ++_6043)
  {
    {
      _6042 = ((*next)(_6042));
    }
  }
  first_free = ((*next)(_6042));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_6042)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _6042;
    }
  }
  {}
  first_used = _6041;
  nfree -= _6038;
  return _6041;
}
void mosek::fusion::p_LinkedInts::recap(int _6044){
  int _6045 = (int)((next)->size(0));
  if ((_6044 > _6045))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_6044);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_6044);
      int _9691 = _6045;
      int _9692 = (_6044 - (int)1);
      for (int _6046 = _9691; _6046 < _9692; ++_6046)
      {
        {
          ((*next)(_6046)) = safe_add( _6046,(int)1 );
          ((*prev)(safe_add( _6046,(int)1 ))) = _6046;
        }
      }
      ((*next)((_6044 - (int)1))) = (-(int)1);
      ((*prev)(_6045)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _6045;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _6045;
        }
      }
      last_free = (_6044 - (int)1);
      nfree += (_6044 - _6045);
    }
  }
  {}
}
int mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedInts::capacity(){
  return (int)((next)->size(0));
}
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedInts::validate(){
  std::shared_ptr< monty::ndarray< bool,1 > > _6047 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int _6048 = first_used;
  while ( (_6048 >= (int)0) )
  {
    {
      ((*_6047)(_6048)) = true;
      _6048 = ((*next)(_6048));
      if (((_6048 >= (int)0) && ((*_6047)(_6048))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _6048 = first_free;
  int _6049 = (int)0;
  while ( (_6048 >= (int)0) )
  {
    {
      ++ _6049;
      ((*_6047)(_6048)) = true;
      _6048 = ((*next)(_6048));
      if (((_6048 >= (int)0) && ((*_6047)(_6048))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_6049 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int _9693 = (int)0;
  int _9694 = (int)((_6047)->size(0));
  for (int _6050 = _9693; _6050 < _9694; ++_6050)
  {
    {
      if ((!((*_6047)(_6048))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int _9695 = (int)0;
  int _9696 = (int)((_6047)->size(0));
  for (int _6051 = _9695; _6051 < _9696; ++_6051)
  {
    {
      ((*_6047)(_6051)) = false;
    }
  }
  _6048 = last_free;
  int _6052 = (int)0;
  while ( (_6048 >= (int)0) )
  {
    {
      ++ _6052;
      ((*_6047)(_6048)) = true;
      _6048 = ((*prev)(_6048));
      if (((_6048 >= (int)0) && ((*_6047)(_6048))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_6052 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinkedInts::destroy(){prev.reset();next.reset();}void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6053,    const std::string & _6054,    double _6055) { mosek::fusion::p_Parameters::setParameter(_6053,_6054,_6055); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6053,const std::string & _6054,double _6055){
  if (false)
  {
    {
    }
  }
  else if((_6054 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_6054 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_6054 == std::string ("numThreads")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6056 = _6055;
          if (((int)0 <= _6056))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6056);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_6054 == std::string ("mtSpincount")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6057 = _6055;
          if ((((int)0 <= _6057) && (_6057 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6057);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_6054 == std::string ("biMaxIterations")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6058 = _6055;
          if (((int)0 <= _6058))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6058);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6059 = _6055;
          if (((int)0 <= _6059))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6059);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logCutSecondOpt")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6060 = _6055;
          if (((int)0 <= _6060))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6060);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logResponse")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6061 = _6055;
          if (((int)0 <= _6061))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6061);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_6054 == std::string ("logBi")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6062 = _6055;
          if (((int)0 <= _6062))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6062);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logBiFreq")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6063 = _6055;
          if (((int)0 <= _6063))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6063);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_6054 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_6054 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_6054 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_6054 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_6054 == std::string ("logIntpnt")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6064 = _6055;
          if (((int)0 <= _6064))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6064);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntMaxIterations")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6065 = _6055;
          if (((int)0 <= _6065))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6065);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntOffColTrh")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6066 = _6055;
          if (((int)0 <= _6066))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6066);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_6054 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6067 = _6055;
          if (((int)0 <= _6067))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6067);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_6054 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_6054 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_6054 == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6068 = _6055;
          if (((-(int)1) <= _6068))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6068);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_6054 == std::string ("presolveLevel")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6069 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6069);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logPresolve")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6070 = _6055;
          if (((int)0 <= _6070))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6070);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_6054 == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6071 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6071);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6072 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6072);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6073 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6073);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("simPrimalCrash")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6074 = _6055;
          if (((int)0 <= _6074))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6074);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logSim")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6075 = _6055;
          if (((int)0 <= _6075))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6075);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logSimMinor")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6076 = _6055;
          if (((int)0 <= _6076))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6076);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logSimFreq")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6077 = _6055;
          if (((int)0 <= _6077))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6077);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6078 = _6055;
          if ((((int)0 <= _6078) && (_6078 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6078);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_6054 == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6079 = _6055;
          if ((((int)0 <= _6079) && (_6079 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6079);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_6054 == std::string ("simMaxIterations")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6080 = _6055;
          if (((int)0 <= _6080))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6080);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_6054 == std::string ("simRefactorFreq")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6081 = _6055;
          if (((int)0 <= _6081))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6081);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("simSeed")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6082 = _6055;
          if ((((int)0 <= _6082) && (_6082 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6082);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_6054 == std::string ("logMio")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6083 = _6055;
          if (((int)0 <= _6083))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6083);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logMioFreq")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6084 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6084);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6085 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6085);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6086 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6086);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6087 = _6055;
          if (((int)0 <= _6087))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6087);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6088 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6088);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_6054 == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6089 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6089);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioProbingLevel")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6090 = _6055;
          if ((((-(int)1) <= _6090) && (_6090 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6090);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6091 = _6055;
          if ((((-(int)1) <= _6091) && (_6091 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6091);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6092 = _6055;
          if ((((-(int)1) <= _6092) && (_6092 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6092);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_6054 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_6054 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_6054 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_6054 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_6054 == std::string ("mioSeed")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6093 = _6055;
          if (((int)0 <= _6093))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6093);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_6054 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_6054 == std::string ("writeLpLineWidth")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6094 = _6055;
          if (((int)40 <= _6094))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6094);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("writeLpTermsPerLine")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6095 = _6055;
          if (((int)0 <= _6095))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6095);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_6054 == std::string ("logInfeasAna")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6096 = _6055;
          if (((int)0 <= _6096))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6096);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_6054 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_6054 == std::string ("licensePauseTime")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6097 = _6055;
          if ((((int)0 <= _6097) && (_6097 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6097);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_6054 == std::string ("log")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6098 = _6055;
          if (((int)0 <= _6098))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6098);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logExpand")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6099 = _6055;
          if (((int)0 <= _6099))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6099);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logFile")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6100 = _6055;
          if (((int)0 <= _6100))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6100);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("logOrder")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6101 = _6055;
          if (((int)0 <= _6101))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6101);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_6054 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_6054 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6102 = _6055;
          if ((((int)0 <= _6102) && (_6102 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6102);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6103 = _6055;
          if ((((int)0 <= _6103) && (_6103 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6103);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6104 = _6055;
          if (((int)0 <= _6104))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6104);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_6054 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_6054 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_6054 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_6054 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_6054 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_6054 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_6054 == std::string ("simDualCrash")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6105 = _6055;
          if (((int)0 <= _6105))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6105);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_6054 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6106 = _6055;
          if ((((-(int)1) <= _6106) && (_6106 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6106);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_6054 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_6054 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_6054 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_6054 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_6054 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6107 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6107);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6108 = _6055;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6108);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_6054 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_6054 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_6054 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_6054 == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6109 = _6055;
          if (((-(int)1) <= _6109))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6109);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_6055 - (int)_6055) == 0.0))
      {
        {
          double _6110 = _6055;
          if ((((-(int)1) <= _6110) && (_6110 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6110);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("optimizerMaxTime")))
  {
    {
      double _6111 = _6055;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6111);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("lowerObjCut")))
  {
    {
      double _6112 = _6055;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6112);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("upperObjCut")))
  {
    {
      double _6113 = _6055;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6113);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _6114 = _6055;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6114);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _6115 = _6055;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6115);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolRelGap")))
  {
    {
      double _6116 = _6055;
      if ((1.000000e-14 <= _6116))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6116);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolStepSize")))
  {
    {
      double _6117 = _6055;
      if (((0.000000e+00 <= _6117) && (_6117 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6117);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("simLuTolRelPiv")))
  {
    {
      double _6118 = _6055;
      if (((1.000000e-06 <= _6118) && (_6118 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6118);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolRelStep")))
  {
    {
      double _6119 = _6055;
      if (((1.000000e-04 <= _6119) && (_6119 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6119);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolPath")))
  {
    {
      double _6120 = _6055;
      if (((0.000000e+00 <= _6120) && (_6120 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6120);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolPfeas")))
  {
    {
      double _6121 = _6055;
      if (((0.000000e+00 <= _6121) && (_6121 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6121);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolDfeas")))
  {
    {
      double _6122 = _6055;
      if (((0.000000e+00 <= _6122) && (_6122 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6122);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolMuRed")))
  {
    {
      double _6123 = _6055;
      if (((0.000000e+00 <= _6123) && (_6123 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6123);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolInfeas")))
  {
    {
      double _6124 = _6055;
      if (((0.000000e+00 <= _6124) && (_6124 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6124);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _6125 = _6055;
      if (((0.000000e+00 <= _6125) && (_6125 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6125);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _6126 = _6055;
      if (((0.000000e+00 <= _6126) && (_6126 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6126);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _6127 = _6055;
      if (((0.000000e+00 <= _6127) && (_6127 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6127);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _6128 = _6055;
      if (((0.000000e+00 <= _6128) && (_6128 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6128);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _6129 = _6055;
      if ((1.000000e+00 <= _6129))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6129);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _6130 = _6055;
      if (((0.000000e+00 <= _6130) && (_6130 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6130);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolPsafe")))
  {
    {
      double _6131 = _6055;
      if ((1.000000e-04 <= _6131))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6131);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("intpntTolDsafe")))
  {
    {
      double _6132 = _6055;
      if ((1.000000e-04 <= _6132))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6132);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioMaxTime")))
  {
    {
      double _6133 = _6055;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6133);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioRelGapConst")))
  {
    {
      double _6134 = _6055;
      if ((1.000000e-15 <= _6134))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6134);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioTolRelGap")))
  {
    {
      double _6135 = _6055;
      if ((0.000000e+00 <= _6135))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6135);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioTolAbsGap")))
  {
    {
      double _6136 = _6055;
      if ((0.000000e+00 <= _6136))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6136);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _6137 = _6055;
      if ((1.000000e-09 <= _6137))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6137);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("basisTolX")))
  {
    {
      double _6138 = _6055;
      if ((1.000000e-09 <= _6138))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6138);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("basisTolS")))
  {
    {
      double _6139 = _6055;
      if ((1.000000e-09 <= _6139))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6139);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("basisRelTolS")))
  {
    {
      double _6140 = _6055;
      if ((0.000000e+00 <= _6140))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6140);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("presolveTolX")))
  {
    {
      double _6141 = _6055;
      if ((0.000000e+00 <= _6141))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6141);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("presolveTolS")))
  {
    {
      double _6142 = _6055;
      if ((0.000000e+00 <= _6142))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6142);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("presolveTolAij")))
  {
    {
      double _6143 = _6055;
      if ((1.000000e-15 <= _6143))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6143);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _6144 = _6055;
      if ((0.000000e+00 <= _6144))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6144);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("presolveTolRelLindep")))
  {
    {
      double _6145 = _6055;
      if ((0.000000e+00 <= _6145))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6145);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _6146 = _6055;
      if ((1.000000e-12 <= _6146))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6146);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioTolFeas")))
  {
    {
      double _6147 = _6055;
      if (((1.000000e-09 <= _6147) && (_6147 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6147);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6054 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _6148 = _6055;
      if (((0.000000e+00 <= _6148) && (_6148 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6053.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6148);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_6054 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_6054 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_6054 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_6054 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_6054 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_6054 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6149,    const std::string & _6150,    int _6151) { mosek::fusion::p_Parameters::setParameter(_6149,_6150,_6151); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6149,const std::string & _6150,int _6151){
  if (false)
  {
    {
    }
  }
  else if((_6150 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_6150 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_6150 == std::string ("numThreads")))
  {
    {
      int _6152 = _6151;
      if (((int)0 <= _6152))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6152);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_6150 == std::string ("mtSpincount")))
  {
    {
      int _6153 = _6151;
      if ((((int)0 <= _6153) && (_6153 <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6153);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_6150 == std::string ("biMaxIterations")))
  {
    {
      int _6154 = _6151;
      if (((int)0 <= _6154))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6154);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int _6155 = _6151;
      if (((int)0 <= _6155))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6155);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logCutSecondOpt")))
  {
    {
      int _6156 = _6151;
      if (((int)0 <= _6156))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6156);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logResponse")))
  {
    {
      int _6157 = _6151;
      if (((int)0 <= _6157))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6157);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_6150 == std::string ("logBi")))
  {
    {
      int _6158 = _6151;
      if (((int)0 <= _6158))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6158);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logBiFreq")))
  {
    {
      int _6159 = _6151;
      if (((int)0 <= _6159))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6159);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_6150 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_6150 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_6150 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_6150 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_6150 == std::string ("logIntpnt")))
  {
    {
      int _6160 = _6151;
      if (((int)0 <= _6160))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6160);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntMaxIterations")))
  {
    {
      int _6161 = _6151;
      if (((int)0 <= _6161))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6161);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntOffColTrh")))
  {
    {
      int _6162 = _6151;
      if (((int)0 <= _6162))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6162);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_6150 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int _6163 = _6151;
      if (((int)0 <= _6163))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6163);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_6150 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_6150 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_6150 == std::string ("intpntMaxNumCor")))
  {
    {
      int _6164 = _6151;
      if (((-(int)1) <= _6164))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6164);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_6150 == std::string ("presolveLevel")))
  {
    {
      int _6165 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6165);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logPresolve")))
  {
    {
      int _6166 = _6151;
      if (((int)0 <= _6166))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6166);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_6150 == std::string ("presolveMaxNumPass")))
  {
    {
      int _6167 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6167);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int _6168 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6168);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int _6169 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6169);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("simPrimalCrash")))
  {
    {
      int _6170 = _6151;
      if (((int)0 <= _6170))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6170);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logSim")))
  {
    {
      int _6171 = _6151;
      if (((int)0 <= _6171))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6171);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logSimMinor")))
  {
    {
      int _6172 = _6151;
      if (((int)0 <= _6172))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6172);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logSimFreq")))
  {
    {
      int _6173 = _6151;
      if (((int)0 <= _6173))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6173);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("simPrimalRestrictSelection")))
  {
    {
      int _6174 = _6151;
      if ((((int)0 <= _6174) && (_6174 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6174);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_6150 == std::string ("simDualRestrictSelection")))
  {
    {
      int _6175 = _6151;
      if ((((int)0 <= _6175) && (_6175 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6175);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_6150 == std::string ("simMaxIterations")))
  {
    {
      int _6176 = _6151;
      if (((int)0 <= _6176))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6176);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_6150 == std::string ("simRefactorFreq")))
  {
    {
      int _6177 = _6151;
      if (((int)0 <= _6177))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6177);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("simSeed")))
  {
    {
      int _6178 = _6151;
      if ((((int)0 <= _6178) && (_6178 <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6178);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_6150 == std::string ("logMio")))
  {
    {
      int _6179 = _6151;
      if (((int)0 <= _6179))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6179);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logMioFreq")))
  {
    {
      int _6180 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6180);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioMaxNumRelaxs")))
  {
    {
      int _6181 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6181);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioMaxNumBranches")))
  {
    {
      int _6182 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6182);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int _6183 = _6151;
      if (((int)0 <= _6183))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6183);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioMaxNumSolutions")))
  {
    {
      int _6184 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6184);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_6150 == std::string ("mioHeuristicLevel")))
  {
    {
      int _6185 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6185);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioProbingLevel")))
  {
    {
      int _6186 = _6151;
      if ((((-(int)1) <= _6186) && (_6186 <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6186);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioCutSelectionLevel")))
  {
    {
      int _6187 = _6151;
      if ((((-(int)1) <= _6187) && (_6187 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6187);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioVbDetectionLevel")))
  {
    {
      int _6188 = _6151;
      if ((((-(int)1) <= _6188) && (_6188 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6188);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_6150 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_6150 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_6150 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_6150 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_6150 == std::string ("mioSeed")))
  {
    {
      int _6189 = _6151;
      if (((int)0 <= _6189))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6189);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_6150 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_6150 == std::string ("writeLpLineWidth")))
  {
    {
      int _6190 = _6151;
      if (((int)40 <= _6190))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6190);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("writeLpTermsPerLine")))
  {
    {
      int _6191 = _6151;
      if (((int)0 <= _6191))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6191);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_6150 == std::string ("logInfeasAna")))
  {
    {
      int _6192 = _6151;
      if (((int)0 <= _6192))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6192);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_6150 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_6150 == std::string ("licensePauseTime")))
  {
    {
      int _6193 = _6151;
      if ((((int)0 <= _6193) && (_6193 <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6193);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_6150 == std::string ("log")))
  {
    {
      int _6194 = _6151;
      if (((int)0 <= _6194))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6194);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logExpand")))
  {
    {
      int _6195 = _6151;
      if (((int)0 <= _6195))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6195);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logFile")))
  {
    {
      int _6196 = _6151;
      if (((int)0 <= _6196))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6196);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("logOrder")))
  {
    {
      int _6197 = _6151;
      if (((int)0 <= _6197))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6197);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_6150 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_6150 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int _6198 = _6151;
      if ((((int)0 <= _6198) && (_6198 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6198);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("simDualPhaseoneMethod")))
  {
    {
      int _6199 = _6151;
      if ((((int)0 <= _6199) && (_6199 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6199);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("simMaxNumSetbacks")))
  {
    {
      int _6200 = _6151;
      if (((int)0 <= _6200))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6200);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_6150 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_6150 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_6150 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_6150 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_6150 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_6150 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_6150 == std::string ("simDualCrash")))
  {
    {
      int _6201 = _6151;
      if (((int)0 <= _6201))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6201);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_6150 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int _6202 = _6151;
      if ((((-(int)1) <= _6202) && (_6202 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6202);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_6150 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_6150 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_6150 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_6150 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_6150 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int _6203 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6203);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int _6204 = _6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6204);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_6150 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_6150 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_6150 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_6150 == std::string ("mioRinsMaxNodes")))
  {
    {
      int _6205 = _6151;
      if (((-(int)1) <= _6205))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6205);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioFeaspumpLevel")))
  {
    {
      int _6206 = _6151;
      if ((((-(int)1) <= _6206) && (_6206 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6206);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("optimizerMaxTime")))
  {
    {
      double _6207 = (double)_6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6207);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("lowerObjCut")))
  {
    {
      double _6208 = (double)_6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6208);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("upperObjCut")))
  {
    {
      double _6209 = (double)_6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6209);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _6210 = (double)_6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6210);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _6211 = (double)_6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6211);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolRelGap")))
  {
    {
      double _6212 = (double)_6151;
      if ((1.000000e-14 <= _6212))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6212);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolStepSize")))
  {
    {
      double _6213 = (double)_6151;
      if (((0.000000e+00 <= _6213) && (_6213 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6213);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("simLuTolRelPiv")))
  {
    {
      double _6214 = (double)_6151;
      if (((1.000000e-06 <= _6214) && (_6214 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6214);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolRelStep")))
  {
    {
      double _6215 = (double)_6151;
      if (((1.000000e-04 <= _6215) && (_6215 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6215);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolPath")))
  {
    {
      double _6216 = (double)_6151;
      if (((0.000000e+00 <= _6216) && (_6216 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6216);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolPfeas")))
  {
    {
      double _6217 = (double)_6151;
      if (((0.000000e+00 <= _6217) && (_6217 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6217);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolDfeas")))
  {
    {
      double _6218 = (double)_6151;
      if (((0.000000e+00 <= _6218) && (_6218 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6218);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolMuRed")))
  {
    {
      double _6219 = (double)_6151;
      if (((0.000000e+00 <= _6219) && (_6219 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6219);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolInfeas")))
  {
    {
      double _6220 = (double)_6151;
      if (((0.000000e+00 <= _6220) && (_6220 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6220);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _6221 = (double)_6151;
      if (((0.000000e+00 <= _6221) && (_6221 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6221);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _6222 = (double)_6151;
      if (((0.000000e+00 <= _6222) && (_6222 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6222);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _6223 = (double)_6151;
      if (((0.000000e+00 <= _6223) && (_6223 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6223);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _6224 = (double)_6151;
      if (((0.000000e+00 <= _6224) && (_6224 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6224);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _6225 = (double)_6151;
      if ((1.000000e+00 <= _6225))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6225);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _6226 = (double)_6151;
      if (((0.000000e+00 <= _6226) && (_6226 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6226);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolPsafe")))
  {
    {
      double _6227 = (double)_6151;
      if ((1.000000e-04 <= _6227))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6227);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("intpntTolDsafe")))
  {
    {
      double _6228 = (double)_6151;
      if ((1.000000e-04 <= _6228))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6228);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioMaxTime")))
  {
    {
      double _6229 = (double)_6151;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6229);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioRelGapConst")))
  {
    {
      double _6230 = (double)_6151;
      if ((1.000000e-15 <= _6230))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6230);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioTolRelGap")))
  {
    {
      double _6231 = (double)_6151;
      if ((0.000000e+00 <= _6231))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6231);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioTolAbsGap")))
  {
    {
      double _6232 = (double)_6151;
      if ((0.000000e+00 <= _6232))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6232);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _6233 = (double)_6151;
      if ((1.000000e-09 <= _6233))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6233);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("basisTolX")))
  {
    {
      double _6234 = (double)_6151;
      if ((1.000000e-09 <= _6234))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6234);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("basisTolS")))
  {
    {
      double _6235 = (double)_6151;
      if ((1.000000e-09 <= _6235))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6235);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("basisRelTolS")))
  {
    {
      double _6236 = (double)_6151;
      if ((0.000000e+00 <= _6236))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6236);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("presolveTolX")))
  {
    {
      double _6237 = (double)_6151;
      if ((0.000000e+00 <= _6237))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6237);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("presolveTolS")))
  {
    {
      double _6238 = (double)_6151;
      if ((0.000000e+00 <= _6238))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6238);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("presolveTolAij")))
  {
    {
      double _6239 = (double)_6151;
      if ((1.000000e-15 <= _6239))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6239);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _6240 = (double)_6151;
      if ((0.000000e+00 <= _6240))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6240);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("presolveTolRelLindep")))
  {
    {
      double _6241 = (double)_6151;
      if ((0.000000e+00 <= _6241))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6241);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _6242 = (double)_6151;
      if ((1.000000e-12 <= _6242))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6242);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioTolFeas")))
  {
    {
      double _6243 = (double)_6151;
      if (((1.000000e-09 <= _6243) && (_6243 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6243);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6150 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _6244 = (double)_6151;
      if (((0.000000e+00 <= _6244) && (_6244 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_6149.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6244);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_6150 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_6150 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_6150 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_6150 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_6150 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_6150 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6245,    const std::string & _6246,    const std::string & _6247) { mosek::fusion::p_Parameters::setParameter(_6245,_6246,_6247); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _6245,const std::string & _6246,const std::string & _6247){
  if (false)
  {
    {
    }
  }
  {}
  if ((_6246 == std::string ("autoUpdateSolInfo")))
  {
    {
      int _6248 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6248 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_6248);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("removeUnusedSolutions")))
  {
    {
      int _6249 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6249 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_6249);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("numThreads")))
  {
    {
      try
      {
        {
          int _6251 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6251))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6251);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6250)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntMultiThread")))
  {
    {
      int _6252 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6252 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_6252);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mtSpincount")))
  {
    {
      try
      {
        {
          int _6254 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((int)0 <= _6254) && (_6254 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6254);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6253)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("optimizer")))
  {
    {
      int _6255 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6247);
      if ((_6255 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_6255);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("biMaxIterations")))
  {
    {
      try
      {
        {
          int _6257 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6257))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6257);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6256)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      try
      {
        {
          int _6259 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6259))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6259);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6258)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logCutSecondOpt")))
  {
    {
      try
      {
        {
          int _6261 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6261))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6261);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6260)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logResponse")))
  {
    {
      try
      {
        {
          int _6263 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6263))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6263);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6262)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logLocalInfo")))
  {
    {
      int _6264 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6264 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_6264);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("logBi")))
  {
    {
      try
      {
        {
          int _6266 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6266))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6266);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6265)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logBiFreq")))
  {
    {
      try
      {
        {
          int _6268 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6268))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6268);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6267)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("biCleanOptimizer")))
  {
    {
      int _6269 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6247);
      if ((_6269 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_6269);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("intpntStartingPoint")))
  {
    {
      int _6270 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_6247);
      if ((_6270 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_6270);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("intpntDiffStep")))
  {
    {
      int _6271 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6271 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_6271);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("intpntScaling")))
  {
    {
      int _6272 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6247);
      if ((_6272 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_6272);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("intpntSolveForm")))
  {
    {
      int _6273 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6247);
      if ((_6273 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_6273);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("logIntpnt")))
  {
    {
      try
      {
        {
          int _6275 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6275))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6275);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6274)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntMaxIterations")))
  {
    {
      try
      {
        {
          int _6277 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6277))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6277);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6276)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntOffColTrh")))
  {
    {
      try
      {
        {
          int _6279 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6279))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6279);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6278)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntOrderMethod")))
  {
    {
      int _6280 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_6247);
      if ((_6280 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_6280);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      try
      {
        {
          int _6282 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6282))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_6282);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6281)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntBasis")))
  {
    {
      int _6283 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_6247);
      if ((_6283 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_6283);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("biIgnoreMaxIter")))
  {
    {
      int _6284 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6284 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_6284);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("biIgnoreNumError")))
  {
    {
      int _6285 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6285 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_6285);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("intpntMaxNumCor")))
  {
    {
      try
      {
        {
          int _6287 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((-(int)1) <= _6287))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6287);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6286)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveUse")))
  {
    {
      int _6288 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_6247);
      if ((_6288 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_6288);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("presolveLevel")))
  {
    {
      try
      {
        {
          int _6290 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6290);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6289)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logPresolve")))
  {
    {
      try
      {
        {
          int _6292 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6292))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6292);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6291)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveLindepUse")))
  {
    {
      int _6293 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6293 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_6293);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("presolveMaxNumPass")))
  {
    {
      try
      {
        {
          int _6295 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_6295);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6294)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      try
      {
        {
          int _6297 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6297);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6296)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      try
      {
        {
          int _6299 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6299);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6298)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simPrimalCrash")))
  {
    {
      try
      {
        {
          int _6301 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6301))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6301);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6300)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logSim")))
  {
    {
      try
      {
        {
          int _6303 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6303))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6303);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6302)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logSimMinor")))
  {
    {
      try
      {
        {
          int _6305 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6305))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6305);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6304)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logSimFreq")))
  {
    {
      try
      {
        {
          int _6307 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6307))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6307);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6306)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simPrimalRestrictSelection")))
  {
    {
      try
      {
        {
          int _6309 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((int)0 <= _6309) && (_6309 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6309);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6308)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simPrimalSelection")))
  {
    {
      int _6310 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6247);
      if ((_6310 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_6310);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simDualRestrictSelection")))
  {
    {
      try
      {
        {
          int _6312 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((int)0 <= _6312) && (_6312 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6312);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6311)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simDualSelection")))
  {
    {
      int _6313 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6247);
      if ((_6313 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_6313);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simMaxIterations")))
  {
    {
      try
      {
        {
          int _6315 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6315))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6315);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6314)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simHotstartLu")))
  {
    {
      int _6316 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6316 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_6316);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simRefactorFreq")))
  {
    {
      try
      {
        {
          int _6318 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6318))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6318);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6317)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simSeed")))
  {
    {
      try
      {
        {
          int _6320 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((int)0 <= _6320) && (_6320 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_6320);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6319)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioMode")))
  {
    {
      int _6321 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_6247);
      if ((_6321 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_6321);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("logMio")))
  {
    {
      try
      {
        {
          int _6323 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6323))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6323);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6322)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logMioFreq")))
  {
    {
      try
      {
        {
          int _6325 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6325);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6324)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioMaxNumRelaxs")))
  {
    {
      try
      {
        {
          int _6327 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6327);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6326)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioMaxNumBranches")))
  {
    {
      try
      {
        {
          int _6329 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6329);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6328)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      try
      {
        {
          int _6331 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6331))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_6331);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6330)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioMaxNumSolutions")))
  {
    {
      try
      {
        {
          int _6333 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6333);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6332)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioNodeSelection")))
  {
    {
      int _6334 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_6247);
      if ((_6334 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_6334);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioHeuristicLevel")))
  {
    {
      try
      {
        {
          int _6336 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6336);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6335)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioProbingLevel")))
  {
    {
      try
      {
        {
          int _6338 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((-(int)1) <= _6338) && (_6338 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6338);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6337)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioCutSelectionLevel")))
  {
    {
      try
      {
        {
          int _6340 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((-(int)1) <= _6340) && (_6340 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6340);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6339)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioVbDetectionLevel")))
  {
    {
      try
      {
        {
          int _6342 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((-(int)1) <= _6342) && (_6342 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6342);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6341)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioBranchDir")))
  {
    {
      int _6343 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_6247);
      if ((_6343 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_6343);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioRootOptimizer")))
  {
    {
      int _6344 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6247);
      if ((_6344 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_6344);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioNodeOptimizer")))
  {
    {
      int _6345 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6247);
      if ((_6345 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_6345);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioPerspectiveReformulate")))
  {
    {
      int _6346 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6346 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_6346);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int _6347 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6347 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_6347);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioSeed")))
  {
    {
      try
      {
        {
          int _6349 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6349))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_6349);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6348)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioConicOuterApproximation")))
  {
    {
      int _6350 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6350 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_6350);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("writeLpQuotedNames")))
  {
    {
      int _6351 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6351 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_6351);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("writeLpLineWidth")))
  {
    {
      try
      {
        {
          int _6353 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)40 <= _6353))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6353);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6352)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("writeLpTermsPerLine")))
  {
    {
      try
      {
        {
          int _6355 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6355))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6355);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6354)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("writeLpFullObj")))
  {
    {
      int _6356 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6356 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_6356);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("logInfeasAna")))
  {
    {
      try
      {
        {
          int _6358 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6358))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6358);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6357)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("licenseWait")))
  {
    {
      int _6359 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6359 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_6359);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int _6360 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6360 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_6360);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("licensePauseTime")))
  {
    {
      try
      {
        {
          int _6362 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((int)0 <= _6362) && (_6362 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6362);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6361)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("licenseDebug")))
  {
    {
      int _6363 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6363 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_6363);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("log")))
  {
    {
      try
      {
        {
          int _6365 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6365))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6365);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6364)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logExpand")))
  {
    {
      try
      {
        {
          int _6367 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6367))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6367);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6366)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logFile")))
  {
    {
      try
      {
        {
          int _6369 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6369))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6369);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6368)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("logOrder")))
  {
    {
      try
      {
        {
          int _6371 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6371))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6371);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6370)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simScaling")))
  {
    {
      int _6372 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6247);
      if ((_6372 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_6372);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simScalingMethod")))
  {
    {
      int _6373 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_6247);
      if ((_6373 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_6373);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _6375 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((int)0 <= _6375) && (_6375 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6375);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6374)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simDualPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _6377 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((int)0 <= _6377) && (_6377 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6377);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6376)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simMaxNumSetbacks")))
  {
    {
      try
      {
        {
          int _6379 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6379))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6379);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6378)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simHotstart")))
  {
    {
      int _6380 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_6247);
      if ((_6380 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_6380);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simBasisFactorUse")))
  {
    {
      int _6381 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6381 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_6381);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simDegen")))
  {
    {
      int _6382 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_6247);
      if ((_6382 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_6382);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simReformulation")))
  {
    {
      int _6383 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_6247);
      if ((_6383 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_6383);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simExploitDupvec")))
  {
    {
      int _6384 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_6247);
      if ((_6384 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_6384);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simSaveLu")))
  {
    {
      int _6385 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6385 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_6385);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simNonSingular")))
  {
    {
      int _6386 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6386 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_6386);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simDualCrash")))
  {
    {
      try
      {
        {
          int _6388 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((int)0 <= _6388))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6388);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6387)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("infeasPreferPrimal")))
  {
    {
      int _6389 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6389 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_6389);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      try
      {
        {
          int _6391 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((-(int)1) <= _6391) && (_6391 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6391);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6390)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioCutCmir")))
  {
    {
      int _6392 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6392 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_6392);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioCutClique")))
  {
    {
      int _6393 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6393 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_6393);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioCutImpliedBound")))
  {
    {
      int _6394 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6394 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_6394);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioCutKnapsackCover")))
  {
    {
      int _6395 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6395 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_6395);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioCutGmi")))
  {
    {
      int _6396 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6396 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_6396);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      try
      {
        {
          int _6398 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6398);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6397)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      try
      {
        {
          int _6400 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6400);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6399)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("cacheLicense")))
  {
    {
      int _6401 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6401 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_6401);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("intpntRegularizationUse")))
  {
    {
      int _6402 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6402 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_6402);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simSolveForm")))
  {
    {
      int _6403 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6247);
      if ((_6403 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_6403);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("simSwitchOptimizer")))
  {
    {
      int _6404 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6247);
      if ((_6404 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_6404);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("mioRinsMaxNodes")))
  {
    {
      try
      {
        {
          int _6406 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if (((-(int)1) <= _6406))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6406);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6405)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioFeaspumpLevel")))
  {
    {
      try
      {
        {
          int _6408 = ::mosek::fusion::Utils::Tools::toInt(_6247);
          if ((((-(int)1) <= _6408) && (_6408 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_6408);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6407)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("optimizerMaxTime")))
  {
    {
      try
      {
        {
          double _6410 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6410);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6409)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("lowerObjCut")))
  {
    {
      try
      {
        {
          double _6412 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6412);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6411)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("upperObjCut")))
  {
    {
      try
      {
        {
          double _6414 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6414);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6413)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _6416 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6416);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6415)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _6418 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6418);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6417)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolRelGap")))
  {
    {
      try
      {
        {
          double _6420 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e-14 <= _6420))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6420);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6419)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolStepSize")))
  {
    {
      try
      {
        {
          double _6422 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6422) && (_6422 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6422);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6421)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simLuTolRelPiv")))
  {
    {
      try
      {
        {
          double _6424 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((1.000000e-06 <= _6424) && (_6424 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6424);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6423)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolRelStep")))
  {
    {
      try
      {
        {
          double _6426 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((1.000000e-04 <= _6426) && (_6426 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6426);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6425)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolPath")))
  {
    {
      try
      {
        {
          double _6428 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6428) && (_6428 <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6428);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6427)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolPfeas")))
  {
    {
      try
      {
        {
          double _6430 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6430) && (_6430 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6430);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6429)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolDfeas")))
  {
    {
      try
      {
        {
          double _6432 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6432) && (_6432 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6432);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6431)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolMuRed")))
  {
    {
      try
      {
        {
          double _6434 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6434) && (_6434 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6434);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6433)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolInfeas")))
  {
    {
      try
      {
        {
          double _6436 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6436) && (_6436 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6436);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6435)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntCoTolRelGap")))
  {
    {
      try
      {
        {
          double _6438 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6438) && (_6438 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6438);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6437)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntCoTolPfeas")))
  {
    {
      try
      {
        {
          double _6440 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6440) && (_6440 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6440);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6439)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntCoTolDfeas")))
  {
    {
      try
      {
        {
          double _6442 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6442) && (_6442 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6442);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6441)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntCoTolMuRed")))
  {
    {
      try
      {
        {
          double _6444 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6444) && (_6444 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6444);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6443)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntCoTolNearRel")))
  {
    {
      try
      {
        {
          double _6446 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e+00 <= _6446))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6446);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6445)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntCoTolInfeas")))
  {
    {
      try
      {
        {
          double _6448 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6448) && (_6448 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6448);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6447)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolPsafe")))
  {
    {
      try
      {
        {
          double _6450 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e-04 <= _6450))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6450);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6449)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("intpntTolDsafe")))
  {
    {
      try
      {
        {
          double _6452 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e-04 <= _6452))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6452);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6451)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioMaxTime")))
  {
    {
      try
      {
        {
          double _6454 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6454);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6453)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioRelGapConst")))
  {
    {
      try
      {
        {
          double _6456 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e-15 <= _6456))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6456);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6455)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioTolRelGap")))
  {
    {
      try
      {
        {
          double _6458 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((0.000000e+00 <= _6458))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6458);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6457)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioTolAbsGap")))
  {
    {
      try
      {
        {
          double _6460 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((0.000000e+00 <= _6460))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6460);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6459)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      try
      {
        {
          double _6462 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e-09 <= _6462))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6462);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6461)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("basisTolX")))
  {
    {
      try
      {
        {
          double _6464 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e-09 <= _6464))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6464);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6463)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("basisTolS")))
  {
    {
      try
      {
        {
          double _6466 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e-09 <= _6466))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6466);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6465)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("basisRelTolS")))
  {
    {
      try
      {
        {
          double _6468 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((0.000000e+00 <= _6468))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6468);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6467)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveTolX")))
  {
    {
      try
      {
        {
          double _6470 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((0.000000e+00 <= _6470))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6470);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6469)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveTolS")))
  {
    {
      try
      {
        {
          double _6472 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((0.000000e+00 <= _6472))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6472);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6471)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveTolAij")))
  {
    {
      try
      {
        {
          double _6474 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e-15 <= _6474))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6474);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6473)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveTolAbsLindep")))
  {
    {
      try
      {
        {
          double _6476 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((0.000000e+00 <= _6476))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6476);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6475)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("presolveTolRelLindep")))
  {
    {
      try
      {
        {
          double _6478 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((0.000000e+00 <= _6478))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6478);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6477)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("simplexAbsTolPiv")))
  {
    {
      try
      {
        {
          double _6480 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if ((1.000000e-12 <= _6480))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6480);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6479)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioTolFeas")))
  {
    {
      try
      {
        {
          double _6482 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((1.000000e-09 <= _6482) && (_6482 <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6482);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6481)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      try
      {
        {
          double _6484 = ::mosek::fusion::Utils::Tools::toDouble(_6247);
          if (((0.000000e+00 <= _6484) && (_6484 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6484);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _6483)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_6246 == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_6247);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_6247);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_6247);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_6247);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_6247);
      return;
    }
  }
  {}
  if ((_6246 == std::string ("remoteAccessToken")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_6245.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_ACCESS_TOKEN"),_6247);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
int mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _6485){
  if ((_6485 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6485 == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6485 == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6485 == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6485 == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6485 == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6485 == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6485 == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6485 == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_6485 == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_6485 == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_6485 == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_6485 == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_6485 == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_6485 == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_6485 == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_6485 == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_6485 == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_6485 == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_6485 == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_6485 == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_6485 == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_6485 == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_6485 == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_6485 == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_6485 == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_6485 == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_6485 == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_6485 == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_6485 == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_6485 == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_6485 == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_6485 == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_6485 == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)804;
    }
  }
  {}
  if ((_6485 == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_6485 == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_6485 == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_6485 == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_6485 == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_6485 == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_6485 == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_6485 == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_6485 == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_6485 == std::string ("wrnQuadConesWithRootFixedAtZero")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_6485 == std::string ("wrnRquadConesWithRootFixedAtZero")))
  {
    {
      return (int)931;
    }
  }
  {}
  if ((_6485 == std::string ("wrnExpConesWithVariablesFixedAtZero")))
  {
    {
      return (int)932;
    }
  }
  {}
  if ((_6485 == std::string ("wrnPowConesWithRootFixedAtZero")))
  {
    {
      return (int)933;
    }
  }
  {}
  if ((_6485 == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_6485 == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_6485 == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_6485 == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_6485 == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_6485 == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_6485 == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_6485 == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_6485 == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_6485 == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_6485 == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_6485 == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_6485 == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_6485 == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_6485 == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_6485 == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_6485 == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_6485 == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_6485 == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_6485 == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_6485 == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_6485 == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_6485 == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_6485 == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_6485 == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_6485 == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_6485 == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_6485 == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_6485 == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_6485 == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_6485 == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_6485 == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_6485 == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_6485 == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_6485 == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_6485 == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_6485 == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_6485 == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_6485 == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_6485 == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsInvConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsInvBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsInvSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_6485 == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_6485 == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_6485 == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_6485 == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_6485 == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_6485 == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_6485 == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_6485 == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_6485 == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_6485 == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_6485 == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_6485 == std::string ("errLpFormat")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_6485 == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_6485 == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_6485 == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_6485 == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_6485 == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_6485 == std::string ("errPtfFormat")))
  {
    {
      return (int)1167;
    }
  }
  {}
  if ((_6485 == std::string ("errOpfFormat")))
  {
    {
      return (int)1168;
    }
  }
  {}
  if ((_6485 == std::string ("errOpfNewVariable")))
  {
    {
      return (int)1169;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_6485 == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_6485 == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1172;
    }
  }
  {}
  if ((_6485 == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_6485 == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_6485 == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_6485 == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_6485 == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_6485 == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_6485 == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_6485 == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_6485 == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_6485 == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_6485 == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_6485 == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_6485 == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_6485 == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_6485 == std::string ("errParamName")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_6485 == std::string ("errParamNameDou")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_6485 == std::string ("errParamNameInt")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_6485 == std::string ("errParamNameStr")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_6485 == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_6485 == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_6485 == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_6485 == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_6485 == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_6485 == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_6485 == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_6485 == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_6485 == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_6485 == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_6485 == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_6485 == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_6485 == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_6485 == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_6485 == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_6485 == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_6485 == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_6485 == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_6485 == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_6485 == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_6485 == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_6485 == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_6485 == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_6485 == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_6485 == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_6485 == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_6485 == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_6485 == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_6485 == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_6485 == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_6485 == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_6485 == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_6485 == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_6485 == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_6485 == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_6485 == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_6485 == std::string ("errUndefSolution")))
  {
    {
      return (int)1265;
    }
  }
  {}
  if ((_6485 == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_6485 == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_6485 == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_6485 == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_6485 == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_6485 == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_6485 == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_6485 == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_6485 == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_6485 == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_6485 == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_6485 == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_6485 == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_6485 == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_6485 == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_6485 == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_6485 == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_6485 == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_6485 == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_6485 == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_6485 == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_6485 == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_6485 == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_6485 == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_6485 == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_6485 == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_6485 == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_6485 == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_6485 == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_6485 == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_6485 == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_6485 == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_6485 == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_6485 == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_6485 == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_6485 == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_6485 == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_6485 == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_6485 == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_6485 == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_6485 == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_6485 == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_6485 == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_6485 == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_6485 == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_6485 == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_6485 == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_6485 == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_6485 == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_6485 == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_6485 == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_6485 == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_6485 == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_6485 == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_6485 == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_6485 == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_6485 == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_6485 == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_6485 == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_6485 == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_6485 == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_6485 == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_6485 == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_6485 == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_6485 == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_6485 == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_6485 == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_6485 == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_6485 == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_6485 == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_6485 == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_6485 == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_6485 == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_6485 == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_6485 == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_6485 == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_6485 == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_6485 == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_6485 == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_6485 == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_6485 == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_6485 == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_6485 == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_6485 == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_6485 == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_6485 == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_6485 == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_6485 == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_6485 == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_6485 == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_6485 == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_6485 == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_6485 == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_6485 == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_6485 == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_6485 == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_6485 == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_6485 == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_6485 == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_6485 == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_6485 == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_6485 == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_6485 == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_6485 == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_6485 == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_6485 == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_6485 == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_6485 == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_6485 == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_6485 == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_6485 == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_6485 == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_6485 == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_6485 == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_6485 == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_6485 == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_6485 == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_6485 == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_6485 == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_6485 == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_6485 == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_6485 == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_6485 == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_6485 == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_6485 == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_6485 == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_6485 == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_6485 == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_6485 == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_6485 == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_6485 == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_6485 == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_6485 == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_6485 == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_6485 == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_6485 == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_6485 == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_6485 == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_6485 == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_6485 == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_6485 == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_6485 == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_6485 == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_6485 == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_6485 == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_6485 == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_6485 == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_6485 == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_6485 == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_6485 == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_6485 == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_6485 == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_6485 == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_6485 == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_6485 == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7109;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7740;
    }
  }
  {}
  if ((_6485 == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7741;
    }
  }
  {}
  if ((_6485 == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_6485 == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_6485 == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_6485 == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_6485 == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_6485 == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_6485 == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_6485 == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_6485 == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_6485 == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_6485 == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_6485 == std::string ("trmMaxIterations")))
  {
    {
      return (int)10000;
    }
  }
  {}
  if ((_6485 == std::string ("trmMaxTime")))
  {
    {
      return (int)10001;
    }
  }
  {}
  if ((_6485 == std::string ("trmObjectiveRange")))
  {
    {
      return (int)10002;
    }
  }
  {}
  if ((_6485 == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)10008;
    }
  }
  {}
  if ((_6485 == std::string ("trmMioNumBranches")))
  {
    {
      return (int)10009;
    }
  }
  {}
  if ((_6485 == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)10015;
    }
  }
  {}
  if ((_6485 == std::string ("trmStall")))
  {
    {
      return (int)10006;
    }
  }
  {}
  if ((_6485 == std::string ("trmUserCallback")))
  {
    {
      return (int)10007;
    }
  }
  {}
  if ((_6485 == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)10020;
    }
  }
  {}
  if ((_6485 == std::string ("trmNumericalProblem")))
  {
    {
      return (int)10025;
    }
  }
  {}
  if ((_6485 == std::string ("trmInternal")))
  {
    {
      return (int)10030;
    }
  }
  {}
  if ((_6485 == std::string ("trmInternalStop")))
  {
    {
      return (int)10031;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _6486){
  if ((_6486 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6486 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6486 == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6486 == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6486 == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _6487){
  if ((_6487 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6487 == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6487 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6487 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6487 == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6487 == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6487 == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6487 == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6487 == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _6488){
  if ((_6488 == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6488 == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6488 == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6488 == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_language_value(const std::string & _6489){
  if ((_6489 == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6489 == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _6490){
  if ((_6490 == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6490 == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6490 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6490 == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _6491){
  if ((_6491 == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6491 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6491 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _6492){
  if ((_6492 == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6492 == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6492 == std::string ("optimizeResponse")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6492 == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6492 == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6492 == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6492 == std::string ("mioNodeDepth")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumbin")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumint")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumcont")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumcon")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumcone")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumqcones")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumrqcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumpexpcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumdexpcones")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumppowcones")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumdpowcones")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumconevar")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumbinconevar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumintconevar")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumcontconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6492 == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6492 == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6492 == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6492 == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumRelax")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumBranch")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6492 == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6492 == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6492 == std::string ("mioUserObjCut")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6492 == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6492 == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6492 == std::string ("rdProtype")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6492 == std::string ("rdNumcon")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6492 == std::string ("rdNumvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6492 == std::string ("rdNumbarvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6492 == std::string ("rdNumintvar")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6492 == std::string ("rdNumq")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6492 == std::string ("simDualDegIter")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6492 == std::string ("simDualInfIter")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6492 == std::string ("simDualHotstartLu")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6492 == std::string ("simPrimalIter")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6492 == std::string ("simDualIter")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6492 == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6492 == std::string ("simPrimalInfIter")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6492 == std::string ("simPrimalDegIter")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6492 == std::string ("simPrimalHotstart")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6492 == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6492 == std::string ("simDualHotstart")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6492 == std::string ("solItrProsta")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_6492 == std::string ("solItrSolsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_6492 == std::string ("solBasProsta")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6492 == std::string ("solBasSolsta")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6492 == std::string ("solItgProsta")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6492 == std::string ("solItgSolsta")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6492 == std::string ("simNumcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6492 == std::string ("simNumvar")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6492 == std::string ("optNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6492 == std::string ("optNumvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6492 == std::string ("stoNumARealloc")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_6492 == std::string ("rdNumcone")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6492 == std::string ("simSolveDual")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6492 == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6492 == std::string ("purifyDualSuccess")))
  {
    {
      return (int)72;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _6493){
  if ((_6493 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6493 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6493 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _6494){
  if ((_6494 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6494 == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6494 == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6494 == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6494 == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6494 == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _6495){
  if ((_6495 == std::string ("intpntLenbarvar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6495 == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6495 == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6495 == std::string ("intpntFactorMlOrderSparseLNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6495 == std::string ("intpntFactorGpOrderSparseLNz")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6495 == std::string ("presolveStackSize")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6495 == std::string ("intpntFactorVNz")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6495 == std::string ("intpntFactorUpdatedVNz")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _6496){
  if ((_6496 == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6496 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6496 == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6496 == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6496 == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6496 == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6496 == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _6497){
  if ((_6497 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6497 == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6497 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6497 == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _6498){
  if ((_6498 == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6498 == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6498 == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _6499){
  if ((_6499 == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6499 == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6499 == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6499 == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6499 == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6499 == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6499 == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6499 == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6499 == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6499 == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6499 == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6499 == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6499 == std::string ("optimizerMaxTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6499 == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6499 == std::string ("upperObjCut")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6499 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6499 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6499 == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6499 == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6499 == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6499 == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6499 == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6499 == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6499 == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6499 == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6499 == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6499 == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6499 == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6499 == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6499 == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6499 == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6499 == std::string ("mioMaxTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6499 == std::string ("mioRelGapConst")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6499 == std::string ("mioTolRelGap")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6499 == std::string ("mioTolAbsGap")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6499 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6499 == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6499 == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6499 == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6499 == std::string ("presolveTolX")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6499 == std::string ("presolveTolS")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6499 == std::string ("presolveTolAij")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6499 == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6499 == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6499 == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6499 == std::string ("mioTolFeas")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6499 == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6499 == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6499 == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6499 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)45;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _6500){
  if ((_6500 == std::string ("versionMajor")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6500 == std::string ("versionMinor")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6500 == std::string ("versionRevision")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6500 == std::string ("presolveLindepWork")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6500 == std::string ("presolveLindepPivots")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6500 == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6500 == std::string ("presolveOutofspace")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6500 == std::string ("presolveBadPrecision")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6500 == std::string ("optObjectiveSense")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6500 == std::string ("optimizer")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6500 == std::string ("intpntFirRefIter")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6500 == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6500 == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6500 == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6500 == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6500 == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumcon")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumvar")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumbarvar")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumblo")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumbup")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumbfr")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumbfx")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumcone")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumconevar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumbndcone")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumrqcones")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumqcones")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6500 == std::string ("intpntNumppowcones")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6500 == std::string ("intpntMinconedim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6500 == std::string ("intpntMaxconedim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6500 == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumcfr")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumcfx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumclo")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumcup")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumcra")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumcnl")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumvfr")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumvfx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumvlo")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumvup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumvra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumvnl")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumnza")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumcon")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumcfr")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumcfx")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumclo")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumcup")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumcra")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumcnl")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumvar")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumvfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumvfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumvlo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumvup")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumvra")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumvnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6500 == std::string ("presolveFnumnza")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumElimns")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6500 == std::string ("presolveEliNumTries")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6500 == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6500 == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6500 == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6500 == std::string ("presolveLindepNum")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6500 == std::string ("presolveForceConNum")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6500 == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6500 == std::string ("presolveForceVarNum")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6500 == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6500 == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6500 == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6500 == std::string ("presolveNumQuadConeOrthoTrans")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6500 == std::string ("intpntFactorNum")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6500 == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6500 == std::string ("simPrimalHotstartNumBasics")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6500 == std::string ("simPrimalHotstartBasisRank")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6500 == std::string ("simDualHotstartNumBasics")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6500 == std::string ("simDualHotstartBasisRank")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6500 == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6500 == std::string ("numLuFactorizations")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6500 == std::string ("simPrimalTrust")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6500 == std::string ("simDualTrust")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6500 == std::string ("simPrimalNumSetbacks")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6500 == std::string ("simDualNumSetbacks")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6500 == std::string ("simNumDupvec")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6500 == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6500 == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6500 == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6500 == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6500 == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6500 == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)57;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _6501){
  if ((_6501 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6501 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6501 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _6502){
  if ((_6502 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6502 == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6502 == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6502 == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6502 == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _6503){
  if ((_6503 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6503 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _6504){
  if ((_6504 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6504 == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6504 == std::string ("moderate")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6504 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _6505){
  if ((_6505 == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6505 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6505 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6505 == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6505 == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6505 == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6505 == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6505 == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6505 == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _6506){
  if ((_6506 == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6506 == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6506 == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6506 == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6506 == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _6507){
  if ((_6507 == std::string ("beginRootCutgen")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6507 == std::string ("imRootCutgen")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6507 == std::string ("endRootCutgen")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6507 == std::string ("beginOptimizer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6507 == std::string ("endOptimizer")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6507 == std::string ("beginPresolve")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6507 == std::string ("updatePresolve")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6507 == std::string ("imPresolve")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6507 == std::string ("endPresolve")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6507 == std::string ("beginIntpnt")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6507 == std::string ("intpnt")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6507 == std::string ("imIntpnt")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6507 == std::string ("endIntpnt")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6507 == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6507 == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6507 == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6507 == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6507 == std::string ("primalSimplex")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6507 == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6507 == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6507 == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6507 == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6507 == std::string ("beginPrimalBi")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6507 == std::string ("imPrimalBi")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6507 == std::string ("updatePrimalBi")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6507 == std::string ("endPrimalBi")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6507 == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6507 == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6507 == std::string ("updateDualBi")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6507 == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6507 == std::string ("beginSimplexBi")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6507 == std::string ("imSimplexBi")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6507 == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6507 == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6507 == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6507 == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6507 == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6507 == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6507 == std::string ("endSimplexBi")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6507 == std::string ("beginMio")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6507 == std::string ("imMio")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6507 == std::string ("newIntMio")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6507 == std::string ("endMio")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6507 == std::string ("beginSimplex")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6507 == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6507 == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6507 == std::string ("updateDualSimplex")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6507 == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6507 == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6507 == std::string ("imPrimalSimplex")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6507 == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6507 == std::string ("endPrimalSimplex")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6507 == std::string ("endSimplex")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6507 == std::string ("beginInfeasAna")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6507 == std::string ("endInfeasAna")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6507 == std::string ("imPrimalSensivity")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6507 == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6507 == std::string ("imMioIntpnt")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6507 == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6507 == std::string ("imMioDualSimplex")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6507 == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6507 == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6507 == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6507 == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6507 == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6507 == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6507 == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6507 == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6507 == std::string ("beginLicenseWait")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6507 == std::string ("endLicenseWait")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6507 == std::string ("imLicenseWait")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6507 == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6507 == std::string ("endQcqoReformulate")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6507 == std::string ("imQoReformulate")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6507 == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6507 == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6507 == std::string ("beginFullConvexityCheck")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6507 == std::string ("endFullConvexityCheck")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6507 == std::string ("imFullConvexityCheck")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6507 == std::string ("beginPrimalRepair")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6507 == std::string ("endPrimalRepair")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6507 == std::string ("beginRead")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6507 == std::string ("imRead")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6507 == std::string ("endRead")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6507 == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6507 == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6507 == std::string ("readOpfSection")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6507 == std::string ("imLu")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6507 == std::string ("imOrder")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6507 == std::string ("imSimplex")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6507 == std::string ("readOpf")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6507 == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6507 == std::string ("solvingRemote")))
  {
    {
      return (int)84;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _6508){
  if ((_6508 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6508 == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6508 == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6508 == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6508 == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _6509){
  if ((_6509 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6509 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6509 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _6510){
  if ((_6510 == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6510 == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6510 == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6510 == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6510 == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6510 == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6510 == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6510 == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6510 == std::string ("solFilterXcLow")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6510 == std::string ("solFilterXcUpr")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6510 == std::string ("solFilterXxLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6510 == std::string ("solFilterXxUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6510 == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6510 == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6510 == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6510 == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6510 == std::string ("statFileName")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6510 == std::string ("statName")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6510 == std::string ("statKey")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6510 == std::string ("writeLpGenVarName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6510 == std::string ("sensitivityResFileName")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6510 == std::string ("sensitivityFileName")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6510 == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6510 == std::string ("remoteAccessToken")))
  {
    {
      return (int)13;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _6511){
  if ((_6511 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6511 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6511 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6511 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6511 == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_value_value(const std::string & _6512){
  if ((_6512 == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_6512 == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _6513){
  if ((_6513 == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6513 == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6513 == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _6514){
  if ((_6514 == std::string ("biTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6514 == std::string ("biPrimalTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6514 == std::string ("biDualTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6514 == std::string ("biCleanTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6514 == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6514 == std::string ("biCleanDualTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6514 == std::string ("intpntTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6514 == std::string ("intpntOrderTime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6514 == std::string ("intpntPrimalObj")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6514 == std::string ("intpntDualObj")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6514 == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6514 == std::string ("intpntDualFeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6514 == std::string ("intpntOptStatus")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6514 == std::string ("simTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6514 == std::string ("simPrimalTime")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6514 == std::string ("simDualTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6514 == std::string ("simObj")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6514 == std::string ("simFeas")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6514 == std::string ("mioTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6514 == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6514 == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6514 == std::string ("toConicTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6514 == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6514 == std::string ("mioObjInt")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6514 == std::string ("mioObjBound")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6514 == std::string ("mioObjRelGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6514 == std::string ("mioObjAbsGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6514 == std::string ("mioUserObjCut")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6514 == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6514 == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6514 == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6514 == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6514 == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6514 == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6514 == std::string ("mioProbingTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6514 == std::string ("optimizerTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6514 == std::string ("presolveTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6514 == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6514 == std::string ("presolveEliTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6514 == std::string ("presolveLindepTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6514 == std::string ("rdTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6514 == std::string ("solItrPrimalObj")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6514 == std::string ("solItrPviolcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6514 == std::string ("solItrPviolvar")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6514 == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6514 == std::string ("solItrPviolcones")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6514 == std::string ("solItrDualObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6514 == std::string ("solItrDviolcon")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6514 == std::string ("solItrDviolvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6514 == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6514 == std::string ("solItrDviolcones")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmXc")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmXx")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmBarx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmY")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmSlc")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmSuc")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmSlx")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmSux")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmSnx")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6514 == std::string ("solItrNrmBars")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6514 == std::string ("solBasPrimalObj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6514 == std::string ("solBasPviolcon")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6514 == std::string ("solBasPviolvar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6514 == std::string ("solBasDualObj")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6514 == std::string ("solBasDviolcon")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6514 == std::string ("solBasDviolvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6514 == std::string ("solBasNrmXc")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6514 == std::string ("solBasNrmXx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6514 == std::string ("solBasNrmBarx")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6514 == std::string ("solBasNrmY")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6514 == std::string ("solBasNrmSlc")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6514 == std::string ("solBasNrmSuc")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6514 == std::string ("solBasNrmSlx")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6514 == std::string ("solBasNrmSux")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6514 == std::string ("solItgPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6514 == std::string ("solItgPviolcon")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6514 == std::string ("solItgPviolvar")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6514 == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6514 == std::string ("solItgPviolcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6514 == std::string ("solItgPviolitg")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6514 == std::string ("solItgNrmXc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6514 == std::string ("solItgNrmXx")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6514 == std::string ("solItgNrmBarx")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6514 == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6514 == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6514 == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6514 == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6514 == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6514 == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)35;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _6515){
  if ((_6515 == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6515 == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6515 == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6515 == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _6516){
  if ((_6516 == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6516 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _6517){
  if ((_6517 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6517 == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6517 == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6517 == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _6518){
  if ((_6518 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6518 == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6518 == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6518 == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6518 == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6518 == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6518 == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _6519){
  if ((_6519 == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6519 == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _6520){
  if ((_6520 == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6520 == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6520 == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _6521){
  if ((_6521 == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _6522){
  if ((_6522 == std::string ("mioAnz")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6522 == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6522 == std::string ("mioSimplexIter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6522 == std::string ("mioIntpntIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6522 == std::string ("biPrimalIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6522 == std::string ("biDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6522 == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6522 == std::string ("biCleanDualIter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6522 == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6522 == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6522 == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6522 == std::string ("rdNumanz")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6522 == std::string ("rdNumqnz")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _6523){
  if ((_6523 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6523 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _6524){
  if ((_6524 == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6524 == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _6525){
  if ((_6525 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6525 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6525 == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _6526){
  if ((_6526 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6526 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6526 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6526 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _6527){
  if ((_6527 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6527 == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6527 == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _6528){
  if ((_6528 == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6528 == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _6529){
  if ((_6529 == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6529 == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _6530){
  if ((_6530 == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6530 == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6530 == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6530 == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6530 == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6530 == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6530 == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _6531){
  if ((_6531 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6531 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _6532){
  if ((_6532 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6532 == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6532 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scopr_value(const std::string & _6533){
  if ((_6533 == std::string ("ent")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6533 == std::string ("exp")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6533 == std::string ("log")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6533 == std::string ("pow")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6533 == std::string ("sqrt")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _6534){
  if ((_6534 == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6534 == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_6534 == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6534 == std::string ("intpntPurify")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6534 == std::string ("numThreads")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_6534 == std::string ("intpntMultiThread")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6534 == std::string ("timingLevel")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_6534 == std::string ("mtSpincount")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_6534 == std::string ("maxNumWarnings")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6534 == std::string ("optimizer")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_6534 == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6534 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6534 == std::string ("logIncludeSummary")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6534 == std::string ("logCutSecondOpt")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6534 == std::string ("logAnaPro")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6534 == std::string ("logResponse")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6534 == std::string ("logLocalInfo")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6534 == std::string ("logBi")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6534 == std::string ("logBiFreq")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6534 == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6534 == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6534 == std::string ("intpntStartingPoint")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6534 == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6534 == std::string ("intpntScaling")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6534 == std::string ("intpntSolveForm")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6534 == std::string ("logIntpnt")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6534 == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6534 == std::string ("intpntOffColTrh")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6534 == std::string ("intpntOrderMethod")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6534 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6534 == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6534 == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6534 == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6534 == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6534 == std::string ("presolveUse")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_6534 == std::string ("presolveLevel")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_6534 == std::string ("logPresolve")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6534 == std::string ("presolveLindepUse")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_6534 == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_6534 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_6534 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_6534 == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_6534 == std::string ("simStabilityPriority")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_6534 == std::string ("simPrimalCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_6534 == std::string ("logSim")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6534 == std::string ("logSimMinor")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6534 == std::string ("logSimFreq")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6534 == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_6534 == std::string ("simPrimalSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_6534 == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_6534 == std::string ("simDualSelection")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_6534 == std::string ("simMaxIterations")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_6534 == std::string ("simHotstartLu")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_6534 == std::string ("simRefactorFreq")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_6534 == std::string ("simSeed")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_6534 == std::string ("mioMode")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6534 == std::string ("logMio")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6534 == std::string ("logMioFreq")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6534 == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6534 == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6534 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6534 == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6534 == std::string ("mioNodeSelection")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6534 == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6534 == std::string ("mioProbingLevel")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6534 == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6534 == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_6534 == std::string ("mioBranchDir")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6534 == std::string ("mioRootOptimizer")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6534 == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6534 == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6534 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6534 == std::string ("mioSeed")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_6534 == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6534 == std::string ("readKeepFreeCon")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_6534 == std::string ("readMpsFormat")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_6534 == std::string ("writeMpsFormat")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_6534 == std::string ("readMpsWidth")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_6534 == std::string ("readDebug")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_6534 == std::string ("readLpQuotedNames")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_6534 == std::string ("writeDataParam")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_6534 == std::string ("writeFreeCon")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_6534 == std::string ("writeGenericNames")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_6534 == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_6534 == std::string ("writeCompression")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_6534 == std::string ("writeMpsInt")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_6534 == std::string ("writeLpStrictFormat")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_6534 == std::string ("writeLpQuotedNames")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_6534 == std::string ("writeLpLineWidth")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_6534 == std::string ("writeLpTermsPerLine")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_6534 == std::string ("writeLpFullObj")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_6534 == std::string ("writePrecision")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_6534 == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_6534 == std::string ("writeSolHead")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_6534 == std::string ("writeSolConstraints")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_6534 == std::string ("writeSolVariables")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_6534 == std::string ("writeSolBarvariables")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_6534 == std::string ("writeBasHead")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_6534 == std::string ("writeBasConstraints")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_6534 == std::string ("writeBasVariables")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_6534 == std::string ("writeIntHead")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_6534 == std::string ("writeIntConstraints")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_6534 == std::string ("writeIntVariables")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_6534 == std::string ("solReadNameWidth")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_6534 == std::string ("solReadWidth")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_6534 == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6534 == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6534 == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6534 == std::string ("logInfeasAna")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6534 == std::string ("licenseWait")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6534 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6534 == std::string ("licensePauseTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6534 == std::string ("licenseDebug")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6534 == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_6534 == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_6534 == std::string ("log")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6534 == std::string ("logExpand")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6534 == std::string ("logFile")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6534 == std::string ("logOrder")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6534 == std::string ("logSensitivity")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6534 == std::string ("logSensitivityOpt")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6534 == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_6534 == std::string ("writeTaskIncSol")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_6534 == std::string ("paramReadCaseName")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_6534 == std::string ("paramReadIgnError")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_6534 == std::string ("solutionCallback")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_6534 == std::string ("simScaling")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_6534 == std::string ("simScalingMethod")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_6534 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_6534 == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_6534 == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_6534 == std::string ("simHotstart")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_6534 == std::string ("simBasisFactorUse")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_6534 == std::string ("simDegen")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_6534 == std::string ("simReformulation")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_6534 == std::string ("simExploitDupvec")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_6534 == std::string ("simSaveLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_6534 == std::string ("simNonSingular")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_6534 == std::string ("simDualCrash")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_6534 == std::string ("logStorage")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6534 == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6534 == std::string ("readLpDropNewVarsInBou")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_6534 == std::string ("opfWriteLineLength")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_6534 == std::string ("opfWriteHints")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_6534 == std::string ("opfWriteParameters")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_6534 == std::string ("opfWriteProblem")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_6534 == std::string ("opfWriteHeader")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_6534 == std::string ("opfWriteSolutions")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_6534 == std::string ("opfWriteSolBas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_6534 == std::string ("opfWriteSolItg")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_6534 == std::string ("opfWriteSolItr")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_6534 == std::string ("ptfWriteTransform")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_6534 == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_6534 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_6534 == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6534 == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_6534 == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6534 == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6534 == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6534 == std::string ("sensitivityType")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_6534 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_6534 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_6534 == std::string ("sensitivityAll")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_6534 == std::string ("logFeasRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6534 == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6534 == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6534 == std::string ("simSolveForm")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_6534 == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_6534 == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_6534 == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6534 == std::string ("logCheckConvexity")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6534 == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6534 == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_6534 == std::string ("writeXmlMode")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_6534 == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6534 == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6534 == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6534 == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6534 == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6534 == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _6535){
  if ((_6535 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6535 == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6535 == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6535 == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6535 == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6535 == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _6536){
  if ((_6536 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6536 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6536 == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6536 == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _6537){
  if ((_6537 == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6537 == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6537 == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6537 == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6537 == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6537 == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6537 == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6537 == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _6538){
  if ((_6538 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6538 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6538 == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6538 == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6538 == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6538 == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6538 == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6538 == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _6539){
  if ((_6539 == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _6540){
  if ((_6540 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6540 == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6540 == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6540 == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _6541){
  if ((_6541 == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6541 == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _6542){
  if ((_6542 == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_6542 == std::string ("sensitivityDualTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_6542 == std::string ("intpntGfeas")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_6542 == std::string ("intpntMu")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_6542 == std::string ("intpntInitIterTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_6542 == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_6542 == std::string ("intpntUpdateTime")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_6542 == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_6542 == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_6542 == std::string ("intpntSolveTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_6542 == std::string ("intpntIterRefTime")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_6542 == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_6542 == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_6542 == std::string ("presolveAcoltTime")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_6542 == std::string ("presolveSetupTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_6542 == std::string ("presolveCheckproTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_6542 == std::string ("presolveDupconTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_6542 == std::string ("presolveDupvarTime")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_6542 == std::string ("presolveFinalTime")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_6542 == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_6542 == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_6542 == std::string ("primalSimplexInftime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_6542 == std::string ("dualSimplexInftime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_6542 == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_6542 == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_6542 == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6542 == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6542 == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6542 == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6542 == std::string ("biPrimalDone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6542 == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6542 == std::string ("simPrimalObj")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_6542 == std::string ("simPrimalFeas")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_6542 == std::string ("simDualObj")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_6542 == std::string ("simDualFeas")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_6542 == std::string ("biPrimalObj")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_6542 == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6542 == std::string ("biPrimalFeas")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6542 == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6542 == std::string ("intpntPurifyTime")))
  {
    {
      return (int)63;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _6543){
  if ((_6543 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6543 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6543 == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6543 == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6543 == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _6544){
  if ((_6544 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6544 == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6544 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6544 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_6544 == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_6544 == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_6544 == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_6544 == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_6544 == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_6544 == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _6545){
  if ((_6545 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6545 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_6545 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_6545 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _6546){
  if ((_6546 == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_6546 == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }